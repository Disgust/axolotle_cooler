
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  0000143e  000014d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000143e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800156  00800156  00001528  2**0
                  ALLOC
  3 .debug_aranges 000000b8  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000014d  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000adb  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000366  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d21  00000000  00000000  0000256e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00003290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000290  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c4  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    //TODO: запретить прерывание INT1
    //TODO: включить непрерывное преобразование АЦП
    //TODO: 
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
       6:	00 00       	nop
       8:	1c c1       	rjmp	.+568    	; 0x242 <__vector_2>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	36 c1       	rjmp	.+620    	; 0x292 <__vector_9>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__vector_14>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d0 c0       	rjmp	.+416    	; 0x1ee <__vector_19>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__vector_21>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e3       	ldi	r30, 0x3E	; 62
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 35       	cpi	r26, 0x56	; 86
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e5       	ldi	r26, 0x56	; 86
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 36       	cpi	r26, 0x69	; 105
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	e9 d3       	rcall	.+2002   	; 0x86e <main>
      9c:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	ef 92       	push	r14
      ae:	ff 92       	push	r15
      b0:	0f 93       	push	r16
      b2:	1f 93       	push	r17
      b4:	2f 93       	push	r18
      b6:	3f 93       	push	r19
      b8:	4f 93       	push	r20
      ba:	5f 93       	push	r21
      bc:	6f 93       	push	r22
      be:	7f 93       	push	r23
      c0:	8f 93       	push	r24
      c2:	9f 93       	push	r25
      c4:	af 93       	push	r26
      c6:	bf 93       	push	r27
      c8:	ef 93       	push	r30
      ca:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
      cc:	60 91 79 00 	lds	r22, 0x0079
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	66 0f       	add	r22, r22
      d4:	77 1f       	adc	r23, r23
      d6:	66 0f       	add	r22, r22
      d8:	77 1f       	adc	r23, r23
      da:	88 27       	eor	r24, r24
      dc:	77 fd       	sbrc	r23, 7
      de:	80 95       	com	r24
      e0:	98 2f       	mov	r25, r24
      e2:	0e 94 06 09 	call	0x120c	; 0x120c <__floatsisf>
      e6:	2c e5       	ldi	r18, 0x5C	; 92
      e8:	3f e8       	ldi	r19, 0x8F	; 143
      ea:	42 e4       	ldi	r20, 0x42	; 66
      ec:	5e e3       	ldi	r21, 0x3E	; 62
      ee:	0e 94 ba 09 	call	0x1374	; 0x1374 <__mulsf3>
      f2:	60 93 5b 01 	sts	0x015B, r22
      f6:	70 93 5c 01 	sts	0x015C, r23
      fa:	80 93 5d 01 	sts	0x015D, r24
      fe:	90 93 5e 01 	sts	0x015E, r25
    if (temperatureValue >= (targetTemp + Tolerance))
     102:	60 91 11 01 	lds	r22, 0x0111
     106:	70 91 12 01 	lds	r23, 0x0112
     10a:	80 91 13 01 	lds	r24, 0x0113
     10e:	90 91 14 01 	lds	r25, 0x0114
     112:	20 91 56 01 	lds	r18, 0x0156
     116:	30 91 57 01 	lds	r19, 0x0157
     11a:	40 91 58 01 	lds	r20, 0x0158
     11e:	50 91 59 01 	lds	r21, 0x0159
     122:	e0 90 5b 01 	lds	r14, 0x015B
     126:	f0 90 5c 01 	lds	r15, 0x015C
     12a:	00 91 5d 01 	lds	r16, 0x015D
     12e:	10 91 5e 01 	lds	r17, 0x015E
     132:	69 d7       	rcall	.+3794   	; 0x1006 <__addsf3>
     134:	a8 01       	movw	r20, r16
     136:	97 01       	movw	r18, r14
     138:	ca d7       	rcall	.+3988   	; 0x10ce <__cmpsf2>
     13a:	18 16       	cp	r1, r24
     13c:	ac f0       	brlt	.+42     	; 0x168 <__vector_21+0xc6>
    BIT_OFF(progFlags, FAN_ON);
}

inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
     13e:	90 91 10 01 	lds	r25, 0x0110
     142:	89 2f       	mov	r24, r25
     144:	86 95       	lsr	r24
     146:	86 95       	lsr	r24
     148:	86 95       	lsr	r24
     14a:	80 fd       	sbrc	r24, 0
     14c:	31 c0       	rjmp	.+98     	; 0x1b0 <__vector_21+0x10e>
volatile static int USART_index;
uint8_t progFlags= 0b00000100;

inline static void turnOnFan() 
{
	BIT_ON(CONTROL_PORT, FAN);
     14e:	eb e2       	ldi	r30, 0x2B	; 43
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	81 60       	ori	r24, 0x01	; 1
     156:	80 83       	st	Z, r24
inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
    {   
        turnOnFan();
	    BIT_ON(CONTROL_PORT, LOAD);
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
        BIT_ON(progFlags, COOLING);
     15e:	89 2f       	mov	r24, r25
     160:	88 62       	ori	r24, 0x28	; 40
     162:	80 93 10 01 	sts	0x0110, r24
     166:	24 c0       	rjmp	.+72     	; 0x1b0 <__vector_21+0x10e>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
     168:	60 91 5b 01 	lds	r22, 0x015B
     16c:	70 91 5c 01 	lds	r23, 0x015C
     170:	80 91 5d 01 	lds	r24, 0x015D
     174:	90 91 5e 01 	lds	r25, 0x015E
     178:	20 91 11 01 	lds	r18, 0x0111
     17c:	30 91 12 01 	lds	r19, 0x0112
     180:	40 91 13 01 	lds	r20, 0x0113
     184:	50 91 14 01 	lds	r21, 0x0114
     188:	a2 d7       	rcall	.+3908   	; 0x10ce <__cmpsf2>
     18a:	18 16       	cp	r1, r24
     18c:	8c f0       	brlt	.+34     	; 0x1b0 <__vector_21+0x10e>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
     18e:	90 91 10 01 	lds	r25, 0x0110
     192:	89 2f       	mov	r24, r25
     194:	86 95       	lsr	r24
     196:	86 95       	lsr	r24
     198:	86 95       	lsr	r24
     19a:	80 ff       	sbrs	r24, 0
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <__vector_21+0x10e>
    {
	    BIT_OFF(CONTROL_PORT, LOAD);
     19e:	eb e2       	ldi	r30, 0x2B	; 43
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	8f 7b       	andi	r24, 0xBF	; 191
     1a6:	80 83       	st	Z, r24
        BIT_OFF(progFlags, COOLING);
     1a8:	89 2f       	mov	r24, r25
     1aa:	87 7f       	andi	r24, 0xF7	; 247
     1ac:	80 93 10 01 	sts	0x0110, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
     1b0:	ff 91       	pop	r31
     1b2:	ef 91       	pop	r30
     1b4:	bf 91       	pop	r27
     1b6:	af 91       	pop	r26
     1b8:	9f 91       	pop	r25
     1ba:	8f 91       	pop	r24
     1bc:	7f 91       	pop	r23
     1be:	6f 91       	pop	r22
     1c0:	5f 91       	pop	r21
     1c2:	4f 91       	pop	r20
     1c4:	3f 91       	pop	r19
     1c6:	2f 91       	pop	r18
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_14>:
        }
    }
    return;
}

ISR(TIMER0_COMPA_vect){
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
    return;
}
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <__vector_19>:
    turnOffSleep();
    BIT_ON(progFlags, LCD_ON);
    LCD_turnOn();
}

ISR(USART_UDRE_vect){
     1ee:	1f 92       	push	r1
     1f0:	0f 92       	push	r0
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	0f 92       	push	r0
     1f6:	11 24       	eor	r1, r1
     1f8:	8f 93       	push	r24
     1fa:	9f 93       	push	r25
     1fc:	ef 93       	push	r30
     1fe:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : отдавать модулю УСАПП следующий байт сообщения
    //////////////////////////////////////////////////////////////////////////
    if(USART_index > 7) return;
     200:	80 91 5f 01 	lds	r24, 0x015F
     204:	90 91 60 01 	lds	r25, 0x0160
     208:	08 97       	sbiw	r24, 0x08	; 8
     20a:	94 f4       	brge	.+36     	; 0x230 <__vector_19+0x42>
    UDR0= USART_buffer[USART_index];
     20c:	e0 91 5f 01 	lds	r30, 0x015F
     210:	f0 91 60 01 	lds	r31, 0x0160
     214:	ef 59       	subi	r30, 0x9F	; 159
     216:	fe 4f       	sbci	r31, 0xFE	; 254
     218:	80 81       	ld	r24, Z
     21a:	80 93 c6 00 	sts	0x00C6, r24
    USART_index++;
     21e:	80 91 5f 01 	lds	r24, 0x015F
     222:	90 91 60 01 	lds	r25, 0x0160
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	90 93 60 01 	sts	0x0160, r25
     22c:	80 93 5f 01 	sts	0x015F, r24
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	0f 90       	pop	r0
     23e:	1f 90       	pop	r1
     240:	18 95       	reti

00000242 <__vector_2>:

ISR(TIMER0_COMPA_vect){
    return;
}

ISR(INT1_vect){
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	2f 93       	push	r18
     24e:	3f 93       	push	r19
     250:	4f 93       	push	r20
     252:	5f 93       	push	r21
     254:	6f 93       	push	r22
     256:	7f 93       	push	r23
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
     260:	ef 93       	push	r30
     262:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : выходить из сна
    //////////////////////////////////////////////////////////////////////////
    turnOffSleep();
    BIT_ON(progFlags, LCD_ON);
     264:	80 91 10 01 	lds	r24, 0x0110
     268:	81 60       	ori	r24, 0x01	; 1
     26a:	80 93 10 01 	sts	0x0110, r24
    LCD_turnOn();
     26e:	37 d6       	rcall	.+3182   	; 0xede <LCD_turnOn>
}
     270:	ff 91       	pop	r31
     272:	ef 91       	pop	r30
     274:	bf 91       	pop	r27
     276:	af 91       	pop	r26
     278:	9f 91       	pop	r25
     27a:	8f 91       	pop	r24
     27c:	7f 91       	pop	r23
     27e:	6f 91       	pop	r22
     280:	5f 91       	pop	r21
     282:	4f 91       	pop	r20
     284:	3f 91       	pop	r19
     286:	2f 91       	pop	r18
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <__vector_9>:
    }
}



ISR(TIMER2_OVF_vect){
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	af 93       	push	r26
     2a2:	bf 93       	push	r27
     2a4:	ef 93       	push	r30
     2a6:	ff 93       	push	r31
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <__vector_9+0x1c>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <__vector_9+0x1e>
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
     2b4:	80 91 5b 01 	lds	r24, 0x015B
     2b8:	90 91 5c 01 	lds	r25, 0x015C
     2bc:	a0 91 5d 01 	lds	r26, 0x015D
     2c0:	b0 91 5e 01 	lds	r27, 0x015E
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	9a 83       	std	Y+2, r25	; 0x02
     2c8:	ab 83       	std	Y+3, r26	; 0x03
     2ca:	bc 83       	std	Y+4, r27	; 0x04
    }
}

inline static void sendData( volatile double a) 
{
    memcpy(&USART_buffer,&a, 8);
     2cc:	a1 e6       	ldi	r26, 0x61	; 97
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	fe 01       	movw	r30, r28
     2d2:	31 96       	adiw	r30, 0x01	; 1
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	01 90       	ld	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	81 50       	subi	r24, 0x01	; 1
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <__vector_9+0x44>
    UDR0= *USART_buffer;
     2de:	80 91 61 01 	lds	r24, 0x0161
     2e2:	80 93 c6 00 	sts	0x00C6, r24
    USART_index= 1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 60 01 	sts	0x0160, r25
     2ee:	80 93 5f 01 	sts	0x015F, r24
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
    runSeconds++;
     2f2:	80 91 5a 01 	lds	r24, 0x015A
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	80 93 5a 01 	sts	0x015A, r24
    if (runSeconds==timeOut)
     2fc:	80 91 5a 01 	lds	r24, 0x015A
     300:	8a 30       	cpi	r24, 0x0A	; 10
     302:	b9 f4       	brne	.+46     	; 0x332 <__vector_9+0xa0>
    {
        runSeconds= 0; // сбрасываем счетчик секунд
     304:	10 92 5a 01 	sts	0x015A, r1
        BIT_ON(progFlags, INACTIVE);
     308:	80 91 10 01 	lds	r24, 0x0110
     30c:	98 2f       	mov	r25, r24
     30e:	90 61       	ori	r25, 0x10	; 16
     310:	90 93 10 01 	sts	0x0110, r25
        if(BIT_READ(progFlags, FAN_ON)){
     314:	89 2f       	mov	r24, r25
     316:	82 95       	swap	r24
     318:	86 95       	lsr	r24
     31a:	87 70       	andi	r24, 0x07	; 7
     31c:	80 ff       	sbrs	r24, 0
     31e:	09 c0       	rjmp	.+18     	; 0x332 <__vector_9+0xa0>
	BIT_ON(progFlags, FAN_ON);
}

inline static void turnOffFan()
{
    BIT_OFF(CONTROL_PORT, FAN);
     320:	eb e2       	ldi	r30, 0x2B	; 43
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	8e 7f       	andi	r24, 0xFE	; 254
     328:	80 83       	st	Z, r24
    BIT_OFF(progFlags, FAN_ON);
     32a:	89 2f       	mov	r24, r25
     32c:	8f 7d       	andi	r24, 0xDF	; 223
     32e:	80 93 10 01 	sts	0x0110, r24
        if(BIT_READ(progFlags, FAN_ON)){
            turnOffFan();
        }
    }
    return;
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	cf 91       	pop	r28
     33c:	df 91       	pop	r29
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	bf 91       	pop	r27
     344:	af 91       	pop	r26
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <LCD_DisplayAll>:
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}

void LCD_DisplayAll()
{   
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
	LCD_Write("TEMP :", 6, 0, 0);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	66 e0       	ldi	r22, 0x06	; 6
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	08 d5       	rcall	.+2576   	; 0xd78 <LCD_Write>
    LCD_Write((char)temperatureValue, 1, 0, 8);
     368:	60 91 5b 01 	lds	r22, 0x015B
     36c:	70 91 5c 01 	lds	r23, 0x015C
     370:	80 91 5d 01 	lds	r24, 0x015D
     374:	90 91 5e 01 	lds	r25, 0x015E
     378:	1b d7       	rcall	.+3638   	; 0x11b0 <__fixunssfsi>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	28 e0       	ldi	r18, 0x08	; 8
     386:	f8 d4       	rcall	.+2544   	; 0xd78 <LCD_Write>
    if (BIT_READ(progFlags, COOLING))
     388:	80 91 10 01 	lds	r24, 0x0110
     38c:	86 95       	lsr	r24
     38e:	86 95       	lsr	r24
     390:	86 95       	lsr	r24
     392:	80 ff       	sbrs	r24, 0
     394:	2d c0       	rjmp	.+90     	; 0x3f0 <LCD_DisplayAll+0x9c>
    {
        LCD_Write("COOLING ", 8, 1, 0);
     396:	87 e0       	ldi	r24, 0x07	; 7
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	68 e0       	ldi	r22, 0x08	; 8
     39c:	41 e0       	ldi	r20, 0x01	; 1
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	eb d4       	rcall	.+2518   	; 0xd78 <LCD_Write>
        LCD_Write((char)((temperatureValue - targetTemp)/Tolerance)*100, 1, 1, 8);
     3a2:	60 91 5b 01 	lds	r22, 0x015B
     3a6:	70 91 5c 01 	lds	r23, 0x015C
     3aa:	80 91 5d 01 	lds	r24, 0x015D
     3ae:	90 91 5e 01 	lds	r25, 0x015E
     3b2:	20 91 11 01 	lds	r18, 0x0111
     3b6:	30 91 12 01 	lds	r19, 0x0112
     3ba:	40 91 13 01 	lds	r20, 0x0113
     3be:	50 91 14 01 	lds	r21, 0x0114
     3c2:	e0 90 56 01 	lds	r14, 0x0156
     3c6:	f0 90 57 01 	lds	r15, 0x0157
     3ca:	00 91 58 01 	lds	r16, 0x0158
     3ce:	10 91 59 01 	lds	r17, 0x0159
     3d2:	18 d6       	rcall	.+3120   	; 0x1004 <__subsf3>
     3d4:	a8 01       	movw	r20, r16
     3d6:	97 01       	movw	r18, r14
     3d8:	7e d6       	rcall	.+3324   	; 0x10d6 <__divsf3>
     3da:	ea d6       	rcall	.+3540   	; 0x11b0 <__fixunssfsi>
     3dc:	9b 01       	movw	r18, r22
     3de:	ac 01       	movw	r20, r24
     3e0:	84 e6       	ldi	r24, 0x64	; 100
     3e2:	28 9f       	mul	r18, r24
     3e4:	c0 01       	movw	r24, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	41 e0       	ldi	r20, 0x01	; 1
     3ec:	28 e0       	ldi	r18, 0x08	; 8
     3ee:	c4 d4       	rcall	.+2440   	; 0xd78 <LCD_Write>
    }
}
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	08 95       	ret

000003fa <menuRun>:
}

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()
{
     3fa:	2f 92       	push	r2
     3fc:	3f 92       	push	r3
     3fe:	4f 92       	push	r4
     400:	5f 92       	push	r5
     402:	6f 92       	push	r6
     404:	7f 92       	push	r7
     406:	8f 92       	push	r8
     408:	9f 92       	push	r9
     40a:	af 92       	push	r10
     40c:	bf 92       	push	r11
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	c9 54       	subi	r28, 0x49	; 73
     424:	d0 40       	sbci	r29, 0x00	; 0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
     430:	de 01       	movw	r26, r28
     432:	11 96       	adiw	r26, 0x01	; 1
     434:	e6 e1       	ldi	r30, 0x16	; 22
     436:	f1 e0       	ldi	r31, 0x01	; 1
     438:	80 e4       	ldi	r24, 0x40	; 64
     43a:	01 90       	ld	r0, Z+
     43c:	0d 92       	st	X+, r0
     43e:	81 50       	subi	r24, 0x01	; 1
     440:	e1 f7       	brne	.-8      	; 0x43a <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
     442:	60 91 11 01 	lds	r22, 0x0111
     446:	70 91 12 01 	lds	r23, 0x0112
     44a:	80 91 13 01 	lds	r24, 0x0113
     44e:	90 91 14 01 	lds	r25, 0x0114
     452:	c0 90 56 01 	lds	r12, 0x0156
     456:	d0 90 57 01 	lds	r13, 0x0157
     45a:	e0 90 58 01 	lds	r14, 0x0158
     45e:	f0 90 59 01 	lds	r15, 0x0159
     462:	b0 90 15 01 	lds	r11, 0x0115
     466:	00 91 10 01 	lds	r16, 0x0110
     46a:	06 95       	lsr	r16
     46c:	06 95       	lsr	r16
     46e:	10 e0       	ldi	r17, 0x00	; 0
     470:	01 70       	andi	r16, 0x01	; 1
     472:	10 70       	andi	r17, 0x00	; 0
     474:	98 d6       	rcall	.+3376   	; 0x11a6 <__fixsfsi>
     476:	fe 01       	movw	r30, r28
     478:	ef 5b       	subi	r30, 0xBF	; 191
     47a:	ff 4f       	sbci	r31, 0xFF	; 255
     47c:	71 83       	std	Z+1, r23	; 0x01
     47e:	60 83       	st	Z, r22
     480:	c7 01       	movw	r24, r14
     482:	b6 01       	movw	r22, r12
     484:	90 d6       	rcall	.+3360   	; 0x11a6 <__fixsfsi>
     486:	fe 01       	movw	r30, r28
     488:	ed 5b       	subi	r30, 0xBD	; 189
     48a:	ff 4f       	sbci	r31, 0xFF	; 255
     48c:	71 83       	std	Z+1, r23	; 0x01
     48e:	60 83       	st	Z, r22
     490:	fe 01       	movw	r30, r28
     492:	eb 5b       	subi	r30, 0xBB	; 187
     494:	ff 4f       	sbci	r31, 0xFF	; 255
     496:	b0 82       	st	Z, r11
     498:	11 82       	std	Z+1, r1	; 0x01
     49a:	fe 01       	movw	r30, r28
     49c:	e9 5b       	subi	r30, 0xB9	; 185
     49e:	ff 4f       	sbci	r31, 0xFF	; 255
     4a0:	11 83       	std	Z+1, r17	; 0x01
     4a2:	00 83       	st	Z, r16
    LCD_Clear();
     4a4:	fc d2       	rcall	.+1528   	; 0xa9e <LCD_Clear>
     4a6:	cc 24       	eor	r12, r12
     4a8:	dd 24       	eor	r13, r13
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     4aa:	0f 2e       	mov	r0, r31
     4ac:	fb e2       	ldi	r31, 0x2B	; 43
     4ae:	af 2e       	mov	r10, r31
     4b0:	bb 24       	eor	r11, r11
     4b2:	f0 2d       	mov	r31, r0
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
     4b4:	0f 2e       	mov	r0, r31
     4b6:	f1 e4       	ldi	r31, 0x41	; 65
     4b8:	4f 2e       	mov	r4, r31
     4ba:	55 24       	eor	r5, r5
     4bc:	f0 2d       	mov	r31, r0
     4be:	4c 0e       	add	r4, r28
     4c0:	5d 1e       	adc	r5, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	68 2e       	mov	r6, r24
     4c8:	2a 96       	adiw	r28, 0x0a	; 10
     4ca:	9f af       	std	Y+63, r25	; 0x3f
     4cc:	2a 97       	sbiw	r28, 0x0a	; 10
     4ce:	a7 c1       	rjmp	.+846    	; 0x81e <__stack+0x31f>
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
     4d0:	f5 01       	movw	r30, r10
     4d2:	80 81       	ld	r24, Z
     4d4:	83 fd       	sbrc	r24, 3
     4d6:	52 c1       	rjmp	.+676    	; 0x77c <__stack+0x27d>
            BIT_OFF(progFlags, INACTIVE);
     4d8:	0f 2e       	mov	r0, r31
     4da:	ff ee       	ldi	r31, 0xEF	; 239
     4dc:	7f 2e       	mov	r7, r31
     4de:	f0 2d       	mov	r31, r0
     4e0:	79 22       	and	r7, r25
     4e2:	70 92 10 01 	sts	0x0110, r7
            int value= values[pos];
     4e6:	c6 01       	movw	r24, r12
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	f2 01       	movw	r30, r4
     4ee:	e8 0f       	add	r30, r24
     4f0:	f9 1f       	adc	r31, r25
     4f2:	20 80       	ld	r2, Z
     4f4:	31 80       	ldd	r3, Z+1	; 0x01
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     4f6:	4f 01       	movw	r8, r30
     4f8:	3b c1       	rjmp	.+630    	; 0x770 <__stack+0x271>
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     4fa:	f5 01       	movw	r30, r10
     4fc:	80 81       	ld	r24, Z
     4fe:	85 fd       	sbrc	r24, 5
     500:	8a c0       	rjmp	.+276    	; 0x616 <__stack+0x117>
                {
                    BIT_OFF(progFlags, INACTIVE);
     502:	ff ee       	ldi	r31, 0xEF	; 239
     504:	7f 22       	and	r7, r31
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     506:	f4 01       	movw	r30, r8
     508:	80 81       	ld	r24, Z
     50a:	91 81       	ldd	r25, Z+1	; 0x01
     50c:	9c 01       	movw	r18, r24
     50e:	2f 5f       	subi	r18, 0xFF	; 255
     510:	3f 4f       	sbci	r19, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     512:	f2 e0       	ldi	r31, 0x02	; 2
     514:	cf 16       	cp	r12, r31
     516:	d1 04       	cpc	r13, r1
     518:	c1 f1       	breq	.+112    	; 0x58a <__stack+0x8b>
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	c8 16       	cp	r12, r24
     51e:	d1 04       	cpc	r13, r1
     520:	34 f4       	brge	.+12     	; 0x52e <__stack+0x2f>
     522:	e1 e0       	ldi	r30, 0x01	; 1
     524:	ce 16       	cp	r12, r30
     526:	d1 04       	cpc	r13, r1
     528:	09 f0       	breq	.+2      	; 0x52c <__stack+0x2d>
     52a:	6c c0       	rjmp	.+216    	; 0x604 <__stack+0x105>
     52c:	0b c0       	rjmp	.+22     	; 0x544 <__stack+0x45>
     52e:	f3 e0       	ldi	r31, 0x03	; 3
     530:	cf 16       	cp	r12, r31
     532:	d1 04       	cpc	r13, r1
     534:	09 f4       	brne	.+2      	; 0x538 <__stack+0x39>
     536:	49 c0       	rjmp	.+146    	; 0x5ca <__stack+0xcb>
     538:	84 e0       	ldi	r24, 0x04	; 4
     53a:	c8 16       	cp	r12, r24
     53c:	d1 04       	cpc	r13, r1
     53e:	09 f0       	breq	.+2      	; 0x542 <__stack+0x43>
     540:	61 c0       	rjmp	.+194    	; 0x604 <__stack+0x105>
     542:	4d c0       	rjmp	.+154    	; 0x5de <__stack+0xdf>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     544:	b9 01       	movw	r22, r18
     546:	88 27       	eor	r24, r24
     548:	77 fd       	sbrc	r23, 7
     54a:	80 95       	com	r24
     54c:	98 2f       	mov	r25, r24
     54e:	5e d6       	rcall	.+3260   	; 0x120c <__floatsisf>
     550:	7b 01       	movw	r14, r22
     552:	8c 01       	movw	r16, r24
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e7       	ldi	r20, 0x70	; 112
     55a:	51 e4       	ldi	r21, 0x41	; 65
     55c:	b8 d5       	rcall	.+2928   	; 0x10ce <__cmpsf2>
     55e:	88 23       	and	r24, r24
     560:	1c f4       	brge	.+6      	; 0x568 <__stack+0x69>
     562:	8f e0       	ldi	r24, 0x0F	; 15
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	54 c0       	rjmp	.+168    	; 0x610 <__stack+0x111>
     568:	c8 01       	movw	r24, r16
     56a:	b7 01       	movw	r22, r14
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 ea       	ldi	r20, 0xA0	; 160
     572:	51 e4       	ldi	r21, 0x41	; 65
     574:	fb d6       	rcall	.+3574   	; 0x136c <__gesf2>
     576:	18 16       	cp	r1, r24
     578:	1c f4       	brge	.+6      	; 0x580 <__stack+0x81>
     57a:	84 e1       	ldi	r24, 0x14	; 20
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	48 c0       	rjmp	.+144    	; 0x610 <__stack+0x111>
     580:	c8 01       	movw	r24, r16
     582:	b7 01       	movw	r22, r14
     584:	10 d6       	rcall	.+3104   	; 0x11a6 <__fixsfsi>
     586:	cb 01       	movw	r24, r22
     588:	43 c0       	rjmp	.+134    	; 0x610 <__stack+0x111>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     58a:	b9 01       	movw	r22, r18
     58c:	88 27       	eor	r24, r24
     58e:	77 fd       	sbrc	r23, 7
     590:	80 95       	com	r24
     592:	98 2f       	mov	r25, r24
     594:	3b d6       	rcall	.+3190   	; 0x120c <__floatsisf>
     596:	7b 01       	movw	r14, r22
     598:	8c 01       	movw	r16, r24
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	95 d5       	rcall	.+2858   	; 0x10ce <__cmpsf2>
     5a4:	88 23       	and	r24, r24
     5a6:	84 f1       	brlt	.+96     	; 0x608 <__stack+0x109>
     5a8:	c8 01       	movw	r24, r16
     5aa:	b7 01       	movw	r22, r14
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e8       	ldi	r20, 0x80	; 128
     5b2:	5f e3       	ldi	r21, 0x3F	; 63
     5b4:	db d6       	rcall	.+3510   	; 0x136c <__gesf2>
     5b6:	18 16       	cp	r1, r24
     5b8:	1c f4       	brge	.+6      	; 0x5c0 <__stack+0xc1>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	28 c0       	rjmp	.+80     	; 0x610 <__stack+0x111>
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	f0 d5       	rcall	.+3040   	; 0x11a6 <__fixsfsi>
     5c6:	cb 01       	movw	r24, r22
     5c8:	23 c0       	rjmp	.+70     	; 0x610 <__stack+0x111>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     5ca:	33 23       	and	r19, r19
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <__stack+0xd5>
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	1e c0       	rjmp	.+60     	; 0x610 <__stack+0x111>
     5d4:	e4 e0       	ldi	r30, 0x04	; 4
     5d6:	20 30       	cpi	r18, 0x00	; 0
     5d8:	3e 07       	cpc	r19, r30
     5da:	a4 f0       	brlt	.+40     	; 0x604 <__stack+0x105>
     5dc:	15 c0       	rjmp	.+42     	; 0x608 <__stack+0x109>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     5de:	c9 01       	movw	r24, r18
     5e0:	52 2f       	mov	r21, r18
     5e2:	49 2f       	mov	r20, r25
     5e4:	12 16       	cp	r1, r18
     5e6:	13 06       	cpc	r1, r19
     5e8:	24 f4       	brge	.+8      	; 0x5f2 <__stack+0xf3>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	58 2f       	mov	r21, r24
     5f0:	49 2f       	mov	r20, r25
     5f2:	85 2f       	mov	r24, r21
     5f4:	94 2f       	mov	r25, r20
     5f6:	99 23       	and	r25, r25
     5f8:	5c f4       	brge	.+22     	; 0x610 <__stack+0x111>
     5fa:	86 2d       	mov	r24, r6
     5fc:	2a 96       	adiw	r28, 0x0a	; 10
     5fe:	9f ad       	ldd	r25, Y+63	; 0x3f
     600:	2a 97       	sbiw	r28, 0x0a	; 10
     602:	06 c0       	rjmp	.+12     	; 0x610 <__stack+0x111>
     604:	c9 01       	movw	r24, r18
     606:	04 c0       	rjmp	.+8      	; 0x610 <__stack+0x111>
     608:	86 2d       	mov	r24, r6
     60a:	2a 96       	adiw	r28, 0x0a	; 10
     60c:	9f ad       	ldd	r25, Y+63	; 0x3f
     60e:	2a 97       	sbiw	r28, 0x0a	; 10
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     610:	f4 01       	movw	r30, r8
     612:	91 83       	std	Z+1, r25	; 0x01
     614:	80 83       	st	Z, r24
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     616:	f5 01       	movw	r30, r10
     618:	80 81       	ld	r24, Z
     61a:	84 fd       	sbrc	r24, 4
     61c:	8a c0       	rjmp	.+276    	; 0x732 <__stack+0x233>
                {
                    BIT_OFF(progFlags, INACTIVE);
     61e:	ff ee       	ldi	r31, 0xEF	; 239
     620:	7f 22       	and	r7, r31
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     622:	f4 01       	movw	r30, r8
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	9c 01       	movw	r18, r24
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	30 40       	sbci	r19, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     62e:	f2 e0       	ldi	r31, 0x02	; 2
     630:	cf 16       	cp	r12, r31
     632:	d1 04       	cpc	r13, r1
     634:	c1 f1       	breq	.+112    	; 0x6a6 <__stack+0x1a7>
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	c8 16       	cp	r12, r24
     63a:	d1 04       	cpc	r13, r1
     63c:	34 f4       	brge	.+12     	; 0x64a <__stack+0x14b>
     63e:	e1 e0       	ldi	r30, 0x01	; 1
     640:	ce 16       	cp	r12, r30
     642:	d1 04       	cpc	r13, r1
     644:	09 f0       	breq	.+2      	; 0x648 <__stack+0x149>
     646:	6c c0       	rjmp	.+216    	; 0x720 <__stack+0x221>
     648:	0b c0       	rjmp	.+22     	; 0x660 <__stack+0x161>
     64a:	f3 e0       	ldi	r31, 0x03	; 3
     64c:	cf 16       	cp	r12, r31
     64e:	d1 04       	cpc	r13, r1
     650:	09 f4       	brne	.+2      	; 0x654 <__stack+0x155>
     652:	49 c0       	rjmp	.+146    	; 0x6e6 <__stack+0x1e7>
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	c8 16       	cp	r12, r24
     658:	d1 04       	cpc	r13, r1
     65a:	09 f0       	breq	.+2      	; 0x65e <__stack+0x15f>
     65c:	61 c0       	rjmp	.+194    	; 0x720 <__stack+0x221>
     65e:	4d c0       	rjmp	.+154    	; 0x6fa <__stack+0x1fb>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     660:	b9 01       	movw	r22, r18
     662:	88 27       	eor	r24, r24
     664:	77 fd       	sbrc	r23, 7
     666:	80 95       	com	r24
     668:	98 2f       	mov	r25, r24
     66a:	d0 d5       	rcall	.+2976   	; 0x120c <__floatsisf>
     66c:	7b 01       	movw	r14, r22
     66e:	8c 01       	movw	r16, r24
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e7       	ldi	r20, 0x70	; 112
     676:	51 e4       	ldi	r21, 0x41	; 65
     678:	2a d5       	rcall	.+2644   	; 0x10ce <__cmpsf2>
     67a:	88 23       	and	r24, r24
     67c:	1c f4       	brge	.+6      	; 0x684 <__stack+0x185>
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	54 c0       	rjmp	.+168    	; 0x72c <__stack+0x22d>
     684:	c8 01       	movw	r24, r16
     686:	b7 01       	movw	r22, r14
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 ea       	ldi	r20, 0xA0	; 160
     68e:	51 e4       	ldi	r21, 0x41	; 65
     690:	6d d6       	rcall	.+3290   	; 0x136c <__gesf2>
     692:	18 16       	cp	r1, r24
     694:	1c f4       	brge	.+6      	; 0x69c <__stack+0x19d>
     696:	84 e1       	ldi	r24, 0x14	; 20
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	48 c0       	rjmp	.+144    	; 0x72c <__stack+0x22d>
     69c:	c8 01       	movw	r24, r16
     69e:	b7 01       	movw	r22, r14
     6a0:	82 d5       	rcall	.+2820   	; 0x11a6 <__fixsfsi>
     6a2:	cb 01       	movw	r24, r22
     6a4:	43 c0       	rjmp	.+134    	; 0x72c <__stack+0x22d>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     6a6:	b9 01       	movw	r22, r18
     6a8:	88 27       	eor	r24, r24
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	80 95       	com	r24
     6ae:	98 2f       	mov	r25, r24
     6b0:	ad d5       	rcall	.+2906   	; 0x120c <__floatsisf>
     6b2:	7b 01       	movw	r14, r22
     6b4:	8c 01       	movw	r16, r24
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	07 d5       	rcall	.+2574   	; 0x10ce <__cmpsf2>
     6c0:	88 23       	and	r24, r24
     6c2:	84 f1       	brlt	.+96     	; 0x724 <__stack+0x225>
     6c4:	c8 01       	movw	r24, r16
     6c6:	b7 01       	movw	r22, r14
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e8       	ldi	r20, 0x80	; 128
     6ce:	5f e3       	ldi	r21, 0x3F	; 63
     6d0:	4d d6       	rcall	.+3226   	; 0x136c <__gesf2>
     6d2:	18 16       	cp	r1, r24
     6d4:	1c f4       	brge	.+6      	; 0x6dc <__stack+0x1dd>
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	28 c0       	rjmp	.+80     	; 0x72c <__stack+0x22d>
     6dc:	c8 01       	movw	r24, r16
     6de:	b7 01       	movw	r22, r14
     6e0:	62 d5       	rcall	.+2756   	; 0x11a6 <__fixsfsi>
     6e2:	cb 01       	movw	r24, r22
     6e4:	23 c0       	rjmp	.+70     	; 0x72c <__stack+0x22d>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     6e6:	33 23       	and	r19, r19
     6e8:	1c f4       	brge	.+6      	; 0x6f0 <__stack+0x1f1>
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	93 e0       	ldi	r25, 0x03	; 3
     6ee:	1e c0       	rjmp	.+60     	; 0x72c <__stack+0x22d>
     6f0:	e4 e0       	ldi	r30, 0x04	; 4
     6f2:	20 30       	cpi	r18, 0x00	; 0
     6f4:	3e 07       	cpc	r19, r30
     6f6:	a4 f0       	brlt	.+40     	; 0x720 <__stack+0x221>
     6f8:	15 c0       	rjmp	.+42     	; 0x724 <__stack+0x225>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     6fa:	c9 01       	movw	r24, r18
     6fc:	52 2f       	mov	r21, r18
     6fe:	49 2f       	mov	r20, r25
     700:	12 16       	cp	r1, r18
     702:	13 06       	cpc	r1, r19
     704:	24 f4       	brge	.+8      	; 0x70e <__stack+0x20f>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	58 2f       	mov	r21, r24
     70c:	49 2f       	mov	r20, r25
     70e:	85 2f       	mov	r24, r21
     710:	94 2f       	mov	r25, r20
     712:	99 23       	and	r25, r25
     714:	5c f4       	brge	.+22     	; 0x72c <__stack+0x22d>
     716:	86 2d       	mov	r24, r6
     718:	2a 96       	adiw	r28, 0x0a	; 10
     71a:	9f ad       	ldd	r25, Y+63	; 0x3f
     71c:	2a 97       	sbiw	r28, 0x0a	; 10
     71e:	06 c0       	rjmp	.+12     	; 0x72c <__stack+0x22d>
     720:	c9 01       	movw	r24, r18
     722:	04 c0       	rjmp	.+8      	; 0x72c <__stack+0x22d>
     724:	86 2d       	mov	r24, r6
     726:	2a 96       	adiw	r28, 0x0a	; 10
     728:	9f ad       	ldd	r25, Y+63	; 0x3f
     72a:	2a 97       	sbiw	r28, 0x0a	; 10
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     72c:	f4 01       	movw	r30, r8
     72e:	91 83       	std	Z+1, r25	; 0x01
     730:	80 83       	st	Z, r24

                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
     732:	f5 01       	movw	r30, r10
     734:	80 81       	ld	r24, Z
     736:	83 fd       	sbrc	r24, 3
     738:	1b c0       	rjmp	.+54     	; 0x770 <__stack+0x271>
     73a:	70 92 10 01 	sts	0x0110, r7
                    if(pos!=3){
     73e:	f3 e0       	ldi	r31, 0x03	; 3
     740:	cf 16       	cp	r12, r31
     742:	d1 04       	cpc	r13, r1
     744:	49 f0       	breq	.+18     	; 0x758 <__stack+0x259>
                        values[pos]= (uint8_t)value;
     746:	c6 01       	movw	r24, r12
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	f2 01       	movw	r30, r4
     74e:	e8 0f       	add	r30, r24
     750:	f9 1f       	adc	r31, r25
     752:	20 82       	st	Z, r2
     754:	11 82       	std	Z+1, r1	; 0x01
     756:	12 c0       	rjmp	.+36     	; 0x77c <__stack+0x27d>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
     758:	23 28       	or	r2, r3
     75a:	29 f0       	breq	.+10     	; 0x766 <__stack+0x267>
     75c:	87 2d       	mov	r24, r7
     75e:	84 60       	ori	r24, 0x04	; 4
     760:	80 93 10 01 	sts	0x0110, r24
     764:	0b c0       	rjmp	.+22     	; 0x77c <__stack+0x27d>
     766:	87 2d       	mov	r24, r7
     768:	8b 7f       	andi	r24, 0xFB	; 251
     76a:	80 93 10 01 	sts	0x0110, r24
     76e:	06 c0       	rjmp	.+12     	; 0x77c <__stack+0x27d>
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     770:	f5 01       	movw	r30, r10
     772:	80 81       	ld	r24, Z
     774:	82 ff       	sbrs	r24, 2
     776:	c1 ce       	rjmp	.-638    	; 0x4fa <menuRun+0x100>
     778:	70 92 10 01 	sts	0x0110, r7
                        break;
                    }          
                }                  
            }
        }
        LCD_Write(menu[pos],16,0,0);
     77c:	c6 01       	movw	r24, r12
     77e:	82 95       	swap	r24
     780:	92 95       	swap	r25
     782:	90 7f       	andi	r25, 0xF0	; 240
     784:	98 27       	eor	r25, r24
     786:	80 7f       	andi	r24, 0xF0	; 240
     788:	98 27       	eor	r25, r24
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	2c 0f       	add	r18, r28
     790:	3d 1f       	adc	r19, r29
     792:	82 0f       	add	r24, r18
     794:	93 1f       	adc	r25, r19
     796:	60 e1       	ldi	r22, 0x10	; 16
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	ed d2       	rcall	.+1498   	; 0xd78 <LCD_Write>
        LCD_Write(values[pos],1,1,0);
     79e:	c6 01       	movw	r24, r12
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	f2 01       	movw	r30, r4
     7a6:	e8 0f       	add	r30, r24
     7a8:	f9 1f       	adc	r31, r25
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	e1 d2       	rcall	.+1474   	; 0xd78 <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     7b6:	f5 01       	movw	r30, r10
     7b8:	80 81       	ld	r24, Z
     7ba:	85 fd       	sbrc	r24, 5
     7bc:	16 c0       	rjmp	.+44     	; 0x7ea <__stack+0x2eb>
        {
            BIT_OFF(progFlags, INACTIVE);
     7be:	80 91 10 01 	lds	r24, 0x0110
     7c2:	8f 7e       	andi	r24, 0xEF	; 239
     7c4:	80 93 10 01 	sts	0x0110, r24
            pos++;
     7c8:	08 94       	sec
     7ca:	c1 1c       	adc	r12, r1
     7cc:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     7ce:	dd 20       	and	r13, r13
     7d0:	34 f4       	brge	.+12     	; 0x7de <__stack+0x2df>
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f3 e0       	ldi	r31, 0x03	; 3
     7d6:	cf 2e       	mov	r12, r31
     7d8:	dd 24       	eor	r13, r13
     7da:	f0 2d       	mov	r31, r0
     7dc:	06 c0       	rjmp	.+12     	; 0x7ea <__stack+0x2eb>
     7de:	f4 e0       	ldi	r31, 0x04	; 4
     7e0:	cf 16       	cp	r12, r31
     7e2:	d1 04       	cpc	r13, r1
     7e4:	14 f0       	brlt	.+4      	; 0x7ea <__stack+0x2eb>
     7e6:	cc 24       	eor	r12, r12
     7e8:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     7ea:	f5 01       	movw	r30, r10
     7ec:	80 81       	ld	r24, Z
     7ee:	84 fd       	sbrc	r24, 4
     7f0:	16 c0       	rjmp	.+44     	; 0x81e <__stack+0x31f>
        {
            BIT_OFF(progFlags, INACTIVE);
     7f2:	80 91 10 01 	lds	r24, 0x0110
     7f6:	8f 7e       	andi	r24, 0xEF	; 239
     7f8:	80 93 10 01 	sts	0x0110, r24
            pos--;
     7fc:	08 94       	sec
     7fe:	c1 08       	sbc	r12, r1
     800:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     802:	dd 20       	and	r13, r13
     804:	34 f4       	brge	.+12     	; 0x812 <__stack+0x313>
     806:	0f 2e       	mov	r0, r31
     808:	f3 e0       	ldi	r31, 0x03	; 3
     80a:	cf 2e       	mov	r12, r31
     80c:	dd 24       	eor	r13, r13
     80e:	f0 2d       	mov	r31, r0
     810:	06 c0       	rjmp	.+12     	; 0x81e <__stack+0x31f>
     812:	f4 e0       	ldi	r31, 0x04	; 4
     814:	cf 16       	cp	r12, r31
     816:	d1 04       	cpc	r13, r1
     818:	14 f0       	brlt	.+4      	; 0x81e <__stack+0x31f>
     81a:	cc 24       	eor	r12, r12
     81c:	dd 24       	eor	r13, r13
{
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     81e:	90 91 10 01 	lds	r25, 0x0110
     822:	94 fd       	sbrc	r25, 4
     824:	55 ce       	rjmp	.-854    	; 0x4d0 <menuRun+0xd6>
     826:	f5 01       	movw	r30, r10
     828:	80 81       	ld	r24, Z
     82a:	82 ff       	sbrs	r24, 2
     82c:	51 ce       	rjmp	.-862    	; 0x4d0 <menuRun+0xd6>
            pos--;
            pos= CIRCLE(pos, 0, 3);
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
     82e:	89 2f       	mov	r24, r25
     830:	8d 7e       	andi	r24, 0xED	; 237
     832:	80 93 10 01 	sts	0x0110, r24
    }
}

inline void menuStop()
{
    LCD_Clear();
     836:	33 d1       	rcall	.+614    	; 0xa9e <LCD_Clear>
    LCD_DisplayAll();
     838:	8d dd       	rcall	.-1254   	; 0x354 <LCD_DisplayAll>
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
     83a:	c7 5b       	subi	r28, 0xB7	; 183
     83c:	df 4f       	sbci	r29, 0xFF	; 255
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	cf 91       	pop	r28
     84a:	df 91       	pop	r29
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	3f 90       	pop	r3
     86a:	2f 90       	pop	r2
     86c:	08 95       	ret

0000086e <main>:

int main(void)
{   
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
     876:	87 e0       	ldi	r24, 0x07	; 7
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	90 93 c5 00 	sts	0x00C5, r25
     87e:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
     882:	e2 ec       	ldi	r30, 0xC2	; 194
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	8f 7d       	andi	r24, 0xDF	; 223
     88a:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
     88c:	80 81       	ld	r24, Z
     88e:	8f 7e       	andi	r24, 0xEF	; 239
     890:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
     892:	a1 ec       	ldi	r26, 0xC1	; 193
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	8c 91       	ld	r24, X
     898:	8b 7f       	andi	r24, 0xFB	; 251
     89a:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
     89c:	80 81       	ld	r24, Z
     89e:	84 60       	ori	r24, 0x04	; 4
     8a0:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
     8a2:	80 81       	ld	r24, Z
     8a4:	82 60       	ori	r24, 0x02	; 2
     8a6:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
     8a8:	80 81       	ld	r24, Z
     8aa:	87 7f       	andi	r24, 0xF7	; 247
     8ac:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
     8ae:	8c 91       	ld	r24, X
     8b0:	88 60       	ori	r24, 0x08	; 8
     8b2:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 0);  // прием запрещен
     8b4:	8c 91       	ld	r24, X
     8b6:	8f 7e       	andi	r24, 0xEF	; 239
     8b8:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 0); // прерывание приема запрещено
     8ba:	8c 91       	ld	r24, X
     8bc:	8f 77       	andi	r24, 0x7F	; 127
     8be:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
     8c0:	8c 91       	ld	r24, X
     8c2:	80 64       	ori	r24, 0x40	; 64
     8c4:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
     8c6:	8c 91       	ld	r24, X
     8c8:	8f 7d       	andi	r24, 0xDF	; 223
     8ca:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
     8cc:	e7 e2       	ldi	r30, 0x27	; 39
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	8e 7f       	andi	r24, 0xFE	; 254
     8d4:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD)|(1<<FAN); // управление подсветкой экрана, нагрузкой и вентилятором на выход
     8d6:	ea e2       	ldi	r30, 0x2A	; 42
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	81 ec       	ldi	r24, 0xC1	; 193
     8dc:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
     8de:	80 81       	ld	r24, Z
     8e0:	83 7c       	andi	r24, 0xC3	; 195
     8e2:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
     8e4:	8c e3       	ldi	r24, 0x3C	; 60
     8e6:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
     8e8:	ec e7       	ldi	r30, 0x7C	; 124
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
     8f2:	ab e7       	ldi	r26, 0x7B	; 123
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	8c 91       	ld	r24, X
     8f8:	83 60       	ori	r24, 0x03	; 3
     8fa:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
     8fc:	80 81       	ld	r24, Z
     8fe:	80 62       	ori	r24, 0x20	; 32
     900:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
     902:	0a e7       	ldi	r16, 0x7A	; 122
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	f8 01       	movw	r30, r16
     908:	80 81       	ld	r24, Z
     90a:	80 62       	ori	r24, 0x20	; 32
     90c:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
     90e:	80 81       	ld	r24, Z
     910:	88 60       	ori	r24, 0x08	; 8
     912:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
     914:	80 81       	ld	r24, Z
     916:	80 68       	ori	r24, 0x80	; 128
     918:	80 83       	st	Z, r24
    DIDR0 |= 1 << ADC0D; // отключить буффер цифрового входа ADC0D
     91a:	ee e7       	ldi	r30, 0x7E	; 126
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 83       	st	Z, r24
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
     924:	e4 e4       	ldi	r30, 0x44	; 68
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	82 60       	ori	r24, 0x02	; 2
     92c:	80 83       	st	Z, r24
    OCR0A= measureRate;
     92e:	80 91 15 01 	lds	r24, 0x0115
     932:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
     934:	e5 e4       	ldi	r30, 0x45	; 69
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	84 60       	ori	r24, 0x04	; 4
     93c:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
     93e:	ee e6       	ldi	r30, 0x6E	; 110
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	82 60       	ori	r24, 0x02	; 2
     946:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
     948:	85 e0       	ldi	r24, 0x05	; 5
     94a:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
     94e:	e6 eb       	ldi	r30, 0xB6	; 182
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	80 62       	ori	r24, 0x20	; 32
     956:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
     958:	e0 e7       	ldi	r30, 0x70	; 112
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	81 60       	ori	r24, 0x01	; 1
     960:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCD_Init();
     962:	d6 d0       	rcall	.+428    	; 0xb10 <LCD_Init>

    BIT_WRITE(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
     964:	e4 e6       	ldi	r30, 0x64	; 100
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	80 68       	ori	r24, 0x80	; 128
     96c:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
     96e:	80 81       	ld	r24, Z
     970:	88 60       	ori	r24, 0x08	; 8
     972:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
     974:	80 81       	ld	r24, Z
     976:	84 60       	ori	r24, 0x04	; 4
     978:	80 83       	st	Z, r24
    BIT_WRITE(ACSR, ACD, 1); // отключить аналоговый компаратор
     97a:	e0 e5       	ldi	r30, 0x50	; 80
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	80 68       	ori	r24, 0x80	; 128
     982:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
     984:	f8 01       	movw	r30, r16
     986:	80 81       	ld	r24, Z
     988:	80 64       	ori	r24, 0x40	; 64
     98a:	80 83       	st	Z, r24

    sei();
     98c:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
     98e:	c9 e2       	ldi	r28, 0x29	; 41
     990:	d0 e0       	ldi	r29, 0x00	; 0
     992:	88 81       	ld	r24, Y
     994:	84 ff       	sbrs	r24, 4
     996:	06 c0       	rjmp	.+12     	; 0x9a4 <main+0x136>
     998:	88 81       	ld	r24, Y
     99a:	85 ff       	sbrs	r24, 5
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <main+0x136>
     99e:	88 81       	ld	r24, Y
     9a0:	82 fd       	sbrc	r24, 2
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <main+0x144>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_ON(progFlags, LCD_ON);
     9a4:	80 91 10 01 	lds	r24, 0x0110
     9a8:	8f 7e       	andi	r24, 0xEF	; 239
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	80 93 10 01 	sts	0x0110, r24
            LCD_turnOn();
     9b0:	96 d2       	rcall	.+1324   	; 0xede <LCD_turnOn>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
     9b2:	88 81       	ld	r24, Y
     9b4:	83 fd       	sbrc	r24, 3
     9b6:	11 c0       	rjmp	.+34     	; 0x9da <main+0x16c>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
     9b8:	80 91 10 01 	lds	r24, 0x0110
     9bc:	8f 7e       	andi	r24, 0xEF	; 239
     9be:	80 93 10 01 	sts	0x0110, r24
            if (!BIT_READ(progFlags, LCD_ON))
     9c2:	80 fd       	sbrc	r24, 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <main+0x160>
            {
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
     9c6:	81 60       	ori	r24, 0x01	; 1
     9c8:	80 93 10 01 	sts	0x0110, r24
                LCD_turnOn();
     9cc:	88 d2       	rcall	.+1296   	; 0xede <LCD_turnOn>
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
     9ce:	80 91 10 01 	lds	r24, 0x0110
     9d2:	82 60       	ori	r24, 0x02	; 2
     9d4:	80 93 10 01 	sts	0x0110, r24
            menuRun(); // обработка команд меню
     9d8:	10 dd       	rcall	.-1504   	; 0x3fa <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE))
     9da:	80 91 10 01 	lds	r24, 0x0110
     9de:	84 ff       	sbrs	r24, 4
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <main+0x180>
        {
            if(BIT_READ(progFlags, LCD_ON))
     9e2:	80 ff       	sbrs	r24, 0
     9e4:	d6 cf       	rjmp	.-84     	; 0x992 <main+0x124>
            {
                BIT_OFF(progFlags, LCD_ON);
     9e6:	8e 7f       	andi	r24, 0xFE	; 254
     9e8:	80 93 10 01 	sts	0x0110, r24
                LCD_turnOff();
     9ec:	c1 d2       	rcall	.+1410   	; 0xf70 <LCD_turnOff>
            }
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
     9ee:	80 91 10 01 	lds	r24, 0x0110
     9f2:	80 ff       	sbrs	r24, 0
     9f4:	ce cf       	rjmp	.-100    	; 0x992 <main+0x124>
        {
            LCD_DisplayAll();
     9f6:	ae dc       	rcall	.-1700   	; 0x354 <LCD_DisplayAll>
     9f8:	cc cf       	rjmp	.-104    	; 0x992 <main+0x124>

000009fa <LCD_Busy>:
 #include "LCD.h"

int LCD_Busy()
{
    uint8_t input= 0;
    control;
     9fa:	e8 e2       	ldi	r30, 0x28	; 40
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	8d 7f       	andi	r24, 0xFD	; 253
     a02:	80 83       	st	Z, r24
    readlcd;
     a04:	80 81       	ld	r24, Z
     a06:	84 60       	ori	r24, 0x04	; 4
     a08:	80 83       	st	Z, r24
    LCD_DREG&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3); // переключить пины на выход
     a0a:	a4 e2       	ldi	r26, 0x24	; 36
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	8c 91       	ld	r24, X
     a10:	80 7f       	andi	r24, 0xF0	; 240
     a12:	8c 93       	st	X, r24
    LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3); // очистить выход
     a14:	a5 e2       	ldi	r26, 0x25	; 37
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	8c 91       	ld	r24, X
     a1a:	80 7f       	andi	r24, 0xF0	; 240
     a1c:	8c 93       	st	X, r24
    enable;
     a1e:	80 81       	ld	r24, Z
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a24:	2d e0       	ldi	r18, 0x0D	; 13
     a26:	82 2f       	mov	r24, r18
     a28:	8a 95       	dec	r24
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <LCD_Busy+0x2e>
    _delay_us(40);
    disable;
     a2c:	80 81       	ld	r24, Z
     a2e:	87 7f       	andi	r24, 0xF7	; 247
     a30:	80 83       	st	Z, r24
    input= LCD_IN << 4;
     a32:	a3 e2       	ldi	r26, 0x23	; 35
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	9c 91       	ld	r25, X
     a38:	92 95       	swap	r25
     a3a:	90 7f       	andi	r25, 0xF0	; 240
    enable;
     a3c:	80 81       	ld	r24, Z
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	80 83       	st	Z, r24
     a42:	2a 95       	dec	r18
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCD_Busy+0x48>
    _delay_us(40);
    disable;
     a46:	80 81       	ld	r24, Z
     a48:	87 7f       	andi	r24, 0xF7	; 247
     a4a:	80 83       	st	Z, r24
    input|= LCD_IN;
     a4c:	8c 91       	ld	r24, X
    if(BIT_READ(input, 7))
     a4e:	98 2b       	or	r25, r24
     a50:	94 f4       	brge	.+36     	; 0xa76 <LCD_Busy+0x7c>
    {
        LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     a52:	e5 e2       	ldi	r30, 0x25	; 37
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	80 7f       	andi	r24, 0xF0	; 240
     a5a:	80 83       	st	Z, r24
        LCD_DREG|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
     a5c:	e4 e2       	ldi	r30, 0x24	; 36
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	8f 60       	ori	r24, 0x0F	; 15
     a64:	80 83       	st	Z, r24
        writelcd;
     a66:	e8 e2       	ldi	r30, 0x28	; 40
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8b 7f       	andi	r24, 0xFB	; 251
     a6e:	80 83       	st	Z, r24
     a70:	21 e0       	ldi	r18, 0x01	; 1
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	11 c0       	rjmp	.+34     	; 0xa98 <LCD_Busy+0x9e>
        return 1;
    }
    LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     a76:	e5 e2       	ldi	r30, 0x25	; 37
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	80 7f       	andi	r24, 0xF0	; 240
     a7e:	80 83       	st	Z, r24
    LCD_DREG|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
     a80:	e4 e2       	ldi	r30, 0x24	; 36
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8f 60       	ori	r24, 0x0F	; 15
     a88:	80 83       	st	Z, r24
    writelcd;
     a8a:	e8 e2       	ldi	r30, 0x28	; 40
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	8b 7f       	andi	r24, 0xFB	; 251
     a92:	80 83       	st	Z, r24
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
}
     a98:	82 2f       	mov	r24, r18
     a9a:	93 2f       	mov	r25, r19
     a9c:	08 95       	ret

00000a9e <LCD_Clear>:

 void LCD_Clear()
 {
    while(LCD_Busy());
     a9e:	ad df       	rcall	.-166    	; 0x9fa <LCD_Busy>
     aa0:	89 2b       	or	r24, r25
     aa2:	e9 f7       	brne	.-6      	; 0xa9e <LCD_Clear>
    control;
     aa4:	a8 e2       	ldi	r26, 0x28	; 40
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	8c 91       	ld	r24, X
     aaa:	8d 7f       	andi	r24, 0xFD	; 253
     aac:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     aae:	e5 e2       	ldi	r30, 0x25	; 37
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	87 7f       	andi	r24, 0xF7	; 247
     ab6:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     ab8:	80 81       	ld	r24, Z
     aba:	8b 7f       	andi	r24, 0xFB	; 251
     abc:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     abe:	80 81       	ld	r24, Z
     ac0:	8d 7f       	andi	r24, 0xFD	; 253
     ac2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     ac4:	80 81       	ld	r24, Z
     ac6:	8e 7f       	andi	r24, 0xFE	; 254
     ac8:	80 83       	st	Z, r24
    enable;
     aca:	8c 91       	ld	r24, X
     acc:	88 60       	ori	r24, 0x08	; 8
     ace:	8c 93       	st	X, r24
     ad0:	9d e0       	ldi	r25, 0x0D	; 13
     ad2:	89 2f       	mov	r24, r25
     ad4:	8a 95       	dec	r24
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <LCD_Clear+0x36>
    _delay_us(40);
    disable;
     ad8:	8c 91       	ld	r24, X
     ada:	87 7f       	andi	r24, 0xF7	; 247
     adc:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     ade:	80 81       	ld	r24, Z
     ae0:	87 7f       	andi	r24, 0xF7	; 247
     ae2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     ae4:	80 81       	ld	r24, Z
     ae6:	8b 7f       	andi	r24, 0xFB	; 251
     ae8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     aea:	80 81       	ld	r24, Z
     aec:	8d 7f       	andi	r24, 0xFD	; 253
     aee:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 1);
     af0:	80 81       	ld	r24, Z
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	80 83       	st	Z, r24
    enable;
     af6:	8c 91       	ld	r24, X
     af8:	88 60       	ori	r24, 0x08	; 8
     afa:	8c 93       	st	X, r24
     afc:	9a 95       	dec	r25
     afe:	f1 f7       	brne	.-4      	; 0xafc <LCD_Clear+0x5e>
    _delay_us(40);
    disable;
     b00:	8c 91       	ld	r24, X
     b02:	87 7f       	andi	r24, 0xF7	; 247
     b04:	8c 93       	st	X, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b06:	84 ef       	ldi	r24, 0xF4	; 244
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <LCD_Clear+0x6c>
    _delay_ms(2);
 }
     b0e:	08 95       	ret

00000b10 <LCD_Init>:
     b10:	86 ea       	ldi	r24, 0xA6	; 166
     b12:	9e e0       	ldi	r25, 0x0E	; 14
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <LCD_Init+0x4>

 void LCD_Init()
 {
    _delay_ms(15);
    LCD_CREG= (1 << LCD_EN)|(1 << LCD_RS)|(1 << LCD_RW); // управляющие на выход
     b18:	8e e0       	ldi	r24, 0x0E	; 14
     b1a:	87 b9       	out	0x07, r24	; 7
    while(LCD_Busy());
     b1c:	6e df       	rcall	.-292    	; 0x9fa <LCD_Busy>
     b1e:	89 2b       	or	r24, r25
     b20:	e9 f7       	brne	.-6      	; 0xb1c <LCD_Init+0xc>
    control; // шина 4 бита, 2 строки, символ 5x8 точек
     b22:	a8 e2       	ldi	r26, 0x28	; 40
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	8c 91       	ld	r24, X
     b28:	8d 7f       	andi	r24, 0xFD	; 253
     b2a:	8c 93       	st	X, r24
    //enable;
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     b2c:	e5 e2       	ldi	r30, 0x25	; 37
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	87 7f       	andi	r24, 0xF7	; 247
     b34:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     b36:	80 81       	ld	r24, Z
     b38:	8b 7f       	andi	r24, 0xFB	; 251
     b3a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     b3c:	80 81       	ld	r24, Z
     b3e:	82 60       	ori	r24, 0x02	; 2
     b40:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     b42:	80 81       	ld	r24, Z
     b44:	8e 7f       	andi	r24, 0xFE	; 254
     b46:	80 83       	st	Z, r24
    enable;
     b48:	8c 91       	ld	r24, X
     b4a:	88 60       	ori	r24, 0x08	; 8
     b4c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b4e:	8d e0       	ldi	r24, 0x0D	; 13
     b50:	8a 95       	dec	r24
     b52:	f1 f7       	brne	.-4      	; 0xb50 <LCD_Init+0x40>
    _delay_us(40);
    disable;
     b54:	8c 91       	ld	r24, X
     b56:	87 7f       	andi	r24, 0xF7	; 247
     b58:	8c 93       	st	X, r24
    while(LCD_Busy());
     b5a:	4f df       	rcall	.-354    	; 0x9fa <LCD_Busy>
     b5c:	89 2b       	or	r24, r25
     b5e:	e9 f7       	brne	.-6      	; 0xb5a <LCD_Init+0x4a>
    control;
     b60:	a8 e2       	ldi	r26, 0x28	; 40
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	8c 91       	ld	r24, X
     b66:	8d 7f       	andi	r24, 0xFD	; 253
     b68:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     b6a:	e5 e2       	ldi	r30, 0x25	; 37
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	88 60       	ori	r24, 0x08	; 8
     b72:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     b74:	80 81       	ld	r24, Z
     b76:	8b 7f       	andi	r24, 0xFB	; 251
     b78:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     b7a:	80 81       	ld	r24, Z
     b7c:	8d 7f       	andi	r24, 0xFD	; 253
     b7e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     b80:	80 81       	ld	r24, Z
     b82:	8e 7f       	andi	r24, 0xFE	; 254
     b84:	80 83       	st	Z, r24
    enable;
     b86:	8c 91       	ld	r24, X
     b88:	88 60       	ori	r24, 0x08	; 8
     b8a:	8c 93       	st	X, r24
     b8c:	8d e0       	ldi	r24, 0x0D	; 13
     b8e:	8a 95       	dec	r24
     b90:	f1 f7       	brne	.-4      	; 0xb8e <LCD_Init+0x7e>
    _delay_us(40);
    disable;
     b92:	8c 91       	ld	r24, X
     b94:	87 7f       	andi	r24, 0xF7	; 247
     b96:	8c 93       	st	X, r24
    while(LCD_Busy());
     b98:	30 df       	rcall	.-416    	; 0x9fa <LCD_Busy>
     b9a:	89 2b       	or	r24, r25
     b9c:	e9 f7       	brne	.-6      	; 0xb98 <LCD_Init+0x88>
    //enable; // инкремент счетчика, сдвига экрана нет
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     b9e:	e5 e2       	ldi	r30, 0x25	; 37
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	87 7f       	andi	r24, 0xF7	; 247
     ba6:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     ba8:	80 81       	ld	r24, Z
     baa:	8b 7f       	andi	r24, 0xFB	; 251
     bac:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     bae:	80 81       	ld	r24, Z
     bb0:	8d 7f       	andi	r24, 0xFD	; 253
     bb2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     bb4:	80 81       	ld	r24, Z
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
     bb8:	80 83       	st	Z, r24
    enable;
     bba:	e8 e2       	ldi	r30, 0x28	; 40
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	88 60       	ori	r24, 0x08	; 8
     bc2:	80 83       	st	Z, r24
     bc4:	8d e0       	ldi	r24, 0x0D	; 13
     bc6:	8a 95       	dec	r24
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <LCD_Init+0xb6>
    _delay_us(40);
    disable;
     bca:	80 81       	ld	r24, Z
     bcc:	87 7f       	andi	r24, 0xF7	; 247
     bce:	80 83       	st	Z, r24
    while(LCD_Busy());
     bd0:	14 df       	rcall	.-472    	; 0x9fa <LCD_Busy>
     bd2:	89 2b       	or	r24, r25
     bd4:	e9 f7       	brne	.-6      	; 0xbd0 <LCD_Init+0xc0>
    control;
     bd6:	a8 e2       	ldi	r26, 0x28	; 40
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	8c 91       	ld	r24, X
     bdc:	8d 7f       	andi	r24, 0xFD	; 253
     bde:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     be0:	e5 e2       	ldi	r30, 0x25	; 37
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	87 7f       	andi	r24, 0xF7	; 247
     be8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 1);
     bea:	80 81       	ld	r24, Z
     bec:	84 60       	ori	r24, 0x04	; 4
     bee:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     bf0:	80 81       	ld	r24, Z
     bf2:	82 60       	ori	r24, 0x02	; 2
     bf4:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     bf6:	80 81       	ld	r24, Z
     bf8:	8e 7f       	andi	r24, 0xFE	; 254
     bfa:	80 83       	st	Z, r24
    enable;
     bfc:	8c 91       	ld	r24, X
     bfe:	88 60       	ori	r24, 0x08	; 8
     c00:	8c 93       	st	X, r24
     c02:	9d e0       	ldi	r25, 0x0D	; 13
     c04:	89 2f       	mov	r24, r25
     c06:	8a 95       	dec	r24
     c08:	f1 f7       	brne	.-4      	; 0xc06 <LCD_Init+0xf6>
    _delay_us(40);
    disable;
     c0a:	8c 91       	ld	r24, X
     c0c:	87 7f       	andi	r24, 0xF7	; 247
     c0e:	8c 93       	st	X, r24
     c10:	9a 95       	dec	r25
     c12:	f1 f7       	brne	.-4      	; 0xc10 <LCD_Init+0x100>
    _delay_us(40);
    LCD_Clear();
 }
     c14:	44 cf       	rjmp	.-376    	; 0xa9e <LCD_Clear>

00000c16 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
     c16:	1f 93       	push	r17
    uint8_t addr= (row * LCD_LENGTH + col); // конвертация номера строки и столбца в адрес
     c18:	82 95       	swap	r24
     c1a:	80 7f       	andi	r24, 0xF0	; 240
     c1c:	18 2f       	mov	r17, r24
     c1e:	16 0f       	add	r17, r22
    while(LCD_Busy());
     c20:	ec de       	rcall	.-552    	; 0x9fa <LCD_Busy>
     c22:	89 2b       	or	r24, r25
     c24:	e9 f7       	brne	.-6      	; 0xc20 <LCD_SetCursor+0xa>
    control; 
     c26:	e8 e2       	ldi	r30, 0x28	; 40
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	8d 7f       	andi	r24, 0xFD	; 253
     c2e:	80 83       	st	Z, r24
    //enable;                                           
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     c30:	e5 e2       	ldi	r30, 0x25	; 37
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	88 60       	ori	r24, 0x08	; 8
     c38:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, (addr >> 6)&0x01);
     c3a:	81 2f       	mov	r24, r17
     c3c:	82 95       	swap	r24
     c3e:	86 95       	lsr	r24
     c40:	86 95       	lsr	r24
     c42:	83 70       	andi	r24, 0x03	; 3
     c44:	80 ff       	sbrs	r24, 0
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <LCD_SetCursor+0x3c>
     c48:	80 81       	ld	r24, Z
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	80 83       	st	Z, r24
     c4e:	e0 81       	ld	r30, Z
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <LCD_SetCursor+0x48>
     c52:	e5 e2       	ldi	r30, 0x25	; 37
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8b 7f       	andi	r24, 0xFB	; 251
     c5a:	80 83       	st	Z, r24
     c5c:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D1, (addr >> 5)&0x01);
     c5e:	81 2f       	mov	r24, r17
     c60:	82 95       	swap	r24
     c62:	86 95       	lsr	r24
     c64:	87 70       	andi	r24, 0x07	; 7
     c66:	80 ff       	sbrs	r24, 0
     c68:	07 c0       	rjmp	.+14     	; 0xc78 <LCD_SetCursor+0x62>
     c6a:	e5 e2       	ldi	r30, 0x25	; 37
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	82 60       	ori	r24, 0x02	; 2
     c72:	80 83       	st	Z, r24
     c74:	e0 81       	ld	r30, Z
     c76:	06 c0       	rjmp	.+12     	; 0xc84 <LCD_SetCursor+0x6e>
     c78:	e5 e2       	ldi	r30, 0x25	; 37
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8d 7f       	andi	r24, 0xFD	; 253
     c80:	80 83       	st	Z, r24
     c82:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D0, (addr >> 4)&0x01);
     c84:	81 2f       	mov	r24, r17
     c86:	82 95       	swap	r24
     c88:	8f 70       	andi	r24, 0x0F	; 15
     c8a:	80 ff       	sbrs	r24, 0
     c8c:	07 c0       	rjmp	.+14     	; 0xc9c <LCD_SetCursor+0x86>
     c8e:	e5 e2       	ldi	r30, 0x25	; 37
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	81 60       	ori	r24, 0x01	; 1
     c96:	80 83       	st	Z, r24
     c98:	e0 81       	ld	r30, Z
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <LCD_SetCursor+0x92>
     c9c:	e5 e2       	ldi	r30, 0x25	; 37
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	8e 7f       	andi	r24, 0xFE	; 254
     ca4:	80 83       	st	Z, r24
     ca6:	e0 81       	ld	r30, Z
    enable;
     ca8:	e8 e2       	ldi	r30, 0x28	; 40
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	88 60       	ori	r24, 0x08	; 8
     cb0:	80 83       	st	Z, r24
     cb2:	8d e0       	ldi	r24, 0x0D	; 13
     cb4:	8a 95       	dec	r24
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <LCD_SetCursor+0x9e>
    _delay_us(40);
    disable;
     cb8:	80 81       	ld	r24, Z
     cba:	87 7f       	andi	r24, 0xF7	; 247
     cbc:	80 83       	st	Z, r24
    while(LCD_Busy());
     cbe:	9d de       	rcall	.-710    	; 0x9fa <LCD_Busy>
     cc0:	89 2b       	or	r24, r25
     cc2:	e9 f7       	brne	.-6      	; 0xcbe <LCD_SetCursor+0xa8>
    control;
     cc4:	e8 e2       	ldi	r30, 0x28	; 40
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, (addr >> 3)&0x01);
     cce:	81 2f       	mov	r24, r17
     cd0:	86 95       	lsr	r24
     cd2:	86 95       	lsr	r24
     cd4:	86 95       	lsr	r24
     cd6:	80 ff       	sbrs	r24, 0
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <LCD_SetCursor+0xd2>
     cda:	e5 e2       	ldi	r30, 0x25	; 37
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	88 60       	ori	r24, 0x08	; 8
     ce2:	80 83       	st	Z, r24
     ce4:	e0 81       	ld	r30, Z
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <LCD_SetCursor+0xde>
     ce8:	e5 e2       	ldi	r30, 0x25	; 37
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	87 7f       	andi	r24, 0xF7	; 247
     cf0:	80 83       	st	Z, r24
     cf2:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D2, (addr >> 2)&0x01);
     cf4:	81 2f       	mov	r24, r17
     cf6:	86 95       	lsr	r24
     cf8:	86 95       	lsr	r24
     cfa:	80 ff       	sbrs	r24, 0
     cfc:	07 c0       	rjmp	.+14     	; 0xd0c <LCD_SetCursor+0xf6>
     cfe:	e5 e2       	ldi	r30, 0x25	; 37
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	80 83       	st	Z, r24
     d08:	e0 81       	ld	r30, Z
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <LCD_SetCursor+0x102>
     d0c:	e5 e2       	ldi	r30, 0x25	; 37
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8b 7f       	andi	r24, 0xFB	; 251
     d14:	80 83       	st	Z, r24
     d16:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D1, (addr >> 1)&0x01);
     d18:	81 2f       	mov	r24, r17
     d1a:	86 95       	lsr	r24
     d1c:	80 ff       	sbrs	r24, 0
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <LCD_SetCursor+0x118>
     d20:	e5 e2       	ldi	r30, 0x25	; 37
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	82 60       	ori	r24, 0x02	; 2
     d28:	80 83       	st	Z, r24
     d2a:	e0 81       	ld	r30, Z
     d2c:	06 c0       	rjmp	.+12     	; 0xd3a <LCD_SetCursor+0x124>
     d2e:	e5 e2       	ldi	r30, 0x25	; 37
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8d 7f       	andi	r24, 0xFD	; 253
     d36:	80 83       	st	Z, r24
     d38:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D0, addr&0x01);
     d3a:	10 ff       	sbrs	r17, 0
     d3c:	07 c0       	rjmp	.+14     	; 0xd4c <LCD_SetCursor+0x136>
     d3e:	e5 e2       	ldi	r30, 0x25	; 37
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	81 60       	ori	r24, 0x01	; 1
     d46:	80 83       	st	Z, r24
     d48:	e0 81       	ld	r30, Z
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <LCD_SetCursor+0x142>
     d4c:	e5 e2       	ldi	r30, 0x25	; 37
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	8e 7f       	andi	r24, 0xFE	; 254
     d54:	80 83       	st	Z, r24
     d56:	e0 81       	ld	r30, Z
    enable;
     d58:	e8 e2       	ldi	r30, 0x28	; 40
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 60       	ori	r24, 0x08	; 8
     d60:	80 83       	st	Z, r24
     d62:	9d e0       	ldi	r25, 0x0D	; 13
     d64:	89 2f       	mov	r24, r25
     d66:	8a 95       	dec	r24
     d68:	f1 f7       	brne	.-4      	; 0xd66 <LCD_SetCursor+0x150>
    _delay_us(40);
    disable;
     d6a:	80 81       	ld	r24, Z
     d6c:	87 7f       	andi	r24, 0xF7	; 247
     d6e:	80 83       	st	Z, r24
     d70:	9a 95       	dec	r25
     d72:	f1 f7       	brne	.-4      	; 0xd70 <LCD_SetCursor+0x15a>
    _delay_us(40);
}
     d74:	1f 91       	pop	r17
     d76:	08 95       	ret

00000d78 <LCD_Write>:

void LCD_Write(char * bytes, uint8_t sz, uint8_t posY, uint8_t posX )
{
     d78:	bf 92       	push	r11
     d7a:	cf 92       	push	r12
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	7c 01       	movw	r14, r24
     d8c:	16 2f       	mov	r17, r22
     d8e:	84 2f       	mov	r24, r20
    LCD_SetCursor(posY, posX);
     d90:	62 2f       	mov	r22, r18
     d92:	41 df       	rcall	.-382    	; 0xc16 <LCD_SetCursor>
    
    for (int i = sz; i > 0; i--)
     d94:	c1 2e       	mov	r12, r17
     d96:	dd 24       	eor	r13, r13
     d98:	1c 14       	cp	r1, r12
     d9a:	1d 04       	cpc	r1, r13
     d9c:	0c f0       	brlt	.+2      	; 0xda0 <LCD_Write+0x28>
     d9e:	95 c0       	rjmp	.+298    	; 0xeca <LCD_Write+0x152>
    {
        while(LCD_Busy());
        cli();
        data;
     da0:	08 e2       	ldi	r16, 0x28	; 40
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	0f 2e       	mov	r0, r31
     da6:	fd e0       	ldi	r31, 0x0D	; 13
     da8:	bf 2e       	mov	r11, r31
     daa:	f0 2d       	mov	r31, r0
        while(LCD_Busy());
        control;
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 3)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 2)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 1)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D0, *bytes&0x01);
     dac:	c5 e2       	ldi	r28, 0x25	; 37
     dae:	d0 e0       	ldi	r29, 0x00	; 0
{
    LCD_SetCursor(posY, posX);
    
    for (int i = sz; i > 0; i--)
    {
        while(LCD_Busy());
     db0:	24 de       	rcall	.-952    	; 0x9fa <LCD_Busy>
     db2:	89 2b       	or	r24, r25
     db4:	e9 f7       	brne	.-6      	; 0xdb0 <LCD_Write+0x38>
        cli();
     db6:	f8 94       	cli
        data;
     db8:	f8 01       	movw	r30, r16
     dba:	80 81       	ld	r24, Z
     dbc:	82 60       	ori	r24, 0x02	; 2
     dbe:	80 83       	st	Z, r24
        //enable;
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 7)&0x01);
     dc0:	f7 01       	movw	r30, r14
     dc2:	90 81       	ld	r25, Z
     dc4:	99 23       	and	r25, r25
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <LCD_Write+0x5a>
     dc8:	88 81       	ld	r24, Y
     dca:	88 60       	ori	r24, 0x08	; 8
     dcc:	88 83       	st	Y, r24
     dce:	88 81       	ld	r24, Y
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <LCD_Write+0x62>
     dd2:	88 81       	ld	r24, Y
     dd4:	87 7f       	andi	r24, 0xF7	; 247
     dd6:	88 83       	st	Y, r24
     dd8:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 6)&0x01);
     dda:	96 ff       	sbrs	r25, 6
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <LCD_Write+0x70>
     dde:	88 81       	ld	r24, Y
     de0:	84 60       	ori	r24, 0x04	; 4
     de2:	88 83       	st	Y, r24
     de4:	88 81       	ld	r24, Y
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <LCD_Write+0x78>
     de8:	88 81       	ld	r24, Y
     dea:	8b 7f       	andi	r24, 0xFB	; 251
     dec:	88 83       	st	Y, r24
     dee:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 5)&0x01);
     df0:	95 ff       	sbrs	r25, 5
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <LCD_Write+0x86>
     df4:	88 81       	ld	r24, Y
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	88 83       	st	Y, r24
     dfa:	88 81       	ld	r24, Y
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <LCD_Write+0x8e>
     dfe:	88 81       	ld	r24, Y
     e00:	8d 7f       	andi	r24, 0xFD	; 253
     e02:	88 83       	st	Y, r24
     e04:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D0, (*bytes >> 4)&0x01);
     e06:	94 ff       	sbrs	r25, 4
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <LCD_Write+0x9c>
     e0a:	88 81       	ld	r24, Y
     e0c:	81 60       	ori	r24, 0x01	; 1
     e0e:	88 83       	st	Y, r24
     e10:	88 81       	ld	r24, Y
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <LCD_Write+0xa4>
     e14:	88 81       	ld	r24, Y
     e16:	8e 7f       	andi	r24, 0xFE	; 254
     e18:	88 83       	st	Y, r24
     e1a:	88 81       	ld	r24, Y
        enable;
     e1c:	f8 01       	movw	r30, r16
     e1e:	80 81       	ld	r24, Z
     e20:	88 60       	ori	r24, 0x08	; 8
     e22:	80 83       	st	Z, r24
     e24:	8b 2d       	mov	r24, r11
     e26:	8a 95       	dec	r24
     e28:	f1 f7       	brne	.-4      	; 0xe26 <LCD_Write+0xae>
        _delay_us(40);
        disable;
     e2a:	80 81       	ld	r24, Z
     e2c:	87 7f       	andi	r24, 0xF7	; 247
     e2e:	80 83       	st	Z, r24
        while(LCD_Busy());
     e30:	e4 dd       	rcall	.-1080   	; 0x9fa <LCD_Busy>
     e32:	89 2b       	or	r24, r25
     e34:	e9 f7       	brne	.-6      	; 0xe30 <LCD_Write+0xb8>
        control;
     e36:	f8 01       	movw	r30, r16
     e38:	80 81       	ld	r24, Z
     e3a:	8d 7f       	andi	r24, 0xFD	; 253
     e3c:	80 83       	st	Z, r24
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 3)&0x01);
     e3e:	f7 01       	movw	r30, r14
     e40:	90 81       	ld	r25, Z
     e42:	93 ff       	sbrs	r25, 3
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <LCD_Write+0xd8>
     e46:	88 81       	ld	r24, Y
     e48:	88 60       	ori	r24, 0x08	; 8
     e4a:	88 83       	st	Y, r24
     e4c:	88 81       	ld	r24, Y
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <LCD_Write+0xe0>
     e50:	88 81       	ld	r24, Y
     e52:	87 7f       	andi	r24, 0xF7	; 247
     e54:	88 83       	st	Y, r24
     e56:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 2)&0x01);
     e58:	92 ff       	sbrs	r25, 2
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <LCD_Write+0xee>
     e5c:	88 81       	ld	r24, Y
     e5e:	84 60       	ori	r24, 0x04	; 4
     e60:	88 83       	st	Y, r24
     e62:	88 81       	ld	r24, Y
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <LCD_Write+0xf6>
     e66:	88 81       	ld	r24, Y
     e68:	8b 7f       	andi	r24, 0xFB	; 251
     e6a:	88 83       	st	Y, r24
     e6c:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 1)&0x01);
     e6e:	91 ff       	sbrs	r25, 1
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <LCD_Write+0x104>
     e72:	88 81       	ld	r24, Y
     e74:	82 60       	ori	r24, 0x02	; 2
     e76:	88 83       	st	Y, r24
     e78:	88 81       	ld	r24, Y
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <LCD_Write+0x10c>
     e7c:	88 81       	ld	r24, Y
     e7e:	8d 7f       	andi	r24, 0xFD	; 253
     e80:	88 83       	st	Y, r24
     e82:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D0, *bytes&0x01);
     e84:	90 ff       	sbrs	r25, 0
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <LCD_Write+0x11a>
     e88:	88 81       	ld	r24, Y
     e8a:	81 60       	ori	r24, 0x01	; 1
     e8c:	88 83       	st	Y, r24
     e8e:	88 81       	ld	r24, Y
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <LCD_Write+0x122>
     e92:	88 81       	ld	r24, Y
     e94:	8e 7f       	andi	r24, 0xFE	; 254
     e96:	88 83       	st	Y, r24
     e98:	88 81       	ld	r24, Y
        enable;
     e9a:	f8 01       	movw	r30, r16
     e9c:	80 81       	ld	r24, Z
     e9e:	88 60       	ori	r24, 0x08	; 8
     ea0:	80 83       	st	Z, r24
     ea2:	8b 2d       	mov	r24, r11
     ea4:	8a 95       	dec	r24
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <LCD_Write+0x12c>
        _delay_us(40);
        disable;
     ea8:	80 81       	ld	r24, Z
     eaa:	87 7f       	andi	r24, 0xF7	; 247
     eac:	80 83       	st	Z, r24
        sei();
     eae:	78 94       	sei
     eb0:	8b 2d       	mov	r24, r11
     eb2:	8a 95       	dec	r24
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <LCD_Write+0x13a>

void LCD_Write(char * bytes, uint8_t sz, uint8_t posY, uint8_t posX )
{
    LCD_SetCursor(posY, posX);
    
    for (int i = sz; i > 0; i--)
     eb6:	08 94       	sec
     eb8:	c1 08       	sbc	r12, r1
     eba:	d1 08       	sbc	r13, r1
     ebc:	c1 14       	cp	r12, r1
     ebe:	d1 04       	cpc	r13, r1
     ec0:	21 f0       	breq	.+8      	; 0xeca <LCD_Write+0x152>
        enable;
        _delay_us(40);
        disable;
        sei();
        _delay_us(40);
        bytes++;
     ec2:	08 94       	sec
     ec4:	e1 1c       	adc	r14, r1
     ec6:	f1 1c       	adc	r15, r1
     ec8:	73 cf       	rjmp	.-282    	; 0xdb0 <LCD_Write+0x38>
    }
    
}
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	bf 90       	pop	r11
     edc:	08 95       	ret

00000ede <LCD_turnOn>:

void LCD_turnOn()
{
    BIT_ON(CONTROL_PORT, LCD_LED);
     ede:	eb e2       	ldi	r30, 0x2B	; 43
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	80 83       	st	Z, r24
    while(LCD_Busy());
     ee8:	88 dd       	rcall	.-1264   	; 0x9fa <LCD_Busy>
     eea:	89 2b       	or	r24, r25
     eec:	e9 f7       	brne	.-6      	; 0xee8 <LCD_turnOn+0xa>
    control; // включить экран, курсора нет
     eee:	a8 e2       	ldi	r26, 0x28	; 40
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	8c 91       	ld	r24, X
     ef4:	8d 7f       	andi	r24, 0xFD	; 253
     ef6:	8c 93       	st	X, r24
    //enable;
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     ef8:	e5 e2       	ldi	r30, 0x25	; 37
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	87 7f       	andi	r24, 0xF7	; 247
     f00:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     f02:	80 81       	ld	r24, Z
     f04:	8b 7f       	andi	r24, 0xFB	; 251
     f06:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     f08:	80 81       	ld	r24, Z
     f0a:	8d 7f       	andi	r24, 0xFD	; 253
     f0c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     f0e:	80 81       	ld	r24, Z
     f10:	8e 7f       	andi	r24, 0xFE	; 254
     f12:	80 83       	st	Z, r24
    enable;
     f14:	8c 91       	ld	r24, X
     f16:	88 60       	ori	r24, 0x08	; 8
     f18:	8c 93       	st	X, r24
     f1a:	8d e0       	ldi	r24, 0x0D	; 13
     f1c:	8a 95       	dec	r24
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <LCD_turnOn+0x3e>
    _delay_us(40);
    disable;
     f20:	8c 91       	ld	r24, X
     f22:	87 7f       	andi	r24, 0xF7	; 247
     f24:	8c 93       	st	X, r24
    while(LCD_Busy());
     f26:	69 dd       	rcall	.-1326   	; 0x9fa <LCD_Busy>
     f28:	89 2b       	or	r24, r25
     f2a:	e9 f7       	brne	.-6      	; 0xf26 <LCD_turnOn+0x48>
    control;
     f2c:	a8 e2       	ldi	r26, 0x28	; 40
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	8c 91       	ld	r24, X
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     f36:	e5 e2       	ldi	r30, 0x25	; 37
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 60       	ori	r24, 0x08	; 8
     f3e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 1);
     f40:	80 81       	ld	r24, Z
     f42:	84 60       	ori	r24, 0x04	; 4
     f44:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     f46:	80 81       	ld	r24, Z
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     f4c:	80 81       	ld	r24, Z
     f4e:	8e 7f       	andi	r24, 0xFE	; 254
     f50:	80 83       	st	Z, r24
    enable;
     f52:	8c 91       	ld	r24, X
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	8c 93       	st	X, r24
     f58:	9d e0       	ldi	r25, 0x0D	; 13
     f5a:	89 2f       	mov	r24, r25
     f5c:	8a 95       	dec	r24
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <LCD_turnOn+0x7e>
    _delay_us(40);
    disable;
     f60:	8c 91       	ld	r24, X
     f62:	87 7f       	andi	r24, 0xF7	; 247
     f64:	8c 93       	st	X, r24
     f66:	9a 95       	dec	r25
     f68:	f1 f7       	brne	.-4      	; 0xf66 <LCD_turnOn+0x88>
    _delay_us(40);
    LCD_SetCursor(0, 0);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	60 e0       	ldi	r22, 0x00	; 0
}
     f6e:	53 ce       	rjmp	.-858    	; 0xc16 <LCD_SetCursor>

00000f70 <LCD_turnOff>:

void LCD_turnOff()
{
    BIT_OFF(CONTROL_PORT, LCD_LED);
     f70:	eb e2       	ldi	r30, 0x2B	; 43
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 77       	andi	r24, 0x7F	; 127
     f78:	80 83       	st	Z, r24
    while(LCD_Busy());
     f7a:	3f dd       	rcall	.-1410   	; 0x9fa <LCD_Busy>
     f7c:	89 2b       	or	r24, r25
     f7e:	e9 f7       	brne	.-6      	; 0xf7a <LCD_turnOff+0xa>
    control; // выключить экран, курсора нет
     f80:	a8 e2       	ldi	r26, 0x28	; 40
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	8c 91       	ld	r24, X
     f86:	8d 7f       	andi	r24, 0xFD	; 253
     f88:	8c 93       	st	X, r24
    //enable;
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     f8a:	e5 e2       	ldi	r30, 0x25	; 37
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	87 7f       	andi	r24, 0xF7	; 247
     f92:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     f94:	80 81       	ld	r24, Z
     f96:	8b 7f       	andi	r24, 0xFB	; 251
     f98:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     f9a:	80 81       	ld	r24, Z
     f9c:	8d 7f       	andi	r24, 0xFD	; 253
     f9e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     fa0:	80 81       	ld	r24, Z
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	80 83       	st	Z, r24
    enable;
     fa6:	8c 91       	ld	r24, X
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	8c 93       	st	X, r24
     fac:	8d e0       	ldi	r24, 0x0D	; 13
     fae:	8a 95       	dec	r24
     fb0:	f1 f7       	brne	.-4      	; 0xfae <LCD_turnOff+0x3e>
    _delay_us(40);
    disable;
     fb2:	8c 91       	ld	r24, X
     fb4:	87 7f       	andi	r24, 0xF7	; 247
     fb6:	8c 93       	st	X, r24
    while(LCD_Busy());
     fb8:	20 dd       	rcall	.-1472   	; 0x9fa <LCD_Busy>
     fba:	89 2b       	or	r24, r25
     fbc:	e9 f7       	brne	.-6      	; 0xfb8 <LCD_turnOff+0x48>
    control;
     fbe:	a8 e2       	ldi	r26, 0x28	; 40
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	8c 91       	ld	r24, X
     fc4:	8d 7f       	andi	r24, 0xFD	; 253
     fc6:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     fc8:	e5 e2       	ldi	r30, 0x25	; 37
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	88 60       	ori	r24, 0x08	; 8
     fd0:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     fd2:	80 81       	ld	r24, Z
     fd4:	8b 7f       	andi	r24, 0xFB	; 251
     fd6:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     fd8:	80 81       	ld	r24, Z
     fda:	82 60       	ori	r24, 0x02	; 2
     fdc:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     fde:	80 81       	ld	r24, Z
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	80 83       	st	Z, r24
    enable;
     fe4:	8c 91       	ld	r24, X
     fe6:	88 60       	ori	r24, 0x08	; 8
     fe8:	8c 93       	st	X, r24
     fea:	9d e0       	ldi	r25, 0x0D	; 13
     fec:	89 2f       	mov	r24, r25
     fee:	8a 95       	dec	r24
     ff0:	f1 f7       	brne	.-4      	; 0xfee <LCD_turnOff+0x7e>
    _delay_us(40);
    disable;
     ff2:	8c 91       	ld	r24, X
     ff4:	87 7f       	andi	r24, 0xF7	; 247
     ff6:	8c 93       	st	X, r24
     ff8:	9a 95       	dec	r25
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <LCD_turnOff+0x88>
    _delay_us(40);
    LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     ffc:	80 81       	ld	r24, Z
     ffe:	80 7f       	andi	r24, 0xF0	; 240
    1000:	80 83       	st	Z, r24
    1002:	08 95       	ret

00001004 <__subsf3>:
    1004:	50 58       	subi	r21, 0x80	; 128

00001006 <__addsf3>:
    1006:	bb 27       	eor	r27, r27
    1008:	aa 27       	eor	r26, r26
    100a:	0e d0       	rcall	.+28     	; 0x1028 <__addsf3x>
    100c:	75 c1       	rjmp	.+746    	; 0x12f8 <__fp_round>
    100e:	66 d1       	rcall	.+716    	; 0x12dc <__fp_pscA>
    1010:	30 f0       	brcs	.+12     	; 0x101e <__addsf3+0x18>
    1012:	6b d1       	rcall	.+726    	; 0x12ea <__fp_pscB>
    1014:	20 f0       	brcs	.+8      	; 0x101e <__addsf3+0x18>
    1016:	31 f4       	brne	.+12     	; 0x1024 <__addsf3+0x1e>
    1018:	9f 3f       	cpi	r25, 0xFF	; 255
    101a:	11 f4       	brne	.+4      	; 0x1020 <__addsf3+0x1a>
    101c:	1e f4       	brtc	.+6      	; 0x1024 <__addsf3+0x1e>
    101e:	5b c1       	rjmp	.+694    	; 0x12d6 <__fp_nan>
    1020:	0e f4       	brtc	.+2      	; 0x1024 <__addsf3+0x1e>
    1022:	e0 95       	com	r30
    1024:	e7 fb       	bst	r30, 7
    1026:	51 c1       	rjmp	.+674    	; 0x12ca <__fp_inf>

00001028 <__addsf3x>:
    1028:	e9 2f       	mov	r30, r25
    102a:	77 d1       	rcall	.+750    	; 0x131a <__fp_split3>
    102c:	80 f3       	brcs	.-32     	; 0x100e <__addsf3+0x8>
    102e:	ba 17       	cp	r27, r26
    1030:	62 07       	cpc	r22, r18
    1032:	73 07       	cpc	r23, r19
    1034:	84 07       	cpc	r24, r20
    1036:	95 07       	cpc	r25, r21
    1038:	18 f0       	brcs	.+6      	; 0x1040 <__addsf3x+0x18>
    103a:	71 f4       	brne	.+28     	; 0x1058 <__addsf3x+0x30>
    103c:	9e f5       	brtc	.+102    	; 0x10a4 <__addsf3x+0x7c>
    103e:	8f c1       	rjmp	.+798    	; 0x135e <__fp_zero>
    1040:	0e f4       	brtc	.+2      	; 0x1044 <__addsf3x+0x1c>
    1042:	e0 95       	com	r30
    1044:	0b 2e       	mov	r0, r27
    1046:	ba 2f       	mov	r27, r26
    1048:	a0 2d       	mov	r26, r0
    104a:	0b 01       	movw	r0, r22
    104c:	b9 01       	movw	r22, r18
    104e:	90 01       	movw	r18, r0
    1050:	0c 01       	movw	r0, r24
    1052:	ca 01       	movw	r24, r20
    1054:	a0 01       	movw	r20, r0
    1056:	11 24       	eor	r1, r1
    1058:	ff 27       	eor	r31, r31
    105a:	59 1b       	sub	r21, r25
    105c:	99 f0       	breq	.+38     	; 0x1084 <__addsf3x+0x5c>
    105e:	59 3f       	cpi	r21, 0xF9	; 249
    1060:	50 f4       	brcc	.+20     	; 0x1076 <__addsf3x+0x4e>
    1062:	50 3e       	cpi	r21, 0xE0	; 224
    1064:	68 f1       	brcs	.+90     	; 0x10c0 <__addsf3x+0x98>
    1066:	1a 16       	cp	r1, r26
    1068:	f0 40       	sbci	r31, 0x00	; 0
    106a:	a2 2f       	mov	r26, r18
    106c:	23 2f       	mov	r18, r19
    106e:	34 2f       	mov	r19, r20
    1070:	44 27       	eor	r20, r20
    1072:	58 5f       	subi	r21, 0xF8	; 248
    1074:	f3 cf       	rjmp	.-26     	; 0x105c <__addsf3x+0x34>
    1076:	46 95       	lsr	r20
    1078:	37 95       	ror	r19
    107a:	27 95       	ror	r18
    107c:	a7 95       	ror	r26
    107e:	f0 40       	sbci	r31, 0x00	; 0
    1080:	53 95       	inc	r21
    1082:	c9 f7       	brne	.-14     	; 0x1076 <__addsf3x+0x4e>
    1084:	7e f4       	brtc	.+30     	; 0x10a4 <__addsf3x+0x7c>
    1086:	1f 16       	cp	r1, r31
    1088:	ba 0b       	sbc	r27, r26
    108a:	62 0b       	sbc	r22, r18
    108c:	73 0b       	sbc	r23, r19
    108e:	84 0b       	sbc	r24, r20
    1090:	ba f0       	brmi	.+46     	; 0x10c0 <__addsf3x+0x98>
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	a1 f0       	breq	.+40     	; 0x10be <__addsf3x+0x96>
    1096:	ff 0f       	add	r31, r31
    1098:	bb 1f       	adc	r27, r27
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	c2 f7       	brpl	.-16     	; 0x1092 <__addsf3x+0x6a>
    10a2:	0e c0       	rjmp	.+28     	; 0x10c0 <__addsf3x+0x98>
    10a4:	ba 0f       	add	r27, r26
    10a6:	62 1f       	adc	r22, r18
    10a8:	73 1f       	adc	r23, r19
    10aa:	84 1f       	adc	r24, r20
    10ac:	48 f4       	brcc	.+18     	; 0x10c0 <__addsf3x+0x98>
    10ae:	87 95       	ror	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	f7 95       	ror	r31
    10b8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ba:	08 f0       	brcs	.+2      	; 0x10be <__addsf3x+0x96>
    10bc:	b3 cf       	rjmp	.-154    	; 0x1024 <__addsf3+0x1e>
    10be:	93 95       	inc	r25
    10c0:	88 0f       	add	r24, r24
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__addsf3x+0x9e>
    10c4:	99 27       	eor	r25, r25
    10c6:	ee 0f       	add	r30, r30
    10c8:	97 95       	ror	r25
    10ca:	87 95       	ror	r24
    10cc:	08 95       	ret

000010ce <__cmpsf2>:
    10ce:	d9 d0       	rcall	.+434    	; 0x1282 <__fp_cmp>
    10d0:	08 f4       	brcc	.+2      	; 0x10d4 <__cmpsf2+0x6>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	08 95       	ret

000010d6 <__divsf3>:
    10d6:	0c d0       	rcall	.+24     	; 0x10f0 <__divsf3x>
    10d8:	0f c1       	rjmp	.+542    	; 0x12f8 <__fp_round>
    10da:	07 d1       	rcall	.+526    	; 0x12ea <__fp_pscB>
    10dc:	40 f0       	brcs	.+16     	; 0x10ee <__divsf3+0x18>
    10de:	fe d0       	rcall	.+508    	; 0x12dc <__fp_pscA>
    10e0:	30 f0       	brcs	.+12     	; 0x10ee <__divsf3+0x18>
    10e2:	21 f4       	brne	.+8      	; 0x10ec <__divsf3+0x16>
    10e4:	5f 3f       	cpi	r21, 0xFF	; 255
    10e6:	19 f0       	breq	.+6      	; 0x10ee <__divsf3+0x18>
    10e8:	f0 c0       	rjmp	.+480    	; 0x12ca <__fp_inf>
    10ea:	51 11       	cpse	r21, r1
    10ec:	39 c1       	rjmp	.+626    	; 0x1360 <__fp_szero>
    10ee:	f3 c0       	rjmp	.+486    	; 0x12d6 <__fp_nan>

000010f0 <__divsf3x>:
    10f0:	14 d1       	rcall	.+552    	; 0x131a <__fp_split3>
    10f2:	98 f3       	brcs	.-26     	; 0x10da <__divsf3+0x4>

000010f4 <__divsf3_pse>:
    10f4:	99 23       	and	r25, r25
    10f6:	c9 f3       	breq	.-14     	; 0x10ea <__divsf3+0x14>
    10f8:	55 23       	and	r21, r21
    10fa:	b1 f3       	breq	.-20     	; 0x10e8 <__divsf3+0x12>
    10fc:	95 1b       	sub	r25, r21
    10fe:	55 0b       	sbc	r21, r21
    1100:	bb 27       	eor	r27, r27
    1102:	aa 27       	eor	r26, r26
    1104:	62 17       	cp	r22, r18
    1106:	73 07       	cpc	r23, r19
    1108:	84 07       	cpc	r24, r20
    110a:	38 f0       	brcs	.+14     	; 0x111a <__divsf3_pse+0x26>
    110c:	9f 5f       	subi	r25, 0xFF	; 255
    110e:	5f 4f       	sbci	r21, 0xFF	; 255
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	44 1f       	adc	r20, r20
    1116:	aa 1f       	adc	r26, r26
    1118:	a9 f3       	breq	.-22     	; 0x1104 <__divsf3_pse+0x10>
    111a:	33 d0       	rcall	.+102    	; 0x1182 <__divsf3_pse+0x8e>
    111c:	0e 2e       	mov	r0, r30
    111e:	3a f0       	brmi	.+14     	; 0x112e <__divsf3_pse+0x3a>
    1120:	e0 e8       	ldi	r30, 0x80	; 128
    1122:	30 d0       	rcall	.+96     	; 0x1184 <__divsf3_pse+0x90>
    1124:	91 50       	subi	r25, 0x01	; 1
    1126:	50 40       	sbci	r21, 0x00	; 0
    1128:	e6 95       	lsr	r30
    112a:	00 1c       	adc	r0, r0
    112c:	ca f7       	brpl	.-14     	; 0x1120 <__divsf3_pse+0x2c>
    112e:	29 d0       	rcall	.+82     	; 0x1182 <__divsf3_pse+0x8e>
    1130:	fe 2f       	mov	r31, r30
    1132:	27 d0       	rcall	.+78     	; 0x1182 <__divsf3_pse+0x8e>
    1134:	66 0f       	add	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	bb 1f       	adc	r27, r27
    113c:	26 17       	cp	r18, r22
    113e:	37 07       	cpc	r19, r23
    1140:	48 07       	cpc	r20, r24
    1142:	ab 07       	cpc	r26, r27
    1144:	b0 e8       	ldi	r27, 0x80	; 128
    1146:	09 f0       	breq	.+2      	; 0x114a <__divsf3_pse+0x56>
    1148:	bb 0b       	sbc	r27, r27
    114a:	80 2d       	mov	r24, r0
    114c:	bf 01       	movw	r22, r30
    114e:	ff 27       	eor	r31, r31
    1150:	93 58       	subi	r25, 0x83	; 131
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	2a f0       	brmi	.+10     	; 0x1160 <__divsf3_pse+0x6c>
    1156:	9e 3f       	cpi	r25, 0xFE	; 254
    1158:	51 05       	cpc	r21, r1
    115a:	68 f0       	brcs	.+26     	; 0x1176 <__divsf3_pse+0x82>
    115c:	b6 c0       	rjmp	.+364    	; 0x12ca <__fp_inf>
    115e:	00 c1       	rjmp	.+512    	; 0x1360 <__fp_szero>
    1160:	5f 3f       	cpi	r21, 0xFF	; 255
    1162:	ec f3       	brlt	.-6      	; 0x115e <__divsf3_pse+0x6a>
    1164:	98 3e       	cpi	r25, 0xE8	; 232
    1166:	dc f3       	brlt	.-10     	; 0x115e <__divsf3_pse+0x6a>
    1168:	86 95       	lsr	r24
    116a:	77 95       	ror	r23
    116c:	67 95       	ror	r22
    116e:	b7 95       	ror	r27
    1170:	f7 95       	ror	r31
    1172:	9f 5f       	subi	r25, 0xFF	; 255
    1174:	c9 f7       	brne	.-14     	; 0x1168 <__divsf3_pse+0x74>
    1176:	88 0f       	add	r24, r24
    1178:	91 1d       	adc	r25, r1
    117a:	96 95       	lsr	r25
    117c:	87 95       	ror	r24
    117e:	97 f9       	bld	r25, 7
    1180:	08 95       	ret
    1182:	e1 e0       	ldi	r30, 0x01	; 1
    1184:	66 0f       	add	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	88 1f       	adc	r24, r24
    118a:	bb 1f       	adc	r27, r27
    118c:	62 17       	cp	r22, r18
    118e:	73 07       	cpc	r23, r19
    1190:	84 07       	cpc	r24, r20
    1192:	ba 07       	cpc	r27, r26
    1194:	20 f0       	brcs	.+8      	; 0x119e <__divsf3_pse+0xaa>
    1196:	62 1b       	sub	r22, r18
    1198:	73 0b       	sbc	r23, r19
    119a:	84 0b       	sbc	r24, r20
    119c:	ba 0b       	sbc	r27, r26
    119e:	ee 1f       	adc	r30, r30
    11a0:	88 f7       	brcc	.-30     	; 0x1184 <__divsf3_pse+0x90>
    11a2:	e0 95       	com	r30
    11a4:	08 95       	ret

000011a6 <__fixsfsi>:
    11a6:	04 d0       	rcall	.+8      	; 0x11b0 <__fixunssfsi>
    11a8:	68 94       	set
    11aa:	b1 11       	cpse	r27, r1
    11ac:	d9 c0       	rjmp	.+434    	; 0x1360 <__fp_szero>
    11ae:	08 95       	ret

000011b0 <__fixunssfsi>:
    11b0:	bc d0       	rcall	.+376    	; 0x132a <__fp_splitA>
    11b2:	88 f0       	brcs	.+34     	; 0x11d6 <__fixunssfsi+0x26>
    11b4:	9f 57       	subi	r25, 0x7F	; 127
    11b6:	90 f0       	brcs	.+36     	; 0x11dc <__fixunssfsi+0x2c>
    11b8:	b9 2f       	mov	r27, r25
    11ba:	99 27       	eor	r25, r25
    11bc:	b7 51       	subi	r27, 0x17	; 23
    11be:	a0 f0       	brcs	.+40     	; 0x11e8 <__fixunssfsi+0x38>
    11c0:	d1 f0       	breq	.+52     	; 0x11f6 <__fixunssfsi+0x46>
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	1a f0       	brmi	.+6      	; 0x11d2 <__fixunssfsi+0x22>
    11cc:	ba 95       	dec	r27
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <__fixunssfsi+0x12>
    11d0:	12 c0       	rjmp	.+36     	; 0x11f6 <__fixunssfsi+0x46>
    11d2:	b1 30       	cpi	r27, 0x01	; 1
    11d4:	81 f0       	breq	.+32     	; 0x11f6 <__fixunssfsi+0x46>
    11d6:	c3 d0       	rcall	.+390    	; 0x135e <__fp_zero>
    11d8:	b1 e0       	ldi	r27, 0x01	; 1
    11da:	08 95       	ret
    11dc:	c0 c0       	rjmp	.+384    	; 0x135e <__fp_zero>
    11de:	67 2f       	mov	r22, r23
    11e0:	78 2f       	mov	r23, r24
    11e2:	88 27       	eor	r24, r24
    11e4:	b8 5f       	subi	r27, 0xF8	; 248
    11e6:	39 f0       	breq	.+14     	; 0x11f6 <__fixunssfsi+0x46>
    11e8:	b9 3f       	cpi	r27, 0xF9	; 249
    11ea:	cc f3       	brlt	.-14     	; 0x11de <__fixunssfsi+0x2e>
    11ec:	86 95       	lsr	r24
    11ee:	77 95       	ror	r23
    11f0:	67 95       	ror	r22
    11f2:	b3 95       	inc	r27
    11f4:	d9 f7       	brne	.-10     	; 0x11ec <__fixunssfsi+0x3c>
    11f6:	3e f4       	brtc	.+14     	; 0x1206 <__fixunssfsi+0x56>
    11f8:	90 95       	com	r25
    11fa:	80 95       	com	r24
    11fc:	70 95       	com	r23
    11fe:	61 95       	neg	r22
    1200:	7f 4f       	sbci	r23, 0xFF	; 255
    1202:	8f 4f       	sbci	r24, 0xFF	; 255
    1204:	9f 4f       	sbci	r25, 0xFF	; 255
    1206:	08 95       	ret

00001208 <__floatunsisf>:
    1208:	e8 94       	clt
    120a:	09 c0       	rjmp	.+18     	; 0x121e <__floatsisf+0x12>

0000120c <__floatsisf>:
    120c:	97 fb       	bst	r25, 7
    120e:	3e f4       	brtc	.+14     	; 0x121e <__floatsisf+0x12>
    1210:	90 95       	com	r25
    1212:	80 95       	com	r24
    1214:	70 95       	com	r23
    1216:	61 95       	neg	r22
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	8f 4f       	sbci	r24, 0xFF	; 255
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	99 23       	and	r25, r25
    1220:	a9 f0       	breq	.+42     	; 0x124c <__floatsisf+0x40>
    1222:	f9 2f       	mov	r31, r25
    1224:	96 e9       	ldi	r25, 0x96	; 150
    1226:	bb 27       	eor	r27, r27
    1228:	93 95       	inc	r25
    122a:	f6 95       	lsr	r31
    122c:	87 95       	ror	r24
    122e:	77 95       	ror	r23
    1230:	67 95       	ror	r22
    1232:	b7 95       	ror	r27
    1234:	f1 11       	cpse	r31, r1
    1236:	f8 cf       	rjmp	.-16     	; 0x1228 <__floatsisf+0x1c>
    1238:	fa f4       	brpl	.+62     	; 0x1278 <__floatsisf+0x6c>
    123a:	bb 0f       	add	r27, r27
    123c:	11 f4       	brne	.+4      	; 0x1242 <__floatsisf+0x36>
    123e:	60 ff       	sbrs	r22, 0
    1240:	1b c0       	rjmp	.+54     	; 0x1278 <__floatsisf+0x6c>
    1242:	6f 5f       	subi	r22, 0xFF	; 255
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	8f 4f       	sbci	r24, 0xFF	; 255
    1248:	9f 4f       	sbci	r25, 0xFF	; 255
    124a:	16 c0       	rjmp	.+44     	; 0x1278 <__floatsisf+0x6c>
    124c:	88 23       	and	r24, r24
    124e:	11 f0       	breq	.+4      	; 0x1254 <__floatsisf+0x48>
    1250:	96 e9       	ldi	r25, 0x96	; 150
    1252:	11 c0       	rjmp	.+34     	; 0x1276 <__floatsisf+0x6a>
    1254:	77 23       	and	r23, r23
    1256:	21 f0       	breq	.+8      	; 0x1260 <__floatsisf+0x54>
    1258:	9e e8       	ldi	r25, 0x8E	; 142
    125a:	87 2f       	mov	r24, r23
    125c:	76 2f       	mov	r23, r22
    125e:	05 c0       	rjmp	.+10     	; 0x126a <__floatsisf+0x5e>
    1260:	66 23       	and	r22, r22
    1262:	71 f0       	breq	.+28     	; 0x1280 <__floatsisf+0x74>
    1264:	96 e8       	ldi	r25, 0x86	; 134
    1266:	86 2f       	mov	r24, r22
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	2a f0       	brmi	.+10     	; 0x1278 <__floatsisf+0x6c>
    126e:	9a 95       	dec	r25
    1270:	66 0f       	add	r22, r22
    1272:	77 1f       	adc	r23, r23
    1274:	88 1f       	adc	r24, r24
    1276:	da f7       	brpl	.-10     	; 0x126e <__floatsisf+0x62>
    1278:	88 0f       	add	r24, r24
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	97 f9       	bld	r25, 7
    1280:	08 95       	ret

00001282 <__fp_cmp>:
    1282:	99 0f       	add	r25, r25
    1284:	00 08       	sbc	r0, r0
    1286:	55 0f       	add	r21, r21
    1288:	aa 0b       	sbc	r26, r26
    128a:	e0 e8       	ldi	r30, 0x80	; 128
    128c:	fe ef       	ldi	r31, 0xFE	; 254
    128e:	16 16       	cp	r1, r22
    1290:	17 06       	cpc	r1, r23
    1292:	e8 07       	cpc	r30, r24
    1294:	f9 07       	cpc	r31, r25
    1296:	c0 f0       	brcs	.+48     	; 0x12c8 <__fp_cmp+0x46>
    1298:	12 16       	cp	r1, r18
    129a:	13 06       	cpc	r1, r19
    129c:	e4 07       	cpc	r30, r20
    129e:	f5 07       	cpc	r31, r21
    12a0:	98 f0       	brcs	.+38     	; 0x12c8 <__fp_cmp+0x46>
    12a2:	62 1b       	sub	r22, r18
    12a4:	73 0b       	sbc	r23, r19
    12a6:	84 0b       	sbc	r24, r20
    12a8:	95 0b       	sbc	r25, r21
    12aa:	39 f4       	brne	.+14     	; 0x12ba <__fp_cmp+0x38>
    12ac:	0a 26       	eor	r0, r26
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <__fp_cmp+0x46>
    12b0:	23 2b       	or	r18, r19
    12b2:	24 2b       	or	r18, r20
    12b4:	25 2b       	or	r18, r21
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <__fp_cmp+0x3e>
    12b8:	08 95       	ret
    12ba:	0a 26       	eor	r0, r26
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <__fp_cmp+0x3e>
    12be:	a1 40       	sbci	r26, 0x01	; 1
    12c0:	a6 95       	lsr	r26
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	81 1d       	adc	r24, r1
    12c6:	81 1d       	adc	r24, r1
    12c8:	08 95       	ret

000012ca <__fp_inf>:
    12ca:	97 f9       	bld	r25, 7
    12cc:	9f 67       	ori	r25, 0x7F	; 127
    12ce:	80 e8       	ldi	r24, 0x80	; 128
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	08 95       	ret

000012d6 <__fp_nan>:
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	80 ec       	ldi	r24, 0xC0	; 192
    12da:	08 95       	ret

000012dc <__fp_pscA>:
    12dc:	00 24       	eor	r0, r0
    12de:	0a 94       	dec	r0
    12e0:	16 16       	cp	r1, r22
    12e2:	17 06       	cpc	r1, r23
    12e4:	18 06       	cpc	r1, r24
    12e6:	09 06       	cpc	r0, r25
    12e8:	08 95       	ret

000012ea <__fp_pscB>:
    12ea:	00 24       	eor	r0, r0
    12ec:	0a 94       	dec	r0
    12ee:	12 16       	cp	r1, r18
    12f0:	13 06       	cpc	r1, r19
    12f2:	14 06       	cpc	r1, r20
    12f4:	05 06       	cpc	r0, r21
    12f6:	08 95       	ret

000012f8 <__fp_round>:
    12f8:	09 2e       	mov	r0, r25
    12fa:	03 94       	inc	r0
    12fc:	00 0c       	add	r0, r0
    12fe:	11 f4       	brne	.+4      	; 0x1304 <__fp_round+0xc>
    1300:	88 23       	and	r24, r24
    1302:	52 f0       	brmi	.+20     	; 0x1318 <__fp_round+0x20>
    1304:	bb 0f       	add	r27, r27
    1306:	40 f4       	brcc	.+16     	; 0x1318 <__fp_round+0x20>
    1308:	bf 2b       	or	r27, r31
    130a:	11 f4       	brne	.+4      	; 0x1310 <__fp_round+0x18>
    130c:	60 ff       	sbrs	r22, 0
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__fp_round+0x20>
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	08 95       	ret

0000131a <__fp_split3>:
    131a:	57 fd       	sbrc	r21, 7
    131c:	90 58       	subi	r25, 0x80	; 128
    131e:	44 0f       	add	r20, r20
    1320:	55 1f       	adc	r21, r21
    1322:	59 f0       	breq	.+22     	; 0x133a <__fp_splitA+0x10>
    1324:	5f 3f       	cpi	r21, 0xFF	; 255
    1326:	71 f0       	breq	.+28     	; 0x1344 <__fp_splitA+0x1a>
    1328:	47 95       	ror	r20

0000132a <__fp_splitA>:
    132a:	88 0f       	add	r24, r24
    132c:	97 fb       	bst	r25, 7
    132e:	99 1f       	adc	r25, r25
    1330:	61 f0       	breq	.+24     	; 0x134a <__fp_splitA+0x20>
    1332:	9f 3f       	cpi	r25, 0xFF	; 255
    1334:	79 f0       	breq	.+30     	; 0x1354 <__fp_splitA+0x2a>
    1336:	87 95       	ror	r24
    1338:	08 95       	ret
    133a:	12 16       	cp	r1, r18
    133c:	13 06       	cpc	r1, r19
    133e:	14 06       	cpc	r1, r20
    1340:	55 1f       	adc	r21, r21
    1342:	f2 cf       	rjmp	.-28     	; 0x1328 <__fp_split3+0xe>
    1344:	46 95       	lsr	r20
    1346:	f1 df       	rcall	.-30     	; 0x132a <__fp_splitA>
    1348:	08 c0       	rjmp	.+16     	; 0x135a <__fp_splitA+0x30>
    134a:	16 16       	cp	r1, r22
    134c:	17 06       	cpc	r1, r23
    134e:	18 06       	cpc	r1, r24
    1350:	99 1f       	adc	r25, r25
    1352:	f1 cf       	rjmp	.-30     	; 0x1336 <__fp_splitA+0xc>
    1354:	86 95       	lsr	r24
    1356:	71 05       	cpc	r23, r1
    1358:	61 05       	cpc	r22, r1
    135a:	08 94       	sec
    135c:	08 95       	ret

0000135e <__fp_zero>:
    135e:	e8 94       	clt

00001360 <__fp_szero>:
    1360:	bb 27       	eor	r27, r27
    1362:	66 27       	eor	r22, r22
    1364:	77 27       	eor	r23, r23
    1366:	cb 01       	movw	r24, r22
    1368:	97 f9       	bld	r25, 7
    136a:	08 95       	ret

0000136c <__gesf2>:
    136c:	8a df       	rcall	.-236    	; 0x1282 <__fp_cmp>
    136e:	08 f4       	brcc	.+2      	; 0x1372 <__gesf2+0x6>
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	08 95       	ret

00001374 <__mulsf3>:
    1374:	0b d0       	rcall	.+22     	; 0x138c <__mulsf3x>
    1376:	c0 cf       	rjmp	.-128    	; 0x12f8 <__fp_round>
    1378:	b1 df       	rcall	.-158    	; 0x12dc <__fp_pscA>
    137a:	28 f0       	brcs	.+10     	; 0x1386 <__mulsf3+0x12>
    137c:	b6 df       	rcall	.-148    	; 0x12ea <__fp_pscB>
    137e:	18 f0       	brcs	.+6      	; 0x1386 <__mulsf3+0x12>
    1380:	95 23       	and	r25, r21
    1382:	09 f0       	breq	.+2      	; 0x1386 <__mulsf3+0x12>
    1384:	a2 cf       	rjmp	.-188    	; 0x12ca <__fp_inf>
    1386:	a7 cf       	rjmp	.-178    	; 0x12d6 <__fp_nan>
    1388:	11 24       	eor	r1, r1
    138a:	ea cf       	rjmp	.-44     	; 0x1360 <__fp_szero>

0000138c <__mulsf3x>:
    138c:	c6 df       	rcall	.-116    	; 0x131a <__fp_split3>
    138e:	a0 f3       	brcs	.-24     	; 0x1378 <__mulsf3+0x4>

00001390 <__mulsf3_pse>:
    1390:	95 9f       	mul	r25, r21
    1392:	d1 f3       	breq	.-12     	; 0x1388 <__mulsf3+0x14>
    1394:	95 0f       	add	r25, r21
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	55 1f       	adc	r21, r21
    139a:	62 9f       	mul	r22, r18
    139c:	f0 01       	movw	r30, r0
    139e:	72 9f       	mul	r23, r18
    13a0:	bb 27       	eor	r27, r27
    13a2:	f0 0d       	add	r31, r0
    13a4:	b1 1d       	adc	r27, r1
    13a6:	63 9f       	mul	r22, r19
    13a8:	aa 27       	eor	r26, r26
    13aa:	f0 0d       	add	r31, r0
    13ac:	b1 1d       	adc	r27, r1
    13ae:	aa 1f       	adc	r26, r26
    13b0:	64 9f       	mul	r22, r20
    13b2:	66 27       	eor	r22, r22
    13b4:	b0 0d       	add	r27, r0
    13b6:	a1 1d       	adc	r26, r1
    13b8:	66 1f       	adc	r22, r22
    13ba:	82 9f       	mul	r24, r18
    13bc:	22 27       	eor	r18, r18
    13be:	b0 0d       	add	r27, r0
    13c0:	a1 1d       	adc	r26, r1
    13c2:	62 1f       	adc	r22, r18
    13c4:	73 9f       	mul	r23, r19
    13c6:	b0 0d       	add	r27, r0
    13c8:	a1 1d       	adc	r26, r1
    13ca:	62 1f       	adc	r22, r18
    13cc:	83 9f       	mul	r24, r19
    13ce:	a0 0d       	add	r26, r0
    13d0:	61 1d       	adc	r22, r1
    13d2:	22 1f       	adc	r18, r18
    13d4:	74 9f       	mul	r23, r20
    13d6:	33 27       	eor	r19, r19
    13d8:	a0 0d       	add	r26, r0
    13da:	61 1d       	adc	r22, r1
    13dc:	23 1f       	adc	r18, r19
    13de:	84 9f       	mul	r24, r20
    13e0:	60 0d       	add	r22, r0
    13e2:	21 1d       	adc	r18, r1
    13e4:	82 2f       	mov	r24, r18
    13e6:	76 2f       	mov	r23, r22
    13e8:	6a 2f       	mov	r22, r26
    13ea:	11 24       	eor	r1, r1
    13ec:	9f 57       	subi	r25, 0x7F	; 127
    13ee:	50 40       	sbci	r21, 0x00	; 0
    13f0:	8a f0       	brmi	.+34     	; 0x1414 <__mulsf3_pse+0x84>
    13f2:	e1 f0       	breq	.+56     	; 0x142c <__mulsf3_pse+0x9c>
    13f4:	88 23       	and	r24, r24
    13f6:	4a f0       	brmi	.+18     	; 0x140a <__mulsf3_pse+0x7a>
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	bb 1f       	adc	r27, r27
    13fe:	66 1f       	adc	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	91 50       	subi	r25, 0x01	; 1
    1406:	50 40       	sbci	r21, 0x00	; 0
    1408:	a9 f7       	brne	.-22     	; 0x13f4 <__mulsf3_pse+0x64>
    140a:	9e 3f       	cpi	r25, 0xFE	; 254
    140c:	51 05       	cpc	r21, r1
    140e:	70 f0       	brcs	.+28     	; 0x142c <__mulsf3_pse+0x9c>
    1410:	5c cf       	rjmp	.-328    	; 0x12ca <__fp_inf>
    1412:	a6 cf       	rjmp	.-180    	; 0x1360 <__fp_szero>
    1414:	5f 3f       	cpi	r21, 0xFF	; 255
    1416:	ec f3       	brlt	.-6      	; 0x1412 <__mulsf3_pse+0x82>
    1418:	98 3e       	cpi	r25, 0xE8	; 232
    141a:	dc f3       	brlt	.-10     	; 0x1412 <__mulsf3_pse+0x82>
    141c:	86 95       	lsr	r24
    141e:	77 95       	ror	r23
    1420:	67 95       	ror	r22
    1422:	b7 95       	ror	r27
    1424:	f7 95       	ror	r31
    1426:	e7 95       	ror	r30
    1428:	9f 5f       	subi	r25, 0xFF	; 255
    142a:	c1 f7       	brne	.-16     	; 0x141c <__mulsf3_pse+0x8c>
    142c:	fe 2b       	or	r31, r30
    142e:	88 0f       	add	r24, r24
    1430:	91 1d       	adc	r25, r1
    1432:	96 95       	lsr	r25
    1434:	87 95       	ror	r24
    1436:	97 f9       	bld	r25, 7
    1438:	08 95       	ret

0000143a <_exit>:
    143a:	f8 94       	cli

0000143c <__stop_program>:
    143c:	ff cf       	rjmp	.-2      	; 0x143c <__stop_program>
