
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  0000135a  000013ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800156  00800156  00001444  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012c  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a16  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000327  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c9e  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024d  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c4  00000000  00000000  00003369  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  0000392d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    //TODO: запретить прерывание INT1
    //TODO: включить непрерывное преобразование АЦП
    //TODO: 
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
       6:	00 00       	nop
       8:	0b c1       	rjmp	.+534    	; 0x220 <__vector_2>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__vector_9>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	e9 c0       	rjmp	.+466    	; 0x20c <__vector_14>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__vector_21>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e5       	ldi	r30, 0x5A	; 90
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 35       	cpi	r26, 0x56	; 86
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e5       	ldi	r26, 0x56	; 86
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 35       	cpi	r26, 0x5F	; 95
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	77 d3       	rcall	.+1774   	; 0x78a <main>
      9c:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){                                                      //TODO: должен будить процессор в режиме P-save
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	ef 92       	push	r14
      ae:	ff 92       	push	r15
      b0:	0f 93       	push	r16
      b2:	1f 93       	push	r17
      b4:	2f 93       	push	r18
      b6:	3f 93       	push	r19
      b8:	4f 93       	push	r20
      ba:	5f 93       	push	r21
      bc:	6f 93       	push	r22
      be:	7f 93       	push	r23
      c0:	8f 93       	push	r24
      c2:	9f 93       	push	r25
      c4:	af 93       	push	r26
      c6:	bf 93       	push	r27
      c8:	ef 93       	push	r30
      ca:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
      cc:	60 91 79 00 	lds	r22, 0x0079
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	66 0f       	add	r22, r22
      d4:	77 1f       	adc	r23, r23
      d6:	66 0f       	add	r22, r22
      d8:	77 1f       	adc	r23, r23
      da:	88 27       	eor	r24, r24
      dc:	77 fd       	sbrc	r23, 7
      de:	80 95       	com	r24
      e0:	98 2f       	mov	r25, r24
      e2:	0e 94 94 08 	call	0x1128	; 0x1128 <__floatsisf>
      e6:	2c e5       	ldi	r18, 0x5C	; 92
      e8:	3f e8       	ldi	r19, 0x8F	; 143
      ea:	42 e4       	ldi	r20, 0x42	; 66
      ec:	5e e3       	ldi	r21, 0x3E	; 62
      ee:	0e 94 48 09 	call	0x1290	; 0x1290 <__mulsf3>
      f2:	60 93 5b 01 	sts	0x015B, r22
      f6:	70 93 5c 01 	sts	0x015C, r23
      fa:	80 93 5d 01 	sts	0x015D, r24
      fe:	90 93 5e 01 	sts	0x015E, r25
    if (temperatureValue >= (targetTemp + Tolerance))
     102:	60 91 11 01 	lds	r22, 0x0111
     106:	70 91 12 01 	lds	r23, 0x0112
     10a:	80 91 13 01 	lds	r24, 0x0113
     10e:	90 91 14 01 	lds	r25, 0x0114
     112:	20 91 56 01 	lds	r18, 0x0156
     116:	30 91 57 01 	lds	r19, 0x0157
     11a:	40 91 58 01 	lds	r20, 0x0158
     11e:	50 91 59 01 	lds	r21, 0x0159
     122:	e0 90 5b 01 	lds	r14, 0x015B
     126:	f0 90 5c 01 	lds	r15, 0x015C
     12a:	00 91 5d 01 	lds	r16, 0x015D
     12e:	10 91 5e 01 	lds	r17, 0x015E
     132:	f7 d6       	rcall	.+3566   	; 0xf22 <__addsf3>
     134:	a8 01       	movw	r20, r16
     136:	97 01       	movw	r18, r14
     138:	58 d7       	rcall	.+3760   	; 0xfea <__cmpsf2>
     13a:	18 16       	cp	r1, r24
     13c:	94 f0       	brlt	.+36     	; 0x162 <__vector_21+0xc0>
volatile static uint8_t measureRate= 0x80; // поумолчанию - частота замера (F_CPU/1024)/2
uint8_t progFlags= 0b00000100;

inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
     13e:	90 91 10 01 	lds	r25, 0x0110
     142:	89 2f       	mov	r24, r25
     144:	86 95       	lsr	r24
     146:	86 95       	lsr	r24
     148:	86 95       	lsr	r24
     14a:	80 fd       	sbrc	r24, 0
     14c:	2e c0       	rjmp	.+92     	; 0x1aa <__vector_21+0x108>
    {
	    BIT_ON(CONTROL_PORT, LOAD);
     14e:	eb e2       	ldi	r30, 0x2B	; 43
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	80 64       	ori	r24, 0x40	; 64
     156:	80 83       	st	Z, r24
        BIT_ON(progFlags, COOLING);
     158:	89 2f       	mov	r24, r25
     15a:	88 60       	ori	r24, 0x08	; 8
     15c:	80 93 10 01 	sts	0x0110, r24
     160:	24 c0       	rjmp	.+72     	; 0x1aa <__vector_21+0x108>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
     162:	60 91 5b 01 	lds	r22, 0x015B
     166:	70 91 5c 01 	lds	r23, 0x015C
     16a:	80 91 5d 01 	lds	r24, 0x015D
     16e:	90 91 5e 01 	lds	r25, 0x015E
     172:	20 91 11 01 	lds	r18, 0x0111
     176:	30 91 12 01 	lds	r19, 0x0112
     17a:	40 91 13 01 	lds	r20, 0x0113
     17e:	50 91 14 01 	lds	r21, 0x0114
     182:	33 d7       	rcall	.+3686   	; 0xfea <__cmpsf2>
     184:	18 16       	cp	r1, r24
     186:	8c f0       	brlt	.+34     	; 0x1aa <__vector_21+0x108>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
     188:	90 91 10 01 	lds	r25, 0x0110
     18c:	89 2f       	mov	r24, r25
     18e:	86 95       	lsr	r24
     190:	86 95       	lsr	r24
     192:	86 95       	lsr	r24
     194:	80 ff       	sbrs	r24, 0
     196:	09 c0       	rjmp	.+18     	; 0x1aa <__vector_21+0x108>
    {
	    BIT_OFF(CONTROL_PORT, LOAD);
     198:	eb e2       	ldi	r30, 0x2B	; 43
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	8f 7b       	andi	r24, 0xBF	; 191
     1a0:	80 83       	st	Z, r24
        BIT_OFF(progFlags, COOLING);
     1a2:	89 2f       	mov	r24, r25
     1a4:	87 7f       	andi	r24, 0xF7	; 247
     1a6:	80 93 10 01 	sts	0x0110, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	bf 91       	pop	r27
     1b0:	af 91       	pop	r26
     1b2:	9f 91       	pop	r25
     1b4:	8f 91       	pop	r24
     1b6:	7f 91       	pop	r23
     1b8:	6f 91       	pop	r22
     1ba:	5f 91       	pop	r21
     1bc:	4f 91       	pop	r20
     1be:	3f 91       	pop	r19
     1c0:	2f 91       	pop	r18
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	ff 90       	pop	r15
     1c8:	ef 90       	pop	r14
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <__vector_9>:

ISR(TIMER2_OVF_vect){                                               //TODO: должен будить процессор в режиме P-save
     1d4:	1f 92       	push	r1
     1d6:	0f 92       	push	r0
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	0f 92       	push	r0
     1dc:	11 24       	eor	r1, r1
     1de:	8f 93       	push	r24
    runSeconds++;
     1e0:	80 91 5a 01 	lds	r24, 0x015A
     1e4:	8f 5f       	subi	r24, 0xFF	; 255
     1e6:	80 93 5a 01 	sts	0x015A, r24
    if (runSeconds==timeOut)
     1ea:	80 91 5a 01 	lds	r24, 0x015A
     1ee:	8a 30       	cpi	r24, 0x0A	; 10
     1f0:	39 f4       	brne	.+14     	; 0x200 <__vector_9+0x2c>
    {
        runSeconds= 0; // сбрасываем счетчик секунд
     1f2:	10 92 5a 01 	sts	0x015A, r1
        BIT_ON(progFlags, INACTIVE);
     1f6:	80 91 10 01 	lds	r24, 0x0110
     1fa:	80 61       	ori	r24, 0x10	; 16
     1fc:	80 93 10 01 	sts	0x0110, r24
    }
    return;
}
     200:	8f 91       	pop	r24
     202:	0f 90       	pop	r0
     204:	0f be       	out	0x3f, r0	; 63
     206:	0f 90       	pop	r0
     208:	1f 90       	pop	r1
     20a:	18 95       	reti

0000020c <__vector_14>:

ISR(TIMER0_COMPA_vect){                                             //TODO: должен будить процессор в режиме P-save
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
    
    return;
}
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <__vector_2>:

ISR(INT1_vect){                                                     //TODO: должен будить процессор в режиме P-save
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	ef 93       	push	r30
     240:	ff 93       	push	r31
    turnOffSleep();
    BIT_ON(progFlags, LCD_ON);
     242:	80 91 10 01 	lds	r24, 0x0110
     246:	81 60       	ori	r24, 0x01	; 1
     248:	80 93 10 01 	sts	0x0110, r24
    LCD_turnOn();
     24c:	d6 d5       	rcall	.+2988   	; 0xdfa <LCD_turnOn>
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	bf 91       	pop	r27
     254:	af 91       	pop	r26
     256:	9f 91       	pop	r25
     258:	8f 91       	pop	r24
     25a:	7f 91       	pop	r23
     25c:	6f 91       	pop	r22
     25e:	5f 91       	pop	r21
     260:	4f 91       	pop	r20
     262:	3f 91       	pop	r19
     264:	2f 91       	pop	r18
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <LCD_DisplayAll>:
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}

void LCD_DisplayAll()
{   
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
	LCD_Write("TEMP :", 6, 0, 0);
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	66 e0       	ldi	r22, 0x06	; 6
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	08 d5       	rcall	.+2576   	; 0xc94 <LCD_Write>
    LCD_Write((char)temperatureValue, 1, 0, 8);
     284:	60 91 5b 01 	lds	r22, 0x015B
     288:	70 91 5c 01 	lds	r23, 0x015C
     28c:	80 91 5d 01 	lds	r24, 0x015D
     290:	90 91 5e 01 	lds	r25, 0x015E
     294:	1b d7       	rcall	.+3638   	; 0x10cc <__fixunssfsi>
     296:	dc 01       	movw	r26, r24
     298:	cb 01       	movw	r24, r22
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	28 e0       	ldi	r18, 0x08	; 8
     2a2:	f8 d4       	rcall	.+2544   	; 0xc94 <LCD_Write>
    if (BIT_READ(progFlags, COOLING))
     2a4:	80 91 10 01 	lds	r24, 0x0110
     2a8:	86 95       	lsr	r24
     2aa:	86 95       	lsr	r24
     2ac:	86 95       	lsr	r24
     2ae:	80 ff       	sbrs	r24, 0
     2b0:	2d c0       	rjmp	.+90     	; 0x30c <LCD_DisplayAll+0x9c>
    {
        LCD_Write("COOLING ", 8, 1, 0);
     2b2:	87 e0       	ldi	r24, 0x07	; 7
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	68 e0       	ldi	r22, 0x08	; 8
     2b8:	41 e0       	ldi	r20, 0x01	; 1
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	eb d4       	rcall	.+2518   	; 0xc94 <LCD_Write>
        LCD_Write((char)((temperatureValue - targetTemp)/Tolerance)*100, 1, 1, 8);
     2be:	60 91 5b 01 	lds	r22, 0x015B
     2c2:	70 91 5c 01 	lds	r23, 0x015C
     2c6:	80 91 5d 01 	lds	r24, 0x015D
     2ca:	90 91 5e 01 	lds	r25, 0x015E
     2ce:	20 91 11 01 	lds	r18, 0x0111
     2d2:	30 91 12 01 	lds	r19, 0x0112
     2d6:	40 91 13 01 	lds	r20, 0x0113
     2da:	50 91 14 01 	lds	r21, 0x0114
     2de:	e0 90 56 01 	lds	r14, 0x0156
     2e2:	f0 90 57 01 	lds	r15, 0x0157
     2e6:	00 91 58 01 	lds	r16, 0x0158
     2ea:	10 91 59 01 	lds	r17, 0x0159
     2ee:	18 d6       	rcall	.+3120   	; 0xf20 <__subsf3>
     2f0:	a8 01       	movw	r20, r16
     2f2:	97 01       	movw	r18, r14
     2f4:	7e d6       	rcall	.+3324   	; 0xff2 <__divsf3>
     2f6:	ea d6       	rcall	.+3540   	; 0x10cc <__fixunssfsi>
     2f8:	9b 01       	movw	r18, r22
     2fa:	ac 01       	movw	r20, r24
     2fc:	84 e6       	ldi	r24, 0x64	; 100
     2fe:	28 9f       	mul	r18, r24
     300:	c0 01       	movw	r24, r0
     302:	11 24       	eor	r1, r1
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	41 e0       	ldi	r20, 0x01	; 1
     308:	28 e0       	ldi	r18, 0x08	; 8
     30a:	c4 d4       	rcall	.+2440   	; 0xc94 <LCD_Write>
    }
}
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <menuRun>:
}

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()
{
     316:	2f 92       	push	r2
     318:	3f 92       	push	r3
     31a:	4f 92       	push	r4
     31c:	5f 92       	push	r5
     31e:	6f 92       	push	r6
     320:	7f 92       	push	r7
     322:	8f 92       	push	r8
     324:	9f 92       	push	r9
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	df 93       	push	r29
     338:	cf 93       	push	r28
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	c9 54       	subi	r28, 0x49	; 73
     340:	d0 40       	sbci	r29, 0x00	; 0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
     34c:	de 01       	movw	r26, r28
     34e:	11 96       	adiw	r26, 0x01	; 1
     350:	e6 e1       	ldi	r30, 0x16	; 22
     352:	f1 e0       	ldi	r31, 0x01	; 1
     354:	80 e4       	ldi	r24, 0x40	; 64
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	e1 f7       	brne	.-8      	; 0x356 <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
     35e:	60 91 11 01 	lds	r22, 0x0111
     362:	70 91 12 01 	lds	r23, 0x0112
     366:	80 91 13 01 	lds	r24, 0x0113
     36a:	90 91 14 01 	lds	r25, 0x0114
     36e:	c0 90 56 01 	lds	r12, 0x0156
     372:	d0 90 57 01 	lds	r13, 0x0157
     376:	e0 90 58 01 	lds	r14, 0x0158
     37a:	f0 90 59 01 	lds	r15, 0x0159
     37e:	b0 90 15 01 	lds	r11, 0x0115
     382:	00 91 10 01 	lds	r16, 0x0110
     386:	06 95       	lsr	r16
     388:	06 95       	lsr	r16
     38a:	10 e0       	ldi	r17, 0x00	; 0
     38c:	01 70       	andi	r16, 0x01	; 1
     38e:	10 70       	andi	r17, 0x00	; 0
     390:	98 d6       	rcall	.+3376   	; 0x10c2 <__fixsfsi>
     392:	fe 01       	movw	r30, r28
     394:	ef 5b       	subi	r30, 0xBF	; 191
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	71 83       	std	Z+1, r23	; 0x01
     39a:	60 83       	st	Z, r22
     39c:	c7 01       	movw	r24, r14
     39e:	b6 01       	movw	r22, r12
     3a0:	90 d6       	rcall	.+3360   	; 0x10c2 <__fixsfsi>
     3a2:	fe 01       	movw	r30, r28
     3a4:	ed 5b       	subi	r30, 0xBD	; 189
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	71 83       	std	Z+1, r23	; 0x01
     3aa:	60 83       	st	Z, r22
     3ac:	fe 01       	movw	r30, r28
     3ae:	eb 5b       	subi	r30, 0xBB	; 187
     3b0:	ff 4f       	sbci	r31, 0xFF	; 255
     3b2:	b0 82       	st	Z, r11
     3b4:	11 82       	std	Z+1, r1	; 0x01
     3b6:	fe 01       	movw	r30, r28
     3b8:	e9 5b       	subi	r30, 0xB9	; 185
     3ba:	ff 4f       	sbci	r31, 0xFF	; 255
     3bc:	11 83       	std	Z+1, r17	; 0x01
     3be:	00 83       	st	Z, r16
    LCD_Clear();
     3c0:	fc d2       	rcall	.+1528   	; 0x9ba <LCD_Clear>
     3c2:	cc 24       	eor	r12, r12
     3c4:	dd 24       	eor	r13, r13
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     3c6:	0f 2e       	mov	r0, r31
     3c8:	fb e2       	ldi	r31, 0x2B	; 43
     3ca:	af 2e       	mov	r10, r31
     3cc:	bb 24       	eor	r11, r11
     3ce:	f0 2d       	mov	r31, r0
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
     3d0:	0f 2e       	mov	r0, r31
     3d2:	f1 e4       	ldi	r31, 0x41	; 65
     3d4:	4f 2e       	mov	r4, r31
     3d6:	55 24       	eor	r5, r5
     3d8:	f0 2d       	mov	r31, r0
     3da:	4c 0e       	add	r4, r28
     3dc:	5d 1e       	adc	r5, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	68 2e       	mov	r6, r24
     3e4:	2a 96       	adiw	r28, 0x0a	; 10
     3e6:	9f af       	std	Y+63, r25	; 0x3f
     3e8:	2a 97       	sbiw	r28, 0x0a	; 10
     3ea:	a7 c1       	rjmp	.+846    	; 0x73a <__stack+0x23b>
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
     3ec:	f5 01       	movw	r30, r10
     3ee:	80 81       	ld	r24, Z
     3f0:	83 fd       	sbrc	r24, 3
     3f2:	52 c1       	rjmp	.+676    	; 0x698 <__stack+0x199>
            BIT_OFF(progFlags, INACTIVE);
     3f4:	0f 2e       	mov	r0, r31
     3f6:	ff ee       	ldi	r31, 0xEF	; 239
     3f8:	7f 2e       	mov	r7, r31
     3fa:	f0 2d       	mov	r31, r0
     3fc:	79 22       	and	r7, r25
     3fe:	70 92 10 01 	sts	0x0110, r7
            int value= values[pos];
     402:	c6 01       	movw	r24, r12
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	f2 01       	movw	r30, r4
     40a:	e8 0f       	add	r30, r24
     40c:	f9 1f       	adc	r31, r25
     40e:	20 80       	ld	r2, Z
     410:	31 80       	ldd	r3, Z+1	; 0x01
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     412:	4f 01       	movw	r8, r30
     414:	3b c1       	rjmp	.+630    	; 0x68c <__stack+0x18d>
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     416:	f5 01       	movw	r30, r10
     418:	80 81       	ld	r24, Z
     41a:	85 fd       	sbrc	r24, 5
     41c:	8a c0       	rjmp	.+276    	; 0x532 <__stack+0x33>
                {
                    BIT_OFF(progFlags, INACTIVE);
     41e:	ff ee       	ldi	r31, 0xEF	; 239
     420:	7f 22       	and	r7, r31
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     422:	f4 01       	movw	r30, r8
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	9c 01       	movw	r18, r24
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	cf 16       	cp	r12, r31
     432:	d1 04       	cpc	r13, r1
     434:	c1 f1       	breq	.+112    	; 0x4a6 <menuRun+0x190>
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	c8 16       	cp	r12, r24
     43a:	d1 04       	cpc	r13, r1
     43c:	34 f4       	brge	.+12     	; 0x44a <menuRun+0x134>
     43e:	e1 e0       	ldi	r30, 0x01	; 1
     440:	ce 16       	cp	r12, r30
     442:	d1 04       	cpc	r13, r1
     444:	09 f0       	breq	.+2      	; 0x448 <menuRun+0x132>
     446:	6c c0       	rjmp	.+216    	; 0x520 <__stack+0x21>
     448:	0b c0       	rjmp	.+22     	; 0x460 <menuRun+0x14a>
     44a:	f3 e0       	ldi	r31, 0x03	; 3
     44c:	cf 16       	cp	r12, r31
     44e:	d1 04       	cpc	r13, r1
     450:	09 f4       	brne	.+2      	; 0x454 <menuRun+0x13e>
     452:	49 c0       	rjmp	.+146    	; 0x4e6 <menuRun+0x1d0>
     454:	84 e0       	ldi	r24, 0x04	; 4
     456:	c8 16       	cp	r12, r24
     458:	d1 04       	cpc	r13, r1
     45a:	09 f0       	breq	.+2      	; 0x45e <menuRun+0x148>
     45c:	61 c0       	rjmp	.+194    	; 0x520 <__stack+0x21>
     45e:	4d c0       	rjmp	.+154    	; 0x4fa <menuRun+0x1e4>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     460:	b9 01       	movw	r22, r18
     462:	88 27       	eor	r24, r24
     464:	77 fd       	sbrc	r23, 7
     466:	80 95       	com	r24
     468:	98 2f       	mov	r25, r24
     46a:	5e d6       	rcall	.+3260   	; 0x1128 <__floatsisf>
     46c:	7b 01       	movw	r14, r22
     46e:	8c 01       	movw	r16, r24
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	40 e7       	ldi	r20, 0x70	; 112
     476:	51 e4       	ldi	r21, 0x41	; 65
     478:	b8 d5       	rcall	.+2928   	; 0xfea <__cmpsf2>
     47a:	88 23       	and	r24, r24
     47c:	1c f4       	brge	.+6      	; 0x484 <menuRun+0x16e>
     47e:	8f e0       	ldi	r24, 0x0F	; 15
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	54 c0       	rjmp	.+168    	; 0x52c <__stack+0x2d>
     484:	c8 01       	movw	r24, r16
     486:	b7 01       	movw	r22, r14
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 ea       	ldi	r20, 0xA0	; 160
     48e:	51 e4       	ldi	r21, 0x41	; 65
     490:	fb d6       	rcall	.+3574   	; 0x1288 <__gesf2>
     492:	18 16       	cp	r1, r24
     494:	1c f4       	brge	.+6      	; 0x49c <menuRun+0x186>
     496:	84 e1       	ldi	r24, 0x14	; 20
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	48 c0       	rjmp	.+144    	; 0x52c <__stack+0x2d>
     49c:	c8 01       	movw	r24, r16
     49e:	b7 01       	movw	r22, r14
     4a0:	10 d6       	rcall	.+3104   	; 0x10c2 <__fixsfsi>
     4a2:	cb 01       	movw	r24, r22
     4a4:	43 c0       	rjmp	.+134    	; 0x52c <__stack+0x2d>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     4a6:	b9 01       	movw	r22, r18
     4a8:	88 27       	eor	r24, r24
     4aa:	77 fd       	sbrc	r23, 7
     4ac:	80 95       	com	r24
     4ae:	98 2f       	mov	r25, r24
     4b0:	3b d6       	rcall	.+3190   	; 0x1128 <__floatsisf>
     4b2:	7b 01       	movw	r14, r22
     4b4:	8c 01       	movw	r16, r24
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	95 d5       	rcall	.+2858   	; 0xfea <__cmpsf2>
     4c0:	88 23       	and	r24, r24
     4c2:	84 f1       	brlt	.+96     	; 0x524 <__stack+0x25>
     4c4:	c8 01       	movw	r24, r16
     4c6:	b7 01       	movw	r22, r14
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 e8       	ldi	r20, 0x80	; 128
     4ce:	5f e3       	ldi	r21, 0x3F	; 63
     4d0:	db d6       	rcall	.+3510   	; 0x1288 <__gesf2>
     4d2:	18 16       	cp	r1, r24
     4d4:	1c f4       	brge	.+6      	; 0x4dc <menuRun+0x1c6>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	28 c0       	rjmp	.+80     	; 0x52c <__stack+0x2d>
     4dc:	c8 01       	movw	r24, r16
     4de:	b7 01       	movw	r22, r14
     4e0:	f0 d5       	rcall	.+3040   	; 0x10c2 <__fixsfsi>
     4e2:	cb 01       	movw	r24, r22
     4e4:	23 c0       	rjmp	.+70     	; 0x52c <__stack+0x2d>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     4e6:	33 23       	and	r19, r19
     4e8:	1c f4       	brge	.+6      	; 0x4f0 <menuRun+0x1da>
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	1e c0       	rjmp	.+60     	; 0x52c <__stack+0x2d>
     4f0:	e4 e0       	ldi	r30, 0x04	; 4
     4f2:	20 30       	cpi	r18, 0x00	; 0
     4f4:	3e 07       	cpc	r19, r30
     4f6:	a4 f0       	brlt	.+40     	; 0x520 <__stack+0x21>
     4f8:	15 c0       	rjmp	.+42     	; 0x524 <__stack+0x25>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     4fa:	c9 01       	movw	r24, r18
     4fc:	52 2f       	mov	r21, r18
     4fe:	49 2f       	mov	r20, r25
     500:	12 16       	cp	r1, r18
     502:	13 06       	cpc	r1, r19
     504:	24 f4       	brge	.+8      	; 0x50e <__stack+0xf>
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	58 2f       	mov	r21, r24
     50c:	49 2f       	mov	r20, r25
     50e:	85 2f       	mov	r24, r21
     510:	94 2f       	mov	r25, r20
     512:	99 23       	and	r25, r25
     514:	5c f4       	brge	.+22     	; 0x52c <__stack+0x2d>
     516:	86 2d       	mov	r24, r6
     518:	2a 96       	adiw	r28, 0x0a	; 10
     51a:	9f ad       	ldd	r25, Y+63	; 0x3f
     51c:	2a 97       	sbiw	r28, 0x0a	; 10
     51e:	06 c0       	rjmp	.+12     	; 0x52c <__stack+0x2d>
     520:	c9 01       	movw	r24, r18
     522:	04 c0       	rjmp	.+8      	; 0x52c <__stack+0x2d>
     524:	86 2d       	mov	r24, r6
     526:	2a 96       	adiw	r28, 0x0a	; 10
     528:	9f ad       	ldd	r25, Y+63	; 0x3f
     52a:	2a 97       	sbiw	r28, 0x0a	; 10
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     52c:	f4 01       	movw	r30, r8
     52e:	91 83       	std	Z+1, r25	; 0x01
     530:	80 83       	st	Z, r24
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     532:	f5 01       	movw	r30, r10
     534:	80 81       	ld	r24, Z
     536:	84 fd       	sbrc	r24, 4
     538:	8a c0       	rjmp	.+276    	; 0x64e <__stack+0x14f>
                {
                    BIT_OFF(progFlags, INACTIVE);
     53a:	ff ee       	ldi	r31, 0xEF	; 239
     53c:	7f 22       	and	r7, r31
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     53e:	f4 01       	movw	r30, r8
     540:	80 81       	ld	r24, Z
     542:	91 81       	ldd	r25, Z+1	; 0x01
     544:	9c 01       	movw	r18, r24
     546:	21 50       	subi	r18, 0x01	; 1
     548:	30 40       	sbci	r19, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	cf 16       	cp	r12, r31
     54e:	d1 04       	cpc	r13, r1
     550:	c1 f1       	breq	.+112    	; 0x5c2 <__stack+0xc3>
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	c8 16       	cp	r12, r24
     556:	d1 04       	cpc	r13, r1
     558:	34 f4       	brge	.+12     	; 0x566 <__stack+0x67>
     55a:	e1 e0       	ldi	r30, 0x01	; 1
     55c:	ce 16       	cp	r12, r30
     55e:	d1 04       	cpc	r13, r1
     560:	09 f0       	breq	.+2      	; 0x564 <__stack+0x65>
     562:	6c c0       	rjmp	.+216    	; 0x63c <__stack+0x13d>
     564:	0b c0       	rjmp	.+22     	; 0x57c <__stack+0x7d>
     566:	f3 e0       	ldi	r31, 0x03	; 3
     568:	cf 16       	cp	r12, r31
     56a:	d1 04       	cpc	r13, r1
     56c:	09 f4       	brne	.+2      	; 0x570 <__stack+0x71>
     56e:	49 c0       	rjmp	.+146    	; 0x602 <__stack+0x103>
     570:	84 e0       	ldi	r24, 0x04	; 4
     572:	c8 16       	cp	r12, r24
     574:	d1 04       	cpc	r13, r1
     576:	09 f0       	breq	.+2      	; 0x57a <__stack+0x7b>
     578:	61 c0       	rjmp	.+194    	; 0x63c <__stack+0x13d>
     57a:	4d c0       	rjmp	.+154    	; 0x616 <__stack+0x117>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     57c:	b9 01       	movw	r22, r18
     57e:	88 27       	eor	r24, r24
     580:	77 fd       	sbrc	r23, 7
     582:	80 95       	com	r24
     584:	98 2f       	mov	r25, r24
     586:	d0 d5       	rcall	.+2976   	; 0x1128 <__floatsisf>
     588:	7b 01       	movw	r14, r22
     58a:	8c 01       	movw	r16, r24
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e7       	ldi	r20, 0x70	; 112
     592:	51 e4       	ldi	r21, 0x41	; 65
     594:	2a d5       	rcall	.+2644   	; 0xfea <__cmpsf2>
     596:	88 23       	and	r24, r24
     598:	1c f4       	brge	.+6      	; 0x5a0 <__stack+0xa1>
     59a:	8f e0       	ldi	r24, 0x0F	; 15
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	54 c0       	rjmp	.+168    	; 0x648 <__stack+0x149>
     5a0:	c8 01       	movw	r24, r16
     5a2:	b7 01       	movw	r22, r14
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 ea       	ldi	r20, 0xA0	; 160
     5aa:	51 e4       	ldi	r21, 0x41	; 65
     5ac:	6d d6       	rcall	.+3290   	; 0x1288 <__gesf2>
     5ae:	18 16       	cp	r1, r24
     5b0:	1c f4       	brge	.+6      	; 0x5b8 <__stack+0xb9>
     5b2:	84 e1       	ldi	r24, 0x14	; 20
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	48 c0       	rjmp	.+144    	; 0x648 <__stack+0x149>
     5b8:	c8 01       	movw	r24, r16
     5ba:	b7 01       	movw	r22, r14
     5bc:	82 d5       	rcall	.+2820   	; 0x10c2 <__fixsfsi>
     5be:	cb 01       	movw	r24, r22
     5c0:	43 c0       	rjmp	.+134    	; 0x648 <__stack+0x149>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     5c2:	b9 01       	movw	r22, r18
     5c4:	88 27       	eor	r24, r24
     5c6:	77 fd       	sbrc	r23, 7
     5c8:	80 95       	com	r24
     5ca:	98 2f       	mov	r25, r24
     5cc:	ad d5       	rcall	.+2906   	; 0x1128 <__floatsisf>
     5ce:	7b 01       	movw	r14, r22
     5d0:	8c 01       	movw	r16, r24
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	07 d5       	rcall	.+2574   	; 0xfea <__cmpsf2>
     5dc:	88 23       	and	r24, r24
     5de:	84 f1       	brlt	.+96     	; 0x640 <__stack+0x141>
     5e0:	c8 01       	movw	r24, r16
     5e2:	b7 01       	movw	r22, r14
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e8       	ldi	r20, 0x80	; 128
     5ea:	5f e3       	ldi	r21, 0x3F	; 63
     5ec:	4d d6       	rcall	.+3226   	; 0x1288 <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	1c f4       	brge	.+6      	; 0x5f8 <__stack+0xf9>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	28 c0       	rjmp	.+80     	; 0x648 <__stack+0x149>
     5f8:	c8 01       	movw	r24, r16
     5fa:	b7 01       	movw	r22, r14
     5fc:	62 d5       	rcall	.+2756   	; 0x10c2 <__fixsfsi>
     5fe:	cb 01       	movw	r24, r22
     600:	23 c0       	rjmp	.+70     	; 0x648 <__stack+0x149>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     602:	33 23       	and	r19, r19
     604:	1c f4       	brge	.+6      	; 0x60c <__stack+0x10d>
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	1e c0       	rjmp	.+60     	; 0x648 <__stack+0x149>
     60c:	e4 e0       	ldi	r30, 0x04	; 4
     60e:	20 30       	cpi	r18, 0x00	; 0
     610:	3e 07       	cpc	r19, r30
     612:	a4 f0       	brlt	.+40     	; 0x63c <__stack+0x13d>
     614:	15 c0       	rjmp	.+42     	; 0x640 <__stack+0x141>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     616:	c9 01       	movw	r24, r18
     618:	52 2f       	mov	r21, r18
     61a:	49 2f       	mov	r20, r25
     61c:	12 16       	cp	r1, r18
     61e:	13 06       	cpc	r1, r19
     620:	24 f4       	brge	.+8      	; 0x62a <__stack+0x12b>
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	58 2f       	mov	r21, r24
     628:	49 2f       	mov	r20, r25
     62a:	85 2f       	mov	r24, r21
     62c:	94 2f       	mov	r25, r20
     62e:	99 23       	and	r25, r25
     630:	5c f4       	brge	.+22     	; 0x648 <__stack+0x149>
     632:	86 2d       	mov	r24, r6
     634:	2a 96       	adiw	r28, 0x0a	; 10
     636:	9f ad       	ldd	r25, Y+63	; 0x3f
     638:	2a 97       	sbiw	r28, 0x0a	; 10
     63a:	06 c0       	rjmp	.+12     	; 0x648 <__stack+0x149>
     63c:	c9 01       	movw	r24, r18
     63e:	04 c0       	rjmp	.+8      	; 0x648 <__stack+0x149>
     640:	86 2d       	mov	r24, r6
     642:	2a 96       	adiw	r28, 0x0a	; 10
     644:	9f ad       	ldd	r25, Y+63	; 0x3f
     646:	2a 97       	sbiw	r28, 0x0a	; 10
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     648:	f4 01       	movw	r30, r8
     64a:	91 83       	std	Z+1, r25	; 0x01
     64c:	80 83       	st	Z, r24

                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
     64e:	f5 01       	movw	r30, r10
     650:	80 81       	ld	r24, Z
     652:	83 fd       	sbrc	r24, 3
     654:	1b c0       	rjmp	.+54     	; 0x68c <__stack+0x18d>
     656:	70 92 10 01 	sts	0x0110, r7
                    if(pos!=3){
     65a:	f3 e0       	ldi	r31, 0x03	; 3
     65c:	cf 16       	cp	r12, r31
     65e:	d1 04       	cpc	r13, r1
     660:	49 f0       	breq	.+18     	; 0x674 <__stack+0x175>
                        values[pos]= (uint8_t)value;
     662:	c6 01       	movw	r24, r12
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	f2 01       	movw	r30, r4
     66a:	e8 0f       	add	r30, r24
     66c:	f9 1f       	adc	r31, r25
     66e:	20 82       	st	Z, r2
     670:	11 82       	std	Z+1, r1	; 0x01
     672:	12 c0       	rjmp	.+36     	; 0x698 <__stack+0x199>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
     674:	23 28       	or	r2, r3
     676:	29 f0       	breq	.+10     	; 0x682 <__stack+0x183>
     678:	87 2d       	mov	r24, r7
     67a:	84 60       	ori	r24, 0x04	; 4
     67c:	80 93 10 01 	sts	0x0110, r24
     680:	0b c0       	rjmp	.+22     	; 0x698 <__stack+0x199>
     682:	87 2d       	mov	r24, r7
     684:	8b 7f       	andi	r24, 0xFB	; 251
     686:	80 93 10 01 	sts	0x0110, r24
     68a:	06 c0       	rjmp	.+12     	; 0x698 <__stack+0x199>
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     68c:	f5 01       	movw	r30, r10
     68e:	80 81       	ld	r24, Z
     690:	82 ff       	sbrs	r24, 2
     692:	c1 ce       	rjmp	.-638    	; 0x416 <menuRun+0x100>
     694:	70 92 10 01 	sts	0x0110, r7
                        break;
                    }          
                }                  
            }
        }
        LCD_Write(menu[pos],16,0,0);
     698:	c6 01       	movw	r24, r12
     69a:	82 95       	swap	r24
     69c:	92 95       	swap	r25
     69e:	90 7f       	andi	r25, 0xF0	; 240
     6a0:	98 27       	eor	r25, r24
     6a2:	80 7f       	andi	r24, 0xF0	; 240
     6a4:	98 27       	eor	r25, r24
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	2c 0f       	add	r18, r28
     6ac:	3d 1f       	adc	r19, r29
     6ae:	82 0f       	add	r24, r18
     6b0:	93 1f       	adc	r25, r19
     6b2:	60 e1       	ldi	r22, 0x10	; 16
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	ed d2       	rcall	.+1498   	; 0xc94 <LCD_Write>
        LCD_Write(values[pos],1,1,0);
     6ba:	c6 01       	movw	r24, r12
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	f2 01       	movw	r30, r4
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	80 81       	ld	r24, Z
     6c8:	91 81       	ldd	r25, Z+1	; 0x01
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	e1 d2       	rcall	.+1474   	; 0xc94 <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     6d2:	f5 01       	movw	r30, r10
     6d4:	80 81       	ld	r24, Z
     6d6:	85 fd       	sbrc	r24, 5
     6d8:	16 c0       	rjmp	.+44     	; 0x706 <__stack+0x207>
        {
            BIT_OFF(progFlags, INACTIVE);
     6da:	80 91 10 01 	lds	r24, 0x0110
     6de:	8f 7e       	andi	r24, 0xEF	; 239
     6e0:	80 93 10 01 	sts	0x0110, r24
            pos++;
     6e4:	08 94       	sec
     6e6:	c1 1c       	adc	r12, r1
     6e8:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     6ea:	dd 20       	and	r13, r13
     6ec:	34 f4       	brge	.+12     	; 0x6fa <__stack+0x1fb>
     6ee:	0f 2e       	mov	r0, r31
     6f0:	f3 e0       	ldi	r31, 0x03	; 3
     6f2:	cf 2e       	mov	r12, r31
     6f4:	dd 24       	eor	r13, r13
     6f6:	f0 2d       	mov	r31, r0
     6f8:	06 c0       	rjmp	.+12     	; 0x706 <__stack+0x207>
     6fa:	f4 e0       	ldi	r31, 0x04	; 4
     6fc:	cf 16       	cp	r12, r31
     6fe:	d1 04       	cpc	r13, r1
     700:	14 f0       	brlt	.+4      	; 0x706 <__stack+0x207>
     702:	cc 24       	eor	r12, r12
     704:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     706:	f5 01       	movw	r30, r10
     708:	80 81       	ld	r24, Z
     70a:	84 fd       	sbrc	r24, 4
     70c:	16 c0       	rjmp	.+44     	; 0x73a <__stack+0x23b>
        {
            BIT_OFF(progFlags, INACTIVE);
     70e:	80 91 10 01 	lds	r24, 0x0110
     712:	8f 7e       	andi	r24, 0xEF	; 239
     714:	80 93 10 01 	sts	0x0110, r24
            pos--;
     718:	08 94       	sec
     71a:	c1 08       	sbc	r12, r1
     71c:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     71e:	dd 20       	and	r13, r13
     720:	34 f4       	brge	.+12     	; 0x72e <__stack+0x22f>
     722:	0f 2e       	mov	r0, r31
     724:	f3 e0       	ldi	r31, 0x03	; 3
     726:	cf 2e       	mov	r12, r31
     728:	dd 24       	eor	r13, r13
     72a:	f0 2d       	mov	r31, r0
     72c:	06 c0       	rjmp	.+12     	; 0x73a <__stack+0x23b>
     72e:	f4 e0       	ldi	r31, 0x04	; 4
     730:	cf 16       	cp	r12, r31
     732:	d1 04       	cpc	r13, r1
     734:	14 f0       	brlt	.+4      	; 0x73a <__stack+0x23b>
     736:	cc 24       	eor	r12, r12
     738:	dd 24       	eor	r13, r13
{
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     73a:	90 91 10 01 	lds	r25, 0x0110
     73e:	94 fd       	sbrc	r25, 4
     740:	55 ce       	rjmp	.-854    	; 0x3ec <menuRun+0xd6>
     742:	f5 01       	movw	r30, r10
     744:	80 81       	ld	r24, Z
     746:	82 ff       	sbrs	r24, 2
     748:	51 ce       	rjmp	.-862    	; 0x3ec <menuRun+0xd6>
            pos--;
            pos= CIRCLE(pos, 0, 3);
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
     74a:	89 2f       	mov	r24, r25
     74c:	8d 7e       	andi	r24, 0xED	; 237
     74e:	80 93 10 01 	sts	0x0110, r24
    }
}

inline void menuStop()
{
    LCD_Clear();
     752:	33 d1       	rcall	.+614    	; 0x9ba <LCD_Clear>
    LCD_DisplayAll();
     754:	8d dd       	rcall	.-1254   	; 0x270 <LCD_DisplayAll>
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
     756:	c7 5b       	subi	r28, 0xB7	; 183
     758:	df 4f       	sbci	r29, 0xFF	; 255
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	cf 91       	pop	r28
     766:	df 91       	pop	r29
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	bf 90       	pop	r11
     776:	af 90       	pop	r10
     778:	9f 90       	pop	r9
     77a:	8f 90       	pop	r8
     77c:	7f 90       	pop	r7
     77e:	6f 90       	pop	r6
     780:	5f 90       	pop	r5
     782:	4f 90       	pop	r4
     784:	3f 90       	pop	r3
     786:	2f 90       	pop	r2
     788:	08 95       	ret

0000078a <main>:

int main(void)
{   
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
     792:	87 e0       	ldi	r24, 0x07	; 7
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	90 93 c5 00 	sts	0x00C5, r25
     79a:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
     79e:	e2 ec       	ldi	r30, 0xC2	; 194
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	8f 7d       	andi	r24, 0xDF	; 223
     7a6:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
     7a8:	80 81       	ld	r24, Z
     7aa:	8f 7e       	andi	r24, 0xEF	; 239
     7ac:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
     7ae:	a1 ec       	ldi	r26, 0xC1	; 193
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	8c 91       	ld	r24, X
     7b4:	8b 7f       	andi	r24, 0xFB	; 251
     7b6:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
     7b8:	80 81       	ld	r24, Z
     7ba:	84 60       	ori	r24, 0x04	; 4
     7bc:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
     7be:	80 81       	ld	r24, Z
     7c0:	82 60       	ori	r24, 0x02	; 2
     7c2:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
     7c4:	80 81       	ld	r24, Z
     7c6:	87 7f       	andi	r24, 0xF7	; 247
     7c8:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
     7ca:	8c 91       	ld	r24, X
     7cc:	88 60       	ori	r24, 0x08	; 8
     7ce:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 1);  // прием разрешен
     7d0:	8c 91       	ld	r24, X
     7d2:	80 61       	ori	r24, 0x10	; 16
     7d4:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 1); // прерывание приема разрешено
     7d6:	8c 91       	ld	r24, X
     7d8:	80 68       	ori	r24, 0x80	; 128
     7da:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
     7dc:	8c 91       	ld	r24, X
     7de:	80 64       	ori	r24, 0x40	; 64
     7e0:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
     7e2:	8c 91       	ld	r24, X
     7e4:	8f 7d       	andi	r24, 0xDF	; 223
     7e6:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
     7e8:	e7 e2       	ldi	r30, 0x27	; 39
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD); // управление подсветкой экрана и нагрузкой на выход
     7f2:	ea e2       	ldi	r30, 0x2A	; 42
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 ec       	ldi	r24, 0xC0	; 192
     7f8:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
     7fa:	80 81       	ld	r24, Z
     7fc:	83 7c       	andi	r24, 0xC3	; 195
     7fe:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
     800:	8c e3       	ldi	r24, 0x3C	; 60
     802:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
     804:	ec e7       	ldi	r30, 0x7C	; 124
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	80 64       	ori	r24, 0x40	; 64
     80c:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
     80e:	ab e7       	ldi	r26, 0x7B	; 123
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	8c 91       	ld	r24, X
     814:	83 60       	ori	r24, 0x03	; 3
     816:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
     818:	80 81       	ld	r24, Z
     81a:	80 62       	ori	r24, 0x20	; 32
     81c:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
     81e:	0a e7       	ldi	r16, 0x7A	; 122
     820:	10 e0       	ldi	r17, 0x00	; 0
     822:	f8 01       	movw	r30, r16
     824:	80 81       	ld	r24, Z
     826:	80 62       	ori	r24, 0x20	; 32
     828:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
     82a:	80 81       	ld	r24, Z
     82c:	88 60       	ori	r24, 0x08	; 8
     82e:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
     830:	80 81       	ld	r24, Z
     832:	80 68       	ori	r24, 0x80	; 128
     834:	80 83       	st	Z, r24
    DIDR0 |= 1 << ADC0D; // отключить буффер цифрового входа ADC0D
     836:	ee e7       	ldi	r30, 0x7E	; 126
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	81 60       	ori	r24, 0x01	; 1
     83e:	80 83       	st	Z, r24
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
     840:	e4 e4       	ldi	r30, 0x44	; 68
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	82 60       	ori	r24, 0x02	; 2
     848:	80 83       	st	Z, r24
    OCR0A= measureRate;
     84a:	80 91 15 01 	lds	r24, 0x0115
     84e:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
     850:	e5 e4       	ldi	r30, 0x45	; 69
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	84 60       	ori	r24, 0x04	; 4
     858:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
     85a:	ee e6       	ldi	r30, 0x6E	; 110
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	82 60       	ori	r24, 0x02	; 2
     862:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
     86a:	e6 eb       	ldi	r30, 0xB6	; 182
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	80 62       	ori	r24, 0x20	; 32
     872:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
     874:	e0 e7       	ldi	r30, 0x70	; 112
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	81 60       	ori	r24, 0x01	; 1
     87c:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCD_Init();
     87e:	d6 d0       	rcall	.+428    	; 0xa2c <LCD_Init>

    BIT_WRITE(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
     880:	e4 e6       	ldi	r30, 0x64	; 100
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	80 68       	ori	r24, 0x80	; 128
     888:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
     88a:	80 81       	ld	r24, Z
     88c:	88 60       	ori	r24, 0x08	; 8
     88e:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
     890:	80 81       	ld	r24, Z
     892:	84 60       	ori	r24, 0x04	; 4
     894:	80 83       	st	Z, r24
    BIT_WRITE(ACSR, ACD, 1); // отключить аналоговый компаратор
     896:	e0 e5       	ldi	r30, 0x50	; 80
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	80 68       	ori	r24, 0x80	; 128
     89e:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
     8a0:	f8 01       	movw	r30, r16
     8a2:	80 81       	ld	r24, Z
     8a4:	80 64       	ori	r24, 0x40	; 64
     8a6:	80 83       	st	Z, r24

    sei();
     8a8:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
     8aa:	c9 e2       	ldi	r28, 0x29	; 41
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
     8ae:	88 81       	ld	r24, Y
     8b0:	84 ff       	sbrs	r24, 4
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <main+0x136>
     8b4:	88 81       	ld	r24, Y
     8b6:	85 ff       	sbrs	r24, 5
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <main+0x136>
     8ba:	88 81       	ld	r24, Y
     8bc:	82 fd       	sbrc	r24, 2
     8be:	07 c0       	rjmp	.+14     	; 0x8ce <main+0x144>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_ON(progFlags, LCD_ON);
     8c0:	80 91 10 01 	lds	r24, 0x0110
     8c4:	8f 7e       	andi	r24, 0xEF	; 239
     8c6:	81 60       	ori	r24, 0x01	; 1
     8c8:	80 93 10 01 	sts	0x0110, r24
            LCD_turnOn();
     8cc:	96 d2       	rcall	.+1324   	; 0xdfa <LCD_turnOn>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
     8ce:	88 81       	ld	r24, Y
     8d0:	83 fd       	sbrc	r24, 3
     8d2:	11 c0       	rjmp	.+34     	; 0x8f6 <main+0x16c>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
     8d4:	80 91 10 01 	lds	r24, 0x0110
     8d8:	8f 7e       	andi	r24, 0xEF	; 239
     8da:	80 93 10 01 	sts	0x0110, r24
            if (!BIT_READ(progFlags, LCD_ON))
     8de:	80 fd       	sbrc	r24, 0
     8e0:	04 c0       	rjmp	.+8      	; 0x8ea <main+0x160>
            {
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
     8e2:	81 60       	ori	r24, 0x01	; 1
     8e4:	80 93 10 01 	sts	0x0110, r24
                LCD_turnOn();
     8e8:	88 d2       	rcall	.+1296   	; 0xdfa <LCD_turnOn>
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
     8ea:	80 91 10 01 	lds	r24, 0x0110
     8ee:	82 60       	ori	r24, 0x02	; 2
     8f0:	80 93 10 01 	sts	0x0110, r24
            menuRun(); // обработка команд меню
     8f4:	10 dd       	rcall	.-1504   	; 0x316 <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE))
     8f6:	80 91 10 01 	lds	r24, 0x0110
     8fa:	84 ff       	sbrs	r24, 4
     8fc:	06 c0       	rjmp	.+12     	; 0x90a <main+0x180>
        {
            if(BIT_READ(progFlags, LCD_ON))
     8fe:	80 ff       	sbrs	r24, 0
     900:	d6 cf       	rjmp	.-84     	; 0x8ae <main+0x124>
            {
                BIT_OFF(progFlags, LCD_ON);
     902:	8e 7f       	andi	r24, 0xFE	; 254
     904:	80 93 10 01 	sts	0x0110, r24
                LCD_turnOff();
     908:	c1 d2       	rcall	.+1410   	; 0xe8c <LCD_turnOff>
            }
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
     90a:	80 91 10 01 	lds	r24, 0x0110
     90e:	80 ff       	sbrs	r24, 0
     910:	ce cf       	rjmp	.-100    	; 0x8ae <main+0x124>
        {
            LCD_DisplayAll();
     912:	ae dc       	rcall	.-1700   	; 0x270 <LCD_DisplayAll>
     914:	cc cf       	rjmp	.-104    	; 0x8ae <main+0x124>

00000916 <LCD_Busy>:
 #include "LCD.h"

int LCD_Busy()
{
    uint8_t input= 0;
    control;
     916:	e8 e2       	ldi	r30, 0x28	; 40
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	8d 7f       	andi	r24, 0xFD	; 253
     91e:	80 83       	st	Z, r24
    readlcd;
     920:	80 81       	ld	r24, Z
     922:	84 60       	ori	r24, 0x04	; 4
     924:	80 83       	st	Z, r24
    LCD_DREG&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3); // переключить пины на выход
     926:	a4 e2       	ldi	r26, 0x24	; 36
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	8c 91       	ld	r24, X
     92c:	80 7f       	andi	r24, 0xF0	; 240
     92e:	8c 93       	st	X, r24
    LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3); // очистить выход
     930:	a5 e2       	ldi	r26, 0x25	; 37
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	8c 91       	ld	r24, X
     936:	80 7f       	andi	r24, 0xF0	; 240
     938:	8c 93       	st	X, r24
    enable;
     93a:	80 81       	ld	r24, Z
     93c:	88 60       	ori	r24, 0x08	; 8
     93e:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     940:	2d e0       	ldi	r18, 0x0D	; 13
     942:	82 2f       	mov	r24, r18
     944:	8a 95       	dec	r24
     946:	f1 f7       	brne	.-4      	; 0x944 <LCD_Busy+0x2e>
    _delay_us(40);
    disable;
     948:	80 81       	ld	r24, Z
     94a:	87 7f       	andi	r24, 0xF7	; 247
     94c:	80 83       	st	Z, r24
    input= LCD_IN << 4;
     94e:	a3 e2       	ldi	r26, 0x23	; 35
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	9c 91       	ld	r25, X
     954:	92 95       	swap	r25
     956:	90 7f       	andi	r25, 0xF0	; 240
    enable;
     958:	80 81       	ld	r24, Z
     95a:	88 60       	ori	r24, 0x08	; 8
     95c:	80 83       	st	Z, r24
     95e:	2a 95       	dec	r18
     960:	f1 f7       	brne	.-4      	; 0x95e <LCD_Busy+0x48>
    _delay_us(40);
    disable;
     962:	80 81       	ld	r24, Z
     964:	87 7f       	andi	r24, 0xF7	; 247
     966:	80 83       	st	Z, r24
    input|= LCD_IN;
     968:	8c 91       	ld	r24, X
    if(BIT_READ(input, 7))
     96a:	98 2b       	or	r25, r24
     96c:	94 f4       	brge	.+36     	; 0x992 <LCD_Busy+0x7c>
    {
        LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     96e:	e5 e2       	ldi	r30, 0x25	; 37
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	80 7f       	andi	r24, 0xF0	; 240
     976:	80 83       	st	Z, r24
        LCD_DREG|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
     978:	e4 e2       	ldi	r30, 0x24	; 36
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	8f 60       	ori	r24, 0x0F	; 15
     980:	80 83       	st	Z, r24
        writelcd;
     982:	e8 e2       	ldi	r30, 0x28	; 40
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	8b 7f       	andi	r24, 0xFB	; 251
     98a:	80 83       	st	Z, r24
     98c:	21 e0       	ldi	r18, 0x01	; 1
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	11 c0       	rjmp	.+34     	; 0x9b4 <LCD_Busy+0x9e>
        return 1;
    }
    LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     992:	e5 e2       	ldi	r30, 0x25	; 37
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	80 7f       	andi	r24, 0xF0	; 240
     99a:	80 83       	st	Z, r24
    LCD_DREG|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
     99c:	e4 e2       	ldi	r30, 0x24	; 36
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	8f 60       	ori	r24, 0x0F	; 15
     9a4:	80 83       	st	Z, r24
    writelcd;
     9a6:	e8 e2       	ldi	r30, 0x28	; 40
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	8b 7f       	andi	r24, 0xFB	; 251
     9ae:	80 83       	st	Z, r24
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
}
     9b4:	82 2f       	mov	r24, r18
     9b6:	93 2f       	mov	r25, r19
     9b8:	08 95       	ret

000009ba <LCD_Clear>:

 void LCD_Clear()
 {
    while(LCD_Busy());
     9ba:	ad df       	rcall	.-166    	; 0x916 <LCD_Busy>
     9bc:	89 2b       	or	r24, r25
     9be:	e9 f7       	brne	.-6      	; 0x9ba <LCD_Clear>
    control;
     9c0:	a8 e2       	ldi	r26, 0x28	; 40
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	8c 91       	ld	r24, X
     9c6:	8d 7f       	andi	r24, 0xFD	; 253
     9c8:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     9ca:	e5 e2       	ldi	r30, 0x25	; 37
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	87 7f       	andi	r24, 0xF7	; 247
     9d2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     9d4:	80 81       	ld	r24, Z
     9d6:	8b 7f       	andi	r24, 0xFB	; 251
     9d8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     9da:	80 81       	ld	r24, Z
     9dc:	8d 7f       	andi	r24, 0xFD	; 253
     9de:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     9e0:	80 81       	ld	r24, Z
     9e2:	8e 7f       	andi	r24, 0xFE	; 254
     9e4:	80 83       	st	Z, r24
    enable;
     9e6:	8c 91       	ld	r24, X
     9e8:	88 60       	ori	r24, 0x08	; 8
     9ea:	8c 93       	st	X, r24
     9ec:	9d e0       	ldi	r25, 0x0D	; 13
     9ee:	89 2f       	mov	r24, r25
     9f0:	8a 95       	dec	r24
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <LCD_Clear+0x36>
    _delay_us(40);
    disable;
     9f4:	8c 91       	ld	r24, X
     9f6:	87 7f       	andi	r24, 0xF7	; 247
     9f8:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     9fa:	80 81       	ld	r24, Z
     9fc:	87 7f       	andi	r24, 0xF7	; 247
     9fe:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     a00:	80 81       	ld	r24, Z
     a02:	8b 7f       	andi	r24, 0xFB	; 251
     a04:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     a06:	80 81       	ld	r24, Z
     a08:	8d 7f       	andi	r24, 0xFD	; 253
     a0a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 1);
     a0c:	80 81       	ld	r24, Z
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	80 83       	st	Z, r24
    enable;
     a12:	8c 91       	ld	r24, X
     a14:	88 60       	ori	r24, 0x08	; 8
     a16:	8c 93       	st	X, r24
     a18:	9a 95       	dec	r25
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <LCD_Clear+0x5e>
    _delay_us(40);
    disable;
     a1c:	8c 91       	ld	r24, X
     a1e:	87 7f       	andi	r24, 0xF7	; 247
     a20:	8c 93       	st	X, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a22:	84 ef       	ldi	r24, 0xF4	; 244
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <LCD_Clear+0x6c>
    _delay_ms(2);
 }
     a2a:	08 95       	ret

00000a2c <LCD_Init>:
     a2c:	86 ea       	ldi	r24, 0xA6	; 166
     a2e:	9e e0       	ldi	r25, 0x0E	; 14
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <LCD_Init+0x4>

 void LCD_Init()
 {
    _delay_ms(15);
    LCD_CREG= (1 << LCD_EN)|(1 << LCD_RS)|(1 << LCD_RW); // управляющие на выход
     a34:	8e e0       	ldi	r24, 0x0E	; 14
     a36:	87 b9       	out	0x07, r24	; 7
    while(LCD_Busy());
     a38:	6e df       	rcall	.-292    	; 0x916 <LCD_Busy>
     a3a:	89 2b       	or	r24, r25
     a3c:	e9 f7       	brne	.-6      	; 0xa38 <LCD_Init+0xc>
    control; // шина 4 бита, 2 строки, символ 5x8 точек
     a3e:	a8 e2       	ldi	r26, 0x28	; 40
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	8c 91       	ld	r24, X
     a44:	8d 7f       	andi	r24, 0xFD	; 253
     a46:	8c 93       	st	X, r24
    //enable;
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     a48:	e5 e2       	ldi	r30, 0x25	; 37
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	87 7f       	andi	r24, 0xF7	; 247
     a50:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     a52:	80 81       	ld	r24, Z
     a54:	8b 7f       	andi	r24, 0xFB	; 251
     a56:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     a58:	80 81       	ld	r24, Z
     a5a:	82 60       	ori	r24, 0x02	; 2
     a5c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a5e:	80 81       	ld	r24, Z
     a60:	8e 7f       	andi	r24, 0xFE	; 254
     a62:	80 83       	st	Z, r24
    enable;
     a64:	8c 91       	ld	r24, X
     a66:	88 60       	ori	r24, 0x08	; 8
     a68:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a6a:	8d e0       	ldi	r24, 0x0D	; 13
     a6c:	8a 95       	dec	r24
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <LCD_Init+0x40>
    _delay_us(40);
    disable;
     a70:	8c 91       	ld	r24, X
     a72:	87 7f       	andi	r24, 0xF7	; 247
     a74:	8c 93       	st	X, r24
    while(LCD_Busy());
     a76:	4f df       	rcall	.-354    	; 0x916 <LCD_Busy>
     a78:	89 2b       	or	r24, r25
     a7a:	e9 f7       	brne	.-6      	; 0xa76 <LCD_Init+0x4a>
    control;
     a7c:	a8 e2       	ldi	r26, 0x28	; 40
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	8c 91       	ld	r24, X
     a82:	8d 7f       	andi	r24, 0xFD	; 253
     a84:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     a86:	e5 e2       	ldi	r30, 0x25	; 37
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	88 60       	ori	r24, 0x08	; 8
     a8e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     a90:	80 81       	ld	r24, Z
     a92:	8b 7f       	andi	r24, 0xFB	; 251
     a94:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     a96:	80 81       	ld	r24, Z
     a98:	8d 7f       	andi	r24, 0xFD	; 253
     a9a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a9c:	80 81       	ld	r24, Z
     a9e:	8e 7f       	andi	r24, 0xFE	; 254
     aa0:	80 83       	st	Z, r24
    enable;
     aa2:	8c 91       	ld	r24, X
     aa4:	88 60       	ori	r24, 0x08	; 8
     aa6:	8c 93       	st	X, r24
     aa8:	8d e0       	ldi	r24, 0x0D	; 13
     aaa:	8a 95       	dec	r24
     aac:	f1 f7       	brne	.-4      	; 0xaaa <LCD_Init+0x7e>
    _delay_us(40);
    disable;
     aae:	8c 91       	ld	r24, X
     ab0:	87 7f       	andi	r24, 0xF7	; 247
     ab2:	8c 93       	st	X, r24
    while(LCD_Busy());
     ab4:	30 df       	rcall	.-416    	; 0x916 <LCD_Busy>
     ab6:	89 2b       	or	r24, r25
     ab8:	e9 f7       	brne	.-6      	; 0xab4 <LCD_Init+0x88>
    //enable; // инкремент счетчика, сдвига экрана нет
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     aba:	e5 e2       	ldi	r30, 0x25	; 37
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	87 7f       	andi	r24, 0xF7	; 247
     ac2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     ac4:	80 81       	ld	r24, Z
     ac6:	8b 7f       	andi	r24, 0xFB	; 251
     ac8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     aca:	80 81       	ld	r24, Z
     acc:	8d 7f       	andi	r24, 0xFD	; 253
     ace:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     ad0:	80 81       	ld	r24, Z
     ad2:	8e 7f       	andi	r24, 0xFE	; 254
     ad4:	80 83       	st	Z, r24
    enable;
     ad6:	e8 e2       	ldi	r30, 0x28	; 40
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	88 60       	ori	r24, 0x08	; 8
     ade:	80 83       	st	Z, r24
     ae0:	8d e0       	ldi	r24, 0x0D	; 13
     ae2:	8a 95       	dec	r24
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <LCD_Init+0xb6>
    _delay_us(40);
    disable;
     ae6:	80 81       	ld	r24, Z
     ae8:	87 7f       	andi	r24, 0xF7	; 247
     aea:	80 83       	st	Z, r24
    while(LCD_Busy());
     aec:	14 df       	rcall	.-472    	; 0x916 <LCD_Busy>
     aee:	89 2b       	or	r24, r25
     af0:	e9 f7       	brne	.-6      	; 0xaec <LCD_Init+0xc0>
    control;
     af2:	a8 e2       	ldi	r26, 0x28	; 40
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	8c 91       	ld	r24, X
     af8:	8d 7f       	andi	r24, 0xFD	; 253
     afa:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     afc:	e5 e2       	ldi	r30, 0x25	; 37
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	87 7f       	andi	r24, 0xF7	; 247
     b04:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 1);
     b06:	80 81       	ld	r24, Z
     b08:	84 60       	ori	r24, 0x04	; 4
     b0a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     b0c:	80 81       	ld	r24, Z
     b0e:	82 60       	ori	r24, 0x02	; 2
     b10:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     b12:	80 81       	ld	r24, Z
     b14:	8e 7f       	andi	r24, 0xFE	; 254
     b16:	80 83       	st	Z, r24
    enable;
     b18:	8c 91       	ld	r24, X
     b1a:	88 60       	ori	r24, 0x08	; 8
     b1c:	8c 93       	st	X, r24
     b1e:	9d e0       	ldi	r25, 0x0D	; 13
     b20:	89 2f       	mov	r24, r25
     b22:	8a 95       	dec	r24
     b24:	f1 f7       	brne	.-4      	; 0xb22 <LCD_Init+0xf6>
    _delay_us(40);
    disable;
     b26:	8c 91       	ld	r24, X
     b28:	87 7f       	andi	r24, 0xF7	; 247
     b2a:	8c 93       	st	X, r24
     b2c:	9a 95       	dec	r25
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <LCD_Init+0x100>
    _delay_us(40);
    LCD_Clear();
 }
     b30:	44 cf       	rjmp	.-376    	; 0x9ba <LCD_Clear>

00000b32 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
     b32:	1f 93       	push	r17
    uint8_t addr= (row * LCD_LENGTH + col); // конвертация номера строки и столбца в адрес
     b34:	82 95       	swap	r24
     b36:	80 7f       	andi	r24, 0xF0	; 240
     b38:	18 2f       	mov	r17, r24
     b3a:	16 0f       	add	r17, r22
    while(LCD_Busy());
     b3c:	ec de       	rcall	.-552    	; 0x916 <LCD_Busy>
     b3e:	89 2b       	or	r24, r25
     b40:	e9 f7       	brne	.-6      	; 0xb3c <LCD_SetCursor+0xa>
    control; 
     b42:	e8 e2       	ldi	r30, 0x28	; 40
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8d 7f       	andi	r24, 0xFD	; 253
     b4a:	80 83       	st	Z, r24
    //enable;                                           
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     b4c:	e5 e2       	ldi	r30, 0x25	; 37
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	88 60       	ori	r24, 0x08	; 8
     b54:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, (addr >> 6)&0x01);
     b56:	81 2f       	mov	r24, r17
     b58:	82 95       	swap	r24
     b5a:	86 95       	lsr	r24
     b5c:	86 95       	lsr	r24
     b5e:	83 70       	andi	r24, 0x03	; 3
     b60:	80 ff       	sbrs	r24, 0
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <LCD_SetCursor+0x3c>
     b64:	80 81       	ld	r24, Z
     b66:	84 60       	ori	r24, 0x04	; 4
     b68:	80 83       	st	Z, r24
     b6a:	e0 81       	ld	r30, Z
     b6c:	06 c0       	rjmp	.+12     	; 0xb7a <LCD_SetCursor+0x48>
     b6e:	e5 e2       	ldi	r30, 0x25	; 37
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8b 7f       	andi	r24, 0xFB	; 251
     b76:	80 83       	st	Z, r24
     b78:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D1, (addr >> 5)&0x01);
     b7a:	81 2f       	mov	r24, r17
     b7c:	82 95       	swap	r24
     b7e:	86 95       	lsr	r24
     b80:	87 70       	andi	r24, 0x07	; 7
     b82:	80 ff       	sbrs	r24, 0
     b84:	07 c0       	rjmp	.+14     	; 0xb94 <LCD_SetCursor+0x62>
     b86:	e5 e2       	ldi	r30, 0x25	; 37
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	80 83       	st	Z, r24
     b90:	e0 81       	ld	r30, Z
     b92:	06 c0       	rjmp	.+12     	; 0xba0 <LCD_SetCursor+0x6e>
     b94:	e5 e2       	ldi	r30, 0x25	; 37
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	8d 7f       	andi	r24, 0xFD	; 253
     b9c:	80 83       	st	Z, r24
     b9e:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D0, (addr >> 4)&0x01);
     ba0:	81 2f       	mov	r24, r17
     ba2:	82 95       	swap	r24
     ba4:	8f 70       	andi	r24, 0x0F	; 15
     ba6:	80 ff       	sbrs	r24, 0
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <LCD_SetCursor+0x86>
     baa:	e5 e2       	ldi	r30, 0x25	; 37
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	80 83       	st	Z, r24
     bb4:	e0 81       	ld	r30, Z
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <LCD_SetCursor+0x92>
     bb8:	e5 e2       	ldi	r30, 0x25	; 37
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8e 7f       	andi	r24, 0xFE	; 254
     bc0:	80 83       	st	Z, r24
     bc2:	e0 81       	ld	r30, Z
    enable;
     bc4:	e8 e2       	ldi	r30, 0x28	; 40
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	88 60       	ori	r24, 0x08	; 8
     bcc:	80 83       	st	Z, r24
     bce:	8d e0       	ldi	r24, 0x0D	; 13
     bd0:	8a 95       	dec	r24
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <LCD_SetCursor+0x9e>
    _delay_us(40);
    disable;
     bd4:	80 81       	ld	r24, Z
     bd6:	87 7f       	andi	r24, 0xF7	; 247
     bd8:	80 83       	st	Z, r24
    while(LCD_Busy());
     bda:	9d de       	rcall	.-710    	; 0x916 <LCD_Busy>
     bdc:	89 2b       	or	r24, r25
     bde:	e9 f7       	brne	.-6      	; 0xbda <LCD_SetCursor+0xa8>
    control;
     be0:	e8 e2       	ldi	r30, 0x28	; 40
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8d 7f       	andi	r24, 0xFD	; 253
     be8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, (addr >> 3)&0x01);
     bea:	81 2f       	mov	r24, r17
     bec:	86 95       	lsr	r24
     bee:	86 95       	lsr	r24
     bf0:	86 95       	lsr	r24
     bf2:	80 ff       	sbrs	r24, 0
     bf4:	07 c0       	rjmp	.+14     	; 0xc04 <LCD_SetCursor+0xd2>
     bf6:	e5 e2       	ldi	r30, 0x25	; 37
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	80 83       	st	Z, r24
     c00:	e0 81       	ld	r30, Z
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <LCD_SetCursor+0xde>
     c04:	e5 e2       	ldi	r30, 0x25	; 37
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	87 7f       	andi	r24, 0xF7	; 247
     c0c:	80 83       	st	Z, r24
     c0e:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D2, (addr >> 2)&0x01);
     c10:	81 2f       	mov	r24, r17
     c12:	86 95       	lsr	r24
     c14:	86 95       	lsr	r24
     c16:	80 ff       	sbrs	r24, 0
     c18:	07 c0       	rjmp	.+14     	; 0xc28 <LCD_SetCursor+0xf6>
     c1a:	e5 e2       	ldi	r30, 0x25	; 37
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	84 60       	ori	r24, 0x04	; 4
     c22:	80 83       	st	Z, r24
     c24:	e0 81       	ld	r30, Z
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <LCD_SetCursor+0x102>
     c28:	e5 e2       	ldi	r30, 0x25	; 37
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	8b 7f       	andi	r24, 0xFB	; 251
     c30:	80 83       	st	Z, r24
     c32:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D1, (addr >> 1)&0x01);
     c34:	81 2f       	mov	r24, r17
     c36:	86 95       	lsr	r24
     c38:	80 ff       	sbrs	r24, 0
     c3a:	07 c0       	rjmp	.+14     	; 0xc4a <LCD_SetCursor+0x118>
     c3c:	e5 e2       	ldi	r30, 0x25	; 37
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	82 60       	ori	r24, 0x02	; 2
     c44:	80 83       	st	Z, r24
     c46:	e0 81       	ld	r30, Z
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <LCD_SetCursor+0x124>
     c4a:	e5 e2       	ldi	r30, 0x25	; 37
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8d 7f       	andi	r24, 0xFD	; 253
     c52:	80 83       	st	Z, r24
     c54:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D0, addr&0x01);
     c56:	10 ff       	sbrs	r17, 0
     c58:	07 c0       	rjmp	.+14     	; 0xc68 <LCD_SetCursor+0x136>
     c5a:	e5 e2       	ldi	r30, 0x25	; 37
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	80 83       	st	Z, r24
     c64:	e0 81       	ld	r30, Z
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <LCD_SetCursor+0x142>
     c68:	e5 e2       	ldi	r30, 0x25	; 37
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	80 83       	st	Z, r24
     c72:	e0 81       	ld	r30, Z
    enable;
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	80 83       	st	Z, r24
     c7e:	9d e0       	ldi	r25, 0x0D	; 13
     c80:	89 2f       	mov	r24, r25
     c82:	8a 95       	dec	r24
     c84:	f1 f7       	brne	.-4      	; 0xc82 <LCD_SetCursor+0x150>
    _delay_us(40);
    disable;
     c86:	80 81       	ld	r24, Z
     c88:	87 7f       	andi	r24, 0xF7	; 247
     c8a:	80 83       	st	Z, r24
     c8c:	9a 95       	dec	r25
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <LCD_SetCursor+0x15a>
    _delay_us(40);
}
     c90:	1f 91       	pop	r17
     c92:	08 95       	ret

00000c94 <LCD_Write>:

void LCD_Write(char * bytes, uint8_t sz, uint8_t posY, uint8_t posX )
{
     c94:	bf 92       	push	r11
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	7c 01       	movw	r14, r24
     ca8:	16 2f       	mov	r17, r22
     caa:	84 2f       	mov	r24, r20
    LCD_SetCursor(posY, posX);
     cac:	62 2f       	mov	r22, r18
     cae:	41 df       	rcall	.-382    	; 0xb32 <LCD_SetCursor>
    
    for (int i = sz; i > 0; i--)
     cb0:	c1 2e       	mov	r12, r17
     cb2:	dd 24       	eor	r13, r13
     cb4:	1c 14       	cp	r1, r12
     cb6:	1d 04       	cpc	r1, r13
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <LCD_Write+0x28>
     cba:	95 c0       	rjmp	.+298    	; 0xde6 <LCD_Write+0x152>
    {
        while(LCD_Busy());
        cli();
        data;
     cbc:	08 e2       	ldi	r16, 0x28	; 40
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	0f 2e       	mov	r0, r31
     cc2:	fd e0       	ldi	r31, 0x0D	; 13
     cc4:	bf 2e       	mov	r11, r31
     cc6:	f0 2d       	mov	r31, r0
        while(LCD_Busy());
        control;
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 3)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 2)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 1)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D0, *bytes&0x01);
     cc8:	c5 e2       	ldi	r28, 0x25	; 37
     cca:	d0 e0       	ldi	r29, 0x00	; 0
{
    LCD_SetCursor(posY, posX);
    
    for (int i = sz; i > 0; i--)
    {
        while(LCD_Busy());
     ccc:	24 de       	rcall	.-952    	; 0x916 <LCD_Busy>
     cce:	89 2b       	or	r24, r25
     cd0:	e9 f7       	brne	.-6      	; 0xccc <LCD_Write+0x38>
        cli();
     cd2:	f8 94       	cli
        data;
     cd4:	f8 01       	movw	r30, r16
     cd6:	80 81       	ld	r24, Z
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	80 83       	st	Z, r24
        //enable;
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 7)&0x01);
     cdc:	f7 01       	movw	r30, r14
     cde:	90 81       	ld	r25, Z
     ce0:	99 23       	and	r25, r25
     ce2:	2c f4       	brge	.+10     	; 0xcee <LCD_Write+0x5a>
     ce4:	88 81       	ld	r24, Y
     ce6:	88 60       	ori	r24, 0x08	; 8
     ce8:	88 83       	st	Y, r24
     cea:	88 81       	ld	r24, Y
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <LCD_Write+0x62>
     cee:	88 81       	ld	r24, Y
     cf0:	87 7f       	andi	r24, 0xF7	; 247
     cf2:	88 83       	st	Y, r24
     cf4:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 6)&0x01);
     cf6:	96 ff       	sbrs	r25, 6
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <LCD_Write+0x70>
     cfa:	88 81       	ld	r24, Y
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	88 83       	st	Y, r24
     d00:	88 81       	ld	r24, Y
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <LCD_Write+0x78>
     d04:	88 81       	ld	r24, Y
     d06:	8b 7f       	andi	r24, 0xFB	; 251
     d08:	88 83       	st	Y, r24
     d0a:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 5)&0x01);
     d0c:	95 ff       	sbrs	r25, 5
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <LCD_Write+0x86>
     d10:	88 81       	ld	r24, Y
     d12:	82 60       	ori	r24, 0x02	; 2
     d14:	88 83       	st	Y, r24
     d16:	88 81       	ld	r24, Y
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <LCD_Write+0x8e>
     d1a:	88 81       	ld	r24, Y
     d1c:	8d 7f       	andi	r24, 0xFD	; 253
     d1e:	88 83       	st	Y, r24
     d20:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D0, (*bytes >> 4)&0x01);
     d22:	94 ff       	sbrs	r25, 4
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <LCD_Write+0x9c>
     d26:	88 81       	ld	r24, Y
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	88 83       	st	Y, r24
     d2c:	88 81       	ld	r24, Y
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <LCD_Write+0xa4>
     d30:	88 81       	ld	r24, Y
     d32:	8e 7f       	andi	r24, 0xFE	; 254
     d34:	88 83       	st	Y, r24
     d36:	88 81       	ld	r24, Y
        enable;
     d38:	f8 01       	movw	r30, r16
     d3a:	80 81       	ld	r24, Z
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	80 83       	st	Z, r24
     d40:	8b 2d       	mov	r24, r11
     d42:	8a 95       	dec	r24
     d44:	f1 f7       	brne	.-4      	; 0xd42 <LCD_Write+0xae>
        _delay_us(40);
        disable;
     d46:	80 81       	ld	r24, Z
     d48:	87 7f       	andi	r24, 0xF7	; 247
     d4a:	80 83       	st	Z, r24
        while(LCD_Busy());
     d4c:	e4 dd       	rcall	.-1080   	; 0x916 <LCD_Busy>
     d4e:	89 2b       	or	r24, r25
     d50:	e9 f7       	brne	.-6      	; 0xd4c <LCD_Write+0xb8>
        control;
     d52:	f8 01       	movw	r30, r16
     d54:	80 81       	ld	r24, Z
     d56:	8d 7f       	andi	r24, 0xFD	; 253
     d58:	80 83       	st	Z, r24
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 3)&0x01);
     d5a:	f7 01       	movw	r30, r14
     d5c:	90 81       	ld	r25, Z
     d5e:	93 ff       	sbrs	r25, 3
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <LCD_Write+0xd8>
     d62:	88 81       	ld	r24, Y
     d64:	88 60       	ori	r24, 0x08	; 8
     d66:	88 83       	st	Y, r24
     d68:	88 81       	ld	r24, Y
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <LCD_Write+0xe0>
     d6c:	88 81       	ld	r24, Y
     d6e:	87 7f       	andi	r24, 0xF7	; 247
     d70:	88 83       	st	Y, r24
     d72:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 2)&0x01);
     d74:	92 ff       	sbrs	r25, 2
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <LCD_Write+0xee>
     d78:	88 81       	ld	r24, Y
     d7a:	84 60       	ori	r24, 0x04	; 4
     d7c:	88 83       	st	Y, r24
     d7e:	88 81       	ld	r24, Y
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <LCD_Write+0xf6>
     d82:	88 81       	ld	r24, Y
     d84:	8b 7f       	andi	r24, 0xFB	; 251
     d86:	88 83       	st	Y, r24
     d88:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 1)&0x01);
     d8a:	91 ff       	sbrs	r25, 1
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <LCD_Write+0x104>
     d8e:	88 81       	ld	r24, Y
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	88 83       	st	Y, r24
     d94:	88 81       	ld	r24, Y
     d96:	04 c0       	rjmp	.+8      	; 0xda0 <LCD_Write+0x10c>
     d98:	88 81       	ld	r24, Y
     d9a:	8d 7f       	andi	r24, 0xFD	; 253
     d9c:	88 83       	st	Y, r24
     d9e:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D0, *bytes&0x01);
     da0:	90 ff       	sbrs	r25, 0
     da2:	05 c0       	rjmp	.+10     	; 0xdae <LCD_Write+0x11a>
     da4:	88 81       	ld	r24, Y
     da6:	81 60       	ori	r24, 0x01	; 1
     da8:	88 83       	st	Y, r24
     daa:	88 81       	ld	r24, Y
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <LCD_Write+0x122>
     dae:	88 81       	ld	r24, Y
     db0:	8e 7f       	andi	r24, 0xFE	; 254
     db2:	88 83       	st	Y, r24
     db4:	88 81       	ld	r24, Y
        enable;
     db6:	f8 01       	movw	r30, r16
     db8:	80 81       	ld	r24, Z
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	80 83       	st	Z, r24
     dbe:	8b 2d       	mov	r24, r11
     dc0:	8a 95       	dec	r24
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCD_Write+0x12c>
        _delay_us(40);
        disable;
     dc4:	80 81       	ld	r24, Z
     dc6:	87 7f       	andi	r24, 0xF7	; 247
     dc8:	80 83       	st	Z, r24
        sei();
     dca:	78 94       	sei
     dcc:	8b 2d       	mov	r24, r11
     dce:	8a 95       	dec	r24
     dd0:	f1 f7       	brne	.-4      	; 0xdce <LCD_Write+0x13a>

void LCD_Write(char * bytes, uint8_t sz, uint8_t posY, uint8_t posX )
{
    LCD_SetCursor(posY, posX);
    
    for (int i = sz; i > 0; i--)
     dd2:	08 94       	sec
     dd4:	c1 08       	sbc	r12, r1
     dd6:	d1 08       	sbc	r13, r1
     dd8:	c1 14       	cp	r12, r1
     dda:	d1 04       	cpc	r13, r1
     ddc:	21 f0       	breq	.+8      	; 0xde6 <LCD_Write+0x152>
        enable;
        _delay_us(40);
        disable;
        sei();
        _delay_us(40);
        bytes++;
     dde:	08 94       	sec
     de0:	e1 1c       	adc	r14, r1
     de2:	f1 1c       	adc	r15, r1
     de4:	73 cf       	rjmp	.-282    	; 0xccc <LCD_Write+0x38>
    }
    
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	08 95       	ret

00000dfa <LCD_turnOn>:

void LCD_turnOn()
{
    BIT_ON(CONTROL_PORT, LCD_LED);
     dfa:	eb e2       	ldi	r30, 0x2B	; 43
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 68       	ori	r24, 0x80	; 128
     e02:	80 83       	st	Z, r24
    while(LCD_Busy());
     e04:	88 dd       	rcall	.-1264   	; 0x916 <LCD_Busy>
     e06:	89 2b       	or	r24, r25
     e08:	e9 f7       	brne	.-6      	; 0xe04 <LCD_turnOn+0xa>
    control; // включить экран, курсора нет
     e0a:	a8 e2       	ldi	r26, 0x28	; 40
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	8c 91       	ld	r24, X
     e10:	8d 7f       	andi	r24, 0xFD	; 253
     e12:	8c 93       	st	X, r24
    //enable;
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     e14:	e5 e2       	ldi	r30, 0x25	; 37
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	87 7f       	andi	r24, 0xF7	; 247
     e1c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     e1e:	80 81       	ld	r24, Z
     e20:	8b 7f       	andi	r24, 0xFB	; 251
     e22:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     e24:	80 81       	ld	r24, Z
     e26:	8d 7f       	andi	r24, 0xFD	; 253
     e28:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     e2a:	80 81       	ld	r24, Z
     e2c:	8e 7f       	andi	r24, 0xFE	; 254
     e2e:	80 83       	st	Z, r24
    enable;
     e30:	8c 91       	ld	r24, X
     e32:	88 60       	ori	r24, 0x08	; 8
     e34:	8c 93       	st	X, r24
     e36:	8d e0       	ldi	r24, 0x0D	; 13
     e38:	8a 95       	dec	r24
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <LCD_turnOn+0x3e>
    _delay_us(40);
    disable;
     e3c:	8c 91       	ld	r24, X
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	8c 93       	st	X, r24
    while(LCD_Busy());
     e42:	69 dd       	rcall	.-1326   	; 0x916 <LCD_Busy>
     e44:	89 2b       	or	r24, r25
     e46:	e9 f7       	brne	.-6      	; 0xe42 <LCD_turnOn+0x48>
    control;
     e48:	a8 e2       	ldi	r26, 0x28	; 40
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	8c 91       	ld	r24, X
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     e52:	e5 e2       	ldi	r30, 0x25	; 37
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	88 60       	ori	r24, 0x08	; 8
     e5a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 1);
     e5c:	80 81       	ld	r24, Z
     e5e:	84 60       	ori	r24, 0x04	; 4
     e60:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     e62:	80 81       	ld	r24, Z
     e64:	82 60       	ori	r24, 0x02	; 2
     e66:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     e68:	80 81       	ld	r24, Z
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	80 83       	st	Z, r24
    enable;
     e6e:	8c 91       	ld	r24, X
     e70:	88 60       	ori	r24, 0x08	; 8
     e72:	8c 93       	st	X, r24
     e74:	9d e0       	ldi	r25, 0x0D	; 13
     e76:	89 2f       	mov	r24, r25
     e78:	8a 95       	dec	r24
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <LCD_turnOn+0x7e>
    _delay_us(40);
    disable;
     e7c:	8c 91       	ld	r24, X
     e7e:	87 7f       	andi	r24, 0xF7	; 247
     e80:	8c 93       	st	X, r24
     e82:	9a 95       	dec	r25
     e84:	f1 f7       	brne	.-4      	; 0xe82 <LCD_turnOn+0x88>
    _delay_us(40);
    LCD_SetCursor(0, 0);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	60 e0       	ldi	r22, 0x00	; 0
}
     e8a:	53 ce       	rjmp	.-858    	; 0xb32 <LCD_SetCursor>

00000e8c <LCD_turnOff>:

void LCD_turnOff()
{
    BIT_OFF(CONTROL_PORT, LCD_LED);
     e8c:	eb e2       	ldi	r30, 0x2B	; 43
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8f 77       	andi	r24, 0x7F	; 127
     e94:	80 83       	st	Z, r24
    while(LCD_Busy());
     e96:	3f dd       	rcall	.-1410   	; 0x916 <LCD_Busy>
     e98:	89 2b       	or	r24, r25
     e9a:	e9 f7       	brne	.-6      	; 0xe96 <LCD_turnOff+0xa>
    control; // выключить экран, курсора нет
     e9c:	a8 e2       	ldi	r26, 0x28	; 40
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	8c 91       	ld	r24, X
     ea2:	8d 7f       	andi	r24, 0xFD	; 253
     ea4:	8c 93       	st	X, r24
    //enable;
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     ea6:	e5 e2       	ldi	r30, 0x25	; 37
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	87 7f       	andi	r24, 0xF7	; 247
     eae:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     eb0:	80 81       	ld	r24, Z
     eb2:	8b 7f       	andi	r24, 0xFB	; 251
     eb4:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     eb6:	80 81       	ld	r24, Z
     eb8:	8d 7f       	andi	r24, 0xFD	; 253
     eba:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     ebc:	80 81       	ld	r24, Z
     ebe:	8e 7f       	andi	r24, 0xFE	; 254
     ec0:	80 83       	st	Z, r24
    enable;
     ec2:	8c 91       	ld	r24, X
     ec4:	88 60       	ori	r24, 0x08	; 8
     ec6:	8c 93       	st	X, r24
     ec8:	8d e0       	ldi	r24, 0x0D	; 13
     eca:	8a 95       	dec	r24
     ecc:	f1 f7       	brne	.-4      	; 0xeca <LCD_turnOff+0x3e>
    _delay_us(40);
    disable;
     ece:	8c 91       	ld	r24, X
     ed0:	87 7f       	andi	r24, 0xF7	; 247
     ed2:	8c 93       	st	X, r24
    while(LCD_Busy());
     ed4:	20 dd       	rcall	.-1472   	; 0x916 <LCD_Busy>
     ed6:	89 2b       	or	r24, r25
     ed8:	e9 f7       	brne	.-6      	; 0xed4 <LCD_turnOff+0x48>
    control;
     eda:	a8 e2       	ldi	r26, 0x28	; 40
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	8c 91       	ld	r24, X
     ee0:	8d 7f       	andi	r24, 0xFD	; 253
     ee2:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     ee4:	e5 e2       	ldi	r30, 0x25	; 37
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	88 60       	ori	r24, 0x08	; 8
     eec:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     eee:	80 81       	ld	r24, Z
     ef0:	8b 7f       	andi	r24, 0xFB	; 251
     ef2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     ef4:	80 81       	ld	r24, Z
     ef6:	82 60       	ori	r24, 0x02	; 2
     ef8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     efa:	80 81       	ld	r24, Z
     efc:	8e 7f       	andi	r24, 0xFE	; 254
     efe:	80 83       	st	Z, r24
    enable;
     f00:	8c 91       	ld	r24, X
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
     f06:	9d e0       	ldi	r25, 0x0D	; 13
     f08:	89 2f       	mov	r24, r25
     f0a:	8a 95       	dec	r24
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <LCD_turnOff+0x7e>
    _delay_us(40);
    disable;
     f0e:	8c 91       	ld	r24, X
     f10:	87 7f       	andi	r24, 0xF7	; 247
     f12:	8c 93       	st	X, r24
     f14:	9a 95       	dec	r25
     f16:	f1 f7       	brne	.-4      	; 0xf14 <LCD_turnOff+0x88>
    _delay_us(40);
    LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     f18:	80 81       	ld	r24, Z
     f1a:	80 7f       	andi	r24, 0xF0	; 240
     f1c:	80 83       	st	Z, r24
     f1e:	08 95       	ret

00000f20 <__subsf3>:
     f20:	50 58       	subi	r21, 0x80	; 128

00000f22 <__addsf3>:
     f22:	bb 27       	eor	r27, r27
     f24:	aa 27       	eor	r26, r26
     f26:	0e d0       	rcall	.+28     	; 0xf44 <__addsf3x>
     f28:	75 c1       	rjmp	.+746    	; 0x1214 <__fp_round>
     f2a:	66 d1       	rcall	.+716    	; 0x11f8 <__fp_pscA>
     f2c:	30 f0       	brcs	.+12     	; 0xf3a <__addsf3+0x18>
     f2e:	6b d1       	rcall	.+726    	; 0x1206 <__fp_pscB>
     f30:	20 f0       	brcs	.+8      	; 0xf3a <__addsf3+0x18>
     f32:	31 f4       	brne	.+12     	; 0xf40 <__addsf3+0x1e>
     f34:	9f 3f       	cpi	r25, 0xFF	; 255
     f36:	11 f4       	brne	.+4      	; 0xf3c <__addsf3+0x1a>
     f38:	1e f4       	brtc	.+6      	; 0xf40 <__addsf3+0x1e>
     f3a:	5b c1       	rjmp	.+694    	; 0x11f2 <__fp_nan>
     f3c:	0e f4       	brtc	.+2      	; 0xf40 <__addsf3+0x1e>
     f3e:	e0 95       	com	r30
     f40:	e7 fb       	bst	r30, 7
     f42:	51 c1       	rjmp	.+674    	; 0x11e6 <__fp_inf>

00000f44 <__addsf3x>:
     f44:	e9 2f       	mov	r30, r25
     f46:	77 d1       	rcall	.+750    	; 0x1236 <__fp_split3>
     f48:	80 f3       	brcs	.-32     	; 0xf2a <__addsf3+0x8>
     f4a:	ba 17       	cp	r27, r26
     f4c:	62 07       	cpc	r22, r18
     f4e:	73 07       	cpc	r23, r19
     f50:	84 07       	cpc	r24, r20
     f52:	95 07       	cpc	r25, r21
     f54:	18 f0       	brcs	.+6      	; 0xf5c <__addsf3x+0x18>
     f56:	71 f4       	brne	.+28     	; 0xf74 <__addsf3x+0x30>
     f58:	9e f5       	brtc	.+102    	; 0xfc0 <__addsf3x+0x7c>
     f5a:	8f c1       	rjmp	.+798    	; 0x127a <__fp_zero>
     f5c:	0e f4       	brtc	.+2      	; 0xf60 <__addsf3x+0x1c>
     f5e:	e0 95       	com	r30
     f60:	0b 2e       	mov	r0, r27
     f62:	ba 2f       	mov	r27, r26
     f64:	a0 2d       	mov	r26, r0
     f66:	0b 01       	movw	r0, r22
     f68:	b9 01       	movw	r22, r18
     f6a:	90 01       	movw	r18, r0
     f6c:	0c 01       	movw	r0, r24
     f6e:	ca 01       	movw	r24, r20
     f70:	a0 01       	movw	r20, r0
     f72:	11 24       	eor	r1, r1
     f74:	ff 27       	eor	r31, r31
     f76:	59 1b       	sub	r21, r25
     f78:	99 f0       	breq	.+38     	; 0xfa0 <__addsf3x+0x5c>
     f7a:	59 3f       	cpi	r21, 0xF9	; 249
     f7c:	50 f4       	brcc	.+20     	; 0xf92 <__addsf3x+0x4e>
     f7e:	50 3e       	cpi	r21, 0xE0	; 224
     f80:	68 f1       	brcs	.+90     	; 0xfdc <__addsf3x+0x98>
     f82:	1a 16       	cp	r1, r26
     f84:	f0 40       	sbci	r31, 0x00	; 0
     f86:	a2 2f       	mov	r26, r18
     f88:	23 2f       	mov	r18, r19
     f8a:	34 2f       	mov	r19, r20
     f8c:	44 27       	eor	r20, r20
     f8e:	58 5f       	subi	r21, 0xF8	; 248
     f90:	f3 cf       	rjmp	.-26     	; 0xf78 <__addsf3x+0x34>
     f92:	46 95       	lsr	r20
     f94:	37 95       	ror	r19
     f96:	27 95       	ror	r18
     f98:	a7 95       	ror	r26
     f9a:	f0 40       	sbci	r31, 0x00	; 0
     f9c:	53 95       	inc	r21
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__addsf3x+0x4e>
     fa0:	7e f4       	brtc	.+30     	; 0xfc0 <__addsf3x+0x7c>
     fa2:	1f 16       	cp	r1, r31
     fa4:	ba 0b       	sbc	r27, r26
     fa6:	62 0b       	sbc	r22, r18
     fa8:	73 0b       	sbc	r23, r19
     faa:	84 0b       	sbc	r24, r20
     fac:	ba f0       	brmi	.+46     	; 0xfdc <__addsf3x+0x98>
     fae:	91 50       	subi	r25, 0x01	; 1
     fb0:	a1 f0       	breq	.+40     	; 0xfda <__addsf3x+0x96>
     fb2:	ff 0f       	add	r31, r31
     fb4:	bb 1f       	adc	r27, r27
     fb6:	66 1f       	adc	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	c2 f7       	brpl	.-16     	; 0xfae <__addsf3x+0x6a>
     fbe:	0e c0       	rjmp	.+28     	; 0xfdc <__addsf3x+0x98>
     fc0:	ba 0f       	add	r27, r26
     fc2:	62 1f       	adc	r22, r18
     fc4:	73 1f       	adc	r23, r19
     fc6:	84 1f       	adc	r24, r20
     fc8:	48 f4       	brcc	.+18     	; 0xfdc <__addsf3x+0x98>
     fca:	87 95       	ror	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	f7 95       	ror	r31
     fd4:	9e 3f       	cpi	r25, 0xFE	; 254
     fd6:	08 f0       	brcs	.+2      	; 0xfda <__addsf3x+0x96>
     fd8:	b3 cf       	rjmp	.-154    	; 0xf40 <__addsf3+0x1e>
     fda:	93 95       	inc	r25
     fdc:	88 0f       	add	r24, r24
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <__addsf3x+0x9e>
     fe0:	99 27       	eor	r25, r25
     fe2:	ee 0f       	add	r30, r30
     fe4:	97 95       	ror	r25
     fe6:	87 95       	ror	r24
     fe8:	08 95       	ret

00000fea <__cmpsf2>:
     fea:	d9 d0       	rcall	.+434    	; 0x119e <__fp_cmp>
     fec:	08 f4       	brcc	.+2      	; 0xff0 <__cmpsf2+0x6>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	08 95       	ret

00000ff2 <__divsf3>:
     ff2:	0c d0       	rcall	.+24     	; 0x100c <__divsf3x>
     ff4:	0f c1       	rjmp	.+542    	; 0x1214 <__fp_round>
     ff6:	07 d1       	rcall	.+526    	; 0x1206 <__fp_pscB>
     ff8:	40 f0       	brcs	.+16     	; 0x100a <__divsf3+0x18>
     ffa:	fe d0       	rcall	.+508    	; 0x11f8 <__fp_pscA>
     ffc:	30 f0       	brcs	.+12     	; 0x100a <__divsf3+0x18>
     ffe:	21 f4       	brne	.+8      	; 0x1008 <__divsf3+0x16>
    1000:	5f 3f       	cpi	r21, 0xFF	; 255
    1002:	19 f0       	breq	.+6      	; 0x100a <__divsf3+0x18>
    1004:	f0 c0       	rjmp	.+480    	; 0x11e6 <__fp_inf>
    1006:	51 11       	cpse	r21, r1
    1008:	39 c1       	rjmp	.+626    	; 0x127c <__fp_szero>
    100a:	f3 c0       	rjmp	.+486    	; 0x11f2 <__fp_nan>

0000100c <__divsf3x>:
    100c:	14 d1       	rcall	.+552    	; 0x1236 <__fp_split3>
    100e:	98 f3       	brcs	.-26     	; 0xff6 <__divsf3+0x4>

00001010 <__divsf3_pse>:
    1010:	99 23       	and	r25, r25
    1012:	c9 f3       	breq	.-14     	; 0x1006 <__divsf3+0x14>
    1014:	55 23       	and	r21, r21
    1016:	b1 f3       	breq	.-20     	; 0x1004 <__divsf3+0x12>
    1018:	95 1b       	sub	r25, r21
    101a:	55 0b       	sbc	r21, r21
    101c:	bb 27       	eor	r27, r27
    101e:	aa 27       	eor	r26, r26
    1020:	62 17       	cp	r22, r18
    1022:	73 07       	cpc	r23, r19
    1024:	84 07       	cpc	r24, r20
    1026:	38 f0       	brcs	.+14     	; 0x1036 <__divsf3_pse+0x26>
    1028:	9f 5f       	subi	r25, 0xFF	; 255
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	22 0f       	add	r18, r18
    102e:	33 1f       	adc	r19, r19
    1030:	44 1f       	adc	r20, r20
    1032:	aa 1f       	adc	r26, r26
    1034:	a9 f3       	breq	.-22     	; 0x1020 <__divsf3_pse+0x10>
    1036:	33 d0       	rcall	.+102    	; 0x109e <__divsf3_pse+0x8e>
    1038:	0e 2e       	mov	r0, r30
    103a:	3a f0       	brmi	.+14     	; 0x104a <__divsf3_pse+0x3a>
    103c:	e0 e8       	ldi	r30, 0x80	; 128
    103e:	30 d0       	rcall	.+96     	; 0x10a0 <__divsf3_pse+0x90>
    1040:	91 50       	subi	r25, 0x01	; 1
    1042:	50 40       	sbci	r21, 0x00	; 0
    1044:	e6 95       	lsr	r30
    1046:	00 1c       	adc	r0, r0
    1048:	ca f7       	brpl	.-14     	; 0x103c <__divsf3_pse+0x2c>
    104a:	29 d0       	rcall	.+82     	; 0x109e <__divsf3_pse+0x8e>
    104c:	fe 2f       	mov	r31, r30
    104e:	27 d0       	rcall	.+78     	; 0x109e <__divsf3_pse+0x8e>
    1050:	66 0f       	add	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	bb 1f       	adc	r27, r27
    1058:	26 17       	cp	r18, r22
    105a:	37 07       	cpc	r19, r23
    105c:	48 07       	cpc	r20, r24
    105e:	ab 07       	cpc	r26, r27
    1060:	b0 e8       	ldi	r27, 0x80	; 128
    1062:	09 f0       	breq	.+2      	; 0x1066 <__divsf3_pse+0x56>
    1064:	bb 0b       	sbc	r27, r27
    1066:	80 2d       	mov	r24, r0
    1068:	bf 01       	movw	r22, r30
    106a:	ff 27       	eor	r31, r31
    106c:	93 58       	subi	r25, 0x83	; 131
    106e:	5f 4f       	sbci	r21, 0xFF	; 255
    1070:	2a f0       	brmi	.+10     	; 0x107c <__divsf3_pse+0x6c>
    1072:	9e 3f       	cpi	r25, 0xFE	; 254
    1074:	51 05       	cpc	r21, r1
    1076:	68 f0       	brcs	.+26     	; 0x1092 <__divsf3_pse+0x82>
    1078:	b6 c0       	rjmp	.+364    	; 0x11e6 <__fp_inf>
    107a:	00 c1       	rjmp	.+512    	; 0x127c <__fp_szero>
    107c:	5f 3f       	cpi	r21, 0xFF	; 255
    107e:	ec f3       	brlt	.-6      	; 0x107a <__divsf3_pse+0x6a>
    1080:	98 3e       	cpi	r25, 0xE8	; 232
    1082:	dc f3       	brlt	.-10     	; 0x107a <__divsf3_pse+0x6a>
    1084:	86 95       	lsr	r24
    1086:	77 95       	ror	r23
    1088:	67 95       	ror	r22
    108a:	b7 95       	ror	r27
    108c:	f7 95       	ror	r31
    108e:	9f 5f       	subi	r25, 0xFF	; 255
    1090:	c9 f7       	brne	.-14     	; 0x1084 <__divsf3_pse+0x74>
    1092:	88 0f       	add	r24, r24
    1094:	91 1d       	adc	r25, r1
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	97 f9       	bld	r25, 7
    109c:	08 95       	ret
    109e:	e1 e0       	ldi	r30, 0x01	; 1
    10a0:	66 0f       	add	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	88 1f       	adc	r24, r24
    10a6:	bb 1f       	adc	r27, r27
    10a8:	62 17       	cp	r22, r18
    10aa:	73 07       	cpc	r23, r19
    10ac:	84 07       	cpc	r24, r20
    10ae:	ba 07       	cpc	r27, r26
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <__divsf3_pse+0xaa>
    10b2:	62 1b       	sub	r22, r18
    10b4:	73 0b       	sbc	r23, r19
    10b6:	84 0b       	sbc	r24, r20
    10b8:	ba 0b       	sbc	r27, r26
    10ba:	ee 1f       	adc	r30, r30
    10bc:	88 f7       	brcc	.-30     	; 0x10a0 <__divsf3_pse+0x90>
    10be:	e0 95       	com	r30
    10c0:	08 95       	ret

000010c2 <__fixsfsi>:
    10c2:	04 d0       	rcall	.+8      	; 0x10cc <__fixunssfsi>
    10c4:	68 94       	set
    10c6:	b1 11       	cpse	r27, r1
    10c8:	d9 c0       	rjmp	.+434    	; 0x127c <__fp_szero>
    10ca:	08 95       	ret

000010cc <__fixunssfsi>:
    10cc:	bc d0       	rcall	.+376    	; 0x1246 <__fp_splitA>
    10ce:	88 f0       	brcs	.+34     	; 0x10f2 <__fixunssfsi+0x26>
    10d0:	9f 57       	subi	r25, 0x7F	; 127
    10d2:	90 f0       	brcs	.+36     	; 0x10f8 <__fixunssfsi+0x2c>
    10d4:	b9 2f       	mov	r27, r25
    10d6:	99 27       	eor	r25, r25
    10d8:	b7 51       	subi	r27, 0x17	; 23
    10da:	a0 f0       	brcs	.+40     	; 0x1104 <__fixunssfsi+0x38>
    10dc:	d1 f0       	breq	.+52     	; 0x1112 <__fixunssfsi+0x46>
    10de:	66 0f       	add	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	1a f0       	brmi	.+6      	; 0x10ee <__fixunssfsi+0x22>
    10e8:	ba 95       	dec	r27
    10ea:	c9 f7       	brne	.-14     	; 0x10de <__fixunssfsi+0x12>
    10ec:	12 c0       	rjmp	.+36     	; 0x1112 <__fixunssfsi+0x46>
    10ee:	b1 30       	cpi	r27, 0x01	; 1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <__fixunssfsi+0x46>
    10f2:	c3 d0       	rcall	.+390    	; 0x127a <__fp_zero>
    10f4:	b1 e0       	ldi	r27, 0x01	; 1
    10f6:	08 95       	ret
    10f8:	c0 c0       	rjmp	.+384    	; 0x127a <__fp_zero>
    10fa:	67 2f       	mov	r22, r23
    10fc:	78 2f       	mov	r23, r24
    10fe:	88 27       	eor	r24, r24
    1100:	b8 5f       	subi	r27, 0xF8	; 248
    1102:	39 f0       	breq	.+14     	; 0x1112 <__fixunssfsi+0x46>
    1104:	b9 3f       	cpi	r27, 0xF9	; 249
    1106:	cc f3       	brlt	.-14     	; 0x10fa <__fixunssfsi+0x2e>
    1108:	86 95       	lsr	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b3 95       	inc	r27
    1110:	d9 f7       	brne	.-10     	; 0x1108 <__fixunssfsi+0x3c>
    1112:	3e f4       	brtc	.+14     	; 0x1122 <__fixunssfsi+0x56>
    1114:	90 95       	com	r25
    1116:	80 95       	com	r24
    1118:	70 95       	com	r23
    111a:	61 95       	neg	r22
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	08 95       	ret

00001124 <__floatunsisf>:
    1124:	e8 94       	clt
    1126:	09 c0       	rjmp	.+18     	; 0x113a <__floatsisf+0x12>

00001128 <__floatsisf>:
    1128:	97 fb       	bst	r25, 7
    112a:	3e f4       	brtc	.+14     	; 0x113a <__floatsisf+0x12>
    112c:	90 95       	com	r25
    112e:	80 95       	com	r24
    1130:	70 95       	com	r23
    1132:	61 95       	neg	r22
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	8f 4f       	sbci	r24, 0xFF	; 255
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	99 23       	and	r25, r25
    113c:	a9 f0       	breq	.+42     	; 0x1168 <__floatsisf+0x40>
    113e:	f9 2f       	mov	r31, r25
    1140:	96 e9       	ldi	r25, 0x96	; 150
    1142:	bb 27       	eor	r27, r27
    1144:	93 95       	inc	r25
    1146:	f6 95       	lsr	r31
    1148:	87 95       	ror	r24
    114a:	77 95       	ror	r23
    114c:	67 95       	ror	r22
    114e:	b7 95       	ror	r27
    1150:	f1 11       	cpse	r31, r1
    1152:	f8 cf       	rjmp	.-16     	; 0x1144 <__floatsisf+0x1c>
    1154:	fa f4       	brpl	.+62     	; 0x1194 <__floatsisf+0x6c>
    1156:	bb 0f       	add	r27, r27
    1158:	11 f4       	brne	.+4      	; 0x115e <__floatsisf+0x36>
    115a:	60 ff       	sbrs	r22, 0
    115c:	1b c0       	rjmp	.+54     	; 0x1194 <__floatsisf+0x6c>
    115e:	6f 5f       	subi	r22, 0xFF	; 255
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	8f 4f       	sbci	r24, 0xFF	; 255
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	16 c0       	rjmp	.+44     	; 0x1194 <__floatsisf+0x6c>
    1168:	88 23       	and	r24, r24
    116a:	11 f0       	breq	.+4      	; 0x1170 <__floatsisf+0x48>
    116c:	96 e9       	ldi	r25, 0x96	; 150
    116e:	11 c0       	rjmp	.+34     	; 0x1192 <__floatsisf+0x6a>
    1170:	77 23       	and	r23, r23
    1172:	21 f0       	breq	.+8      	; 0x117c <__floatsisf+0x54>
    1174:	9e e8       	ldi	r25, 0x8E	; 142
    1176:	87 2f       	mov	r24, r23
    1178:	76 2f       	mov	r23, r22
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <__floatsisf+0x5e>
    117c:	66 23       	and	r22, r22
    117e:	71 f0       	breq	.+28     	; 0x119c <__floatsisf+0x74>
    1180:	96 e8       	ldi	r25, 0x86	; 134
    1182:	86 2f       	mov	r24, r22
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	2a f0       	brmi	.+10     	; 0x1194 <__floatsisf+0x6c>
    118a:	9a 95       	dec	r25
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	88 1f       	adc	r24, r24
    1192:	da f7       	brpl	.-10     	; 0x118a <__floatsisf+0x62>
    1194:	88 0f       	add	r24, r24
    1196:	96 95       	lsr	r25
    1198:	87 95       	ror	r24
    119a:	97 f9       	bld	r25, 7
    119c:	08 95       	ret

0000119e <__fp_cmp>:
    119e:	99 0f       	add	r25, r25
    11a0:	00 08       	sbc	r0, r0
    11a2:	55 0f       	add	r21, r21
    11a4:	aa 0b       	sbc	r26, r26
    11a6:	e0 e8       	ldi	r30, 0x80	; 128
    11a8:	fe ef       	ldi	r31, 0xFE	; 254
    11aa:	16 16       	cp	r1, r22
    11ac:	17 06       	cpc	r1, r23
    11ae:	e8 07       	cpc	r30, r24
    11b0:	f9 07       	cpc	r31, r25
    11b2:	c0 f0       	brcs	.+48     	; 0x11e4 <__fp_cmp+0x46>
    11b4:	12 16       	cp	r1, r18
    11b6:	13 06       	cpc	r1, r19
    11b8:	e4 07       	cpc	r30, r20
    11ba:	f5 07       	cpc	r31, r21
    11bc:	98 f0       	brcs	.+38     	; 0x11e4 <__fp_cmp+0x46>
    11be:	62 1b       	sub	r22, r18
    11c0:	73 0b       	sbc	r23, r19
    11c2:	84 0b       	sbc	r24, r20
    11c4:	95 0b       	sbc	r25, r21
    11c6:	39 f4       	brne	.+14     	; 0x11d6 <__fp_cmp+0x38>
    11c8:	0a 26       	eor	r0, r26
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <__fp_cmp+0x46>
    11cc:	23 2b       	or	r18, r19
    11ce:	24 2b       	or	r18, r20
    11d0:	25 2b       	or	r18, r21
    11d2:	21 f4       	brne	.+8      	; 0x11dc <__fp_cmp+0x3e>
    11d4:	08 95       	ret
    11d6:	0a 26       	eor	r0, r26
    11d8:	09 f4       	brne	.+2      	; 0x11dc <__fp_cmp+0x3e>
    11da:	a1 40       	sbci	r26, 0x01	; 1
    11dc:	a6 95       	lsr	r26
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	81 1d       	adc	r24, r1
    11e2:	81 1d       	adc	r24, r1
    11e4:	08 95       	ret

000011e6 <__fp_inf>:
    11e6:	97 f9       	bld	r25, 7
    11e8:	9f 67       	ori	r25, 0x7F	; 127
    11ea:	80 e8       	ldi	r24, 0x80	; 128
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	08 95       	ret

000011f2 <__fp_nan>:
    11f2:	9f ef       	ldi	r25, 0xFF	; 255
    11f4:	80 ec       	ldi	r24, 0xC0	; 192
    11f6:	08 95       	ret

000011f8 <__fp_pscA>:
    11f8:	00 24       	eor	r0, r0
    11fa:	0a 94       	dec	r0
    11fc:	16 16       	cp	r1, r22
    11fe:	17 06       	cpc	r1, r23
    1200:	18 06       	cpc	r1, r24
    1202:	09 06       	cpc	r0, r25
    1204:	08 95       	ret

00001206 <__fp_pscB>:
    1206:	00 24       	eor	r0, r0
    1208:	0a 94       	dec	r0
    120a:	12 16       	cp	r1, r18
    120c:	13 06       	cpc	r1, r19
    120e:	14 06       	cpc	r1, r20
    1210:	05 06       	cpc	r0, r21
    1212:	08 95       	ret

00001214 <__fp_round>:
    1214:	09 2e       	mov	r0, r25
    1216:	03 94       	inc	r0
    1218:	00 0c       	add	r0, r0
    121a:	11 f4       	brne	.+4      	; 0x1220 <__fp_round+0xc>
    121c:	88 23       	and	r24, r24
    121e:	52 f0       	brmi	.+20     	; 0x1234 <__fp_round+0x20>
    1220:	bb 0f       	add	r27, r27
    1222:	40 f4       	brcc	.+16     	; 0x1234 <__fp_round+0x20>
    1224:	bf 2b       	or	r27, r31
    1226:	11 f4       	brne	.+4      	; 0x122c <__fp_round+0x18>
    1228:	60 ff       	sbrs	r22, 0
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <__fp_round+0x20>
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	08 95       	ret

00001236 <__fp_split3>:
    1236:	57 fd       	sbrc	r21, 7
    1238:	90 58       	subi	r25, 0x80	; 128
    123a:	44 0f       	add	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	59 f0       	breq	.+22     	; 0x1256 <__fp_splitA+0x10>
    1240:	5f 3f       	cpi	r21, 0xFF	; 255
    1242:	71 f0       	breq	.+28     	; 0x1260 <__fp_splitA+0x1a>
    1244:	47 95       	ror	r20

00001246 <__fp_splitA>:
    1246:	88 0f       	add	r24, r24
    1248:	97 fb       	bst	r25, 7
    124a:	99 1f       	adc	r25, r25
    124c:	61 f0       	breq	.+24     	; 0x1266 <__fp_splitA+0x20>
    124e:	9f 3f       	cpi	r25, 0xFF	; 255
    1250:	79 f0       	breq	.+30     	; 0x1270 <__fp_splitA+0x2a>
    1252:	87 95       	ror	r24
    1254:	08 95       	ret
    1256:	12 16       	cp	r1, r18
    1258:	13 06       	cpc	r1, r19
    125a:	14 06       	cpc	r1, r20
    125c:	55 1f       	adc	r21, r21
    125e:	f2 cf       	rjmp	.-28     	; 0x1244 <__fp_split3+0xe>
    1260:	46 95       	lsr	r20
    1262:	f1 df       	rcall	.-30     	; 0x1246 <__fp_splitA>
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <__fp_splitA+0x30>
    1266:	16 16       	cp	r1, r22
    1268:	17 06       	cpc	r1, r23
    126a:	18 06       	cpc	r1, r24
    126c:	99 1f       	adc	r25, r25
    126e:	f1 cf       	rjmp	.-30     	; 0x1252 <__fp_splitA+0xc>
    1270:	86 95       	lsr	r24
    1272:	71 05       	cpc	r23, r1
    1274:	61 05       	cpc	r22, r1
    1276:	08 94       	sec
    1278:	08 95       	ret

0000127a <__fp_zero>:
    127a:	e8 94       	clt

0000127c <__fp_szero>:
    127c:	bb 27       	eor	r27, r27
    127e:	66 27       	eor	r22, r22
    1280:	77 27       	eor	r23, r23
    1282:	cb 01       	movw	r24, r22
    1284:	97 f9       	bld	r25, 7
    1286:	08 95       	ret

00001288 <__gesf2>:
    1288:	8a df       	rcall	.-236    	; 0x119e <__fp_cmp>
    128a:	08 f4       	brcc	.+2      	; 0x128e <__gesf2+0x6>
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	08 95       	ret

00001290 <__mulsf3>:
    1290:	0b d0       	rcall	.+22     	; 0x12a8 <__mulsf3x>
    1292:	c0 cf       	rjmp	.-128    	; 0x1214 <__fp_round>
    1294:	b1 df       	rcall	.-158    	; 0x11f8 <__fp_pscA>
    1296:	28 f0       	brcs	.+10     	; 0x12a2 <__mulsf3+0x12>
    1298:	b6 df       	rcall	.-148    	; 0x1206 <__fp_pscB>
    129a:	18 f0       	brcs	.+6      	; 0x12a2 <__mulsf3+0x12>
    129c:	95 23       	and	r25, r21
    129e:	09 f0       	breq	.+2      	; 0x12a2 <__mulsf3+0x12>
    12a0:	a2 cf       	rjmp	.-188    	; 0x11e6 <__fp_inf>
    12a2:	a7 cf       	rjmp	.-178    	; 0x11f2 <__fp_nan>
    12a4:	11 24       	eor	r1, r1
    12a6:	ea cf       	rjmp	.-44     	; 0x127c <__fp_szero>

000012a8 <__mulsf3x>:
    12a8:	c6 df       	rcall	.-116    	; 0x1236 <__fp_split3>
    12aa:	a0 f3       	brcs	.-24     	; 0x1294 <__mulsf3+0x4>

000012ac <__mulsf3_pse>:
    12ac:	95 9f       	mul	r25, r21
    12ae:	d1 f3       	breq	.-12     	; 0x12a4 <__mulsf3+0x14>
    12b0:	95 0f       	add	r25, r21
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	55 1f       	adc	r21, r21
    12b6:	62 9f       	mul	r22, r18
    12b8:	f0 01       	movw	r30, r0
    12ba:	72 9f       	mul	r23, r18
    12bc:	bb 27       	eor	r27, r27
    12be:	f0 0d       	add	r31, r0
    12c0:	b1 1d       	adc	r27, r1
    12c2:	63 9f       	mul	r22, r19
    12c4:	aa 27       	eor	r26, r26
    12c6:	f0 0d       	add	r31, r0
    12c8:	b1 1d       	adc	r27, r1
    12ca:	aa 1f       	adc	r26, r26
    12cc:	64 9f       	mul	r22, r20
    12ce:	66 27       	eor	r22, r22
    12d0:	b0 0d       	add	r27, r0
    12d2:	a1 1d       	adc	r26, r1
    12d4:	66 1f       	adc	r22, r22
    12d6:	82 9f       	mul	r24, r18
    12d8:	22 27       	eor	r18, r18
    12da:	b0 0d       	add	r27, r0
    12dc:	a1 1d       	adc	r26, r1
    12de:	62 1f       	adc	r22, r18
    12e0:	73 9f       	mul	r23, r19
    12e2:	b0 0d       	add	r27, r0
    12e4:	a1 1d       	adc	r26, r1
    12e6:	62 1f       	adc	r22, r18
    12e8:	83 9f       	mul	r24, r19
    12ea:	a0 0d       	add	r26, r0
    12ec:	61 1d       	adc	r22, r1
    12ee:	22 1f       	adc	r18, r18
    12f0:	74 9f       	mul	r23, r20
    12f2:	33 27       	eor	r19, r19
    12f4:	a0 0d       	add	r26, r0
    12f6:	61 1d       	adc	r22, r1
    12f8:	23 1f       	adc	r18, r19
    12fa:	84 9f       	mul	r24, r20
    12fc:	60 0d       	add	r22, r0
    12fe:	21 1d       	adc	r18, r1
    1300:	82 2f       	mov	r24, r18
    1302:	76 2f       	mov	r23, r22
    1304:	6a 2f       	mov	r22, r26
    1306:	11 24       	eor	r1, r1
    1308:	9f 57       	subi	r25, 0x7F	; 127
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	8a f0       	brmi	.+34     	; 0x1330 <__mulsf3_pse+0x84>
    130e:	e1 f0       	breq	.+56     	; 0x1348 <__mulsf3_pse+0x9c>
    1310:	88 23       	and	r24, r24
    1312:	4a f0       	brmi	.+18     	; 0x1326 <__mulsf3_pse+0x7a>
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	bb 1f       	adc	r27, r27
    131a:	66 1f       	adc	r22, r22
    131c:	77 1f       	adc	r23, r23
    131e:	88 1f       	adc	r24, r24
    1320:	91 50       	subi	r25, 0x01	; 1
    1322:	50 40       	sbci	r21, 0x00	; 0
    1324:	a9 f7       	brne	.-22     	; 0x1310 <__mulsf3_pse+0x64>
    1326:	9e 3f       	cpi	r25, 0xFE	; 254
    1328:	51 05       	cpc	r21, r1
    132a:	70 f0       	brcs	.+28     	; 0x1348 <__mulsf3_pse+0x9c>
    132c:	5c cf       	rjmp	.-328    	; 0x11e6 <__fp_inf>
    132e:	a6 cf       	rjmp	.-180    	; 0x127c <__fp_szero>
    1330:	5f 3f       	cpi	r21, 0xFF	; 255
    1332:	ec f3       	brlt	.-6      	; 0x132e <__mulsf3_pse+0x82>
    1334:	98 3e       	cpi	r25, 0xE8	; 232
    1336:	dc f3       	brlt	.-10     	; 0x132e <__mulsf3_pse+0x82>
    1338:	86 95       	lsr	r24
    133a:	77 95       	ror	r23
    133c:	67 95       	ror	r22
    133e:	b7 95       	ror	r27
    1340:	f7 95       	ror	r31
    1342:	e7 95       	ror	r30
    1344:	9f 5f       	subi	r25, 0xFF	; 255
    1346:	c1 f7       	brne	.-16     	; 0x1338 <__mulsf3_pse+0x8c>
    1348:	fe 2b       	or	r31, r30
    134a:	88 0f       	add	r24, r24
    134c:	91 1d       	adc	r25, r1
    134e:	96 95       	lsr	r25
    1350:	87 95       	ror	r24
    1352:	97 f9       	bld	r25, 7
    1354:	08 95       	ret

00001356 <_exit>:
    1356:	f8 94       	cli

00001358 <__stop_program>:
    1358:	ff cf       	rjmp	.-2      	; 0x1358 <__stop_program>
