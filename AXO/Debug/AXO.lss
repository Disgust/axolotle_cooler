
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000daa  00000e3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000daa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800156  00800156  00000e94  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000010d  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003e6  00000000  00000000  00001041  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021f  00000000  00000000  00001427  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ff  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d1  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000250  00000000  00000000  00002019  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00002269  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
void turnOffSleep()
//TODO: запретить прерывание INT1
{
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c1       	rjmp	.+536    	; 0x222 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	d4 c0       	rjmp	.+424    	; 0x1ce <__vector_9>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	ea c0       	rjmp	.+468    	; 0x20e <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	25 c0       	rjmp	.+74     	; 0xa0 <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e5       	ldi	r26, 0x56	; 86
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 36       	cpi	r26, 0x61	; 97
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	61 d3       	rcall	.+1730   	; 0x75e <main>
  9c:	84 c6       	rjmp	.+3336   	; 0xda6 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){                                                      //TODO: должен будить процессор в режиме P-save
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
  ca:	60 91 79 00 	lds	r22, 0x0079
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	88 27       	eor	r24, r24
  da:	77 fd       	sbrc	r23, 7
  dc:	80 95       	com	r24
  de:	98 2f       	mov	r25, r24
  e0:	4b d5       	rcall	.+2710   	; 0xb78 <__floatsisf>
  e2:	2c e5       	ldi	r18, 0x5C	; 92
  e4:	3f e8       	ldi	r19, 0x8F	; 143
  e6:	42 e4       	ldi	r20, 0x42	; 66
  e8:	5e e3       	ldi	r21, 0x3E	; 62
  ea:	fa d5       	rcall	.+3060   	; 0xce0 <__mulsf3>
  ec:	60 93 5d 01 	sts	0x015D, r22
  f0:	70 93 5e 01 	sts	0x015E, r23
  f4:	80 93 5f 01 	sts	0x015F, r24
  f8:	90 93 60 01 	sts	0x0160, r25
    if (temperatureValue >= (targetTemp + Tolerance))
  fc:	60 91 11 01 	lds	r22, 0x0111
 100:	70 91 12 01 	lds	r23, 0x0112
 104:	80 91 13 01 	lds	r24, 0x0113
 108:	90 91 14 01 	lds	r25, 0x0114
 10c:	20 91 57 01 	lds	r18, 0x0157
 110:	30 91 58 01 	lds	r19, 0x0158
 114:	40 91 59 01 	lds	r20, 0x0159
 118:	50 91 5a 01 	lds	r21, 0x015A
 11c:	e0 90 5d 01 	lds	r14, 0x015D
 120:	f0 90 5e 01 	lds	r15, 0x015E
 124:	00 91 5f 01 	lds	r16, 0x015F
 128:	10 91 60 01 	lds	r17, 0x0160
 12c:	22 d4       	rcall	.+2116   	; 0x972 <__addsf3>
 12e:	a8 01       	movw	r20, r16
 130:	97 01       	movw	r18, r14
 132:	83 d4       	rcall	.+2310   	; 0xa3a <__cmpsf2>
 134:	18 16       	cp	r1, r24
 136:	94 f0       	brlt	.+36     	; 0x15c <__vector_21+0xbc>
volatile static uint8_t measureRate= 0x0100; // поумолчанию - частота замера (F_CPU/1024)/2
uint8_t progFlags= 0b00000000;

inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
 138:	90 91 56 01 	lds	r25, 0x0156
 13c:	89 2f       	mov	r24, r25
 13e:	86 95       	lsr	r24
 140:	86 95       	lsr	r24
 142:	86 95       	lsr	r24
 144:	80 fd       	sbrc	r24, 0
 146:	2e c0       	rjmp	.+92     	; 0x1a4 <__vector_21+0x104>
    {
	    BIT_ON(CONTROL_PORT, LOAD);
 148:	eb e2       	ldi	r30, 0x2B	; 43
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
        BIT_ON(progFlags, COOLING);
 152:	89 2f       	mov	r24, r25
 154:	88 60       	ori	r24, 0x08	; 8
 156:	80 93 56 01 	sts	0x0156, r24
 15a:	24 c0       	rjmp	.+72     	; 0x1a4 <__vector_21+0x104>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
 15c:	60 91 5d 01 	lds	r22, 0x015D
 160:	70 91 5e 01 	lds	r23, 0x015E
 164:	80 91 5f 01 	lds	r24, 0x015F
 168:	90 91 60 01 	lds	r25, 0x0160
 16c:	20 91 11 01 	lds	r18, 0x0111
 170:	30 91 12 01 	lds	r19, 0x0112
 174:	40 91 13 01 	lds	r20, 0x0113
 178:	50 91 14 01 	lds	r21, 0x0114
 17c:	5e d4       	rcall	.+2236   	; 0xa3a <__cmpsf2>
 17e:	18 16       	cp	r1, r24
 180:	8c f0       	brlt	.+34     	; 0x1a4 <__vector_21+0x104>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
 182:	90 91 56 01 	lds	r25, 0x0156
 186:	89 2f       	mov	r24, r25
 188:	86 95       	lsr	r24
 18a:	86 95       	lsr	r24
 18c:	86 95       	lsr	r24
 18e:	80 ff       	sbrs	r24, 0
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <__vector_21+0x104>
    {
	    BIT_OFF(CONTROL_PORT, LOAD);
 192:	eb e2       	ldi	r30, 0x2B	; 43
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8f 7b       	andi	r24, 0xBF	; 191
 19a:	80 83       	st	Z, r24
        BIT_OFF(progFlags, COOLING);
 19c:	89 2f       	mov	r24, r25
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	80 93 56 01 	sts	0x0156, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_9>:

ISR(TIMER2_OVF_vect){                                               //TODO: должен будить процессор в режиме P-save
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
    runSeconds++;
 1dc:	80 91 5c 01 	lds	r24, 0x015C
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 5c 01 	sts	0x015C, r24
    if (runSeconds==timeOut)
 1e6:	90 91 5c 01 	lds	r25, 0x015C
 1ea:	80 91 10 01 	lds	r24, 0x0110
 1ee:	98 17       	cp	r25, r24
 1f0:	39 f4       	brne	.+14     	; 0x200 <__vector_9+0x32>
    {
        runSeconds= 0; // сбрасываем счетчик секунд
 1f2:	10 92 5c 01 	sts	0x015C, r1
        BIT_ON(progFlags, INACTIVE);
 1f6:	80 91 56 01 	lds	r24, 0x0156
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	80 93 56 01 	sts	0x0156, r24
    }
    return;
}
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_14>:

ISR(TIMER0_COMPA_vect){                                             //TODO: должен будить процессор в режиме P-save
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
    return;
}
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_2>:

ISR(INT1_vect){                                                     //TODO: должен будить процессор в режиме P-save
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	6f 93       	push	r22
 236:	7f 93       	push	r23
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
    turnOffSleep();
    BIT_ON(progFlags, LCD_ON);
 244:	80 91 56 01 	lds	r24, 0x0156
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	80 93 56 01 	sts	0x0156, r24
    LCD_turnOn();
 24e:	56 d3       	rcall	.+1708   	; 0x8fc <LCD_turnOn>
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <LCD_DisplayAll>:
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}

void LCD_DisplayAll()
{   
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
	LCD_Write("TEMP :", 0, 0);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	39 d3       	rcall	.+1650   	; 0x8f6 <LCD_Write>
    LCD_Write((char)temperatureValue, 0, 8);
 284:	60 91 5d 01 	lds	r22, 0x015D
 288:	70 91 5e 01 	lds	r23, 0x015E
 28c:	80 91 5f 01 	lds	r24, 0x015F
 290:	90 91 60 01 	lds	r25, 0x0160
 294:	43 d4       	rcall	.+2182   	; 0xb1c <__fixunssfsi>
 296:	dc 01       	movw	r26, r24
 298:	cb 01       	movw	r24, r22
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	48 e0       	ldi	r20, 0x08	; 8
 2a0:	2a d3       	rcall	.+1620   	; 0x8f6 <LCD_Write>
    if (BIT_READ(progFlags, COOLING))
 2a2:	80 91 56 01 	lds	r24, 0x0156
 2a6:	86 95       	lsr	r24
 2a8:	86 95       	lsr	r24
 2aa:	86 95       	lsr	r24
 2ac:	80 ff       	sbrs	r24, 0
 2ae:	2b c0       	rjmp	.+86     	; 0x306 <LCD_DisplayAll+0x94>
    {
        LCD_Write("COOLING ", 1, 0);
 2b0:	87 e0       	ldi	r24, 0x07	; 7
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	1e d3       	rcall	.+1596   	; 0x8f6 <LCD_Write>
        LCD_Write((char)((temperatureValue - targetTemp)/Tolerance)*100, 1, 8);
 2ba:	60 91 5d 01 	lds	r22, 0x015D
 2be:	70 91 5e 01 	lds	r23, 0x015E
 2c2:	80 91 5f 01 	lds	r24, 0x015F
 2c6:	90 91 60 01 	lds	r25, 0x0160
 2ca:	20 91 11 01 	lds	r18, 0x0111
 2ce:	30 91 12 01 	lds	r19, 0x0112
 2d2:	40 91 13 01 	lds	r20, 0x0113
 2d6:	50 91 14 01 	lds	r21, 0x0114
 2da:	e0 90 57 01 	lds	r14, 0x0157
 2de:	f0 90 58 01 	lds	r15, 0x0158
 2e2:	00 91 59 01 	lds	r16, 0x0159
 2e6:	10 91 5a 01 	lds	r17, 0x015A
 2ea:	42 d3       	rcall	.+1668   	; 0x970 <__subsf3>
 2ec:	a8 01       	movw	r20, r16
 2ee:	97 01       	movw	r18, r14
 2f0:	a8 d3       	rcall	.+1872   	; 0xa42 <__divsf3>
 2f2:	14 d4       	rcall	.+2088   	; 0xb1c <__fixunssfsi>
 2f4:	9b 01       	movw	r18, r22
 2f6:	ac 01       	movw	r20, r24
 2f8:	84 e6       	ldi	r24, 0x64	; 100
 2fa:	28 9f       	mul	r18, r24
 2fc:	c0 01       	movw	r24, r0
 2fe:	11 24       	eor	r1, r1
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	48 e0       	ldi	r20, 0x08	; 8
 304:	f8 d2       	rcall	.+1520   	; 0x8f6 <LCD_Write>
    }
}
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <menuRun>:

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()

{
 310:	2f 92       	push	r2
 312:	3f 92       	push	r3
 314:	4f 92       	push	r4
 316:	5f 92       	push	r5
 318:	6f 92       	push	r6
 31a:	7f 92       	push	r7
 31c:	8f 92       	push	r8
 31e:	9f 92       	push	r9
 320:	af 92       	push	r10
 322:	bf 92       	push	r11
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	df 93       	push	r29
 332:	cf 93       	push	r28
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	c8 54       	subi	r28, 0x48	; 72
 33a:	d0 40       	sbci	r29, 0x00	; 0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
 346:	de 01       	movw	r26, r28
 348:	11 96       	adiw	r26, 0x01	; 1
 34a:	e5 e1       	ldi	r30, 0x15	; 21
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	80 e4       	ldi	r24, 0x40	; 64
 350:	01 90       	ld	r0, Z+
 352:	0d 92       	st	X+, r0
 354:	81 50       	subi	r24, 0x01	; 1
 356:	e1 f7       	brne	.-8      	; 0x350 <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
 358:	60 91 11 01 	lds	r22, 0x0111
 35c:	70 91 12 01 	lds	r23, 0x0112
 360:	80 91 13 01 	lds	r24, 0x0113
 364:	90 91 14 01 	lds	r25, 0x0114
 368:	c0 90 57 01 	lds	r12, 0x0157
 36c:	d0 90 58 01 	lds	r13, 0x0158
 370:	e0 90 59 01 	lds	r14, 0x0159
 374:	f0 90 5a 01 	lds	r15, 0x015A
 378:	b0 90 5b 01 	lds	r11, 0x015B
 37c:	00 91 56 01 	lds	r16, 0x0156
 380:	06 95       	lsr	r16
 382:	06 95       	lsr	r16
 384:	10 e0       	ldi	r17, 0x00	; 0
 386:	01 70       	andi	r16, 0x01	; 1
 388:	10 70       	andi	r17, 0x00	; 0
 38a:	c3 d3       	rcall	.+1926   	; 0xb12 <__fixsfsi>
 38c:	fe 01       	movw	r30, r28
 38e:	ef 5b       	subi	r30, 0xBF	; 191
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	71 83       	std	Z+1, r23	; 0x01
 394:	60 83       	st	Z, r22
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	bb d3       	rcall	.+1910   	; 0xb12 <__fixsfsi>
 39c:	fe 01       	movw	r30, r28
 39e:	ed 5b       	subi	r30, 0xBD	; 189
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
 3a2:	71 83       	std	Z+1, r23	; 0x01
 3a4:	60 83       	st	Z, r22
 3a6:	fe 01       	movw	r30, r28
 3a8:	eb 5b       	subi	r30, 0xBB	; 187
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	b0 82       	st	Z, r11
 3ae:	11 82       	std	Z+1, r1	; 0x01
 3b0:	fe 01       	movw	r30, r28
 3b2:	e9 5b       	subi	r30, 0xB9	; 185
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	11 83       	std	Z+1, r17	; 0x01
 3b8:	00 83       	st	Z, r16
    LCD_Clear();
 3ba:	85 d2       	rcall	.+1290   	; 0x8c6 <LCD_Clear>
 3bc:	cc 24       	eor	r12, r12
 3be:	dd 24       	eor	r13, r13
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 3c0:	0f 2e       	mov	r0, r31
 3c2:	fb e2       	ldi	r31, 0x2B	; 43
 3c4:	af 2e       	mov	r10, r31
 3c6:	bb 24       	eor	r11, r11
 3c8:	f0 2d       	mov	r31, r0
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
 3ca:	0f 2e       	mov	r0, r31
 3cc:	f1 e4       	ldi	r31, 0x41	; 65
 3ce:	4f 2e       	mov	r4, r31
 3d0:	55 24       	eor	r5, r5
 3d2:	f0 2d       	mov	r31, r0
 3d4:	4c 0e       	add	r4, r28
 3d6:	5d 1e       	adc	r5, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	38 2e       	mov	r3, r24
 3de:	29 2e       	mov	r2, r25
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
 3e0:	66 24       	eor	r6, r6
 3e2:	77 24       	eor	r7, r7
 3e4:	63 94       	inc	r6
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 3e6:	f5 01       	movw	r30, r10
 3e8:	80 81       	ld	r24, Z
 3ea:	83 fd       	sbrc	r24, 3
 3ec:	40 c1       	rjmp	.+640    	; 0x66e <__stack+0x16f>
            BIT_OFF(progFlags, INACTIVE);
 3ee:	80 91 56 01 	lds	r24, 0x0156
 3f2:	8f 7e       	andi	r24, 0xEF	; 239
 3f4:	80 93 56 01 	sts	0x0156, r24
            int value= values[pos];
 3f8:	c6 01       	movw	r24, r12
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	f2 01       	movw	r30, r4
 400:	e8 0f       	add	r30, r24
 402:	f9 1f       	adc	r31, r25
 404:	80 80       	ld	r8, Z
 406:	91 80       	ldd	r9, Z+1	; 0x01
 408:	84 01       	movw	r16, r8
            while(1){
                BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 40a:	80 91 56 01 	lds	r24, 0x0156
 40e:	8f 7e       	andi	r24, 0xEF	; 239
 410:	80 93 56 01 	sts	0x0156, r24
                LCD_Write(values[pos],1,0);
 414:	c8 01       	movw	r24, r16
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	6d d2       	rcall	.+1242   	; 0x8f6 <LCD_Write>
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
 41c:	f5 01       	movw	r30, r10
 41e:	80 81       	ld	r24, Z
 420:	85 fd       	sbrc	r24, 5
 422:	7b c0       	rjmp	.+246    	; 0x51a <__stack+0x1b>
                {
                    BIT_OFF(progFlags, INACTIVE);
 424:	80 91 56 01 	lds	r24, 0x0156
 428:	8f 7e       	andi	r24, 0xEF	; 239
 42a:	80 93 56 01 	sts	0x0156, r24
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
 42e:	0f 5f       	subi	r16, 0xFF	; 255
 430:	1f 4f       	sbci	r17, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
 432:	f2 e0       	ldi	r31, 0x02	; 2
 434:	cf 16       	cp	r12, r31
 436:	d1 04       	cpc	r13, r1
 438:	c1 f1       	breq	.+112    	; 0x4aa <menuRun+0x19a>
 43a:	23 e0       	ldi	r18, 0x03	; 3
 43c:	c2 16       	cp	r12, r18
 43e:	d1 04       	cpc	r13, r1
 440:	34 f4       	brge	.+12     	; 0x44e <menuRun+0x13e>
 442:	31 e0       	ldi	r19, 0x01	; 1
 444:	c3 16       	cp	r12, r19
 446:	d1 04       	cpc	r13, r1
 448:	09 f0       	breq	.+2      	; 0x44c <menuRun+0x13c>
 44a:	67 c0       	rjmp	.+206    	; 0x51a <__stack+0x1b>
 44c:	0b c0       	rjmp	.+22     	; 0x464 <menuRun+0x154>
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	c8 16       	cp	r12, r24
 452:	d1 04       	cpc	r13, r1
 454:	09 f4       	brne	.+2      	; 0x458 <menuRun+0x148>
 456:	48 c0       	rjmp	.+144    	; 0x4e8 <menuRun+0x1d8>
 458:	e4 e0       	ldi	r30, 0x04	; 4
 45a:	ce 16       	cp	r12, r30
 45c:	d1 04       	cpc	r13, r1
 45e:	09 f0       	breq	.+2      	; 0x462 <menuRun+0x152>
 460:	5c c0       	rjmp	.+184    	; 0x51a <__stack+0x1b>
 462:	4c c0       	rjmp	.+152    	; 0x4fc <menuRun+0x1ec>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
 464:	b8 01       	movw	r22, r16
 466:	88 27       	eor	r24, r24
 468:	77 fd       	sbrc	r23, 7
 46a:	80 95       	com	r24
 46c:	98 2f       	mov	r25, r24
 46e:	84 d3       	rcall	.+1800   	; 0xb78 <__floatsisf>
 470:	7b 01       	movw	r14, r22
 472:	8c 01       	movw	r16, r24
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	40 e7       	ldi	r20, 0x70	; 112
 47a:	51 e4       	ldi	r21, 0x41	; 65
 47c:	de d2       	rcall	.+1468   	; 0xa3a <__cmpsf2>
 47e:	88 23       	and	r24, r24
 480:	1c f4       	brge	.+6      	; 0x488 <menuRun+0x178>
 482:	0f e0       	ldi	r16, 0x0F	; 15
 484:	10 e0       	ldi	r17, 0x00	; 0
 486:	49 c0       	rjmp	.+146    	; 0x51a <__stack+0x1b>
 488:	c8 01       	movw	r24, r16
 48a:	b7 01       	movw	r22, r14
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	40 ea       	ldi	r20, 0xA0	; 160
 492:	51 e4       	ldi	r21, 0x41	; 65
 494:	21 d4       	rcall	.+2114   	; 0xcd8 <__gesf2>
 496:	18 16       	cp	r1, r24
 498:	1c f4       	brge	.+6      	; 0x4a0 <menuRun+0x190>
 49a:	04 e1       	ldi	r16, 0x14	; 20
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	3d c0       	rjmp	.+122    	; 0x51a <__stack+0x1b>
 4a0:	c8 01       	movw	r24, r16
 4a2:	b7 01       	movw	r22, r14
 4a4:	36 d3       	rcall	.+1644   	; 0xb12 <__fixsfsi>
 4a6:	8b 01       	movw	r16, r22
 4a8:	38 c0       	rjmp	.+112    	; 0x51a <__stack+0x1b>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
 4aa:	b8 01       	movw	r22, r16
 4ac:	88 27       	eor	r24, r24
 4ae:	77 fd       	sbrc	r23, 7
 4b0:	80 95       	com	r24
 4b2:	98 2f       	mov	r25, r24
 4b4:	61 d3       	rcall	.+1730   	; 0xb78 <__floatsisf>
 4b6:	7b 01       	movw	r14, r22
 4b8:	8c 01       	movw	r16, r24
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	bb d2       	rcall	.+1398   	; 0xa3a <__cmpsf2>
 4c4:	88 23       	and	r24, r24
 4c6:	34 f1       	brlt	.+76     	; 0x514 <__stack+0x15>
 4c8:	c8 01       	movw	r24, r16
 4ca:	b7 01       	movw	r22, r14
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	40 e8       	ldi	r20, 0x80	; 128
 4d2:	5f e3       	ldi	r21, 0x3F	; 63
 4d4:	01 d4       	rcall	.+2050   	; 0xcd8 <__gesf2>
 4d6:	18 16       	cp	r1, r24
 4d8:	14 f4       	brge	.+4      	; 0x4de <menuRun+0x1ce>
 4da:	83 01       	movw	r16, r6
 4dc:	1e c0       	rjmp	.+60     	; 0x51a <__stack+0x1b>
 4de:	c8 01       	movw	r24, r16
 4e0:	b7 01       	movw	r22, r14
 4e2:	17 d3       	rcall	.+1582   	; 0xb12 <__fixsfsi>
 4e4:	8b 01       	movw	r16, r22
 4e6:	19 c0       	rjmp	.+50     	; 0x51a <__stack+0x1b>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
 4e8:	11 23       	and	r17, r17
 4ea:	1c f4       	brge	.+6      	; 0x4f2 <menuRun+0x1e2>
 4ec:	0f ef       	ldi	r16, 0xFF	; 255
 4ee:	13 e0       	ldi	r17, 0x03	; 3
 4f0:	14 c0       	rjmp	.+40     	; 0x51a <__stack+0x1b>
 4f2:	f4 e0       	ldi	r31, 0x04	; 4
 4f4:	00 30       	cpi	r16, 0x00	; 0
 4f6:	1f 07       	cpc	r17, r31
 4f8:	84 f0       	brlt	.+32     	; 0x51a <__stack+0x1b>
 4fa:	0c c0       	rjmp	.+24     	; 0x514 <__stack+0x15>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
 4fc:	c8 01       	movw	r24, r16
 4fe:	10 16       	cp	r1, r16
 500:	11 06       	cpc	r1, r17
 502:	0c f4       	brge	.+2      	; 0x506 <__stack+0x7>
 504:	c3 01       	movw	r24, r6
 506:	8c 01       	movw	r16, r24
 508:	99 23       	and	r25, r25
 50a:	3c f4       	brge	.+14     	; 0x51a <__stack+0x1b>
 50c:	83 2d       	mov	r24, r3
 50e:	92 2d       	mov	r25, r2
 510:	8c 01       	movw	r16, r24
 512:	03 c0       	rjmp	.+6      	; 0x51a <__stack+0x1b>
 514:	83 2d       	mov	r24, r3
 516:	92 2d       	mov	r25, r2
 518:	8c 01       	movw	r16, r24
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
 51a:	f5 01       	movw	r30, r10
 51c:	80 81       	ld	r24, Z
 51e:	84 fd       	sbrc	r24, 4
 520:	7b c0       	rjmp	.+246    	; 0x618 <__stack+0x119>
                {
                    BIT_OFF(progFlags, INACTIVE);
 522:	80 91 56 01 	lds	r24, 0x0156
 526:	8f 7e       	andi	r24, 0xEF	; 239
 528:	80 93 56 01 	sts	0x0156, r24
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
 52c:	01 50       	subi	r16, 0x01	; 1
 52e:	10 40       	sbci	r17, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
 530:	f2 e0       	ldi	r31, 0x02	; 2
 532:	cf 16       	cp	r12, r31
 534:	d1 04       	cpc	r13, r1
 536:	c1 f1       	breq	.+112    	; 0x5a8 <__stack+0xa9>
 538:	23 e0       	ldi	r18, 0x03	; 3
 53a:	c2 16       	cp	r12, r18
 53c:	d1 04       	cpc	r13, r1
 53e:	34 f4       	brge	.+12     	; 0x54c <__stack+0x4d>
 540:	31 e0       	ldi	r19, 0x01	; 1
 542:	c3 16       	cp	r12, r19
 544:	d1 04       	cpc	r13, r1
 546:	09 f0       	breq	.+2      	; 0x54a <__stack+0x4b>
 548:	67 c0       	rjmp	.+206    	; 0x618 <__stack+0x119>
 54a:	0b c0       	rjmp	.+22     	; 0x562 <__stack+0x63>
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	c8 16       	cp	r12, r24
 550:	d1 04       	cpc	r13, r1
 552:	09 f4       	brne	.+2      	; 0x556 <__stack+0x57>
 554:	48 c0       	rjmp	.+144    	; 0x5e6 <__stack+0xe7>
 556:	e4 e0       	ldi	r30, 0x04	; 4
 558:	ce 16       	cp	r12, r30
 55a:	d1 04       	cpc	r13, r1
 55c:	09 f0       	breq	.+2      	; 0x560 <__stack+0x61>
 55e:	5c c0       	rjmp	.+184    	; 0x618 <__stack+0x119>
 560:	4c c0       	rjmp	.+152    	; 0x5fa <__stack+0xfb>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
 562:	b8 01       	movw	r22, r16
 564:	88 27       	eor	r24, r24
 566:	77 fd       	sbrc	r23, 7
 568:	80 95       	com	r24
 56a:	98 2f       	mov	r25, r24
 56c:	05 d3       	rcall	.+1546   	; 0xb78 <__floatsisf>
 56e:	7b 01       	movw	r14, r22
 570:	8c 01       	movw	r16, r24
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	40 e7       	ldi	r20, 0x70	; 112
 578:	51 e4       	ldi	r21, 0x41	; 65
 57a:	5f d2       	rcall	.+1214   	; 0xa3a <__cmpsf2>
 57c:	88 23       	and	r24, r24
 57e:	1c f4       	brge	.+6      	; 0x586 <__stack+0x87>
 580:	0f e0       	ldi	r16, 0x0F	; 15
 582:	10 e0       	ldi	r17, 0x00	; 0
 584:	49 c0       	rjmp	.+146    	; 0x618 <__stack+0x119>
 586:	c8 01       	movw	r24, r16
 588:	b7 01       	movw	r22, r14
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	40 ea       	ldi	r20, 0xA0	; 160
 590:	51 e4       	ldi	r21, 0x41	; 65
 592:	a2 d3       	rcall	.+1860   	; 0xcd8 <__gesf2>
 594:	18 16       	cp	r1, r24
 596:	1c f4       	brge	.+6      	; 0x59e <__stack+0x9f>
 598:	04 e1       	ldi	r16, 0x14	; 20
 59a:	10 e0       	ldi	r17, 0x00	; 0
 59c:	3d c0       	rjmp	.+122    	; 0x618 <__stack+0x119>
 59e:	c8 01       	movw	r24, r16
 5a0:	b7 01       	movw	r22, r14
 5a2:	b7 d2       	rcall	.+1390   	; 0xb12 <__fixsfsi>
 5a4:	8b 01       	movw	r16, r22
 5a6:	38 c0       	rjmp	.+112    	; 0x618 <__stack+0x119>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
 5a8:	b8 01       	movw	r22, r16
 5aa:	88 27       	eor	r24, r24
 5ac:	77 fd       	sbrc	r23, 7
 5ae:	80 95       	com	r24
 5b0:	98 2f       	mov	r25, r24
 5b2:	e2 d2       	rcall	.+1476   	; 0xb78 <__floatsisf>
 5b4:	7b 01       	movw	r14, r22
 5b6:	8c 01       	movw	r16, r24
 5b8:	20 e0       	ldi	r18, 0x00	; 0
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	3c d2       	rcall	.+1144   	; 0xa3a <__cmpsf2>
 5c2:	88 23       	and	r24, r24
 5c4:	34 f1       	brlt	.+76     	; 0x612 <__stack+0x113>
 5c6:	c8 01       	movw	r24, r16
 5c8:	b7 01       	movw	r22, r14
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	40 e8       	ldi	r20, 0x80	; 128
 5d0:	5f e3       	ldi	r21, 0x3F	; 63
 5d2:	82 d3       	rcall	.+1796   	; 0xcd8 <__gesf2>
 5d4:	18 16       	cp	r1, r24
 5d6:	14 f4       	brge	.+4      	; 0x5dc <__stack+0xdd>
 5d8:	83 01       	movw	r16, r6
 5da:	1e c0       	rjmp	.+60     	; 0x618 <__stack+0x119>
 5dc:	c8 01       	movw	r24, r16
 5de:	b7 01       	movw	r22, r14
 5e0:	98 d2       	rcall	.+1328   	; 0xb12 <__fixsfsi>
 5e2:	8b 01       	movw	r16, r22
 5e4:	19 c0       	rjmp	.+50     	; 0x618 <__stack+0x119>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
 5e6:	11 23       	and	r17, r17
 5e8:	1c f4       	brge	.+6      	; 0x5f0 <__stack+0xf1>
 5ea:	0f ef       	ldi	r16, 0xFF	; 255
 5ec:	13 e0       	ldi	r17, 0x03	; 3
 5ee:	14 c0       	rjmp	.+40     	; 0x618 <__stack+0x119>
 5f0:	f4 e0       	ldi	r31, 0x04	; 4
 5f2:	00 30       	cpi	r16, 0x00	; 0
 5f4:	1f 07       	cpc	r17, r31
 5f6:	84 f0       	brlt	.+32     	; 0x618 <__stack+0x119>
 5f8:	0c c0       	rjmp	.+24     	; 0x612 <__stack+0x113>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
 5fa:	c8 01       	movw	r24, r16
 5fc:	10 16       	cp	r1, r16
 5fe:	11 06       	cpc	r1, r17
 600:	0c f4       	brge	.+2      	; 0x604 <__stack+0x105>
 602:	c3 01       	movw	r24, r6
 604:	8c 01       	movw	r16, r24
 606:	99 23       	and	r25, r25
 608:	3c f4       	brge	.+14     	; 0x618 <__stack+0x119>
 60a:	83 2d       	mov	r24, r3
 60c:	92 2d       	mov	r25, r2
 60e:	8c 01       	movw	r16, r24
 610:	03 c0       	rjmp	.+6      	; 0x618 <__stack+0x119>
 612:	83 2d       	mov	r24, r3
 614:	92 2d       	mov	r25, r2
 616:	8c 01       	movw	r16, r24
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);

                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 618:	f5 01       	movw	r30, r10
 61a:	80 81       	ld	r24, Z
 61c:	82 ff       	sbrs	r24, 2
 61e:	1f c0       	rjmp	.+62     	; 0x65e <__stack+0x15f>
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
 620:	80 81       	ld	r24, Z
 622:	83 fd       	sbrc	r24, 3
 624:	f2 ce       	rjmp	.-540    	; 0x40a <menuRun+0xfa>
                    if(pos!=3){
 626:	f3 e0       	ldi	r31, 0x03	; 3
 628:	cf 16       	cp	r12, r31
 62a:	d1 04       	cpc	r13, r1
 62c:	49 f0       	breq	.+18     	; 0x640 <__stack+0x141>
 62e:	c6 01       	movw	r24, r12
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	f2 01       	movw	r30, r4
 636:	e8 0f       	add	r30, r24
 638:	f9 1f       	adc	r31, r25
                        values[pos]= (uint8_t)value;
 63a:	80 82       	st	Z, r8
 63c:	11 82       	std	Z+1, r1	; 0x01
 63e:	17 c0       	rjmp	.+46     	; 0x66e <__stack+0x16f>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
 640:	81 14       	cp	r8, r1
 642:	91 04       	cpc	r9, r1
 644:	31 f0       	breq	.+12     	; 0x652 <__stack+0x153>
 646:	80 91 56 01 	lds	r24, 0x0156
 64a:	84 60       	ori	r24, 0x04	; 4
 64c:	80 93 56 01 	sts	0x0156, r24
 650:	dc ce       	rjmp	.-584    	; 0x40a <menuRun+0xfa>
 652:	80 91 56 01 	lds	r24, 0x0156
 656:	8b 7f       	andi	r24, 0xFB	; 251
 658:	80 93 56 01 	sts	0x0156, r24
 65c:	d6 ce       	rjmp	.-596    	; 0x40a <menuRun+0xfa>
 65e:	c6 01       	movw	r24, r12
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	f2 01       	movw	r30, r4
 666:	e8 0f       	add	r30, r24
 668:	f9 1f       	adc	r31, r25
 66a:	11 83       	std	Z+1, r17	; 0x01
 66c:	00 83       	st	Z, r16
                    }          
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 66e:	c6 01       	movw	r24, r12
 670:	82 95       	swap	r24
 672:	92 95       	swap	r25
 674:	90 7f       	andi	r25, 0xF0	; 240
 676:	98 27       	eor	r25, r24
 678:	80 7f       	andi	r24, 0xF0	; 240
 67a:	98 27       	eor	r25, r24
 67c:	21 e0       	ldi	r18, 0x01	; 1
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	2c 0f       	add	r18, r28
 682:	3d 1f       	adc	r19, r29
 684:	82 0f       	add	r24, r18
 686:	93 1f       	adc	r25, r19
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	34 d1       	rcall	.+616    	; 0x8f6 <LCD_Write>
        LCD_Write(values[pos],1,0);
 68e:	c6 01       	movw	r24, r12
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	f2 01       	movw	r30, r4
 696:	e8 0f       	add	r30, r24
 698:	f9 1f       	adc	r31, r25
 69a:	80 81       	ld	r24, Z
 69c:	91 81       	ldd	r25, Z+1	; 0x01
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	29 d1       	rcall	.+594    	; 0x8f6 <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
 6a4:	f5 01       	movw	r30, r10
 6a6:	80 81       	ld	r24, Z
 6a8:	85 fd       	sbrc	r24, 5
 6aa:	16 c0       	rjmp	.+44     	; 0x6d8 <__stack+0x1d9>
        {
            BIT_OFF(progFlags, INACTIVE);
 6ac:	80 91 56 01 	lds	r24, 0x0156
 6b0:	8f 7e       	andi	r24, 0xEF	; 239
 6b2:	80 93 56 01 	sts	0x0156, r24
            pos++;
 6b6:	08 94       	sec
 6b8:	c1 1c       	adc	r12, r1
 6ba:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
 6bc:	dd 20       	and	r13, r13
 6be:	34 f4       	brge	.+12     	; 0x6cc <__stack+0x1cd>
 6c0:	0f 2e       	mov	r0, r31
 6c2:	f3 e0       	ldi	r31, 0x03	; 3
 6c4:	cf 2e       	mov	r12, r31
 6c6:	dd 24       	eor	r13, r13
 6c8:	f0 2d       	mov	r31, r0
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <__stack+0x1d9>
 6cc:	f4 e0       	ldi	r31, 0x04	; 4
 6ce:	cf 16       	cp	r12, r31
 6d0:	d1 04       	cpc	r13, r1
 6d2:	14 f0       	brlt	.+4      	; 0x6d8 <__stack+0x1d9>
 6d4:	cc 24       	eor	r12, r12
 6d6:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
 6d8:	f5 01       	movw	r30, r10
 6da:	80 81       	ld	r24, Z
 6dc:	84 fd       	sbrc	r24, 4
 6de:	16 c0       	rjmp	.+44     	; 0x70c <__stack+0x20d>
        {
            BIT_OFF(progFlags, INACTIVE);
 6e0:	80 91 56 01 	lds	r24, 0x0156
 6e4:	8f 7e       	andi	r24, 0xEF	; 239
 6e6:	80 93 56 01 	sts	0x0156, r24
            pos--;
 6ea:	08 94       	sec
 6ec:	c1 08       	sbc	r12, r1
 6ee:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
 6f0:	dd 20       	and	r13, r13
 6f2:	34 f4       	brge	.+12     	; 0x700 <__stack+0x201>
 6f4:	0f 2e       	mov	r0, r31
 6f6:	f3 e0       	ldi	r31, 0x03	; 3
 6f8:	cf 2e       	mov	r12, r31
 6fa:	dd 24       	eor	r13, r13
 6fc:	f0 2d       	mov	r31, r0
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <__stack+0x20d>
 700:	f4 e0       	ldi	r31, 0x04	; 4
 702:	cf 16       	cp	r12, r31
 704:	d1 04       	cpc	r13, r1
 706:	14 f0       	brlt	.+4      	; 0x70c <__stack+0x20d>
 708:	cc 24       	eor	r12, r12
 70a:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 70c:	f5 01       	movw	r30, r10
 70e:	80 81       	ld	r24, Z
 710:	82 ff       	sbrs	r24, 2
 712:	04 c0       	rjmp	.+8      	; 0x71c <__stack+0x21d>
        if(BIT_READ(progFlags, INACTIVE)) break;
 714:	80 91 56 01 	lds	r24, 0x0156
 718:	84 ff       	sbrs	r24, 4
 71a:	65 ce       	rjmp	.-822    	; 0x3e6 <menuRun+0xd6>
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
 71c:	80 91 56 01 	lds	r24, 0x0156
 720:	8d 7e       	andi	r24, 0xED	; 237
 722:	80 93 56 01 	sts	0x0156, r24
    }
}

inline void menuStop()
{
    LCD_Clear();
 726:	cf d0       	rcall	.+414    	; 0x8c6 <LCD_Clear>
    LCD_DisplayAll();
 728:	a4 dd       	rcall	.-1208   	; 0x272 <LCD_DisplayAll>
        if(BIT_READ(progFlags, INACTIVE)) break;
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
 72a:	c8 5b       	subi	r28, 0xB8	; 184
 72c:	df 4f       	sbci	r29, 0xFF	; 255
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	ff 90       	pop	r15
 742:	ef 90       	pop	r14
 744:	df 90       	pop	r13
 746:	cf 90       	pop	r12
 748:	bf 90       	pop	r11
 74a:	af 90       	pop	r10
 74c:	9f 90       	pop	r9
 74e:	8f 90       	pop	r8
 750:	7f 90       	pop	r7
 752:	6f 90       	pop	r6
 754:	5f 90       	pop	r5
 756:	4f 90       	pop	r4
 758:	3f 90       	pop	r3
 75a:	2f 90       	pop	r2
 75c:	08 95       	ret

0000075e <main>:

int main(void)
{   
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
 766:	87 e0       	ldi	r24, 0x07	; 7
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	90 93 c5 00 	sts	0x00C5, r25
 76e:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
 772:	e2 ec       	ldi	r30, 0xC2	; 194
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	8f 7d       	andi	r24, 0xDF	; 223
 77a:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
 77c:	80 81       	ld	r24, Z
 77e:	8f 7e       	andi	r24, 0xEF	; 239
 780:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
 782:	a1 ec       	ldi	r26, 0xC1	; 193
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	8c 91       	ld	r24, X
 788:	8b 7f       	andi	r24, 0xFB	; 251
 78a:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
 78c:	80 81       	ld	r24, Z
 78e:	84 60       	ori	r24, 0x04	; 4
 790:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
 792:	80 81       	ld	r24, Z
 794:	82 60       	ori	r24, 0x02	; 2
 796:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
 798:	80 81       	ld	r24, Z
 79a:	87 7f       	andi	r24, 0xF7	; 247
 79c:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
 79e:	8c 91       	ld	r24, X
 7a0:	88 60       	ori	r24, 0x08	; 8
 7a2:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 1);  // прием разрешен
 7a4:	8c 91       	ld	r24, X
 7a6:	80 61       	ori	r24, 0x10	; 16
 7a8:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 1); // прерывание приема разрешено
 7aa:	8c 91       	ld	r24, X
 7ac:	80 68       	ori	r24, 0x80	; 128
 7ae:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
 7b0:	8c 91       	ld	r24, X
 7b2:	80 64       	ori	r24, 0x40	; 64
 7b4:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
 7b6:	8c 91       	ld	r24, X
 7b8:	8f 7d       	andi	r24, 0xDF	; 223
 7ba:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
 7bc:	e7 e2       	ldi	r30, 0x27	; 39
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	8e 7f       	andi	r24, 0xFE	; 254
 7c4:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD); // управление подсветкой экрана и нагрузкой на выход
 7c6:	ea e2       	ldi	r30, 0x2A	; 42
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 ec       	ldi	r24, 0xC0	; 192
 7cc:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
 7ce:	80 81       	ld	r24, Z
 7d0:	83 7c       	andi	r24, 0xC3	; 195
 7d2:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
 7d4:	8c e3       	ldi	r24, 0x3C	; 60
 7d6:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
 7d8:	ec e7       	ldi	r30, 0x7C	; 124
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	80 64       	ori	r24, 0x40	; 64
 7e0:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
 7e2:	ab e7       	ldi	r26, 0x7B	; 123
 7e4:	b0 e0       	ldi	r27, 0x00	; 0
 7e6:	8c 91       	ld	r24, X
 7e8:	83 60       	ori	r24, 0x03	; 3
 7ea:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
 7ec:	80 81       	ld	r24, Z
 7ee:	80 62       	ori	r24, 0x20	; 32
 7f0:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
 7f2:	0a e7       	ldi	r16, 0x7A	; 122
 7f4:	10 e0       	ldi	r17, 0x00	; 0
 7f6:	f8 01       	movw	r30, r16
 7f8:	80 81       	ld	r24, Z
 7fa:	80 62       	ori	r24, 0x20	; 32
 7fc:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
 7fe:	80 81       	ld	r24, Z
 800:	88 60       	ori	r24, 0x08	; 8
 802:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
 804:	80 81       	ld	r24, Z
 806:	80 68       	ori	r24, 0x80	; 128
 808:	80 83       	st	Z, r24
    //DIDR0 |= 1 << ADC0D; // отключить цифровой вход ADC0D
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
 80a:	e4 e4       	ldi	r30, 0x44	; 68
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	82 60       	ori	r24, 0x02	; 2
 812:	80 83       	st	Z, r24
    OCR0A= measureRate;
 814:	80 91 5b 01 	lds	r24, 0x015B
 818:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 1 с предделителем 256
 81a:	e5 e4       	ldi	r30, 0x45	; 69
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	84 60       	ori	r24, 0x04	; 4
 822:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
 824:	ee e6       	ldi	r30, 0x6E	; 110
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	82 60       	ori	r24, 0x02	; 2
 82c:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
 82e:	85 e0       	ldi	r24, 0x05	; 5
 830:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
 834:	e6 eb       	ldi	r30, 0xB6	; 182
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	80 62       	ori	r24, 0x20	; 32
 83c:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
 83e:	e0 e7       	ldi	r30, 0x70	; 112
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	81 60       	ori	r24, 0x01	; 1
 846:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCD_Init();
 848:	3b d0       	rcall	.+118    	; 0x8c0 <LCD_Init>

    ADCSRA |= 1 << ADSC;
 84a:	f8 01       	movw	r30, r16
 84c:	80 81       	ld	r24, Z
 84e:	80 64       	ori	r24, 0x40	; 64
 850:	80 83       	st	Z, r24
    
    sei();
 852:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
 854:	c9 e2       	ldi	r28, 0x29	; 41
 856:	d0 e0       	ldi	r29, 0x00	; 0
 858:	88 81       	ld	r24, Y
 85a:	84 ff       	sbrs	r24, 4
 85c:	06 c0       	rjmp	.+12     	; 0x86a <main+0x10c>
 85e:	88 81       	ld	r24, Y
 860:	85 ff       	sbrs	r24, 5
 862:	03 c0       	rjmp	.+6      	; 0x86a <main+0x10c>
 864:	88 81       	ld	r24, Y
 866:	82 fd       	sbrc	r24, 2
 868:	07 c0       	rjmp	.+14     	; 0x878 <main+0x11a>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_ON(progFlags, LCD_ON);
 86a:	80 91 56 01 	lds	r24, 0x0156
 86e:	8f 7e       	andi	r24, 0xEF	; 239
 870:	81 60       	ori	r24, 0x01	; 1
 872:	80 93 56 01 	sts	0x0156, r24
            LCD_turnOn();
 876:	42 d0       	rcall	.+132    	; 0x8fc <LCD_turnOn>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
 878:	88 81       	ld	r24, Y
 87a:	83 fd       	sbrc	r24, 3
 87c:	11 c0       	rjmp	.+34     	; 0x8a0 <main+0x142>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 87e:	80 91 56 01 	lds	r24, 0x0156
 882:	8f 7e       	andi	r24, 0xEF	; 239
 884:	80 93 56 01 	sts	0x0156, r24
            if (!BIT_READ(progFlags, LCD_ON))
 888:	80 fd       	sbrc	r24, 0
 88a:	04 c0       	rjmp	.+8      	; 0x894 <main+0x136>
            {
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
 88c:	81 60       	ori	r24, 0x01	; 1
 88e:	80 93 56 01 	sts	0x0156, r24
                LCD_turnOn();
 892:	34 d0       	rcall	.+104    	; 0x8fc <LCD_turnOn>
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
 894:	80 91 56 01 	lds	r24, 0x0156
 898:	82 60       	ori	r24, 0x02	; 2
 89a:	80 93 56 01 	sts	0x0156, r24
            menuRun(); // обработка команд меню
 89e:	38 dd       	rcall	.-1424   	; 0x310 <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE))
 8a0:	80 91 56 01 	lds	r24, 0x0156
 8a4:	84 ff       	sbrs	r24, 4
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <main+0x156>
        {
            if(BIT_READ(progFlags, LCD_ON))
 8a8:	80 ff       	sbrs	r24, 0
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <main+0x156>
            {
                BIT_OFF(progFlags, LCD_ON);
 8ac:	8e 7f       	andi	r24, 0xFE	; 254
 8ae:	80 93 56 01 	sts	0x0156, r24
                LCD_turnOff();
 8b2:	41 d0       	rcall	.+130    	; 0x936 <LCD_turnOff>
            }
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
 8b4:	80 91 56 01 	lds	r24, 0x0156
 8b8:	80 ff       	sbrs	r24, 0
 8ba:	ce cf       	rjmp	.-100    	; 0x858 <main+0xfa>
        {
            //LCD_Clear();
            LCD_DisplayAll();
 8bc:	da dc       	rcall	.-1612   	; 0x272 <LCD_DisplayAll>
 8be:	cc cf       	rjmp	.-104    	; 0x858 <main+0xfa>

000008c0 <LCD_Init>:
 */ 
 #include "LCD.h"

 void LCD_Init()
 {
    LCD_REG= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3)|(1 << LCD_EN)|(1 << LCD_RS); // LCD на выход
 8c0:	8f e3       	ldi	r24, 0x3F	; 63
 8c2:	84 b9       	out	0x04, r24	; 4
    void LCD_Clear();
 }
 8c4:	08 95       	ret

000008c6 <LCD_Clear>:

 void LCD_Clear()
 {
     BIT_OFF(LCD_PORT, LCD_RS);
 8c6:	e5 e2       	ldi	r30, 0x25	; 37
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	8f 7d       	andi	r24, 0xDF	; 223
 8ce:	80 83       	st	Z, r24
     BIT_ON(LCD_PORT, LCD_EN);
 8d0:	80 81       	ld	r24, Z
 8d2:	80 61       	ori	r24, 0x10	; 16
 8d4:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D3, 0);
 8d6:	80 81       	ld	r24, Z
 8d8:	87 7f       	andi	r24, 0xF7	; 247
 8da:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D2, 0);
 8dc:	80 81       	ld	r24, Z
 8de:	8b 7f       	andi	r24, 0xFB	; 251
 8e0:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D1, 0);
 8e2:	80 81       	ld	r24, Z
 8e4:	8d 7f       	andi	r24, 0xFD	; 253
 8e6:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D0, 1);
 8e8:	80 81       	ld	r24, Z
 8ea:	81 60       	ori	r24, 0x01	; 1
 8ec:	80 83       	st	Z, r24
     BIT_OFF(LCD_PORT, LCD_EN);
 8ee:	80 81       	ld	r24, Z
 8f0:	8f 7e       	andi	r24, 0xEF	; 239
 8f2:	80 83       	st	Z, r24
 }
 8f4:	08 95       	ret

000008f6 <LCD_Write>:

 void LCD_Write(char* data, uint8_t posY, uint8_t posX )
 {
     cli();
 8f6:	f8 94       	cli
     //TODO: определить
     sei();
 8f8:	78 94       	sei
 }
 8fa:	08 95       	ret

000008fc <LCD_turnOn>:

 void LCD_turnOn()
 {
     BIT_ON(CONTROL_PORT, LCD_LED);
 8fc:	eb e2       	ldi	r30, 0x2B	; 43
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	80 68       	ori	r24, 0x80	; 128
 904:	80 83       	st	Z, r24
     BIT_OFF(LCD_PORT, LCD_RS);
 906:	e5 e2       	ldi	r30, 0x25	; 37
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	8f 7d       	andi	r24, 0xDF	; 223
 90e:	80 83       	st	Z, r24
     BIT_ON(LCD_PORT, LCD_EN);
 910:	80 81       	ld	r24, Z
 912:	80 61       	ori	r24, 0x10	; 16
 914:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D3, 1);
 916:	80 81       	ld	r24, Z
 918:	88 60       	ori	r24, 0x08	; 8
 91a:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D2, 1);
 91c:	80 81       	ld	r24, Z
 91e:	84 60       	ori	r24, 0x04	; 4
 920:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D1, 0);
 922:	80 81       	ld	r24, Z
 924:	8d 7f       	andi	r24, 0xFD	; 253
 926:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D0, 0);
 928:	80 81       	ld	r24, Z
 92a:	8e 7f       	andi	r24, 0xFE	; 254
 92c:	80 83       	st	Z, r24
     BIT_OFF(LCD_PORT, LCD_EN);
 92e:	80 81       	ld	r24, Z
 930:	8f 7e       	andi	r24, 0xEF	; 239
 932:	80 83       	st	Z, r24
 }
 934:	08 95       	ret

00000936 <LCD_turnOff>:

 void LCD_turnOff()
 {
     BIT_OFF(CONTROL_PORT, LCD_LED);
 936:	eb e2       	ldi	r30, 0x2B	; 43
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	8f 77       	andi	r24, 0x7F	; 127
 93e:	80 83       	st	Z, r24
     BIT_OFF(LCD_PORT, LCD_RS);
 940:	e5 e2       	ldi	r30, 0x25	; 37
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	8f 7d       	andi	r24, 0xDF	; 223
 948:	80 83       	st	Z, r24
     BIT_ON(LCD_PORT, LCD_EN);
 94a:	80 81       	ld	r24, Z
 94c:	80 61       	ori	r24, 0x10	; 16
 94e:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D3, 1);
 950:	80 81       	ld	r24, Z
 952:	88 60       	ori	r24, 0x08	; 8
 954:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D2, 0);
 956:	80 81       	ld	r24, Z
 958:	8b 7f       	andi	r24, 0xFB	; 251
 95a:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D1, 0);
 95c:	80 81       	ld	r24, Z
 95e:	8d 7f       	andi	r24, 0xFD	; 253
 960:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D0, 0);
 962:	80 81       	ld	r24, Z
 964:	8e 7f       	andi	r24, 0xFE	; 254
 966:	80 83       	st	Z, r24
     BIT_OFF(LCD_PORT, LCD_EN);
 968:	80 81       	ld	r24, Z
 96a:	8f 7e       	andi	r24, 0xEF	; 239
 96c:	80 83       	st	Z, r24
 96e:	08 95       	ret

00000970 <__subsf3>:
 970:	50 58       	subi	r21, 0x80	; 128

00000972 <__addsf3>:
 972:	bb 27       	eor	r27, r27
 974:	aa 27       	eor	r26, r26
 976:	0e d0       	rcall	.+28     	; 0x994 <__addsf3x>
 978:	75 c1       	rjmp	.+746    	; 0xc64 <__fp_round>
 97a:	66 d1       	rcall	.+716    	; 0xc48 <__fp_pscA>
 97c:	30 f0       	brcs	.+12     	; 0x98a <__addsf3+0x18>
 97e:	6b d1       	rcall	.+726    	; 0xc56 <__fp_pscB>
 980:	20 f0       	brcs	.+8      	; 0x98a <__addsf3+0x18>
 982:	31 f4       	brne	.+12     	; 0x990 <__addsf3+0x1e>
 984:	9f 3f       	cpi	r25, 0xFF	; 255
 986:	11 f4       	brne	.+4      	; 0x98c <__addsf3+0x1a>
 988:	1e f4       	brtc	.+6      	; 0x990 <__addsf3+0x1e>
 98a:	5b c1       	rjmp	.+694    	; 0xc42 <__fp_nan>
 98c:	0e f4       	brtc	.+2      	; 0x990 <__addsf3+0x1e>
 98e:	e0 95       	com	r30
 990:	e7 fb       	bst	r30, 7
 992:	51 c1       	rjmp	.+674    	; 0xc36 <__fp_inf>

00000994 <__addsf3x>:
 994:	e9 2f       	mov	r30, r25
 996:	77 d1       	rcall	.+750    	; 0xc86 <__fp_split3>
 998:	80 f3       	brcs	.-32     	; 0x97a <__addsf3+0x8>
 99a:	ba 17       	cp	r27, r26
 99c:	62 07       	cpc	r22, r18
 99e:	73 07       	cpc	r23, r19
 9a0:	84 07       	cpc	r24, r20
 9a2:	95 07       	cpc	r25, r21
 9a4:	18 f0       	brcs	.+6      	; 0x9ac <__addsf3x+0x18>
 9a6:	71 f4       	brne	.+28     	; 0x9c4 <__addsf3x+0x30>
 9a8:	9e f5       	brtc	.+102    	; 0xa10 <__addsf3x+0x7c>
 9aa:	8f c1       	rjmp	.+798    	; 0xcca <__fp_zero>
 9ac:	0e f4       	brtc	.+2      	; 0x9b0 <__addsf3x+0x1c>
 9ae:	e0 95       	com	r30
 9b0:	0b 2e       	mov	r0, r27
 9b2:	ba 2f       	mov	r27, r26
 9b4:	a0 2d       	mov	r26, r0
 9b6:	0b 01       	movw	r0, r22
 9b8:	b9 01       	movw	r22, r18
 9ba:	90 01       	movw	r18, r0
 9bc:	0c 01       	movw	r0, r24
 9be:	ca 01       	movw	r24, r20
 9c0:	a0 01       	movw	r20, r0
 9c2:	11 24       	eor	r1, r1
 9c4:	ff 27       	eor	r31, r31
 9c6:	59 1b       	sub	r21, r25
 9c8:	99 f0       	breq	.+38     	; 0x9f0 <__addsf3x+0x5c>
 9ca:	59 3f       	cpi	r21, 0xF9	; 249
 9cc:	50 f4       	brcc	.+20     	; 0x9e2 <__addsf3x+0x4e>
 9ce:	50 3e       	cpi	r21, 0xE0	; 224
 9d0:	68 f1       	brcs	.+90     	; 0xa2c <__addsf3x+0x98>
 9d2:	1a 16       	cp	r1, r26
 9d4:	f0 40       	sbci	r31, 0x00	; 0
 9d6:	a2 2f       	mov	r26, r18
 9d8:	23 2f       	mov	r18, r19
 9da:	34 2f       	mov	r19, r20
 9dc:	44 27       	eor	r20, r20
 9de:	58 5f       	subi	r21, 0xF8	; 248
 9e0:	f3 cf       	rjmp	.-26     	; 0x9c8 <__addsf3x+0x34>
 9e2:	46 95       	lsr	r20
 9e4:	37 95       	ror	r19
 9e6:	27 95       	ror	r18
 9e8:	a7 95       	ror	r26
 9ea:	f0 40       	sbci	r31, 0x00	; 0
 9ec:	53 95       	inc	r21
 9ee:	c9 f7       	brne	.-14     	; 0x9e2 <__addsf3x+0x4e>
 9f0:	7e f4       	brtc	.+30     	; 0xa10 <__addsf3x+0x7c>
 9f2:	1f 16       	cp	r1, r31
 9f4:	ba 0b       	sbc	r27, r26
 9f6:	62 0b       	sbc	r22, r18
 9f8:	73 0b       	sbc	r23, r19
 9fa:	84 0b       	sbc	r24, r20
 9fc:	ba f0       	brmi	.+46     	; 0xa2c <__addsf3x+0x98>
 9fe:	91 50       	subi	r25, 0x01	; 1
 a00:	a1 f0       	breq	.+40     	; 0xa2a <__addsf3x+0x96>
 a02:	ff 0f       	add	r31, r31
 a04:	bb 1f       	adc	r27, r27
 a06:	66 1f       	adc	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	c2 f7       	brpl	.-16     	; 0x9fe <__addsf3x+0x6a>
 a0e:	0e c0       	rjmp	.+28     	; 0xa2c <__addsf3x+0x98>
 a10:	ba 0f       	add	r27, r26
 a12:	62 1f       	adc	r22, r18
 a14:	73 1f       	adc	r23, r19
 a16:	84 1f       	adc	r24, r20
 a18:	48 f4       	brcc	.+18     	; 0xa2c <__addsf3x+0x98>
 a1a:	87 95       	ror	r24
 a1c:	77 95       	ror	r23
 a1e:	67 95       	ror	r22
 a20:	b7 95       	ror	r27
 a22:	f7 95       	ror	r31
 a24:	9e 3f       	cpi	r25, 0xFE	; 254
 a26:	08 f0       	brcs	.+2      	; 0xa2a <__addsf3x+0x96>
 a28:	b3 cf       	rjmp	.-154    	; 0x990 <__addsf3+0x1e>
 a2a:	93 95       	inc	r25
 a2c:	88 0f       	add	r24, r24
 a2e:	08 f0       	brcs	.+2      	; 0xa32 <__addsf3x+0x9e>
 a30:	99 27       	eor	r25, r25
 a32:	ee 0f       	add	r30, r30
 a34:	97 95       	ror	r25
 a36:	87 95       	ror	r24
 a38:	08 95       	ret

00000a3a <__cmpsf2>:
 a3a:	d9 d0       	rcall	.+434    	; 0xbee <__fp_cmp>
 a3c:	08 f4       	brcc	.+2      	; 0xa40 <__cmpsf2+0x6>
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	08 95       	ret

00000a42 <__divsf3>:
 a42:	0c d0       	rcall	.+24     	; 0xa5c <__divsf3x>
 a44:	0f c1       	rjmp	.+542    	; 0xc64 <__fp_round>
 a46:	07 d1       	rcall	.+526    	; 0xc56 <__fp_pscB>
 a48:	40 f0       	brcs	.+16     	; 0xa5a <__divsf3+0x18>
 a4a:	fe d0       	rcall	.+508    	; 0xc48 <__fp_pscA>
 a4c:	30 f0       	brcs	.+12     	; 0xa5a <__divsf3+0x18>
 a4e:	21 f4       	brne	.+8      	; 0xa58 <__divsf3+0x16>
 a50:	5f 3f       	cpi	r21, 0xFF	; 255
 a52:	19 f0       	breq	.+6      	; 0xa5a <__divsf3+0x18>
 a54:	f0 c0       	rjmp	.+480    	; 0xc36 <__fp_inf>
 a56:	51 11       	cpse	r21, r1
 a58:	39 c1       	rjmp	.+626    	; 0xccc <__fp_szero>
 a5a:	f3 c0       	rjmp	.+486    	; 0xc42 <__fp_nan>

00000a5c <__divsf3x>:
 a5c:	14 d1       	rcall	.+552    	; 0xc86 <__fp_split3>
 a5e:	98 f3       	brcs	.-26     	; 0xa46 <__divsf3+0x4>

00000a60 <__divsf3_pse>:
 a60:	99 23       	and	r25, r25
 a62:	c9 f3       	breq	.-14     	; 0xa56 <__divsf3+0x14>
 a64:	55 23       	and	r21, r21
 a66:	b1 f3       	breq	.-20     	; 0xa54 <__divsf3+0x12>
 a68:	95 1b       	sub	r25, r21
 a6a:	55 0b       	sbc	r21, r21
 a6c:	bb 27       	eor	r27, r27
 a6e:	aa 27       	eor	r26, r26
 a70:	62 17       	cp	r22, r18
 a72:	73 07       	cpc	r23, r19
 a74:	84 07       	cpc	r24, r20
 a76:	38 f0       	brcs	.+14     	; 0xa86 <__divsf3_pse+0x26>
 a78:	9f 5f       	subi	r25, 0xFF	; 255
 a7a:	5f 4f       	sbci	r21, 0xFF	; 255
 a7c:	22 0f       	add	r18, r18
 a7e:	33 1f       	adc	r19, r19
 a80:	44 1f       	adc	r20, r20
 a82:	aa 1f       	adc	r26, r26
 a84:	a9 f3       	breq	.-22     	; 0xa70 <__divsf3_pse+0x10>
 a86:	33 d0       	rcall	.+102    	; 0xaee <__divsf3_pse+0x8e>
 a88:	0e 2e       	mov	r0, r30
 a8a:	3a f0       	brmi	.+14     	; 0xa9a <__divsf3_pse+0x3a>
 a8c:	e0 e8       	ldi	r30, 0x80	; 128
 a8e:	30 d0       	rcall	.+96     	; 0xaf0 <__divsf3_pse+0x90>
 a90:	91 50       	subi	r25, 0x01	; 1
 a92:	50 40       	sbci	r21, 0x00	; 0
 a94:	e6 95       	lsr	r30
 a96:	00 1c       	adc	r0, r0
 a98:	ca f7       	brpl	.-14     	; 0xa8c <__divsf3_pse+0x2c>
 a9a:	29 d0       	rcall	.+82     	; 0xaee <__divsf3_pse+0x8e>
 a9c:	fe 2f       	mov	r31, r30
 a9e:	27 d0       	rcall	.+78     	; 0xaee <__divsf3_pse+0x8e>
 aa0:	66 0f       	add	r22, r22
 aa2:	77 1f       	adc	r23, r23
 aa4:	88 1f       	adc	r24, r24
 aa6:	bb 1f       	adc	r27, r27
 aa8:	26 17       	cp	r18, r22
 aaa:	37 07       	cpc	r19, r23
 aac:	48 07       	cpc	r20, r24
 aae:	ab 07       	cpc	r26, r27
 ab0:	b0 e8       	ldi	r27, 0x80	; 128
 ab2:	09 f0       	breq	.+2      	; 0xab6 <__divsf3_pse+0x56>
 ab4:	bb 0b       	sbc	r27, r27
 ab6:	80 2d       	mov	r24, r0
 ab8:	bf 01       	movw	r22, r30
 aba:	ff 27       	eor	r31, r31
 abc:	93 58       	subi	r25, 0x83	; 131
 abe:	5f 4f       	sbci	r21, 0xFF	; 255
 ac0:	2a f0       	brmi	.+10     	; 0xacc <__divsf3_pse+0x6c>
 ac2:	9e 3f       	cpi	r25, 0xFE	; 254
 ac4:	51 05       	cpc	r21, r1
 ac6:	68 f0       	brcs	.+26     	; 0xae2 <__divsf3_pse+0x82>
 ac8:	b6 c0       	rjmp	.+364    	; 0xc36 <__fp_inf>
 aca:	00 c1       	rjmp	.+512    	; 0xccc <__fp_szero>
 acc:	5f 3f       	cpi	r21, 0xFF	; 255
 ace:	ec f3       	brlt	.-6      	; 0xaca <__divsf3_pse+0x6a>
 ad0:	98 3e       	cpi	r25, 0xE8	; 232
 ad2:	dc f3       	brlt	.-10     	; 0xaca <__divsf3_pse+0x6a>
 ad4:	86 95       	lsr	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	b7 95       	ror	r27
 adc:	f7 95       	ror	r31
 ade:	9f 5f       	subi	r25, 0xFF	; 255
 ae0:	c9 f7       	brne	.-14     	; 0xad4 <__divsf3_pse+0x74>
 ae2:	88 0f       	add	r24, r24
 ae4:	91 1d       	adc	r25, r1
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	97 f9       	bld	r25, 7
 aec:	08 95       	ret
 aee:	e1 e0       	ldi	r30, 0x01	; 1
 af0:	66 0f       	add	r22, r22
 af2:	77 1f       	adc	r23, r23
 af4:	88 1f       	adc	r24, r24
 af6:	bb 1f       	adc	r27, r27
 af8:	62 17       	cp	r22, r18
 afa:	73 07       	cpc	r23, r19
 afc:	84 07       	cpc	r24, r20
 afe:	ba 07       	cpc	r27, r26
 b00:	20 f0       	brcs	.+8      	; 0xb0a <__divsf3_pse+0xaa>
 b02:	62 1b       	sub	r22, r18
 b04:	73 0b       	sbc	r23, r19
 b06:	84 0b       	sbc	r24, r20
 b08:	ba 0b       	sbc	r27, r26
 b0a:	ee 1f       	adc	r30, r30
 b0c:	88 f7       	brcc	.-30     	; 0xaf0 <__divsf3_pse+0x90>
 b0e:	e0 95       	com	r30
 b10:	08 95       	ret

00000b12 <__fixsfsi>:
 b12:	04 d0       	rcall	.+8      	; 0xb1c <__fixunssfsi>
 b14:	68 94       	set
 b16:	b1 11       	cpse	r27, r1
 b18:	d9 c0       	rjmp	.+434    	; 0xccc <__fp_szero>
 b1a:	08 95       	ret

00000b1c <__fixunssfsi>:
 b1c:	bc d0       	rcall	.+376    	; 0xc96 <__fp_splitA>
 b1e:	88 f0       	brcs	.+34     	; 0xb42 <__fixunssfsi+0x26>
 b20:	9f 57       	subi	r25, 0x7F	; 127
 b22:	90 f0       	brcs	.+36     	; 0xb48 <__fixunssfsi+0x2c>
 b24:	b9 2f       	mov	r27, r25
 b26:	99 27       	eor	r25, r25
 b28:	b7 51       	subi	r27, 0x17	; 23
 b2a:	a0 f0       	brcs	.+40     	; 0xb54 <__fixunssfsi+0x38>
 b2c:	d1 f0       	breq	.+52     	; 0xb62 <__fixunssfsi+0x46>
 b2e:	66 0f       	add	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	1a f0       	brmi	.+6      	; 0xb3e <__fixunssfsi+0x22>
 b38:	ba 95       	dec	r27
 b3a:	c9 f7       	brne	.-14     	; 0xb2e <__fixunssfsi+0x12>
 b3c:	12 c0       	rjmp	.+36     	; 0xb62 <__fixunssfsi+0x46>
 b3e:	b1 30       	cpi	r27, 0x01	; 1
 b40:	81 f0       	breq	.+32     	; 0xb62 <__fixunssfsi+0x46>
 b42:	c3 d0       	rcall	.+390    	; 0xcca <__fp_zero>
 b44:	b1 e0       	ldi	r27, 0x01	; 1
 b46:	08 95       	ret
 b48:	c0 c0       	rjmp	.+384    	; 0xcca <__fp_zero>
 b4a:	67 2f       	mov	r22, r23
 b4c:	78 2f       	mov	r23, r24
 b4e:	88 27       	eor	r24, r24
 b50:	b8 5f       	subi	r27, 0xF8	; 248
 b52:	39 f0       	breq	.+14     	; 0xb62 <__fixunssfsi+0x46>
 b54:	b9 3f       	cpi	r27, 0xF9	; 249
 b56:	cc f3       	brlt	.-14     	; 0xb4a <__fixunssfsi+0x2e>
 b58:	86 95       	lsr	r24
 b5a:	77 95       	ror	r23
 b5c:	67 95       	ror	r22
 b5e:	b3 95       	inc	r27
 b60:	d9 f7       	brne	.-10     	; 0xb58 <__fixunssfsi+0x3c>
 b62:	3e f4       	brtc	.+14     	; 0xb72 <__fixunssfsi+0x56>
 b64:	90 95       	com	r25
 b66:	80 95       	com	r24
 b68:	70 95       	com	r23
 b6a:	61 95       	neg	r22
 b6c:	7f 4f       	sbci	r23, 0xFF	; 255
 b6e:	8f 4f       	sbci	r24, 0xFF	; 255
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	08 95       	ret

00000b74 <__floatunsisf>:
 b74:	e8 94       	clt
 b76:	09 c0       	rjmp	.+18     	; 0xb8a <__floatsisf+0x12>

00000b78 <__floatsisf>:
 b78:	97 fb       	bst	r25, 7
 b7a:	3e f4       	brtc	.+14     	; 0xb8a <__floatsisf+0x12>
 b7c:	90 95       	com	r25
 b7e:	80 95       	com	r24
 b80:	70 95       	com	r23
 b82:	61 95       	neg	r22
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	99 23       	and	r25, r25
 b8c:	a9 f0       	breq	.+42     	; 0xbb8 <__floatsisf+0x40>
 b8e:	f9 2f       	mov	r31, r25
 b90:	96 e9       	ldi	r25, 0x96	; 150
 b92:	bb 27       	eor	r27, r27
 b94:	93 95       	inc	r25
 b96:	f6 95       	lsr	r31
 b98:	87 95       	ror	r24
 b9a:	77 95       	ror	r23
 b9c:	67 95       	ror	r22
 b9e:	b7 95       	ror	r27
 ba0:	f1 11       	cpse	r31, r1
 ba2:	f8 cf       	rjmp	.-16     	; 0xb94 <__floatsisf+0x1c>
 ba4:	fa f4       	brpl	.+62     	; 0xbe4 <__floatsisf+0x6c>
 ba6:	bb 0f       	add	r27, r27
 ba8:	11 f4       	brne	.+4      	; 0xbae <__floatsisf+0x36>
 baa:	60 ff       	sbrs	r22, 0
 bac:	1b c0       	rjmp	.+54     	; 0xbe4 <__floatsisf+0x6c>
 bae:	6f 5f       	subi	r22, 0xFF	; 255
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	8f 4f       	sbci	r24, 0xFF	; 255
 bb4:	9f 4f       	sbci	r25, 0xFF	; 255
 bb6:	16 c0       	rjmp	.+44     	; 0xbe4 <__floatsisf+0x6c>
 bb8:	88 23       	and	r24, r24
 bba:	11 f0       	breq	.+4      	; 0xbc0 <__floatsisf+0x48>
 bbc:	96 e9       	ldi	r25, 0x96	; 150
 bbe:	11 c0       	rjmp	.+34     	; 0xbe2 <__floatsisf+0x6a>
 bc0:	77 23       	and	r23, r23
 bc2:	21 f0       	breq	.+8      	; 0xbcc <__floatsisf+0x54>
 bc4:	9e e8       	ldi	r25, 0x8E	; 142
 bc6:	87 2f       	mov	r24, r23
 bc8:	76 2f       	mov	r23, r22
 bca:	05 c0       	rjmp	.+10     	; 0xbd6 <__floatsisf+0x5e>
 bcc:	66 23       	and	r22, r22
 bce:	71 f0       	breq	.+28     	; 0xbec <__floatsisf+0x74>
 bd0:	96 e8       	ldi	r25, 0x86	; 134
 bd2:	86 2f       	mov	r24, r22
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	2a f0       	brmi	.+10     	; 0xbe4 <__floatsisf+0x6c>
 bda:	9a 95       	dec	r25
 bdc:	66 0f       	add	r22, r22
 bde:	77 1f       	adc	r23, r23
 be0:	88 1f       	adc	r24, r24
 be2:	da f7       	brpl	.-10     	; 0xbda <__floatsisf+0x62>
 be4:	88 0f       	add	r24, r24
 be6:	96 95       	lsr	r25
 be8:	87 95       	ror	r24
 bea:	97 f9       	bld	r25, 7
 bec:	08 95       	ret

00000bee <__fp_cmp>:
 bee:	99 0f       	add	r25, r25
 bf0:	00 08       	sbc	r0, r0
 bf2:	55 0f       	add	r21, r21
 bf4:	aa 0b       	sbc	r26, r26
 bf6:	e0 e8       	ldi	r30, 0x80	; 128
 bf8:	fe ef       	ldi	r31, 0xFE	; 254
 bfa:	16 16       	cp	r1, r22
 bfc:	17 06       	cpc	r1, r23
 bfe:	e8 07       	cpc	r30, r24
 c00:	f9 07       	cpc	r31, r25
 c02:	c0 f0       	brcs	.+48     	; 0xc34 <__fp_cmp+0x46>
 c04:	12 16       	cp	r1, r18
 c06:	13 06       	cpc	r1, r19
 c08:	e4 07       	cpc	r30, r20
 c0a:	f5 07       	cpc	r31, r21
 c0c:	98 f0       	brcs	.+38     	; 0xc34 <__fp_cmp+0x46>
 c0e:	62 1b       	sub	r22, r18
 c10:	73 0b       	sbc	r23, r19
 c12:	84 0b       	sbc	r24, r20
 c14:	95 0b       	sbc	r25, r21
 c16:	39 f4       	brne	.+14     	; 0xc26 <__fp_cmp+0x38>
 c18:	0a 26       	eor	r0, r26
 c1a:	61 f0       	breq	.+24     	; 0xc34 <__fp_cmp+0x46>
 c1c:	23 2b       	or	r18, r19
 c1e:	24 2b       	or	r18, r20
 c20:	25 2b       	or	r18, r21
 c22:	21 f4       	brne	.+8      	; 0xc2c <__fp_cmp+0x3e>
 c24:	08 95       	ret
 c26:	0a 26       	eor	r0, r26
 c28:	09 f4       	brne	.+2      	; 0xc2c <__fp_cmp+0x3e>
 c2a:	a1 40       	sbci	r26, 0x01	; 1
 c2c:	a6 95       	lsr	r26
 c2e:	8f ef       	ldi	r24, 0xFF	; 255
 c30:	81 1d       	adc	r24, r1
 c32:	81 1d       	adc	r24, r1
 c34:	08 95       	ret

00000c36 <__fp_inf>:
 c36:	97 f9       	bld	r25, 7
 c38:	9f 67       	ori	r25, 0x7F	; 127
 c3a:	80 e8       	ldi	r24, 0x80	; 128
 c3c:	70 e0       	ldi	r23, 0x00	; 0
 c3e:	60 e0       	ldi	r22, 0x00	; 0
 c40:	08 95       	ret

00000c42 <__fp_nan>:
 c42:	9f ef       	ldi	r25, 0xFF	; 255
 c44:	80 ec       	ldi	r24, 0xC0	; 192
 c46:	08 95       	ret

00000c48 <__fp_pscA>:
 c48:	00 24       	eor	r0, r0
 c4a:	0a 94       	dec	r0
 c4c:	16 16       	cp	r1, r22
 c4e:	17 06       	cpc	r1, r23
 c50:	18 06       	cpc	r1, r24
 c52:	09 06       	cpc	r0, r25
 c54:	08 95       	ret

00000c56 <__fp_pscB>:
 c56:	00 24       	eor	r0, r0
 c58:	0a 94       	dec	r0
 c5a:	12 16       	cp	r1, r18
 c5c:	13 06       	cpc	r1, r19
 c5e:	14 06       	cpc	r1, r20
 c60:	05 06       	cpc	r0, r21
 c62:	08 95       	ret

00000c64 <__fp_round>:
 c64:	09 2e       	mov	r0, r25
 c66:	03 94       	inc	r0
 c68:	00 0c       	add	r0, r0
 c6a:	11 f4       	brne	.+4      	; 0xc70 <__fp_round+0xc>
 c6c:	88 23       	and	r24, r24
 c6e:	52 f0       	brmi	.+20     	; 0xc84 <__fp_round+0x20>
 c70:	bb 0f       	add	r27, r27
 c72:	40 f4       	brcc	.+16     	; 0xc84 <__fp_round+0x20>
 c74:	bf 2b       	or	r27, r31
 c76:	11 f4       	brne	.+4      	; 0xc7c <__fp_round+0x18>
 c78:	60 ff       	sbrs	r22, 0
 c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__fp_round+0x20>
 c7c:	6f 5f       	subi	r22, 0xFF	; 255
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	08 95       	ret

00000c86 <__fp_split3>:
 c86:	57 fd       	sbrc	r21, 7
 c88:	90 58       	subi	r25, 0x80	; 128
 c8a:	44 0f       	add	r20, r20
 c8c:	55 1f       	adc	r21, r21
 c8e:	59 f0       	breq	.+22     	; 0xca6 <__fp_splitA+0x10>
 c90:	5f 3f       	cpi	r21, 0xFF	; 255
 c92:	71 f0       	breq	.+28     	; 0xcb0 <__fp_splitA+0x1a>
 c94:	47 95       	ror	r20

00000c96 <__fp_splitA>:
 c96:	88 0f       	add	r24, r24
 c98:	97 fb       	bst	r25, 7
 c9a:	99 1f       	adc	r25, r25
 c9c:	61 f0       	breq	.+24     	; 0xcb6 <__fp_splitA+0x20>
 c9e:	9f 3f       	cpi	r25, 0xFF	; 255
 ca0:	79 f0       	breq	.+30     	; 0xcc0 <__fp_splitA+0x2a>
 ca2:	87 95       	ror	r24
 ca4:	08 95       	ret
 ca6:	12 16       	cp	r1, r18
 ca8:	13 06       	cpc	r1, r19
 caa:	14 06       	cpc	r1, r20
 cac:	55 1f       	adc	r21, r21
 cae:	f2 cf       	rjmp	.-28     	; 0xc94 <__fp_split3+0xe>
 cb0:	46 95       	lsr	r20
 cb2:	f1 df       	rcall	.-30     	; 0xc96 <__fp_splitA>
 cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <__fp_splitA+0x30>
 cb6:	16 16       	cp	r1, r22
 cb8:	17 06       	cpc	r1, r23
 cba:	18 06       	cpc	r1, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	f1 cf       	rjmp	.-30     	; 0xca2 <__fp_splitA+0xc>
 cc0:	86 95       	lsr	r24
 cc2:	71 05       	cpc	r23, r1
 cc4:	61 05       	cpc	r22, r1
 cc6:	08 94       	sec
 cc8:	08 95       	ret

00000cca <__fp_zero>:
 cca:	e8 94       	clt

00000ccc <__fp_szero>:
 ccc:	bb 27       	eor	r27, r27
 cce:	66 27       	eor	r22, r22
 cd0:	77 27       	eor	r23, r23
 cd2:	cb 01       	movw	r24, r22
 cd4:	97 f9       	bld	r25, 7
 cd6:	08 95       	ret

00000cd8 <__gesf2>:
 cd8:	8a df       	rcall	.-236    	; 0xbee <__fp_cmp>
 cda:	08 f4       	brcc	.+2      	; 0xcde <__gesf2+0x6>
 cdc:	8f ef       	ldi	r24, 0xFF	; 255
 cde:	08 95       	ret

00000ce0 <__mulsf3>:
 ce0:	0b d0       	rcall	.+22     	; 0xcf8 <__mulsf3x>
 ce2:	c0 cf       	rjmp	.-128    	; 0xc64 <__fp_round>
 ce4:	b1 df       	rcall	.-158    	; 0xc48 <__fp_pscA>
 ce6:	28 f0       	brcs	.+10     	; 0xcf2 <__mulsf3+0x12>
 ce8:	b6 df       	rcall	.-148    	; 0xc56 <__fp_pscB>
 cea:	18 f0       	brcs	.+6      	; 0xcf2 <__mulsf3+0x12>
 cec:	95 23       	and	r25, r21
 cee:	09 f0       	breq	.+2      	; 0xcf2 <__mulsf3+0x12>
 cf0:	a2 cf       	rjmp	.-188    	; 0xc36 <__fp_inf>
 cf2:	a7 cf       	rjmp	.-178    	; 0xc42 <__fp_nan>
 cf4:	11 24       	eor	r1, r1
 cf6:	ea cf       	rjmp	.-44     	; 0xccc <__fp_szero>

00000cf8 <__mulsf3x>:
 cf8:	c6 df       	rcall	.-116    	; 0xc86 <__fp_split3>
 cfa:	a0 f3       	brcs	.-24     	; 0xce4 <__mulsf3+0x4>

00000cfc <__mulsf3_pse>:
 cfc:	95 9f       	mul	r25, r21
 cfe:	d1 f3       	breq	.-12     	; 0xcf4 <__mulsf3+0x14>
 d00:	95 0f       	add	r25, r21
 d02:	50 e0       	ldi	r21, 0x00	; 0
 d04:	55 1f       	adc	r21, r21
 d06:	62 9f       	mul	r22, r18
 d08:	f0 01       	movw	r30, r0
 d0a:	72 9f       	mul	r23, r18
 d0c:	bb 27       	eor	r27, r27
 d0e:	f0 0d       	add	r31, r0
 d10:	b1 1d       	adc	r27, r1
 d12:	63 9f       	mul	r22, r19
 d14:	aa 27       	eor	r26, r26
 d16:	f0 0d       	add	r31, r0
 d18:	b1 1d       	adc	r27, r1
 d1a:	aa 1f       	adc	r26, r26
 d1c:	64 9f       	mul	r22, r20
 d1e:	66 27       	eor	r22, r22
 d20:	b0 0d       	add	r27, r0
 d22:	a1 1d       	adc	r26, r1
 d24:	66 1f       	adc	r22, r22
 d26:	82 9f       	mul	r24, r18
 d28:	22 27       	eor	r18, r18
 d2a:	b0 0d       	add	r27, r0
 d2c:	a1 1d       	adc	r26, r1
 d2e:	62 1f       	adc	r22, r18
 d30:	73 9f       	mul	r23, r19
 d32:	b0 0d       	add	r27, r0
 d34:	a1 1d       	adc	r26, r1
 d36:	62 1f       	adc	r22, r18
 d38:	83 9f       	mul	r24, r19
 d3a:	a0 0d       	add	r26, r0
 d3c:	61 1d       	adc	r22, r1
 d3e:	22 1f       	adc	r18, r18
 d40:	74 9f       	mul	r23, r20
 d42:	33 27       	eor	r19, r19
 d44:	a0 0d       	add	r26, r0
 d46:	61 1d       	adc	r22, r1
 d48:	23 1f       	adc	r18, r19
 d4a:	84 9f       	mul	r24, r20
 d4c:	60 0d       	add	r22, r0
 d4e:	21 1d       	adc	r18, r1
 d50:	82 2f       	mov	r24, r18
 d52:	76 2f       	mov	r23, r22
 d54:	6a 2f       	mov	r22, r26
 d56:	11 24       	eor	r1, r1
 d58:	9f 57       	subi	r25, 0x7F	; 127
 d5a:	50 40       	sbci	r21, 0x00	; 0
 d5c:	8a f0       	brmi	.+34     	; 0xd80 <__mulsf3_pse+0x84>
 d5e:	e1 f0       	breq	.+56     	; 0xd98 <__mulsf3_pse+0x9c>
 d60:	88 23       	and	r24, r24
 d62:	4a f0       	brmi	.+18     	; 0xd76 <__mulsf3_pse+0x7a>
 d64:	ee 0f       	add	r30, r30
 d66:	ff 1f       	adc	r31, r31
 d68:	bb 1f       	adc	r27, r27
 d6a:	66 1f       	adc	r22, r22
 d6c:	77 1f       	adc	r23, r23
 d6e:	88 1f       	adc	r24, r24
 d70:	91 50       	subi	r25, 0x01	; 1
 d72:	50 40       	sbci	r21, 0x00	; 0
 d74:	a9 f7       	brne	.-22     	; 0xd60 <__mulsf3_pse+0x64>
 d76:	9e 3f       	cpi	r25, 0xFE	; 254
 d78:	51 05       	cpc	r21, r1
 d7a:	70 f0       	brcs	.+28     	; 0xd98 <__mulsf3_pse+0x9c>
 d7c:	5c cf       	rjmp	.-328    	; 0xc36 <__fp_inf>
 d7e:	a6 cf       	rjmp	.-180    	; 0xccc <__fp_szero>
 d80:	5f 3f       	cpi	r21, 0xFF	; 255
 d82:	ec f3       	brlt	.-6      	; 0xd7e <__mulsf3_pse+0x82>
 d84:	98 3e       	cpi	r25, 0xE8	; 232
 d86:	dc f3       	brlt	.-10     	; 0xd7e <__mulsf3_pse+0x82>
 d88:	86 95       	lsr	r24
 d8a:	77 95       	ror	r23
 d8c:	67 95       	ror	r22
 d8e:	b7 95       	ror	r27
 d90:	f7 95       	ror	r31
 d92:	e7 95       	ror	r30
 d94:	9f 5f       	subi	r25, 0xFF	; 255
 d96:	c1 f7       	brne	.-16     	; 0xd88 <__mulsf3_pse+0x8c>
 d98:	fe 2b       	or	r31, r30
 d9a:	88 0f       	add	r24, r24
 d9c:	91 1d       	adc	r25, r1
 d9e:	96 95       	lsr	r25
 da0:	87 95       	ror	r24
 da2:	97 f9       	bld	r25, 7
 da4:	08 95       	ret

00000da6 <_exit>:
 da6:	f8 94       	cli

00000da8 <__stop_program>:
 da8:	ff cf       	rjmp	.-2      	; 0xda8 <__stop_program>
