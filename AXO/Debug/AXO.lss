
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000c8a  00000d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800146  00800146  00000d64  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012c  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000487  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000295  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ab  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fe  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bc  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000025e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//     if (BIT_READ(progFlags, COOLING))
//     {
//         LCD_Write("COOLING ", 1, 0);
//         LCD_Write((char)((temperatureValue - targetTemp)/Tolerance)*100, 1, 8);
//     }
}
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
    BIT_WRITE(LCD_PORT, LCD_D0, 1);
    BIT_OFF(LCD_PORT, LCD_EN);
 }

 void LCD_Init()
 {
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c1       	rjmp	.+536    	; 0x222 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	d4 c0       	rjmp	.+424    	; 0x1ce <__vector_9>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	ea c0       	rjmp	.+468    	; 0x20e <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	25 c0       	rjmp	.+74     	; 0xa0 <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 35       	cpi	r26, 0x50	; 80
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	fc d2       	rcall	.+1528   	; 0x694 <main>
  9c:	f4 c5       	rjmp	.+3048   	; 0xc86 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){                                                      //TODO: должен будить процессор в режиме P-save
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
  ca:	60 91 79 00 	lds	r22, 0x0079
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	88 27       	eor	r24, r24
  da:	77 fd       	sbrc	r23, 7
  dc:	80 95       	com	r24
  de:	98 2f       	mov	r25, r24
  e0:	bb d4       	rcall	.+2422   	; 0xa58 <__floatsisf>
  e2:	2c e5       	ldi	r18, 0x5C	; 92
  e4:	3f e8       	ldi	r19, 0x8F	; 143
  e6:	42 e4       	ldi	r20, 0x42	; 66
  e8:	5e e3       	ldi	r21, 0x3E	; 62
  ea:	6a d5       	rcall	.+2772   	; 0xbc0 <__mulsf3>
  ec:	60 93 4c 01 	sts	0x014C, r22
  f0:	70 93 4d 01 	sts	0x014D, r23
  f4:	80 93 4e 01 	sts	0x014E, r24
  f8:	90 93 4f 01 	sts	0x014F, r25
    if (temperatureValue >= (targetTemp + Tolerance))
  fc:	60 91 01 01 	lds	r22, 0x0101
 100:	70 91 02 01 	lds	r23, 0x0102
 104:	80 91 03 01 	lds	r24, 0x0103
 108:	90 91 04 01 	lds	r25, 0x0104
 10c:	20 91 47 01 	lds	r18, 0x0147
 110:	30 91 48 01 	lds	r19, 0x0148
 114:	40 91 49 01 	lds	r20, 0x0149
 118:	50 91 4a 01 	lds	r21, 0x014A
 11c:	e0 90 4c 01 	lds	r14, 0x014C
 120:	f0 90 4d 01 	lds	r15, 0x014D
 124:	00 91 4e 01 	lds	r16, 0x014E
 128:	10 91 4f 01 	lds	r17, 0x014F
 12c:	fa d3       	rcall	.+2036   	; 0x922 <__addsf3>
 12e:	a8 01       	movw	r20, r16
 130:	97 01       	movw	r18, r14
 132:	5b d4       	rcall	.+2230   	; 0x9ea <__cmpsf2>
 134:	18 16       	cp	r1, r24
 136:	94 f0       	brlt	.+36     	; 0x15c <__vector_21+0xbc>
volatile static uint8_t measureRate= 0x80; // поумолчанию - частота замера (F_CPU/1024)/2
uint8_t progFlags= 0b00000000;

inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
 138:	90 91 46 01 	lds	r25, 0x0146
 13c:	89 2f       	mov	r24, r25
 13e:	86 95       	lsr	r24
 140:	86 95       	lsr	r24
 142:	86 95       	lsr	r24
 144:	80 fd       	sbrc	r24, 0
 146:	2e c0       	rjmp	.+92     	; 0x1a4 <__vector_21+0x104>
    {
	    BIT_ON(CONTROL_PORT, LOAD);
 148:	eb e2       	ldi	r30, 0x2B	; 43
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
        BIT_ON(progFlags, COOLING);
 152:	89 2f       	mov	r24, r25
 154:	88 60       	ori	r24, 0x08	; 8
 156:	80 93 46 01 	sts	0x0146, r24
 15a:	24 c0       	rjmp	.+72     	; 0x1a4 <__vector_21+0x104>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
 15c:	60 91 4c 01 	lds	r22, 0x014C
 160:	70 91 4d 01 	lds	r23, 0x014D
 164:	80 91 4e 01 	lds	r24, 0x014E
 168:	90 91 4f 01 	lds	r25, 0x014F
 16c:	20 91 01 01 	lds	r18, 0x0101
 170:	30 91 02 01 	lds	r19, 0x0102
 174:	40 91 03 01 	lds	r20, 0x0103
 178:	50 91 04 01 	lds	r21, 0x0104
 17c:	36 d4       	rcall	.+2156   	; 0x9ea <__cmpsf2>
 17e:	18 16       	cp	r1, r24
 180:	8c f0       	brlt	.+34     	; 0x1a4 <__vector_21+0x104>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
 182:	90 91 46 01 	lds	r25, 0x0146
 186:	89 2f       	mov	r24, r25
 188:	86 95       	lsr	r24
 18a:	86 95       	lsr	r24
 18c:	86 95       	lsr	r24
 18e:	80 ff       	sbrs	r24, 0
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <__vector_21+0x104>
    {
	    BIT_OFF(CONTROL_PORT, LOAD);
 192:	eb e2       	ldi	r30, 0x2B	; 43
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8f 7b       	andi	r24, 0xBF	; 191
 19a:	80 83       	st	Z, r24
        BIT_OFF(progFlags, COOLING);
 19c:	89 2f       	mov	r24, r25
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	80 93 46 01 	sts	0x0146, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_9>:

ISR(TIMER2_OVF_vect){                                               //TODO: должен будить процессор в режиме P-save
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
    runSeconds++;
 1dc:	80 91 4b 01 	lds	r24, 0x014B
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 4b 01 	sts	0x014B, r24
    if (runSeconds==timeOut)
 1e6:	90 91 4b 01 	lds	r25, 0x014B
 1ea:	80 91 00 01 	lds	r24, 0x0100
 1ee:	98 17       	cp	r25, r24
 1f0:	39 f4       	brne	.+14     	; 0x200 <__vector_9+0x32>
    {
        runSeconds= 0; // сбрасываем счетчик секунд
 1f2:	10 92 4b 01 	sts	0x014B, r1
        BIT_ON(progFlags, INACTIVE);
 1f6:	80 91 46 01 	lds	r24, 0x0146
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	80 93 46 01 	sts	0x0146, r24
    }
    return;
}
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_14>:

ISR(TIMER0_COMPA_vect){                                             //TODO: должен будить процессор в режиме P-save
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
    return;
}
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_2>:

ISR(INT1_vect){                                                     //TODO: должен будить процессор в режиме P-save
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	8f 93       	push	r24
    turnOffSleep();
    BIT_ON(progFlags, LCD_ON);
 22e:	80 91 46 01 	lds	r24, 0x0146
 232:	81 60       	ori	r24, 0x01	; 1
 234:	80 93 46 01 	sts	0x0146, r24
    //LCD_turnOn();
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <menuRun>:

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()

{
 244:	2f 92       	push	r2
 246:	3f 92       	push	r3
 248:	4f 92       	push	r4
 24a:	5f 92       	push	r5
 24c:	6f 92       	push	r6
 24e:	7f 92       	push	r7
 250:	8f 92       	push	r8
 252:	9f 92       	push	r9
 254:	af 92       	push	r10
 256:	bf 92       	push	r11
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	df 93       	push	r29
 266:	cf 93       	push	r28
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	c8 54       	subi	r28, 0x48	; 72
 26e:	d0 40       	sbci	r29, 0x00	; 0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
 27a:	de 01       	movw	r26, r28
 27c:	11 96       	adiw	r26, 0x01	; 1
 27e:	e6 e0       	ldi	r30, 0x06	; 6
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	80 e4       	ldi	r24, 0x40	; 64
 284:	01 90       	ld	r0, Z+
 286:	0d 92       	st	X+, r0
 288:	81 50       	subi	r24, 0x01	; 1
 28a:	e1 f7       	brne	.-8      	; 0x284 <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
 28c:	60 91 01 01 	lds	r22, 0x0101
 290:	70 91 02 01 	lds	r23, 0x0102
 294:	80 91 03 01 	lds	r24, 0x0103
 298:	90 91 04 01 	lds	r25, 0x0104
 29c:	c0 90 47 01 	lds	r12, 0x0147
 2a0:	d0 90 48 01 	lds	r13, 0x0148
 2a4:	e0 90 49 01 	lds	r14, 0x0149
 2a8:	f0 90 4a 01 	lds	r15, 0x014A
 2ac:	b0 90 05 01 	lds	r11, 0x0105
 2b0:	00 91 46 01 	lds	r16, 0x0146
 2b4:	06 95       	lsr	r16
 2b6:	06 95       	lsr	r16
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	01 70       	andi	r16, 0x01	; 1
 2bc:	10 70       	andi	r17, 0x00	; 0
 2be:	99 d3       	rcall	.+1842   	; 0x9f2 <__fixsfsi>
 2c0:	fe 01       	movw	r30, r28
 2c2:	ef 5b       	subi	r30, 0xBF	; 191
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	71 83       	std	Z+1, r23	; 0x01
 2c8:	60 83       	st	Z, r22
 2ca:	c7 01       	movw	r24, r14
 2cc:	b6 01       	movw	r22, r12
 2ce:	91 d3       	rcall	.+1826   	; 0x9f2 <__fixsfsi>
 2d0:	fe 01       	movw	r30, r28
 2d2:	ed 5b       	subi	r30, 0xBD	; 189
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	71 83       	std	Z+1, r23	; 0x01
 2d8:	60 83       	st	Z, r22
 2da:	fe 01       	movw	r30, r28
 2dc:	eb 5b       	subi	r30, 0xBB	; 187
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	b0 82       	st	Z, r11
 2e2:	11 82       	std	Z+1, r1	; 0x01
 2e4:	fe 01       	movw	r30, r28
 2e6:	e9 5b       	subi	r30, 0xB9	; 185
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	11 83       	std	Z+1, r17	; 0x01
 2ec:	00 83       	st	Z, r16
    LCD_Clear();
 2ee:	8a d2       	rcall	.+1300   	; 0x804 <LCD_Clear>
 2f0:	cc 24       	eor	r12, r12
 2f2:	dd 24       	eor	r13, r13
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 2f4:	0f 2e       	mov	r0, r31
 2f6:	fb e2       	ldi	r31, 0x2B	; 43
 2f8:	af 2e       	mov	r10, r31
 2fa:	bb 24       	eor	r11, r11
 2fc:	f0 2d       	mov	r31, r0
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
 2fe:	0f 2e       	mov	r0, r31
 300:	f1 e4       	ldi	r31, 0x41	; 65
 302:	6f 2e       	mov	r6, r31
 304:	77 24       	eor	r7, r7
 306:	f0 2d       	mov	r31, r0
 308:	6c 0e       	add	r6, r28
 30a:	7d 1e       	adc	r7, r29
inline int inRange(int pos, int value)
{
    switch (pos)
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
 30c:	0f 2e       	mov	r0, r31
 30e:	ff e0       	ldi	r31, 0x0F	; 15
 310:	4f 2e       	mov	r4, r31
 312:	55 24       	eor	r5, r5
 314:	f0 2d       	mov	r31, r0
                        BIT_WRITE(progFlags, ECONOMY, value);
                    }          
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 316:	1e 01       	movw	r2, r28
 318:	08 94       	sec
 31a:	21 1c       	adc	r2, r1
 31c:	31 1c       	adc	r3, r1
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 31e:	f5 01       	movw	r30, r10
 320:	80 81       	ld	r24, Z
 322:	83 fd       	sbrc	r24, 3
 324:	40 c1       	rjmp	.+640    	; 0x5a6 <__stack+0xa7>
            BIT_OFF(progFlags, INACTIVE);
 326:	80 91 46 01 	lds	r24, 0x0146
 32a:	8f 7e       	andi	r24, 0xEF	; 239
 32c:	80 93 46 01 	sts	0x0146, r24
            int value= values[pos];
 330:	c6 01       	movw	r24, r12
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	f3 01       	movw	r30, r6
 338:	e8 0f       	add	r30, r24
 33a:	f9 1f       	adc	r31, r25
 33c:	80 80       	ld	r8, Z
 33e:	91 80       	ldd	r9, Z+1	; 0x01
 340:	84 01       	movw	r16, r8
            while(1){
                BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 342:	80 91 46 01 	lds	r24, 0x0146
 346:	8f 7e       	andi	r24, 0xEF	; 239
 348:	80 93 46 01 	sts	0x0146, r24
                LCD_Write(values[pos],1,0);
 34c:	c8 01       	movw	r24, r16
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	b0 d2       	rcall	.+1376   	; 0x8b8 <LCD_Write>
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
 358:	f5 01       	movw	r30, r10
 35a:	80 81       	ld	r24, Z
 35c:	85 fd       	sbrc	r24, 5
 35e:	7a c0       	rjmp	.+244    	; 0x454 <menuRun+0x210>
                {
                    BIT_OFF(progFlags, INACTIVE);
 360:	80 91 46 01 	lds	r24, 0x0146
 364:	8f 7e       	andi	r24, 0xEF	; 239
 366:	80 93 46 01 	sts	0x0146, r24
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
 36a:	0f 5f       	subi	r16, 0xFF	; 255
 36c:	1f 4f       	sbci	r17, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
 36e:	f2 e0       	ldi	r31, 0x02	; 2
 370:	cf 16       	cp	r12, r31
 372:	d1 04       	cpc	r13, r1
 374:	b9 f1       	breq	.+110    	; 0x3e4 <menuRun+0x1a0>
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	c8 16       	cp	r12, r24
 37a:	d1 04       	cpc	r13, r1
 37c:	34 f4       	brge	.+12     	; 0x38a <menuRun+0x146>
 37e:	e1 e0       	ldi	r30, 0x01	; 1
 380:	ce 16       	cp	r12, r30
 382:	d1 04       	cpc	r13, r1
 384:	09 f0       	breq	.+2      	; 0x388 <menuRun+0x144>
 386:	66 c0       	rjmp	.+204    	; 0x454 <menuRun+0x210>
 388:	0b c0       	rjmp	.+22     	; 0x3a0 <menuRun+0x15c>
 38a:	f3 e0       	ldi	r31, 0x03	; 3
 38c:	cf 16       	cp	r12, r31
 38e:	d1 04       	cpc	r13, r1
 390:	09 f4       	brne	.+2      	; 0x394 <menuRun+0x150>
 392:	48 c0       	rjmp	.+144    	; 0x424 <menuRun+0x1e0>
 394:	84 e0       	ldi	r24, 0x04	; 4
 396:	c8 16       	cp	r12, r24
 398:	d1 04       	cpc	r13, r1
 39a:	09 f0       	breq	.+2      	; 0x39e <menuRun+0x15a>
 39c:	5b c0       	rjmp	.+182    	; 0x454 <menuRun+0x210>
 39e:	4c c0       	rjmp	.+152    	; 0x438 <menuRun+0x1f4>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
 3a0:	b8 01       	movw	r22, r16
 3a2:	88 27       	eor	r24, r24
 3a4:	77 fd       	sbrc	r23, 7
 3a6:	80 95       	com	r24
 3a8:	98 2f       	mov	r25, r24
 3aa:	56 d3       	rcall	.+1708   	; 0xa58 <__floatsisf>
 3ac:	7b 01       	movw	r14, r22
 3ae:	8c 01       	movw	r16, r24
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	40 e7       	ldi	r20, 0x70	; 112
 3b6:	51 e4       	ldi	r21, 0x41	; 65
 3b8:	18 d3       	rcall	.+1584   	; 0x9ea <__cmpsf2>
 3ba:	88 23       	and	r24, r24
 3bc:	14 f4       	brge	.+4      	; 0x3c2 <menuRun+0x17e>
 3be:	82 01       	movw	r16, r4
 3c0:	49 c0       	rjmp	.+146    	; 0x454 <menuRun+0x210>
 3c2:	c8 01       	movw	r24, r16
 3c4:	b7 01       	movw	r22, r14
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 ea       	ldi	r20, 0xA0	; 160
 3cc:	51 e4       	ldi	r21, 0x41	; 65
 3ce:	f4 d3       	rcall	.+2024   	; 0xbb8 <__gesf2>
 3d0:	18 16       	cp	r1, r24
 3d2:	1c f4       	brge	.+6      	; 0x3da <menuRun+0x196>
 3d4:	04 e1       	ldi	r16, 0x14	; 20
 3d6:	10 e0       	ldi	r17, 0x00	; 0
 3d8:	3d c0       	rjmp	.+122    	; 0x454 <menuRun+0x210>
 3da:	c8 01       	movw	r24, r16
 3dc:	b7 01       	movw	r22, r14
 3de:	09 d3       	rcall	.+1554   	; 0x9f2 <__fixsfsi>
 3e0:	8b 01       	movw	r16, r22
 3e2:	38 c0       	rjmp	.+112    	; 0x454 <menuRun+0x210>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
 3e4:	b8 01       	movw	r22, r16
 3e6:	88 27       	eor	r24, r24
 3e8:	77 fd       	sbrc	r23, 7
 3ea:	80 95       	com	r24
 3ec:	98 2f       	mov	r25, r24
 3ee:	34 d3       	rcall	.+1640   	; 0xa58 <__floatsisf>
 3f0:	7b 01       	movw	r14, r22
 3f2:	8c 01       	movw	r16, r24
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	f6 d2       	rcall	.+1516   	; 0x9ea <__cmpsf2>
 3fe:	88 23       	and	r24, r24
 400:	3c f1       	brlt	.+78     	; 0x450 <menuRun+0x20c>
 402:	c8 01       	movw	r24, r16
 404:	b7 01       	movw	r22, r14
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	40 e8       	ldi	r20, 0x80	; 128
 40c:	5f e3       	ldi	r21, 0x3F	; 63
 40e:	d4 d3       	rcall	.+1960   	; 0xbb8 <__gesf2>
 410:	18 16       	cp	r1, r24
 412:	1c f4       	brge	.+6      	; 0x41a <menuRun+0x1d6>
 414:	01 e0       	ldi	r16, 0x01	; 1
 416:	10 e0       	ldi	r17, 0x00	; 0
 418:	1d c0       	rjmp	.+58     	; 0x454 <menuRun+0x210>
 41a:	c8 01       	movw	r24, r16
 41c:	b7 01       	movw	r22, r14
 41e:	e9 d2       	rcall	.+1490   	; 0x9f2 <__fixsfsi>
 420:	8b 01       	movw	r16, r22
 422:	18 c0       	rjmp	.+48     	; 0x454 <menuRun+0x210>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
 424:	11 23       	and	r17, r17
 426:	1c f4       	brge	.+6      	; 0x42e <menuRun+0x1ea>
 428:	0f ef       	ldi	r16, 0xFF	; 255
 42a:	13 e0       	ldi	r17, 0x03	; 3
 42c:	13 c0       	rjmp	.+38     	; 0x454 <menuRun+0x210>
 42e:	e4 e0       	ldi	r30, 0x04	; 4
 430:	00 30       	cpi	r16, 0x00	; 0
 432:	1e 07       	cpc	r17, r30
 434:	7c f0       	brlt	.+30     	; 0x454 <menuRun+0x210>
 436:	0c c0       	rjmp	.+24     	; 0x450 <menuRun+0x20c>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
 438:	c8 01       	movw	r24, r16
 43a:	10 16       	cp	r1, r16
 43c:	11 06       	cpc	r1, r17
 43e:	14 f4       	brge	.+4      	; 0x444 <menuRun+0x200>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	8c 01       	movw	r16, r24
 446:	99 23       	and	r25, r25
 448:	2c f4       	brge	.+10     	; 0x454 <menuRun+0x210>
 44a:	00 e0       	ldi	r16, 0x00	; 0
 44c:	10 e0       	ldi	r17, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <menuRun+0x210>
 450:	00 e0       	ldi	r16, 0x00	; 0
 452:	10 e0       	ldi	r17, 0x00	; 0
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
 454:	f5 01       	movw	r30, r10
 456:	80 81       	ld	r24, Z
 458:	84 fd       	sbrc	r24, 4
 45a:	7a c0       	rjmp	.+244    	; 0x550 <__stack+0x51>
                {
                    BIT_OFF(progFlags, INACTIVE);
 45c:	80 91 46 01 	lds	r24, 0x0146
 460:	8f 7e       	andi	r24, 0xEF	; 239
 462:	80 93 46 01 	sts	0x0146, r24
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
 466:	01 50       	subi	r16, 0x01	; 1
 468:	10 40       	sbci	r17, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
 46a:	f2 e0       	ldi	r31, 0x02	; 2
 46c:	cf 16       	cp	r12, r31
 46e:	d1 04       	cpc	r13, r1
 470:	b9 f1       	breq	.+110    	; 0x4e0 <menuRun+0x29c>
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	c8 16       	cp	r12, r24
 476:	d1 04       	cpc	r13, r1
 478:	34 f4       	brge	.+12     	; 0x486 <menuRun+0x242>
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	ce 16       	cp	r12, r30
 47e:	d1 04       	cpc	r13, r1
 480:	09 f0       	breq	.+2      	; 0x484 <menuRun+0x240>
 482:	66 c0       	rjmp	.+204    	; 0x550 <__stack+0x51>
 484:	0b c0       	rjmp	.+22     	; 0x49c <menuRun+0x258>
 486:	f3 e0       	ldi	r31, 0x03	; 3
 488:	cf 16       	cp	r12, r31
 48a:	d1 04       	cpc	r13, r1
 48c:	09 f4       	brne	.+2      	; 0x490 <menuRun+0x24c>
 48e:	48 c0       	rjmp	.+144    	; 0x520 <__stack+0x21>
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	c8 16       	cp	r12, r24
 494:	d1 04       	cpc	r13, r1
 496:	09 f0       	breq	.+2      	; 0x49a <menuRun+0x256>
 498:	5b c0       	rjmp	.+182    	; 0x550 <__stack+0x51>
 49a:	4c c0       	rjmp	.+152    	; 0x534 <__stack+0x35>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
 49c:	b8 01       	movw	r22, r16
 49e:	88 27       	eor	r24, r24
 4a0:	77 fd       	sbrc	r23, 7
 4a2:	80 95       	com	r24
 4a4:	98 2f       	mov	r25, r24
 4a6:	d8 d2       	rcall	.+1456   	; 0xa58 <__floatsisf>
 4a8:	7b 01       	movw	r14, r22
 4aa:	8c 01       	movw	r16, r24
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	40 e7       	ldi	r20, 0x70	; 112
 4b2:	51 e4       	ldi	r21, 0x41	; 65
 4b4:	9a d2       	rcall	.+1332   	; 0x9ea <__cmpsf2>
 4b6:	88 23       	and	r24, r24
 4b8:	14 f4       	brge	.+4      	; 0x4be <menuRun+0x27a>
 4ba:	82 01       	movw	r16, r4
 4bc:	49 c0       	rjmp	.+146    	; 0x550 <__stack+0x51>
 4be:	c8 01       	movw	r24, r16
 4c0:	b7 01       	movw	r22, r14
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 ea       	ldi	r20, 0xA0	; 160
 4c8:	51 e4       	ldi	r21, 0x41	; 65
 4ca:	76 d3       	rcall	.+1772   	; 0xbb8 <__gesf2>
 4cc:	18 16       	cp	r1, r24
 4ce:	1c f4       	brge	.+6      	; 0x4d6 <menuRun+0x292>
 4d0:	04 e1       	ldi	r16, 0x14	; 20
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	3d c0       	rjmp	.+122    	; 0x550 <__stack+0x51>
 4d6:	c8 01       	movw	r24, r16
 4d8:	b7 01       	movw	r22, r14
 4da:	8b d2       	rcall	.+1302   	; 0x9f2 <__fixsfsi>
 4dc:	8b 01       	movw	r16, r22
 4de:	38 c0       	rjmp	.+112    	; 0x550 <__stack+0x51>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
 4e0:	b8 01       	movw	r22, r16
 4e2:	88 27       	eor	r24, r24
 4e4:	77 fd       	sbrc	r23, 7
 4e6:	80 95       	com	r24
 4e8:	98 2f       	mov	r25, r24
 4ea:	b6 d2       	rcall	.+1388   	; 0xa58 <__floatsisf>
 4ec:	7b 01       	movw	r14, r22
 4ee:	8c 01       	movw	r16, r24
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	78 d2       	rcall	.+1264   	; 0x9ea <__cmpsf2>
 4fa:	88 23       	and	r24, r24
 4fc:	3c f1       	brlt	.+78     	; 0x54c <__stack+0x4d>
 4fe:	c8 01       	movw	r24, r16
 500:	b7 01       	movw	r22, r14
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	40 e8       	ldi	r20, 0x80	; 128
 508:	5f e3       	ldi	r21, 0x3F	; 63
 50a:	56 d3       	rcall	.+1708   	; 0xbb8 <__gesf2>
 50c:	18 16       	cp	r1, r24
 50e:	1c f4       	brge	.+6      	; 0x516 <__stack+0x17>
 510:	01 e0       	ldi	r16, 0x01	; 1
 512:	10 e0       	ldi	r17, 0x00	; 0
 514:	1d c0       	rjmp	.+58     	; 0x550 <__stack+0x51>
 516:	c8 01       	movw	r24, r16
 518:	b7 01       	movw	r22, r14
 51a:	6b d2       	rcall	.+1238   	; 0x9f2 <__fixsfsi>
 51c:	8b 01       	movw	r16, r22
 51e:	18 c0       	rjmp	.+48     	; 0x550 <__stack+0x51>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
 520:	11 23       	and	r17, r17
 522:	1c f4       	brge	.+6      	; 0x52a <__stack+0x2b>
 524:	0f ef       	ldi	r16, 0xFF	; 255
 526:	13 e0       	ldi	r17, 0x03	; 3
 528:	13 c0       	rjmp	.+38     	; 0x550 <__stack+0x51>
 52a:	e4 e0       	ldi	r30, 0x04	; 4
 52c:	00 30       	cpi	r16, 0x00	; 0
 52e:	1e 07       	cpc	r17, r30
 530:	7c f0       	brlt	.+30     	; 0x550 <__stack+0x51>
 532:	0c c0       	rjmp	.+24     	; 0x54c <__stack+0x4d>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
 534:	c8 01       	movw	r24, r16
 536:	10 16       	cp	r1, r16
 538:	11 06       	cpc	r1, r17
 53a:	14 f4       	brge	.+4      	; 0x540 <__stack+0x41>
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	8c 01       	movw	r16, r24
 542:	99 23       	and	r25, r25
 544:	2c f4       	brge	.+10     	; 0x550 <__stack+0x51>
 546:	00 e0       	ldi	r16, 0x00	; 0
 548:	10 e0       	ldi	r17, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <__stack+0x51>
 54c:	00 e0       	ldi	r16, 0x00	; 0
 54e:	10 e0       	ldi	r17, 0x00	; 0
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);

                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 550:	f5 01       	movw	r30, r10
 552:	80 81       	ld	r24, Z
 554:	82 ff       	sbrs	r24, 2
 556:	1f c0       	rjmp	.+62     	; 0x596 <__stack+0x97>
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
 558:	80 81       	ld	r24, Z
 55a:	83 fd       	sbrc	r24, 3
 55c:	f2 ce       	rjmp	.-540    	; 0x342 <menuRun+0xfe>
                    if(pos!=3){
 55e:	f3 e0       	ldi	r31, 0x03	; 3
 560:	cf 16       	cp	r12, r31
 562:	d1 04       	cpc	r13, r1
 564:	49 f0       	breq	.+18     	; 0x578 <__stack+0x79>
 566:	c6 01       	movw	r24, r12
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	f3 01       	movw	r30, r6
 56e:	e8 0f       	add	r30, r24
 570:	f9 1f       	adc	r31, r25
                        values[pos]= (uint8_t)value;
 572:	80 82       	st	Z, r8
 574:	11 82       	std	Z+1, r1	; 0x01
 576:	17 c0       	rjmp	.+46     	; 0x5a6 <__stack+0xa7>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
 578:	81 14       	cp	r8, r1
 57a:	91 04       	cpc	r9, r1
 57c:	31 f0       	breq	.+12     	; 0x58a <__stack+0x8b>
 57e:	80 91 46 01 	lds	r24, 0x0146
 582:	84 60       	ori	r24, 0x04	; 4
 584:	80 93 46 01 	sts	0x0146, r24
 588:	dc ce       	rjmp	.-584    	; 0x342 <menuRun+0xfe>
 58a:	80 91 46 01 	lds	r24, 0x0146
 58e:	8b 7f       	andi	r24, 0xFB	; 251
 590:	80 93 46 01 	sts	0x0146, r24
 594:	d6 ce       	rjmp	.-596    	; 0x342 <menuRun+0xfe>
 596:	c6 01       	movw	r24, r12
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	f3 01       	movw	r30, r6
 59e:	e8 0f       	add	r30, r24
 5a0:	f9 1f       	adc	r31, r25
 5a2:	11 83       	std	Z+1, r17	; 0x01
 5a4:	00 83       	st	Z, r16
                    }          
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 5a6:	c6 01       	movw	r24, r12
 5a8:	82 95       	swap	r24
 5aa:	92 95       	swap	r25
 5ac:	90 7f       	andi	r25, 0xF0	; 240
 5ae:	98 27       	eor	r25, r24
 5b0:	80 7f       	andi	r24, 0xF0	; 240
 5b2:	98 27       	eor	r25, r24
 5b4:	82 0d       	add	r24, r2
 5b6:	93 1d       	adc	r25, r3
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	7b d1       	rcall	.+758    	; 0x8b8 <LCD_Write>
        LCD_Write(values[pos],1,0);
 5c2:	c6 01       	movw	r24, r12
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	f3 01       	movw	r30, r6
 5ca:	e8 0f       	add	r30, r24
 5cc:	f9 1f       	adc	r31, r25
 5ce:	80 81       	ld	r24, Z
 5d0:	91 81       	ldd	r25, Z+1	; 0x01
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	6e d1       	rcall	.+732    	; 0x8b8 <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
 5dc:	f5 01       	movw	r30, r10
 5de:	80 81       	ld	r24, Z
 5e0:	85 fd       	sbrc	r24, 5
 5e2:	16 c0       	rjmp	.+44     	; 0x610 <__stack+0x111>
        {
            BIT_OFF(progFlags, INACTIVE);
 5e4:	80 91 46 01 	lds	r24, 0x0146
 5e8:	8f 7e       	andi	r24, 0xEF	; 239
 5ea:	80 93 46 01 	sts	0x0146, r24
            pos++;
 5ee:	08 94       	sec
 5f0:	c1 1c       	adc	r12, r1
 5f2:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
 5f4:	dd 20       	and	r13, r13
 5f6:	34 f4       	brge	.+12     	; 0x604 <__stack+0x105>
 5f8:	0f 2e       	mov	r0, r31
 5fa:	f3 e0       	ldi	r31, 0x03	; 3
 5fc:	cf 2e       	mov	r12, r31
 5fe:	dd 24       	eor	r13, r13
 600:	f0 2d       	mov	r31, r0
 602:	06 c0       	rjmp	.+12     	; 0x610 <__stack+0x111>
 604:	f4 e0       	ldi	r31, 0x04	; 4
 606:	cf 16       	cp	r12, r31
 608:	d1 04       	cpc	r13, r1
 60a:	14 f0       	brlt	.+4      	; 0x610 <__stack+0x111>
 60c:	cc 24       	eor	r12, r12
 60e:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
 610:	f5 01       	movw	r30, r10
 612:	80 81       	ld	r24, Z
 614:	84 fd       	sbrc	r24, 4
 616:	16 c0       	rjmp	.+44     	; 0x644 <__stack+0x145>
        {
            BIT_OFF(progFlags, INACTIVE);
 618:	80 91 46 01 	lds	r24, 0x0146
 61c:	8f 7e       	andi	r24, 0xEF	; 239
 61e:	80 93 46 01 	sts	0x0146, r24
            pos--;
 622:	08 94       	sec
 624:	c1 08       	sbc	r12, r1
 626:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
 628:	dd 20       	and	r13, r13
 62a:	34 f4       	brge	.+12     	; 0x638 <__stack+0x139>
 62c:	0f 2e       	mov	r0, r31
 62e:	f3 e0       	ldi	r31, 0x03	; 3
 630:	cf 2e       	mov	r12, r31
 632:	dd 24       	eor	r13, r13
 634:	f0 2d       	mov	r31, r0
 636:	06 c0       	rjmp	.+12     	; 0x644 <__stack+0x145>
 638:	f4 e0       	ldi	r31, 0x04	; 4
 63a:	cf 16       	cp	r12, r31
 63c:	d1 04       	cpc	r13, r1
 63e:	14 f0       	brlt	.+4      	; 0x644 <__stack+0x145>
 640:	cc 24       	eor	r12, r12
 642:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 644:	f5 01       	movw	r30, r10
 646:	80 81       	ld	r24, Z
 648:	82 ff       	sbrs	r24, 2
 64a:	04 c0       	rjmp	.+8      	; 0x654 <__stack+0x155>
        if(BIT_READ(progFlags, INACTIVE)) break;
 64c:	80 91 46 01 	lds	r24, 0x0146
 650:	84 ff       	sbrs	r24, 4
 652:	65 ce       	rjmp	.-822    	; 0x31e <menuRun+0xda>
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
 654:	80 91 46 01 	lds	r24, 0x0146
 658:	8d 7e       	andi	r24, 0xED	; 237
 65a:	80 93 46 01 	sts	0x0146, r24
//     }
}

inline void menuStop()
{
    LCD_Clear();
 65e:	d2 d0       	rcall	.+420    	; 0x804 <LCD_Clear>
        if(BIT_READ(progFlags, INACTIVE)) break;
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
 660:	c8 5b       	subi	r28, 0xB8	; 184
 662:	df 4f       	sbci	r29, 0xFF	; 255
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	cf 91       	pop	r28
 670:	df 91       	pop	r29
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	bf 90       	pop	r11
 680:	af 90       	pop	r10
 682:	9f 90       	pop	r9
 684:	8f 90       	pop	r8
 686:	7f 90       	pop	r7
 688:	6f 90       	pop	r6
 68a:	5f 90       	pop	r5
 68c:	4f 90       	pop	r4
 68e:	3f 90       	pop	r3
 690:	2f 90       	pop	r2
 692:	08 95       	ret

00000694 <main>:

int main(void)
{   
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
 698:	87 e0       	ldi	r24, 0x07	; 7
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	90 93 c5 00 	sts	0x00C5, r25
 6a0:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
 6a4:	e2 ec       	ldi	r30, 0xC2	; 194
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	8f 7d       	andi	r24, 0xDF	; 223
 6ac:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
 6ae:	80 81       	ld	r24, Z
 6b0:	8f 7e       	andi	r24, 0xEF	; 239
 6b2:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
 6b4:	a1 ec       	ldi	r26, 0xC1	; 193
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
 6b8:	8c 91       	ld	r24, X
 6ba:	8b 7f       	andi	r24, 0xFB	; 251
 6bc:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
 6be:	80 81       	ld	r24, Z
 6c0:	84 60       	ori	r24, 0x04	; 4
 6c2:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
 6c4:	80 81       	ld	r24, Z
 6c6:	82 60       	ori	r24, 0x02	; 2
 6c8:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
 6ca:	80 81       	ld	r24, Z
 6cc:	87 7f       	andi	r24, 0xF7	; 247
 6ce:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
 6d0:	8c 91       	ld	r24, X
 6d2:	88 60       	ori	r24, 0x08	; 8
 6d4:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 1);  // прием разрешен
 6d6:	8c 91       	ld	r24, X
 6d8:	80 61       	ori	r24, 0x10	; 16
 6da:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 1); // прерывание приема разрешено
 6dc:	8c 91       	ld	r24, X
 6de:	80 68       	ori	r24, 0x80	; 128
 6e0:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
 6e2:	8c 91       	ld	r24, X
 6e4:	80 64       	ori	r24, 0x40	; 64
 6e6:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
 6e8:	8c 91       	ld	r24, X
 6ea:	8f 7d       	andi	r24, 0xDF	; 223
 6ec:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
 6ee:	e7 e2       	ldi	r30, 0x27	; 39
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	8e 7f       	andi	r24, 0xFE	; 254
 6f6:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD); // управление подсветкой экрана и нагрузкой на выход
 6f8:	ea e2       	ldi	r30, 0x2A	; 42
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 ec       	ldi	r24, 0xC0	; 192
 6fe:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
 700:	80 81       	ld	r24, Z
 702:	83 7c       	andi	r24, 0xC3	; 195
 704:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
 706:	8c e3       	ldi	r24, 0x3C	; 60
 708:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
 70a:	ec e7       	ldi	r30, 0x7C	; 124
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	80 64       	ori	r24, 0x40	; 64
 712:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
 714:	ab e7       	ldi	r26, 0x7B	; 123
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	8c 91       	ld	r24, X
 71a:	83 60       	ori	r24, 0x03	; 3
 71c:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
 71e:	80 81       	ld	r24, Z
 720:	80 62       	ori	r24, 0x20	; 32
 722:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
 724:	aa e7       	ldi	r26, 0x7A	; 122
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	8c 91       	ld	r24, X
 72a:	80 62       	ori	r24, 0x20	; 32
 72c:	8c 93       	st	X, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
 72e:	8c 91       	ld	r24, X
 730:	88 60       	ori	r24, 0x08	; 8
 732:	8c 93       	st	X, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
 734:	8c 91       	ld	r24, X
 736:	80 68       	ori	r24, 0x80	; 128
 738:	8c 93       	st	X, r24
    //DIDR0 |= 1 << ADC0D; // отключить цифровой вход ADC0D
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
 73a:	e4 e4       	ldi	r30, 0x44	; 68
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 81       	ld	r24, Z
 740:	82 60       	ori	r24, 0x02	; 2
 742:	80 83       	st	Z, r24
    OCR0A= measureRate;
 744:	80 91 05 01 	lds	r24, 0x0105
 748:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
 74a:	e5 e4       	ldi	r30, 0x45	; 69
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	84 60       	ori	r24, 0x04	; 4
 752:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
 754:	ee e6       	ldi	r30, 0x6E	; 110
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	82 60       	ori	r24, 0x02	; 2
 75c:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
 75e:	85 e0       	ldi	r24, 0x05	; 5
 760:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
 764:	e6 eb       	ldi	r30, 0xB6	; 182
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	80 62       	ori	r24, 0x20	; 32
 76c:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
 76e:	e0 e7       	ldi	r30, 0x70	; 112
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	81 60       	ori	r24, 0x01	; 1
 776:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    //LCD_Init();

    BIT_WRITE(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
 778:	e4 e6       	ldi	r30, 0x64	; 100
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	80 68       	ori	r24, 0x80	; 128
 780:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
 782:	80 81       	ld	r24, Z
 784:	88 60       	ori	r24, 0x08	; 8
 786:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
 788:	80 81       	ld	r24, Z
 78a:	84 60       	ori	r24, 0x04	; 4
 78c:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
 78e:	8c 91       	ld	r24, X
 790:	80 64       	ori	r24, 0x40	; 64
 792:	8c 93       	st	X, r24

    sei();
 794:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
 796:	c9 e2       	ldi	r28, 0x29	; 41
 798:	d0 e0       	ldi	r29, 0x00	; 0
 79a:	88 81       	ld	r24, Y
 79c:	84 ff       	sbrs	r24, 4
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <main+0x118>
 7a0:	88 81       	ld	r24, Y
 7a2:	85 ff       	sbrs	r24, 5
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <main+0x118>
 7a6:	88 81       	ld	r24, Y
 7a8:	82 fd       	sbrc	r24, 2
 7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <main+0x124>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 7ac:	80 91 46 01 	lds	r24, 0x0146
 7b0:	8f 7e       	andi	r24, 0xEF	; 239
            BIT_ON(progFlags, LCD_ON);
 7b2:	81 60       	ori	r24, 0x01	; 1
 7b4:	80 93 46 01 	sts	0x0146, r24
            //LCD_turnOn();
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
 7b8:	88 81       	ld	r24, Y
 7ba:	83 fd       	sbrc	r24, 3
 7bc:	10 c0       	rjmp	.+32     	; 0x7de <main+0x14a>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 7be:	80 91 46 01 	lds	r24, 0x0146
 7c2:	8f 7e       	andi	r24, 0xEF	; 239
 7c4:	80 93 46 01 	sts	0x0146, r24
            if (!BIT_READ(progFlags, LCD_ON))
 7c8:	80 fd       	sbrc	r24, 0
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <main+0x13e>
            {
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
 7cc:	81 60       	ori	r24, 0x01	; 1
 7ce:	80 93 46 01 	sts	0x0146, r24
                //LCD_turnOn();
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
 7d2:	80 91 46 01 	lds	r24, 0x0146
 7d6:	82 60       	ori	r24, 0x02	; 2
 7d8:	80 93 46 01 	sts	0x0146, r24
            menuRun(); // обработка команд меню
 7dc:	33 dd       	rcall	.-1434   	; 0x244 <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE))
 7de:	80 91 46 01 	lds	r24, 0x0146
 7e2:	84 ff       	sbrs	r24, 4
 7e4:	da cf       	rjmp	.-76     	; 0x79a <main+0x106>
        {
            if(BIT_READ(progFlags, LCD_ON))
 7e6:	80 ff       	sbrs	r24, 0
 7e8:	d8 cf       	rjmp	.-80     	; 0x79a <main+0x106>
            {
                BIT_OFF(progFlags, LCD_ON);
 7ea:	8e 7f       	andi	r24, 0xFE	; 254
 7ec:	80 93 46 01 	sts	0x0146, r24
 7f0:	d4 cf       	rjmp	.-88     	; 0x79a <main+0x106>

000007f2 <LCD_Busy>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 7f2:	8e e0       	ldi	r24, 0x0E	; 14
 7f4:	98 2f       	mov	r25, r24
 7f6:	9a 95       	dec	r25
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <LCD_Busy+0x4>
//     }
//     LCD_PORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
//     LCD_REG|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
//     BIT_OFF(LCD_PORT, LCD_RW);
//     return 0;
}
 7fa:	8a 95       	dec	r24
 7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCD_Busy+0x8>
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	08 95       	ret

00000804 <LCD_Clear>:

 void LCD_Clear()
 {
    while(LCD_Busy());
 804:	f6 df       	rcall	.-20     	; 0x7f2 <LCD_Busy>
 806:	89 2b       	or	r24, r25
 808:	e9 f7       	brne	.-6      	; 0x804 <LCD_Clear>
    BIT_OFF(LCD_PORT, LCD_RS);
 80a:	e5 e2       	ldi	r30, 0x25	; 37
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	8f 7d       	andi	r24, 0xDF	; 223
 812:	80 83       	st	Z, r24
    BIT_ON(LCD_PORT, LCD_EN);
 814:	80 81       	ld	r24, Z
 816:	80 61       	ori	r24, 0x10	; 16
 818:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D3, 0);
 81a:	80 81       	ld	r24, Z
 81c:	87 7f       	andi	r24, 0xF7	; 247
 81e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D2, 0);
 820:	80 81       	ld	r24, Z
 822:	8b 7f       	andi	r24, 0xFB	; 251
 824:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D1, 0);
 826:	80 81       	ld	r24, Z
 828:	8d 7f       	andi	r24, 0xFD	; 253
 82a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D0, 0);
 82c:	80 81       	ld	r24, Z
 82e:	8e 7f       	andi	r24, 0xFE	; 254
 830:	80 83       	st	Z, r24
    BIT_OFF(LCD_PORT, LCD_EN);
 832:	80 81       	ld	r24, Z
 834:	8f 7e       	andi	r24, 0xEF	; 239
 836:	80 83       	st	Z, r24
    BIT_ON(LCD_PORT, LCD_EN);
 838:	80 81       	ld	r24, Z
 83a:	80 61       	ori	r24, 0x10	; 16
 83c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D3, 0);
 83e:	80 81       	ld	r24, Z
 840:	87 7f       	andi	r24, 0xF7	; 247
 842:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D2, 0);
 844:	80 81       	ld	r24, Z
 846:	8b 7f       	andi	r24, 0xFB	; 251
 848:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D1, 0);
 84a:	80 81       	ld	r24, Z
 84c:	8d 7f       	andi	r24, 0xFD	; 253
 84e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D0, 1);
 850:	80 81       	ld	r24, Z
 852:	81 60       	ori	r24, 0x01	; 1
 854:	80 83       	st	Z, r24
    BIT_OFF(LCD_PORT, LCD_EN);
 856:	80 81       	ld	r24, Z
 858:	8f 7e       	andi	r24, 0xEF	; 239
 85a:	80 83       	st	Z, r24
 }
 85c:	08 95       	ret

0000085e <LCD_SetCursor>:
     BIT_OFF(LCD_PORT, LCD_EN);
 }
 
 void LCD_SetCursor(int row, int col)
 {  
    while(LCD_Busy());
 85e:	c9 df       	rcall	.-110    	; 0x7f2 <LCD_Busy>
 860:	89 2b       	or	r24, r25
 862:	e9 f7       	brne	.-6      	; 0x85e <LCD_SetCursor>
    BIT_OFF(LCD_PORT, LCD_RS); // переместрить курсор на адрес 0 в DDRAM
 864:	e5 e2       	ldi	r30, 0x25	; 37
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	8f 7d       	andi	r24, 0xDF	; 223
 86c:	80 83       	st	Z, r24
    BIT_ON(LCD_PORT, LCD_EN);                                           //TODO: конвертация номера строки и столбца в адрес
 86e:	80 81       	ld	r24, Z
 870:	80 61       	ori	r24, 0x10	; 16
 872:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D3, 1);
 874:	80 81       	ld	r24, Z
 876:	88 60       	ori	r24, 0x08	; 8
 878:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D2, 0);
 87a:	80 81       	ld	r24, Z
 87c:	8b 7f       	andi	r24, 0xFB	; 251
 87e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D1, 0);
 880:	80 81       	ld	r24, Z
 882:	8d 7f       	andi	r24, 0xFD	; 253
 884:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D0, 0);
 886:	80 81       	ld	r24, Z
 888:	8e 7f       	andi	r24, 0xFE	; 254
 88a:	80 83       	st	Z, r24
    BIT_OFF(LCD_PORT, LCD_EN);
 88c:	80 81       	ld	r24, Z
 88e:	8f 7e       	andi	r24, 0xEF	; 239
 890:	80 83       	st	Z, r24
    BIT_ON(LCD_PORT, LCD_EN);
 892:	80 81       	ld	r24, Z
 894:	80 61       	ori	r24, 0x10	; 16
 896:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D3, 0);
 898:	80 81       	ld	r24, Z
 89a:	87 7f       	andi	r24, 0xF7	; 247
 89c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D2, 0);
 89e:	80 81       	ld	r24, Z
 8a0:	8b 7f       	andi	r24, 0xFB	; 251
 8a2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D1, 0);
 8a4:	80 81       	ld	r24, Z
 8a6:	8d 7f       	andi	r24, 0xFD	; 253
 8a8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_PORT, LCD_D0, 0);
 8aa:	80 81       	ld	r24, Z
 8ac:	8e 7f       	andi	r24, 0xFE	; 254
 8ae:	80 83       	st	Z, r24
    BIT_OFF(LCD_PORT, LCD_EN);
 8b0:	80 81       	ld	r24, Z
 8b2:	8f 7e       	andi	r24, 0xEF	; 239
 8b4:	80 83       	st	Z, r24
 }
 8b6:	08 95       	ret

000008b8 <LCD_Write>:
    BIT_OFF(LCD_PORT, LCD_EN);
    void LCD_Clear();
 }

 void LCD_Write(char* data, uint8_t posY, uint8_t posX ) //TODO: доопределить, учесть конветацию чисел в символы
 {
 8b8:	86 2f       	mov	r24, r22
     LCD_SetCursor(posY, posX);
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	64 2f       	mov	r22, r20
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	ce df       	rcall	.-100    	; 0x85e <LCD_SetCursor>
     cli();
 8c2:	f8 94       	cli
     while(LCD_Busy());
 8c4:	96 df       	rcall	.-212    	; 0x7f2 <LCD_Busy>
 8c6:	89 2b       	or	r24, r25
 8c8:	e9 f7       	brne	.-6      	; 0x8c4 <LCD_Write+0xc>
     BIT_ON(LCD_PORT, LCD_RS);
 8ca:	e5 e2       	ldi	r30, 0x25	; 37
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	80 62       	ori	r24, 0x20	; 32
 8d2:	80 83       	st	Z, r24
     BIT_ON(LCD_PORT, LCD_EN);
 8d4:	80 81       	ld	r24, Z
 8d6:	80 61       	ori	r24, 0x10	; 16
 8d8:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D3, 0);
 8da:	80 81       	ld	r24, Z
 8dc:	87 7f       	andi	r24, 0xF7	; 247
 8de:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D2, 0);
 8e0:	80 81       	ld	r24, Z
 8e2:	8b 7f       	andi	r24, 0xFB	; 251
 8e4:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D1, 1);
 8e6:	80 81       	ld	r24, Z
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D0, 0);
 8ec:	80 81       	ld	r24, Z
 8ee:	8e 7f       	andi	r24, 0xFE	; 254
 8f0:	80 83       	st	Z, r24
     BIT_OFF(LCD_PORT, LCD_EN);
 8f2:	80 81       	ld	r24, Z
 8f4:	8f 7e       	andi	r24, 0xEF	; 239
 8f6:	80 83       	st	Z, r24
     BIT_ON(LCD_PORT, LCD_EN);
 8f8:	80 81       	ld	r24, Z
 8fa:	80 61       	ori	r24, 0x10	; 16
 8fc:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D3, 0);
 8fe:	80 81       	ld	r24, Z
 900:	87 7f       	andi	r24, 0xF7	; 247
 902:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D2, 0);
 904:	80 81       	ld	r24, Z
 906:	8b 7f       	andi	r24, 0xFB	; 251
 908:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D1, 1);
 90a:	80 81       	ld	r24, Z
 90c:	82 60       	ori	r24, 0x02	; 2
 90e:	80 83       	st	Z, r24
     BIT_WRITE(LCD_PORT, LCD_D0, 1);
 910:	80 81       	ld	r24, Z
 912:	81 60       	ori	r24, 0x01	; 1
 914:	80 83       	st	Z, r24
     BIT_OFF(LCD_PORT, LCD_EN);
 916:	80 81       	ld	r24, Z
 918:	8f 7e       	andi	r24, 0xEF	; 239
 91a:	80 83       	st	Z, r24
     sei();
 91c:	78 94       	sei
 }
 91e:	08 95       	ret

00000920 <__subsf3>:
 920:	50 58       	subi	r21, 0x80	; 128

00000922 <__addsf3>:
 922:	bb 27       	eor	r27, r27
 924:	aa 27       	eor	r26, r26
 926:	0e d0       	rcall	.+28     	; 0x944 <__addsf3x>
 928:	0d c1       	rjmp	.+538    	; 0xb44 <__fp_round>
 92a:	fe d0       	rcall	.+508    	; 0xb28 <__fp_pscA>
 92c:	30 f0       	brcs	.+12     	; 0x93a <__addsf3+0x18>
 92e:	03 d1       	rcall	.+518    	; 0xb36 <__fp_pscB>
 930:	20 f0       	brcs	.+8      	; 0x93a <__addsf3+0x18>
 932:	31 f4       	brne	.+12     	; 0x940 <__addsf3+0x1e>
 934:	9f 3f       	cpi	r25, 0xFF	; 255
 936:	11 f4       	brne	.+4      	; 0x93c <__addsf3+0x1a>
 938:	1e f4       	brtc	.+6      	; 0x940 <__addsf3+0x1e>
 93a:	f3 c0       	rjmp	.+486    	; 0xb22 <__fp_nan>
 93c:	0e f4       	brtc	.+2      	; 0x940 <__addsf3+0x1e>
 93e:	e0 95       	com	r30
 940:	e7 fb       	bst	r30, 7
 942:	e9 c0       	rjmp	.+466    	; 0xb16 <__fp_inf>

00000944 <__addsf3x>:
 944:	e9 2f       	mov	r30, r25
 946:	0f d1       	rcall	.+542    	; 0xb66 <__fp_split3>
 948:	80 f3       	brcs	.-32     	; 0x92a <__addsf3+0x8>
 94a:	ba 17       	cp	r27, r26
 94c:	62 07       	cpc	r22, r18
 94e:	73 07       	cpc	r23, r19
 950:	84 07       	cpc	r24, r20
 952:	95 07       	cpc	r25, r21
 954:	18 f0       	brcs	.+6      	; 0x95c <__addsf3x+0x18>
 956:	71 f4       	brne	.+28     	; 0x974 <__addsf3x+0x30>
 958:	9e f5       	brtc	.+102    	; 0x9c0 <__addsf3x+0x7c>
 95a:	27 c1       	rjmp	.+590    	; 0xbaa <__fp_zero>
 95c:	0e f4       	brtc	.+2      	; 0x960 <__addsf3x+0x1c>
 95e:	e0 95       	com	r30
 960:	0b 2e       	mov	r0, r27
 962:	ba 2f       	mov	r27, r26
 964:	a0 2d       	mov	r26, r0
 966:	0b 01       	movw	r0, r22
 968:	b9 01       	movw	r22, r18
 96a:	90 01       	movw	r18, r0
 96c:	0c 01       	movw	r0, r24
 96e:	ca 01       	movw	r24, r20
 970:	a0 01       	movw	r20, r0
 972:	11 24       	eor	r1, r1
 974:	ff 27       	eor	r31, r31
 976:	59 1b       	sub	r21, r25
 978:	99 f0       	breq	.+38     	; 0x9a0 <__addsf3x+0x5c>
 97a:	59 3f       	cpi	r21, 0xF9	; 249
 97c:	50 f4       	brcc	.+20     	; 0x992 <__addsf3x+0x4e>
 97e:	50 3e       	cpi	r21, 0xE0	; 224
 980:	68 f1       	brcs	.+90     	; 0x9dc <__addsf3x+0x98>
 982:	1a 16       	cp	r1, r26
 984:	f0 40       	sbci	r31, 0x00	; 0
 986:	a2 2f       	mov	r26, r18
 988:	23 2f       	mov	r18, r19
 98a:	34 2f       	mov	r19, r20
 98c:	44 27       	eor	r20, r20
 98e:	58 5f       	subi	r21, 0xF8	; 248
 990:	f3 cf       	rjmp	.-26     	; 0x978 <__addsf3x+0x34>
 992:	46 95       	lsr	r20
 994:	37 95       	ror	r19
 996:	27 95       	ror	r18
 998:	a7 95       	ror	r26
 99a:	f0 40       	sbci	r31, 0x00	; 0
 99c:	53 95       	inc	r21
 99e:	c9 f7       	brne	.-14     	; 0x992 <__addsf3x+0x4e>
 9a0:	7e f4       	brtc	.+30     	; 0x9c0 <__addsf3x+0x7c>
 9a2:	1f 16       	cp	r1, r31
 9a4:	ba 0b       	sbc	r27, r26
 9a6:	62 0b       	sbc	r22, r18
 9a8:	73 0b       	sbc	r23, r19
 9aa:	84 0b       	sbc	r24, r20
 9ac:	ba f0       	brmi	.+46     	; 0x9dc <__addsf3x+0x98>
 9ae:	91 50       	subi	r25, 0x01	; 1
 9b0:	a1 f0       	breq	.+40     	; 0x9da <__addsf3x+0x96>
 9b2:	ff 0f       	add	r31, r31
 9b4:	bb 1f       	adc	r27, r27
 9b6:	66 1f       	adc	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	c2 f7       	brpl	.-16     	; 0x9ae <__addsf3x+0x6a>
 9be:	0e c0       	rjmp	.+28     	; 0x9dc <__addsf3x+0x98>
 9c0:	ba 0f       	add	r27, r26
 9c2:	62 1f       	adc	r22, r18
 9c4:	73 1f       	adc	r23, r19
 9c6:	84 1f       	adc	r24, r20
 9c8:	48 f4       	brcc	.+18     	; 0x9dc <__addsf3x+0x98>
 9ca:	87 95       	ror	r24
 9cc:	77 95       	ror	r23
 9ce:	67 95       	ror	r22
 9d0:	b7 95       	ror	r27
 9d2:	f7 95       	ror	r31
 9d4:	9e 3f       	cpi	r25, 0xFE	; 254
 9d6:	08 f0       	brcs	.+2      	; 0x9da <__addsf3x+0x96>
 9d8:	b3 cf       	rjmp	.-154    	; 0x940 <__addsf3+0x1e>
 9da:	93 95       	inc	r25
 9dc:	88 0f       	add	r24, r24
 9de:	08 f0       	brcs	.+2      	; 0x9e2 <__addsf3x+0x9e>
 9e0:	99 27       	eor	r25, r25
 9e2:	ee 0f       	add	r30, r30
 9e4:	97 95       	ror	r25
 9e6:	87 95       	ror	r24
 9e8:	08 95       	ret

000009ea <__cmpsf2>:
 9ea:	71 d0       	rcall	.+226    	; 0xace <__fp_cmp>
 9ec:	08 f4       	brcc	.+2      	; 0x9f0 <__cmpsf2+0x6>
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	08 95       	ret

000009f2 <__fixsfsi>:
 9f2:	04 d0       	rcall	.+8      	; 0x9fc <__fixunssfsi>
 9f4:	68 94       	set
 9f6:	b1 11       	cpse	r27, r1
 9f8:	d9 c0       	rjmp	.+434    	; 0xbac <__fp_szero>
 9fa:	08 95       	ret

000009fc <__fixunssfsi>:
 9fc:	bc d0       	rcall	.+376    	; 0xb76 <__fp_splitA>
 9fe:	88 f0       	brcs	.+34     	; 0xa22 <__fixunssfsi+0x26>
 a00:	9f 57       	subi	r25, 0x7F	; 127
 a02:	90 f0       	brcs	.+36     	; 0xa28 <__fixunssfsi+0x2c>
 a04:	b9 2f       	mov	r27, r25
 a06:	99 27       	eor	r25, r25
 a08:	b7 51       	subi	r27, 0x17	; 23
 a0a:	a0 f0       	brcs	.+40     	; 0xa34 <__fixunssfsi+0x38>
 a0c:	d1 f0       	breq	.+52     	; 0xa42 <__fixunssfsi+0x46>
 a0e:	66 0f       	add	r22, r22
 a10:	77 1f       	adc	r23, r23
 a12:	88 1f       	adc	r24, r24
 a14:	99 1f       	adc	r25, r25
 a16:	1a f0       	brmi	.+6      	; 0xa1e <__fixunssfsi+0x22>
 a18:	ba 95       	dec	r27
 a1a:	c9 f7       	brne	.-14     	; 0xa0e <__fixunssfsi+0x12>
 a1c:	12 c0       	rjmp	.+36     	; 0xa42 <__fixunssfsi+0x46>
 a1e:	b1 30       	cpi	r27, 0x01	; 1
 a20:	81 f0       	breq	.+32     	; 0xa42 <__fixunssfsi+0x46>
 a22:	c3 d0       	rcall	.+390    	; 0xbaa <__fp_zero>
 a24:	b1 e0       	ldi	r27, 0x01	; 1
 a26:	08 95       	ret
 a28:	c0 c0       	rjmp	.+384    	; 0xbaa <__fp_zero>
 a2a:	67 2f       	mov	r22, r23
 a2c:	78 2f       	mov	r23, r24
 a2e:	88 27       	eor	r24, r24
 a30:	b8 5f       	subi	r27, 0xF8	; 248
 a32:	39 f0       	breq	.+14     	; 0xa42 <__fixunssfsi+0x46>
 a34:	b9 3f       	cpi	r27, 0xF9	; 249
 a36:	cc f3       	brlt	.-14     	; 0xa2a <__fixunssfsi+0x2e>
 a38:	86 95       	lsr	r24
 a3a:	77 95       	ror	r23
 a3c:	67 95       	ror	r22
 a3e:	b3 95       	inc	r27
 a40:	d9 f7       	brne	.-10     	; 0xa38 <__fixunssfsi+0x3c>
 a42:	3e f4       	brtc	.+14     	; 0xa52 <__fixunssfsi+0x56>
 a44:	90 95       	com	r25
 a46:	80 95       	com	r24
 a48:	70 95       	com	r23
 a4a:	61 95       	neg	r22
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	08 95       	ret

00000a54 <__floatunsisf>:
 a54:	e8 94       	clt
 a56:	09 c0       	rjmp	.+18     	; 0xa6a <__floatsisf+0x12>

00000a58 <__floatsisf>:
 a58:	97 fb       	bst	r25, 7
 a5a:	3e f4       	brtc	.+14     	; 0xa6a <__floatsisf+0x12>
 a5c:	90 95       	com	r25
 a5e:	80 95       	com	r24
 a60:	70 95       	com	r23
 a62:	61 95       	neg	r22
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	99 23       	and	r25, r25
 a6c:	a9 f0       	breq	.+42     	; 0xa98 <__floatsisf+0x40>
 a6e:	f9 2f       	mov	r31, r25
 a70:	96 e9       	ldi	r25, 0x96	; 150
 a72:	bb 27       	eor	r27, r27
 a74:	93 95       	inc	r25
 a76:	f6 95       	lsr	r31
 a78:	87 95       	ror	r24
 a7a:	77 95       	ror	r23
 a7c:	67 95       	ror	r22
 a7e:	b7 95       	ror	r27
 a80:	f1 11       	cpse	r31, r1
 a82:	f8 cf       	rjmp	.-16     	; 0xa74 <__floatsisf+0x1c>
 a84:	fa f4       	brpl	.+62     	; 0xac4 <__floatsisf+0x6c>
 a86:	bb 0f       	add	r27, r27
 a88:	11 f4       	brne	.+4      	; 0xa8e <__floatsisf+0x36>
 a8a:	60 ff       	sbrs	r22, 0
 a8c:	1b c0       	rjmp	.+54     	; 0xac4 <__floatsisf+0x6c>
 a8e:	6f 5f       	subi	r22, 0xFF	; 255
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	16 c0       	rjmp	.+44     	; 0xac4 <__floatsisf+0x6c>
 a98:	88 23       	and	r24, r24
 a9a:	11 f0       	breq	.+4      	; 0xaa0 <__floatsisf+0x48>
 a9c:	96 e9       	ldi	r25, 0x96	; 150
 a9e:	11 c0       	rjmp	.+34     	; 0xac2 <__floatsisf+0x6a>
 aa0:	77 23       	and	r23, r23
 aa2:	21 f0       	breq	.+8      	; 0xaac <__floatsisf+0x54>
 aa4:	9e e8       	ldi	r25, 0x8E	; 142
 aa6:	87 2f       	mov	r24, r23
 aa8:	76 2f       	mov	r23, r22
 aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__floatsisf+0x5e>
 aac:	66 23       	and	r22, r22
 aae:	71 f0       	breq	.+28     	; 0xacc <__floatsisf+0x74>
 ab0:	96 e8       	ldi	r25, 0x86	; 134
 ab2:	86 2f       	mov	r24, r22
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	60 e0       	ldi	r22, 0x00	; 0
 ab8:	2a f0       	brmi	.+10     	; 0xac4 <__floatsisf+0x6c>
 aba:	9a 95       	dec	r25
 abc:	66 0f       	add	r22, r22
 abe:	77 1f       	adc	r23, r23
 ac0:	88 1f       	adc	r24, r24
 ac2:	da f7       	brpl	.-10     	; 0xaba <__floatsisf+0x62>
 ac4:	88 0f       	add	r24, r24
 ac6:	96 95       	lsr	r25
 ac8:	87 95       	ror	r24
 aca:	97 f9       	bld	r25, 7
 acc:	08 95       	ret

00000ace <__fp_cmp>:
 ace:	99 0f       	add	r25, r25
 ad0:	00 08       	sbc	r0, r0
 ad2:	55 0f       	add	r21, r21
 ad4:	aa 0b       	sbc	r26, r26
 ad6:	e0 e8       	ldi	r30, 0x80	; 128
 ad8:	fe ef       	ldi	r31, 0xFE	; 254
 ada:	16 16       	cp	r1, r22
 adc:	17 06       	cpc	r1, r23
 ade:	e8 07       	cpc	r30, r24
 ae0:	f9 07       	cpc	r31, r25
 ae2:	c0 f0       	brcs	.+48     	; 0xb14 <__fp_cmp+0x46>
 ae4:	12 16       	cp	r1, r18
 ae6:	13 06       	cpc	r1, r19
 ae8:	e4 07       	cpc	r30, r20
 aea:	f5 07       	cpc	r31, r21
 aec:	98 f0       	brcs	.+38     	; 0xb14 <__fp_cmp+0x46>
 aee:	62 1b       	sub	r22, r18
 af0:	73 0b       	sbc	r23, r19
 af2:	84 0b       	sbc	r24, r20
 af4:	95 0b       	sbc	r25, r21
 af6:	39 f4       	brne	.+14     	; 0xb06 <__fp_cmp+0x38>
 af8:	0a 26       	eor	r0, r26
 afa:	61 f0       	breq	.+24     	; 0xb14 <__fp_cmp+0x46>
 afc:	23 2b       	or	r18, r19
 afe:	24 2b       	or	r18, r20
 b00:	25 2b       	or	r18, r21
 b02:	21 f4       	brne	.+8      	; 0xb0c <__fp_cmp+0x3e>
 b04:	08 95       	ret
 b06:	0a 26       	eor	r0, r26
 b08:	09 f4       	brne	.+2      	; 0xb0c <__fp_cmp+0x3e>
 b0a:	a1 40       	sbci	r26, 0x01	; 1
 b0c:	a6 95       	lsr	r26
 b0e:	8f ef       	ldi	r24, 0xFF	; 255
 b10:	81 1d       	adc	r24, r1
 b12:	81 1d       	adc	r24, r1
 b14:	08 95       	ret

00000b16 <__fp_inf>:
 b16:	97 f9       	bld	r25, 7
 b18:	9f 67       	ori	r25, 0x7F	; 127
 b1a:	80 e8       	ldi	r24, 0x80	; 128
 b1c:	70 e0       	ldi	r23, 0x00	; 0
 b1e:	60 e0       	ldi	r22, 0x00	; 0
 b20:	08 95       	ret

00000b22 <__fp_nan>:
 b22:	9f ef       	ldi	r25, 0xFF	; 255
 b24:	80 ec       	ldi	r24, 0xC0	; 192
 b26:	08 95       	ret

00000b28 <__fp_pscA>:
 b28:	00 24       	eor	r0, r0
 b2a:	0a 94       	dec	r0
 b2c:	16 16       	cp	r1, r22
 b2e:	17 06       	cpc	r1, r23
 b30:	18 06       	cpc	r1, r24
 b32:	09 06       	cpc	r0, r25
 b34:	08 95       	ret

00000b36 <__fp_pscB>:
 b36:	00 24       	eor	r0, r0
 b38:	0a 94       	dec	r0
 b3a:	12 16       	cp	r1, r18
 b3c:	13 06       	cpc	r1, r19
 b3e:	14 06       	cpc	r1, r20
 b40:	05 06       	cpc	r0, r21
 b42:	08 95       	ret

00000b44 <__fp_round>:
 b44:	09 2e       	mov	r0, r25
 b46:	03 94       	inc	r0
 b48:	00 0c       	add	r0, r0
 b4a:	11 f4       	brne	.+4      	; 0xb50 <__fp_round+0xc>
 b4c:	88 23       	and	r24, r24
 b4e:	52 f0       	brmi	.+20     	; 0xb64 <__fp_round+0x20>
 b50:	bb 0f       	add	r27, r27
 b52:	40 f4       	brcc	.+16     	; 0xb64 <__fp_round+0x20>
 b54:	bf 2b       	or	r27, r31
 b56:	11 f4       	brne	.+4      	; 0xb5c <__fp_round+0x18>
 b58:	60 ff       	sbrs	r22, 0
 b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__fp_round+0x20>
 b5c:	6f 5f       	subi	r22, 0xFF	; 255
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	08 95       	ret

00000b66 <__fp_split3>:
 b66:	57 fd       	sbrc	r21, 7
 b68:	90 58       	subi	r25, 0x80	; 128
 b6a:	44 0f       	add	r20, r20
 b6c:	55 1f       	adc	r21, r21
 b6e:	59 f0       	breq	.+22     	; 0xb86 <__fp_splitA+0x10>
 b70:	5f 3f       	cpi	r21, 0xFF	; 255
 b72:	71 f0       	breq	.+28     	; 0xb90 <__fp_splitA+0x1a>
 b74:	47 95       	ror	r20

00000b76 <__fp_splitA>:
 b76:	88 0f       	add	r24, r24
 b78:	97 fb       	bst	r25, 7
 b7a:	99 1f       	adc	r25, r25
 b7c:	61 f0       	breq	.+24     	; 0xb96 <__fp_splitA+0x20>
 b7e:	9f 3f       	cpi	r25, 0xFF	; 255
 b80:	79 f0       	breq	.+30     	; 0xba0 <__fp_splitA+0x2a>
 b82:	87 95       	ror	r24
 b84:	08 95       	ret
 b86:	12 16       	cp	r1, r18
 b88:	13 06       	cpc	r1, r19
 b8a:	14 06       	cpc	r1, r20
 b8c:	55 1f       	adc	r21, r21
 b8e:	f2 cf       	rjmp	.-28     	; 0xb74 <__fp_split3+0xe>
 b90:	46 95       	lsr	r20
 b92:	f1 df       	rcall	.-30     	; 0xb76 <__fp_splitA>
 b94:	08 c0       	rjmp	.+16     	; 0xba6 <__fp_splitA+0x30>
 b96:	16 16       	cp	r1, r22
 b98:	17 06       	cpc	r1, r23
 b9a:	18 06       	cpc	r1, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	f1 cf       	rjmp	.-30     	; 0xb82 <__fp_splitA+0xc>
 ba0:	86 95       	lsr	r24
 ba2:	71 05       	cpc	r23, r1
 ba4:	61 05       	cpc	r22, r1
 ba6:	08 94       	sec
 ba8:	08 95       	ret

00000baa <__fp_zero>:
 baa:	e8 94       	clt

00000bac <__fp_szero>:
 bac:	bb 27       	eor	r27, r27
 bae:	66 27       	eor	r22, r22
 bb0:	77 27       	eor	r23, r23
 bb2:	cb 01       	movw	r24, r22
 bb4:	97 f9       	bld	r25, 7
 bb6:	08 95       	ret

00000bb8 <__gesf2>:
 bb8:	8a df       	rcall	.-236    	; 0xace <__fp_cmp>
 bba:	08 f4       	brcc	.+2      	; 0xbbe <__gesf2+0x6>
 bbc:	8f ef       	ldi	r24, 0xFF	; 255
 bbe:	08 95       	ret

00000bc0 <__mulsf3>:
 bc0:	0b d0       	rcall	.+22     	; 0xbd8 <__mulsf3x>
 bc2:	c0 cf       	rjmp	.-128    	; 0xb44 <__fp_round>
 bc4:	b1 df       	rcall	.-158    	; 0xb28 <__fp_pscA>
 bc6:	28 f0       	brcs	.+10     	; 0xbd2 <__mulsf3+0x12>
 bc8:	b6 df       	rcall	.-148    	; 0xb36 <__fp_pscB>
 bca:	18 f0       	brcs	.+6      	; 0xbd2 <__mulsf3+0x12>
 bcc:	95 23       	and	r25, r21
 bce:	09 f0       	breq	.+2      	; 0xbd2 <__mulsf3+0x12>
 bd0:	a2 cf       	rjmp	.-188    	; 0xb16 <__fp_inf>
 bd2:	a7 cf       	rjmp	.-178    	; 0xb22 <__fp_nan>
 bd4:	11 24       	eor	r1, r1
 bd6:	ea cf       	rjmp	.-44     	; 0xbac <__fp_szero>

00000bd8 <__mulsf3x>:
 bd8:	c6 df       	rcall	.-116    	; 0xb66 <__fp_split3>
 bda:	a0 f3       	brcs	.-24     	; 0xbc4 <__mulsf3+0x4>

00000bdc <__mulsf3_pse>:
 bdc:	95 9f       	mul	r25, r21
 bde:	d1 f3       	breq	.-12     	; 0xbd4 <__mulsf3+0x14>
 be0:	95 0f       	add	r25, r21
 be2:	50 e0       	ldi	r21, 0x00	; 0
 be4:	55 1f       	adc	r21, r21
 be6:	62 9f       	mul	r22, r18
 be8:	f0 01       	movw	r30, r0
 bea:	72 9f       	mul	r23, r18
 bec:	bb 27       	eor	r27, r27
 bee:	f0 0d       	add	r31, r0
 bf0:	b1 1d       	adc	r27, r1
 bf2:	63 9f       	mul	r22, r19
 bf4:	aa 27       	eor	r26, r26
 bf6:	f0 0d       	add	r31, r0
 bf8:	b1 1d       	adc	r27, r1
 bfa:	aa 1f       	adc	r26, r26
 bfc:	64 9f       	mul	r22, r20
 bfe:	66 27       	eor	r22, r22
 c00:	b0 0d       	add	r27, r0
 c02:	a1 1d       	adc	r26, r1
 c04:	66 1f       	adc	r22, r22
 c06:	82 9f       	mul	r24, r18
 c08:	22 27       	eor	r18, r18
 c0a:	b0 0d       	add	r27, r0
 c0c:	a1 1d       	adc	r26, r1
 c0e:	62 1f       	adc	r22, r18
 c10:	73 9f       	mul	r23, r19
 c12:	b0 0d       	add	r27, r0
 c14:	a1 1d       	adc	r26, r1
 c16:	62 1f       	adc	r22, r18
 c18:	83 9f       	mul	r24, r19
 c1a:	a0 0d       	add	r26, r0
 c1c:	61 1d       	adc	r22, r1
 c1e:	22 1f       	adc	r18, r18
 c20:	74 9f       	mul	r23, r20
 c22:	33 27       	eor	r19, r19
 c24:	a0 0d       	add	r26, r0
 c26:	61 1d       	adc	r22, r1
 c28:	23 1f       	adc	r18, r19
 c2a:	84 9f       	mul	r24, r20
 c2c:	60 0d       	add	r22, r0
 c2e:	21 1d       	adc	r18, r1
 c30:	82 2f       	mov	r24, r18
 c32:	76 2f       	mov	r23, r22
 c34:	6a 2f       	mov	r22, r26
 c36:	11 24       	eor	r1, r1
 c38:	9f 57       	subi	r25, 0x7F	; 127
 c3a:	50 40       	sbci	r21, 0x00	; 0
 c3c:	8a f0       	brmi	.+34     	; 0xc60 <__mulsf3_pse+0x84>
 c3e:	e1 f0       	breq	.+56     	; 0xc78 <__mulsf3_pse+0x9c>
 c40:	88 23       	and	r24, r24
 c42:	4a f0       	brmi	.+18     	; 0xc56 <__mulsf3_pse+0x7a>
 c44:	ee 0f       	add	r30, r30
 c46:	ff 1f       	adc	r31, r31
 c48:	bb 1f       	adc	r27, r27
 c4a:	66 1f       	adc	r22, r22
 c4c:	77 1f       	adc	r23, r23
 c4e:	88 1f       	adc	r24, r24
 c50:	91 50       	subi	r25, 0x01	; 1
 c52:	50 40       	sbci	r21, 0x00	; 0
 c54:	a9 f7       	brne	.-22     	; 0xc40 <__mulsf3_pse+0x64>
 c56:	9e 3f       	cpi	r25, 0xFE	; 254
 c58:	51 05       	cpc	r21, r1
 c5a:	70 f0       	brcs	.+28     	; 0xc78 <__mulsf3_pse+0x9c>
 c5c:	5c cf       	rjmp	.-328    	; 0xb16 <__fp_inf>
 c5e:	a6 cf       	rjmp	.-180    	; 0xbac <__fp_szero>
 c60:	5f 3f       	cpi	r21, 0xFF	; 255
 c62:	ec f3       	brlt	.-6      	; 0xc5e <__mulsf3_pse+0x82>
 c64:	98 3e       	cpi	r25, 0xE8	; 232
 c66:	dc f3       	brlt	.-10     	; 0xc5e <__mulsf3_pse+0x82>
 c68:	86 95       	lsr	r24
 c6a:	77 95       	ror	r23
 c6c:	67 95       	ror	r22
 c6e:	b7 95       	ror	r27
 c70:	f7 95       	ror	r31
 c72:	e7 95       	ror	r30
 c74:	9f 5f       	subi	r25, 0xFF	; 255
 c76:	c1 f7       	brne	.-16     	; 0xc68 <__mulsf3_pse+0x8c>
 c78:	fe 2b       	or	r31, r30
 c7a:	88 0f       	add	r24, r24
 c7c:	91 1d       	adc	r25, r1
 c7e:	96 95       	lsr	r25
 c80:	87 95       	ror	r24
 c82:	97 f9       	bld	r25, 7
 c84:	08 95       	ret

00000c86 <_exit>:
 c86:	f8 94       	cli

00000c88 <__stop_program>:
 c88:	ff cf       	rjmp	.-2      	; 0xc88 <__stop_program>
