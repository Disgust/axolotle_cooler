
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000d12  00000da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800156  00800156  00000dfc  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ee  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000354  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ca  00000000  00000000  000012be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005aa  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bd  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000250  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001f21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

void LCD_Clear()
{
    //TODO: определить
}
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c4       	rjmp	.+2174   	; 0x888 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	07 c4       	rjmp	.+2062   	; 0x834 <__vector_9>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	1d c4       	rjmp	.+2106   	; 0x874 <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c3       	rjmp	.+1712   	; 0x706 <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e5       	ldi	r26, 0x56	; 86
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 36       	cpi	r26, 0x61	; 97
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	87 d2       	rcall	.+1294   	; 0x5aa <main>
  9c:	38 c6       	rjmp	.+3184   	; 0xd0e <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <LCD_Write>:

void LCD_Write(uint8_t data, uint8_t posY, uint8_t posX ) 
{
    cli();
  a0:	f8 94       	cli
	//TODO: определить
    sei();
  a2:	78 94       	sei
}
  a4:	08 95       	ret

000000a6 <LCD_turnOn>:

void LCD_turnOn() 
{
	BIT_ON(CONTROL_PORT, LCD_LED);
  a6:	eb e2       	ldi	r30, 0x2B	; 43
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
}
  b0:	08 95       	ret

000000b2 <LCD_turnOff>:

void LCD_turnOff() 
{
	BIT_OFF(CONTROL_PORT, LCD_LED);
  b2:	eb e2       	ldi	r30, 0x2B	; 43
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 77       	andi	r24, 0x7F	; 127
  ba:	80 83       	st	Z, r24
}
  bc:	08 95       	ret

000000be <LCD_DisplayAll>:

void LCD_DisplayAll()
{   
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
	LCD_Write("TEMP :", 0, 0);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	e8 df       	rcall	.-48     	; 0xa0 <LCD_Write>
    LCD_Write(temperatureValue, 0, 8);
  d0:	60 91 5d 01 	lds	r22, 0x015D
  d4:	70 91 5e 01 	lds	r23, 0x015E
  d8:	80 91 5f 01 	lds	r24, 0x015F
  dc:	90 91 60 01 	lds	r25, 0x0160
  e0:	d1 d4       	rcall	.+2466   	; 0xa84 <__fixunssfsi>
  e2:	dc 01       	movw	r26, r24
  e4:	cb 01       	movw	r24, r22
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	48 e0       	ldi	r20, 0x08	; 8
  ea:	da df       	rcall	.-76     	; 0xa0 <LCD_Write>
    if (BIT_READ(progFlags, COOLING))
  ec:	80 91 56 01 	lds	r24, 0x0156
  f0:	86 95       	lsr	r24
  f2:	86 95       	lsr	r24
  f4:	86 95       	lsr	r24
  f6:	80 ff       	sbrs	r24, 0
  f8:	2b c0       	rjmp	.+86     	; 0x150 <LCD_DisplayAll+0x92>
    {
        LCD_Write("COOLING ", 1, 0);
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	ce df       	rcall	.-100    	; 0xa0 <LCD_Write>
        LCD_Write((uint8_t)((temperatureValue - targetTemp)/Tolerance)*100, 1, 8);
 104:	60 91 5d 01 	lds	r22, 0x015D
 108:	70 91 5e 01 	lds	r23, 0x015E
 10c:	80 91 5f 01 	lds	r24, 0x015F
 110:	90 91 60 01 	lds	r25, 0x0160
 114:	20 91 11 01 	lds	r18, 0x0111
 118:	30 91 12 01 	lds	r19, 0x0112
 11c:	40 91 13 01 	lds	r20, 0x0113
 120:	50 91 14 01 	lds	r21, 0x0114
 124:	e0 90 57 01 	lds	r14, 0x0157
 128:	f0 90 58 01 	lds	r15, 0x0158
 12c:	00 91 59 01 	lds	r16, 0x0159
 130:	10 91 5a 01 	lds	r17, 0x015A
 134:	d1 d3       	rcall	.+1954   	; 0x8d8 <__subsf3>
 136:	a8 01       	movw	r20, r16
 138:	97 01       	movw	r18, r14
 13a:	37 d4       	rcall	.+2158   	; 0x9aa <__divsf3>
 13c:	a3 d4       	rcall	.+2374   	; 0xa84 <__fixunssfsi>
 13e:	9b 01       	movw	r18, r22
 140:	ac 01       	movw	r20, r24
 142:	84 e6       	ldi	r24, 0x64	; 100
 144:	82 9f       	mul	r24, r18
 146:	80 2d       	mov	r24, r0
 148:	11 24       	eor	r1, r1
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	48 e0       	ldi	r20, 0x08	; 8
 14e:	a8 df       	rcall	.-176    	; 0xa0 <LCD_Write>
    }
}
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	08 95       	ret

0000015a <menuRun>:

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()

{
 15a:	2f 92       	push	r2
 15c:	3f 92       	push	r3
 15e:	4f 92       	push	r4
 160:	5f 92       	push	r5
 162:	6f 92       	push	r6
 164:	7f 92       	push	r7
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	ca 54       	subi	r28, 0x4A	; 74
 184:	d0 40       	sbci	r29, 0x00	; 0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
 190:	de 01       	movw	r26, r28
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	e5 e1       	ldi	r30, 0x15	; 21
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	81 50       	subi	r24, 0x01	; 1
 1a0:	e1 f7       	brne	.-8      	; 0x19a <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
 1a2:	60 91 11 01 	lds	r22, 0x0111
 1a6:	70 91 12 01 	lds	r23, 0x0112
 1aa:	80 91 13 01 	lds	r24, 0x0113
 1ae:	90 91 14 01 	lds	r25, 0x0114
 1b2:	c0 90 57 01 	lds	r12, 0x0157
 1b6:	d0 90 58 01 	lds	r13, 0x0158
 1ba:	e0 90 59 01 	lds	r14, 0x0159
 1be:	f0 90 5a 01 	lds	r15, 0x015A
 1c2:	b0 90 5b 01 	lds	r11, 0x015B
 1c6:	00 91 56 01 	lds	r16, 0x0156
 1ca:	06 95       	lsr	r16
 1cc:	06 95       	lsr	r16
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	01 70       	andi	r16, 0x01	; 1
 1d2:	10 70       	andi	r17, 0x00	; 0
 1d4:	52 d4       	rcall	.+2212   	; 0xa7a <__fixsfsi>
 1d6:	fe 01       	movw	r30, r28
 1d8:	ef 5b       	subi	r30, 0xBF	; 191
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	71 83       	std	Z+1, r23	; 0x01
 1de:	60 83       	st	Z, r22
 1e0:	c7 01       	movw	r24, r14
 1e2:	b6 01       	movw	r22, r12
 1e4:	4a d4       	rcall	.+2196   	; 0xa7a <__fixsfsi>
 1e6:	fe 01       	movw	r30, r28
 1e8:	ed 5b       	subi	r30, 0xBD	; 189
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	71 83       	std	Z+1, r23	; 0x01
 1ee:	60 83       	st	Z, r22
 1f0:	fe 01       	movw	r30, r28
 1f2:	eb 5b       	subi	r30, 0xBB	; 187
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	b0 82       	st	Z, r11
 1f8:	11 82       	std	Z+1, r1	; 0x01
 1fa:	fe 01       	movw	r30, r28
 1fc:	e9 5b       	subi	r30, 0xB9	; 185
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	11 83       	std	Z+1, r17	; 0x01
 202:	00 83       	st	Z, r16
 204:	cc 24       	eor	r12, r12
 206:	dd 24       	eor	r13, r13
    LCD_Clear();
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 208:	0f 2e       	mov	r0, r31
 20a:	fb e2       	ldi	r31, 0x2B	; 43
 20c:	af 2e       	mov	r10, r31
 20e:	bb 24       	eor	r11, r11
 210:	f0 2d       	mov	r31, r0
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
 212:	0f 2e       	mov	r0, r31
 214:	f1 e4       	ldi	r31, 0x41	; 65
 216:	4f 2e       	mov	r4, r31
 218:	55 24       	eor	r5, r5
 21a:	f0 2d       	mov	r31, r0
 21c:	4c 0e       	add	r4, r28
 21e:	5d 1e       	adc	r5, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	38 2e       	mov	r3, r24
 226:	29 2e       	mov	r2, r25
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
 228:	66 24       	eor	r6, r6
 22a:	77 24       	eor	r7, r7
 22c:	63 94       	inc	r6
                        BIT_WRITE(progFlags, ECONOMY, value);
                    }          
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 22e:	ce 01       	movw	r24, r28
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	2b 96       	adiw	r28, 0x0b	; 11
 234:	9f af       	std	Y+63, r25	; 0x3f
 236:	8e af       	std	Y+62, r24	; 0x3e
 238:	2b 97       	sbiw	r28, 0x0b	; 11
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 23a:	f5 01       	movw	r30, r10
 23c:	80 81       	ld	r24, Z
 23e:	83 fd       	sbrc	r24, 3
 240:	40 c1       	rjmp	.+640    	; 0x4c2 <menuRun+0x368>
            BIT_OFF(progFlags, INACTIVE);
 242:	80 91 56 01 	lds	r24, 0x0156
 246:	8f 7e       	andi	r24, 0xEF	; 239
 248:	80 93 56 01 	sts	0x0156, r24
            int value= values[pos];
 24c:	c6 01       	movw	r24, r12
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	f2 01       	movw	r30, r4
 254:	e8 0f       	add	r30, r24
 256:	f9 1f       	adc	r31, r25
 258:	80 80       	ld	r8, Z
 25a:	91 80       	ldd	r9, Z+1	; 0x01
 25c:	84 01       	movw	r16, r8
            while(1){
                BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 25e:	80 91 56 01 	lds	r24, 0x0156
 262:	8f 7e       	andi	r24, 0xEF	; 239
 264:	80 93 56 01 	sts	0x0156, r24
                LCD_Write(values[pos],1,0);
 268:	80 2f       	mov	r24, r16
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	18 df       	rcall	.-464    	; 0xa0 <LCD_Write>
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
 270:	f5 01       	movw	r30, r10
 272:	80 81       	ld	r24, Z
 274:	85 fd       	sbrc	r24, 5
 276:	7b c0       	rjmp	.+246    	; 0x36e <menuRun+0x214>
                {
                    BIT_OFF(progFlags, INACTIVE);
 278:	80 91 56 01 	lds	r24, 0x0156
 27c:	8f 7e       	andi	r24, 0xEF	; 239
 27e:	80 93 56 01 	sts	0x0156, r24
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
 282:	0f 5f       	subi	r16, 0xFF	; 255
 284:	1f 4f       	sbci	r17, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
 286:	f2 e0       	ldi	r31, 0x02	; 2
 288:	cf 16       	cp	r12, r31
 28a:	d1 04       	cpc	r13, r1
 28c:	c1 f1       	breq	.+112    	; 0x2fe <menuRun+0x1a4>
 28e:	23 e0       	ldi	r18, 0x03	; 3
 290:	c2 16       	cp	r12, r18
 292:	d1 04       	cpc	r13, r1
 294:	34 f4       	brge	.+12     	; 0x2a2 <menuRun+0x148>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	c8 16       	cp	r12, r24
 29a:	d1 04       	cpc	r13, r1
 29c:	09 f0       	breq	.+2      	; 0x2a0 <menuRun+0x146>
 29e:	67 c0       	rjmp	.+206    	; 0x36e <menuRun+0x214>
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <menuRun+0x15e>
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	c9 16       	cp	r12, r25
 2a6:	d1 04       	cpc	r13, r1
 2a8:	09 f4       	brne	.+2      	; 0x2ac <menuRun+0x152>
 2aa:	48 c0       	rjmp	.+144    	; 0x33c <menuRun+0x1e2>
 2ac:	e4 e0       	ldi	r30, 0x04	; 4
 2ae:	ce 16       	cp	r12, r30
 2b0:	d1 04       	cpc	r13, r1
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <menuRun+0x15c>
 2b4:	5c c0       	rjmp	.+184    	; 0x36e <menuRun+0x214>
 2b6:	4c c0       	rjmp	.+152    	; 0x350 <menuRun+0x1f6>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
 2b8:	b8 01       	movw	r22, r16
 2ba:	88 27       	eor	r24, r24
 2bc:	77 fd       	sbrc	r23, 7
 2be:	80 95       	com	r24
 2c0:	98 2f       	mov	r25, r24
 2c2:	0e d4       	rcall	.+2076   	; 0xae0 <__floatsisf>
 2c4:	7b 01       	movw	r14, r22
 2c6:	8c 01       	movw	r16, r24
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e7       	ldi	r20, 0x70	; 112
 2ce:	51 e4       	ldi	r21, 0x41	; 65
 2d0:	68 d3       	rcall	.+1744   	; 0x9a2 <__cmpsf2>
 2d2:	88 23       	and	r24, r24
 2d4:	1c f4       	brge	.+6      	; 0x2dc <menuRun+0x182>
 2d6:	0f e0       	ldi	r16, 0x0F	; 15
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	49 c0       	rjmp	.+146    	; 0x36e <menuRun+0x214>
 2dc:	c8 01       	movw	r24, r16
 2de:	b7 01       	movw	r22, r14
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 ea       	ldi	r20, 0xA0	; 160
 2e6:	51 e4       	ldi	r21, 0x41	; 65
 2e8:	ab d4       	rcall	.+2390   	; 0xc40 <__gesf2>
 2ea:	18 16       	cp	r1, r24
 2ec:	1c f4       	brge	.+6      	; 0x2f4 <menuRun+0x19a>
 2ee:	04 e1       	ldi	r16, 0x14	; 20
 2f0:	10 e0       	ldi	r17, 0x00	; 0
 2f2:	3d c0       	rjmp	.+122    	; 0x36e <menuRun+0x214>
 2f4:	c8 01       	movw	r24, r16
 2f6:	b7 01       	movw	r22, r14
 2f8:	c0 d3       	rcall	.+1920   	; 0xa7a <__fixsfsi>
 2fa:	8b 01       	movw	r16, r22
 2fc:	38 c0       	rjmp	.+112    	; 0x36e <menuRun+0x214>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
 2fe:	b8 01       	movw	r22, r16
 300:	88 27       	eor	r24, r24
 302:	77 fd       	sbrc	r23, 7
 304:	80 95       	com	r24
 306:	98 2f       	mov	r25, r24
 308:	eb d3       	rcall	.+2006   	; 0xae0 <__floatsisf>
 30a:	7b 01       	movw	r14, r22
 30c:	8c 01       	movw	r16, r24
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	45 d3       	rcall	.+1674   	; 0x9a2 <__cmpsf2>
 318:	88 23       	and	r24, r24
 31a:	34 f1       	brlt	.+76     	; 0x368 <menuRun+0x20e>
 31c:	c8 01       	movw	r24, r16
 31e:	b7 01       	movw	r22, r14
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e8       	ldi	r20, 0x80	; 128
 326:	5f e3       	ldi	r21, 0x3F	; 63
 328:	8b d4       	rcall	.+2326   	; 0xc40 <__gesf2>
 32a:	18 16       	cp	r1, r24
 32c:	14 f4       	brge	.+4      	; 0x332 <menuRun+0x1d8>
 32e:	83 01       	movw	r16, r6
 330:	1e c0       	rjmp	.+60     	; 0x36e <menuRun+0x214>
 332:	c8 01       	movw	r24, r16
 334:	b7 01       	movw	r22, r14
 336:	a1 d3       	rcall	.+1858   	; 0xa7a <__fixsfsi>
 338:	8b 01       	movw	r16, r22
 33a:	19 c0       	rjmp	.+50     	; 0x36e <menuRun+0x214>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
 33c:	11 23       	and	r17, r17
 33e:	1c f4       	brge	.+6      	; 0x346 <menuRun+0x1ec>
 340:	0f ef       	ldi	r16, 0xFF	; 255
 342:	13 e0       	ldi	r17, 0x03	; 3
 344:	14 c0       	rjmp	.+40     	; 0x36e <menuRun+0x214>
 346:	f4 e0       	ldi	r31, 0x04	; 4
 348:	00 30       	cpi	r16, 0x00	; 0
 34a:	1f 07       	cpc	r17, r31
 34c:	84 f0       	brlt	.+32     	; 0x36e <menuRun+0x214>
 34e:	0c c0       	rjmp	.+24     	; 0x368 <menuRun+0x20e>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
 350:	c8 01       	movw	r24, r16
 352:	10 16       	cp	r1, r16
 354:	11 06       	cpc	r1, r17
 356:	0c f4       	brge	.+2      	; 0x35a <menuRun+0x200>
 358:	c3 01       	movw	r24, r6
 35a:	8c 01       	movw	r16, r24
 35c:	99 23       	and	r25, r25
 35e:	3c f4       	brge	.+14     	; 0x36e <menuRun+0x214>
 360:	83 2d       	mov	r24, r3
 362:	92 2d       	mov	r25, r2
 364:	8c 01       	movw	r16, r24
 366:	03 c0       	rjmp	.+6      	; 0x36e <menuRun+0x214>
 368:	83 2d       	mov	r24, r3
 36a:	92 2d       	mov	r25, r2
 36c:	8c 01       	movw	r16, r24
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
 36e:	f5 01       	movw	r30, r10
 370:	80 81       	ld	r24, Z
 372:	84 fd       	sbrc	r24, 4
 374:	7b c0       	rjmp	.+246    	; 0x46c <menuRun+0x312>
                {
                    BIT_OFF(progFlags, INACTIVE);
 376:	80 91 56 01 	lds	r24, 0x0156
 37a:	8f 7e       	andi	r24, 0xEF	; 239
 37c:	80 93 56 01 	sts	0x0156, r24
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
 380:	01 50       	subi	r16, 0x01	; 1
 382:	10 40       	sbci	r17, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
 384:	f2 e0       	ldi	r31, 0x02	; 2
 386:	cf 16       	cp	r12, r31
 388:	d1 04       	cpc	r13, r1
 38a:	c1 f1       	breq	.+112    	; 0x3fc <menuRun+0x2a2>
 38c:	23 e0       	ldi	r18, 0x03	; 3
 38e:	c2 16       	cp	r12, r18
 390:	d1 04       	cpc	r13, r1
 392:	34 f4       	brge	.+12     	; 0x3a0 <menuRun+0x246>
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	c8 16       	cp	r12, r24
 398:	d1 04       	cpc	r13, r1
 39a:	09 f0       	breq	.+2      	; 0x39e <menuRun+0x244>
 39c:	67 c0       	rjmp	.+206    	; 0x46c <menuRun+0x312>
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <menuRun+0x25c>
 3a0:	93 e0       	ldi	r25, 0x03	; 3
 3a2:	c9 16       	cp	r12, r25
 3a4:	d1 04       	cpc	r13, r1
 3a6:	09 f4       	brne	.+2      	; 0x3aa <menuRun+0x250>
 3a8:	48 c0       	rjmp	.+144    	; 0x43a <menuRun+0x2e0>
 3aa:	e4 e0       	ldi	r30, 0x04	; 4
 3ac:	ce 16       	cp	r12, r30
 3ae:	d1 04       	cpc	r13, r1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <menuRun+0x25a>
 3b2:	5c c0       	rjmp	.+184    	; 0x46c <menuRun+0x312>
 3b4:	4c c0       	rjmp	.+152    	; 0x44e <menuRun+0x2f4>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
 3b6:	b8 01       	movw	r22, r16
 3b8:	88 27       	eor	r24, r24
 3ba:	77 fd       	sbrc	r23, 7
 3bc:	80 95       	com	r24
 3be:	98 2f       	mov	r25, r24
 3c0:	8f d3       	rcall	.+1822   	; 0xae0 <__floatsisf>
 3c2:	7b 01       	movw	r14, r22
 3c4:	8c 01       	movw	r16, r24
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 e7       	ldi	r20, 0x70	; 112
 3cc:	51 e4       	ldi	r21, 0x41	; 65
 3ce:	e9 d2       	rcall	.+1490   	; 0x9a2 <__cmpsf2>
 3d0:	88 23       	and	r24, r24
 3d2:	1c f4       	brge	.+6      	; 0x3da <menuRun+0x280>
 3d4:	0f e0       	ldi	r16, 0x0F	; 15
 3d6:	10 e0       	ldi	r17, 0x00	; 0
 3d8:	49 c0       	rjmp	.+146    	; 0x46c <menuRun+0x312>
 3da:	c8 01       	movw	r24, r16
 3dc:	b7 01       	movw	r22, r14
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	40 ea       	ldi	r20, 0xA0	; 160
 3e4:	51 e4       	ldi	r21, 0x41	; 65
 3e6:	2c d4       	rcall	.+2136   	; 0xc40 <__gesf2>
 3e8:	18 16       	cp	r1, r24
 3ea:	1c f4       	brge	.+6      	; 0x3f2 <menuRun+0x298>
 3ec:	04 e1       	ldi	r16, 0x14	; 20
 3ee:	10 e0       	ldi	r17, 0x00	; 0
 3f0:	3d c0       	rjmp	.+122    	; 0x46c <menuRun+0x312>
 3f2:	c8 01       	movw	r24, r16
 3f4:	b7 01       	movw	r22, r14
 3f6:	41 d3       	rcall	.+1666   	; 0xa7a <__fixsfsi>
 3f8:	8b 01       	movw	r16, r22
 3fa:	38 c0       	rjmp	.+112    	; 0x46c <menuRun+0x312>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
 3fc:	b8 01       	movw	r22, r16
 3fe:	88 27       	eor	r24, r24
 400:	77 fd       	sbrc	r23, 7
 402:	80 95       	com	r24
 404:	98 2f       	mov	r25, r24
 406:	6c d3       	rcall	.+1752   	; 0xae0 <__floatsisf>
 408:	7b 01       	movw	r14, r22
 40a:	8c 01       	movw	r16, r24
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	c6 d2       	rcall	.+1420   	; 0x9a2 <__cmpsf2>
 416:	88 23       	and	r24, r24
 418:	34 f1       	brlt	.+76     	; 0x466 <menuRun+0x30c>
 41a:	c8 01       	movw	r24, r16
 41c:	b7 01       	movw	r22, r14
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 e8       	ldi	r20, 0x80	; 128
 424:	5f e3       	ldi	r21, 0x3F	; 63
 426:	0c d4       	rcall	.+2072   	; 0xc40 <__gesf2>
 428:	18 16       	cp	r1, r24
 42a:	14 f4       	brge	.+4      	; 0x430 <menuRun+0x2d6>
 42c:	83 01       	movw	r16, r6
 42e:	1e c0       	rjmp	.+60     	; 0x46c <menuRun+0x312>
 430:	c8 01       	movw	r24, r16
 432:	b7 01       	movw	r22, r14
 434:	22 d3       	rcall	.+1604   	; 0xa7a <__fixsfsi>
 436:	8b 01       	movw	r16, r22
 438:	19 c0       	rjmp	.+50     	; 0x46c <menuRun+0x312>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
 43a:	11 23       	and	r17, r17
 43c:	1c f4       	brge	.+6      	; 0x444 <menuRun+0x2ea>
 43e:	0f ef       	ldi	r16, 0xFF	; 255
 440:	13 e0       	ldi	r17, 0x03	; 3
 442:	14 c0       	rjmp	.+40     	; 0x46c <menuRun+0x312>
 444:	f4 e0       	ldi	r31, 0x04	; 4
 446:	00 30       	cpi	r16, 0x00	; 0
 448:	1f 07       	cpc	r17, r31
 44a:	84 f0       	brlt	.+32     	; 0x46c <menuRun+0x312>
 44c:	0c c0       	rjmp	.+24     	; 0x466 <menuRun+0x30c>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
 44e:	c8 01       	movw	r24, r16
 450:	10 16       	cp	r1, r16
 452:	11 06       	cpc	r1, r17
 454:	0c f4       	brge	.+2      	; 0x458 <menuRun+0x2fe>
 456:	c3 01       	movw	r24, r6
 458:	8c 01       	movw	r16, r24
 45a:	99 23       	and	r25, r25
 45c:	3c f4       	brge	.+14     	; 0x46c <menuRun+0x312>
 45e:	83 2d       	mov	r24, r3
 460:	92 2d       	mov	r25, r2
 462:	8c 01       	movw	r16, r24
 464:	03 c0       	rjmp	.+6      	; 0x46c <menuRun+0x312>
 466:	83 2d       	mov	r24, r3
 468:	92 2d       	mov	r25, r2
 46a:	8c 01       	movw	r16, r24
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);

                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 46c:	f5 01       	movw	r30, r10
 46e:	80 81       	ld	r24, Z
 470:	82 ff       	sbrs	r24, 2
 472:	1f c0       	rjmp	.+62     	; 0x4b2 <menuRun+0x358>
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
 474:	80 81       	ld	r24, Z
 476:	83 fd       	sbrc	r24, 3
 478:	f2 ce       	rjmp	.-540    	; 0x25e <menuRun+0x104>
                    if(pos!=3){
 47a:	f3 e0       	ldi	r31, 0x03	; 3
 47c:	cf 16       	cp	r12, r31
 47e:	d1 04       	cpc	r13, r1
 480:	49 f0       	breq	.+18     	; 0x494 <menuRun+0x33a>
 482:	c6 01       	movw	r24, r12
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	f2 01       	movw	r30, r4
 48a:	e8 0f       	add	r30, r24
 48c:	f9 1f       	adc	r31, r25
                        values[pos]= (uint8_t)value;
 48e:	80 82       	st	Z, r8
 490:	11 82       	std	Z+1, r1	; 0x01
 492:	17 c0       	rjmp	.+46     	; 0x4c2 <menuRun+0x368>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
 494:	81 14       	cp	r8, r1
 496:	91 04       	cpc	r9, r1
 498:	31 f0       	breq	.+12     	; 0x4a6 <menuRun+0x34c>
 49a:	80 91 56 01 	lds	r24, 0x0156
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	80 93 56 01 	sts	0x0156, r24
 4a4:	dc ce       	rjmp	.-584    	; 0x25e <menuRun+0x104>
 4a6:	80 91 56 01 	lds	r24, 0x0156
 4aa:	8b 7f       	andi	r24, 0xFB	; 251
 4ac:	80 93 56 01 	sts	0x0156, r24
 4b0:	d6 ce       	rjmp	.-596    	; 0x25e <menuRun+0x104>
 4b2:	c6 01       	movw	r24, r12
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	f2 01       	movw	r30, r4
 4ba:	e8 0f       	add	r30, r24
 4bc:	f9 1f       	adc	r31, r25
 4be:	11 83       	std	Z+1, r17	; 0x01
 4c0:	00 83       	st	Z, r16
                    }          
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 4c2:	c6 01       	movw	r24, r12
 4c4:	82 95       	swap	r24
 4c6:	92 95       	swap	r25
 4c8:	90 7f       	andi	r25, 0xF0	; 240
 4ca:	98 27       	eor	r25, r24
 4cc:	80 7f       	andi	r24, 0xF0	; 240
 4ce:	98 27       	eor	r25, r24
 4d0:	2a 96       	adiw	r28, 0x0a	; 10
 4d2:	2f ad       	ldd	r18, Y+63	; 0x3f
 4d4:	2a 97       	sbiw	r28, 0x0a	; 10
 4d6:	82 0f       	add	r24, r18
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	e1 dd       	rcall	.-1086   	; 0xa0 <LCD_Write>
        LCD_Write(values[pos],1,0);
 4de:	c6 01       	movw	r24, r12
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	f2 01       	movw	r30, r4
 4e6:	e8 0f       	add	r30, r24
 4e8:	f9 1f       	adc	r31, r25
 4ea:	80 81       	ld	r24, Z
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	d7 dd       	rcall	.-1106   	; 0xa0 <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
 4f2:	f5 01       	movw	r30, r10
 4f4:	80 81       	ld	r24, Z
 4f6:	85 fd       	sbrc	r24, 5
 4f8:	16 c0       	rjmp	.+44     	; 0x526 <__stack+0x27>
        {
            BIT_OFF(progFlags, INACTIVE);
 4fa:	80 91 56 01 	lds	r24, 0x0156
 4fe:	8f 7e       	andi	r24, 0xEF	; 239
 500:	80 93 56 01 	sts	0x0156, r24
            pos++;
 504:	08 94       	sec
 506:	c1 1c       	adc	r12, r1
 508:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
 50a:	dd 20       	and	r13, r13
 50c:	34 f4       	brge	.+12     	; 0x51a <__stack+0x1b>
 50e:	0f 2e       	mov	r0, r31
 510:	f3 e0       	ldi	r31, 0x03	; 3
 512:	cf 2e       	mov	r12, r31
 514:	dd 24       	eor	r13, r13
 516:	f0 2d       	mov	r31, r0
 518:	06 c0       	rjmp	.+12     	; 0x526 <__stack+0x27>
 51a:	f4 e0       	ldi	r31, 0x04	; 4
 51c:	cf 16       	cp	r12, r31
 51e:	d1 04       	cpc	r13, r1
 520:	14 f0       	brlt	.+4      	; 0x526 <__stack+0x27>
 522:	cc 24       	eor	r12, r12
 524:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
 526:	f5 01       	movw	r30, r10
 528:	80 81       	ld	r24, Z
 52a:	84 fd       	sbrc	r24, 4
 52c:	16 c0       	rjmp	.+44     	; 0x55a <__stack+0x5b>
        {
            BIT_OFF(progFlags, INACTIVE);
 52e:	80 91 56 01 	lds	r24, 0x0156
 532:	8f 7e       	andi	r24, 0xEF	; 239
 534:	80 93 56 01 	sts	0x0156, r24
            pos--;
 538:	08 94       	sec
 53a:	c1 08       	sbc	r12, r1
 53c:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
 53e:	dd 20       	and	r13, r13
 540:	34 f4       	brge	.+12     	; 0x54e <__stack+0x4f>
 542:	0f 2e       	mov	r0, r31
 544:	f3 e0       	ldi	r31, 0x03	; 3
 546:	cf 2e       	mov	r12, r31
 548:	dd 24       	eor	r13, r13
 54a:	f0 2d       	mov	r31, r0
 54c:	06 c0       	rjmp	.+12     	; 0x55a <__stack+0x5b>
 54e:	f4 e0       	ldi	r31, 0x04	; 4
 550:	cf 16       	cp	r12, r31
 552:	d1 04       	cpc	r13, r1
 554:	14 f0       	brlt	.+4      	; 0x55a <__stack+0x5b>
 556:	cc 24       	eor	r12, r12
 558:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 55a:	f5 01       	movw	r30, r10
 55c:	80 81       	ld	r24, Z
 55e:	82 ff       	sbrs	r24, 2
 560:	04 c0       	rjmp	.+8      	; 0x56a <__stack+0x6b>
        if(BIT_READ(progFlags, INACTIVE)) break;
 562:	80 91 56 01 	lds	r24, 0x0156
 566:	84 ff       	sbrs	r24, 4
 568:	68 ce       	rjmp	.-816    	; 0x23a <menuRun+0xe0>
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
 56a:	80 91 56 01 	lds	r24, 0x0156
 56e:	8d 7e       	andi	r24, 0xED	; 237
 570:	80 93 56 01 	sts	0x0156, r24
}

inline void menuStop()
{
    LCD_Clear();
    LCD_DisplayAll();
 574:	a4 dd       	rcall	.-1208   	; 0xbe <LCD_DisplayAll>
        if(BIT_READ(progFlags, INACTIVE)) break;
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
 576:	c6 5b       	subi	r28, 0xB6	; 182
 578:	df 4f       	sbci	r29, 0xFF	; 255
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	cf 91       	pop	r28
 586:	df 91       	pop	r29
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	df 90       	pop	r13
 592:	cf 90       	pop	r12
 594:	bf 90       	pop	r11
 596:	af 90       	pop	r10
 598:	9f 90       	pop	r9
 59a:	8f 90       	pop	r8
 59c:	7f 90       	pop	r7
 59e:	6f 90       	pop	r6
 5a0:	5f 90       	pop	r5
 5a2:	4f 90       	pop	r4
 5a4:	3f 90       	pop	r3
 5a6:	2f 90       	pop	r2
 5a8:	08 95       	ret

000005aa <main>:

int main(void)
{   
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
 5ae:	87 e0       	ldi	r24, 0x07	; 7
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	90 93 c5 00 	sts	0x00C5, r25
 5b6:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
 5ba:	e2 ec       	ldi	r30, 0xC2	; 194
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	8f 7d       	andi	r24, 0xDF	; 223
 5c2:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
 5c4:	80 81       	ld	r24, Z
 5c6:	8f 7e       	andi	r24, 0xEF	; 239
 5c8:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
 5ca:	a1 ec       	ldi	r26, 0xC1	; 193
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	8c 91       	ld	r24, X
 5d0:	8b 7f       	andi	r24, 0xFB	; 251
 5d2:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
 5d4:	80 81       	ld	r24, Z
 5d6:	84 60       	ori	r24, 0x04	; 4
 5d8:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
 5da:	80 81       	ld	r24, Z
 5dc:	82 60       	ori	r24, 0x02	; 2
 5de:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
 5e0:	80 81       	ld	r24, Z
 5e2:	87 7f       	andi	r24, 0xF7	; 247
 5e4:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
 5e6:	8c 91       	ld	r24, X
 5e8:	88 60       	ori	r24, 0x08	; 8
 5ea:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 1);  // прием разрешен
 5ec:	8c 91       	ld	r24, X
 5ee:	80 61       	ori	r24, 0x10	; 16
 5f0:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 1); // прерывание приема разрешено
 5f2:	8c 91       	ld	r24, X
 5f4:	80 68       	ori	r24, 0x80	; 128
 5f6:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
 5f8:	8c 91       	ld	r24, X
 5fa:	80 64       	ori	r24, 0x40	; 64
 5fc:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
 5fe:	8c 91       	ld	r24, X
 600:	8f 7d       	andi	r24, 0xDF	; 223
 602:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    LCD_REG= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3)|(1 << LCD_EN)|(1 << LCD_RS); // LCD на выход
 604:	8f e3       	ldi	r24, 0x3F	; 63
 606:	84 b9       	out	0x04, r24	; 4
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
 608:	e7 e2       	ldi	r30, 0x27	; 39
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	8e 7f       	andi	r24, 0xFE	; 254
 610:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD); // управление подсветкой экрана и нагрузкой на выход
 612:	ea e2       	ldi	r30, 0x2A	; 42
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 ec       	ldi	r24, 0xC0	; 192
 618:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
 61a:	80 81       	ld	r24, Z
 61c:	83 7c       	andi	r24, 0xC3	; 195
 61e:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
 620:	8c e3       	ldi	r24, 0x3C	; 60
 622:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
 624:	ec e7       	ldi	r30, 0x7C	; 124
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
 62e:	ab e7       	ldi	r26, 0x7B	; 123
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	8c 91       	ld	r24, X
 634:	83 60       	ori	r24, 0x03	; 3
 636:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
 638:	80 81       	ld	r24, Z
 63a:	80 62       	ori	r24, 0x20	; 32
 63c:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
 63e:	aa e7       	ldi	r26, 0x7A	; 122
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	8c 91       	ld	r24, X
 644:	80 62       	ori	r24, 0x20	; 32
 646:	8c 93       	st	X, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
 648:	8c 91       	ld	r24, X
 64a:	88 60       	ori	r24, 0x08	; 8
 64c:	8c 93       	st	X, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
 64e:	8c 91       	ld	r24, X
 650:	80 68       	ori	r24, 0x80	; 128
 652:	8c 93       	st	X, r24
    //DIDR0 |= 1 << ADC0D; // отключить цифровой вход ADC0D
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
 654:	e4 e4       	ldi	r30, 0x44	; 68
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	80 83       	st	Z, r24
    OCR0A= measureRate;
 65e:	80 91 5b 01 	lds	r24, 0x015B
 662:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 1 с предделителем 256
 664:	e5 e4       	ldi	r30, 0x45	; 69
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	84 60       	ori	r24, 0x04	; 4
 66c:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
 66e:	ee e6       	ldi	r30, 0x6E	; 110
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	82 60       	ori	r24, 0x02	; 2
 676:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
 678:	85 e0       	ldi	r24, 0x05	; 5
 67a:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
 67e:	e6 eb       	ldi	r30, 0xB6	; 182
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	80 62       	ori	r24, 0x20	; 32
 686:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
 688:	e0 e7       	ldi	r30, 0x70	; 112
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	81 60       	ori	r24, 0x01	; 1
 690:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ADCSRA |= 1 << ADSC;
 692:	8c 91       	ld	r24, X
 694:	80 64       	ori	r24, 0x40	; 64
 696:	8c 93       	st	X, r24
    
    sei();
 698:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
 69a:	c9 e2       	ldi	r28, 0x29	; 41
 69c:	d0 e0       	ldi	r29, 0x00	; 0
 69e:	88 81       	ld	r24, Y
 6a0:	84 ff       	sbrs	r24, 4
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <main+0x106>
 6a4:	88 81       	ld	r24, Y
 6a6:	85 ff       	sbrs	r24, 5
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <main+0x106>
 6aa:	88 81       	ld	r24, Y
 6ac:	82 fd       	sbrc	r24, 2
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <main+0x114>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_ON(progFlags, LCD_ON);
 6b0:	80 91 56 01 	lds	r24, 0x0156
 6b4:	8f 7e       	andi	r24, 0xEF	; 239
 6b6:	81 60       	ori	r24, 0x01	; 1
 6b8:	80 93 56 01 	sts	0x0156, r24
            LCD_turnOn();
 6bc:	f4 dc       	rcall	.-1560   	; 0xa6 <LCD_turnOn>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
 6be:	88 81       	ld	r24, Y
 6c0:	83 fd       	sbrc	r24, 3
 6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <main+0x13c>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 6c4:	80 91 56 01 	lds	r24, 0x0156
 6c8:	8f 7e       	andi	r24, 0xEF	; 239
 6ca:	80 93 56 01 	sts	0x0156, r24
            if (!BIT_READ(progFlags, LCD_ON))
 6ce:	80 fd       	sbrc	r24, 0
 6d0:	04 c0       	rjmp	.+8      	; 0x6da <main+0x130>
            {
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	80 93 56 01 	sts	0x0156, r24
                LCD_turnOn();
 6d8:	e6 dc       	rcall	.-1588   	; 0xa6 <LCD_turnOn>
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
 6da:	80 91 56 01 	lds	r24, 0x0156
 6de:	82 60       	ori	r24, 0x02	; 2
 6e0:	80 93 56 01 	sts	0x0156, r24
            menuRun(); // обработка команд меню
 6e4:	3a dd       	rcall	.-1420   	; 0x15a <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE))
 6e6:	80 91 56 01 	lds	r24, 0x0156
 6ea:	84 ff       	sbrs	r24, 4
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <main+0x150>
        {
            if(BIT_READ(progFlags, LCD_ON))
 6ee:	80 ff       	sbrs	r24, 0
 6f0:	04 c0       	rjmp	.+8      	; 0x6fa <main+0x150>
            {
                BIT_OFF(progFlags, LCD_ON);
 6f2:	8e 7f       	andi	r24, 0xFE	; 254
 6f4:	80 93 56 01 	sts	0x0156, r24
                LCD_turnOff();
 6f8:	dc dc       	rcall	.-1608   	; 0xb2 <LCD_turnOff>
            }
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
 6fa:	80 91 56 01 	lds	r24, 0x0156
 6fe:	80 ff       	sbrs	r24, 0
 700:	ce cf       	rjmp	.-100    	; 0x69e <main+0xf4>
        {
            //LCD_Clear();
            LCD_DisplayAll();
 702:	dd dc       	rcall	.-1606   	; 0xbe <LCD_DisplayAll>
 704:	cc cf       	rjmp	.-104    	; 0x69e <main+0xf4>

00000706 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){                                                      //TODO: должен будить процессор в режиме P-save
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	ef 92       	push	r14
 712:	ff 92       	push	r15
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	4f 93       	push	r20
 71e:	5f 93       	push	r21
 720:	6f 93       	push	r22
 722:	7f 93       	push	r23
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	af 93       	push	r26
 72a:	bf 93       	push	r27
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
 730:	60 91 79 00 	lds	r22, 0x0079
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	66 0f       	add	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	88 27       	eor	r24, r24
 740:	77 fd       	sbrc	r23, 7
 742:	80 95       	com	r24
 744:	98 2f       	mov	r25, r24
 746:	cc d1       	rcall	.+920    	; 0xae0 <__floatsisf>
 748:	2c e5       	ldi	r18, 0x5C	; 92
 74a:	3f e8       	ldi	r19, 0x8F	; 143
 74c:	42 e4       	ldi	r20, 0x42	; 66
 74e:	5e e3       	ldi	r21, 0x3E	; 62
 750:	7b d2       	rcall	.+1270   	; 0xc48 <__mulsf3>
 752:	60 93 5d 01 	sts	0x015D, r22
 756:	70 93 5e 01 	sts	0x015E, r23
 75a:	80 93 5f 01 	sts	0x015F, r24
 75e:	90 93 60 01 	sts	0x0160, r25
    if (temperatureValue >= (targetTemp + Tolerance))
 762:	60 91 11 01 	lds	r22, 0x0111
 766:	70 91 12 01 	lds	r23, 0x0112
 76a:	80 91 13 01 	lds	r24, 0x0113
 76e:	90 91 14 01 	lds	r25, 0x0114
 772:	20 91 57 01 	lds	r18, 0x0157
 776:	30 91 58 01 	lds	r19, 0x0158
 77a:	40 91 59 01 	lds	r20, 0x0159
 77e:	50 91 5a 01 	lds	r21, 0x015A
 782:	e0 90 5d 01 	lds	r14, 0x015D
 786:	f0 90 5e 01 	lds	r15, 0x015E
 78a:	00 91 5f 01 	lds	r16, 0x015F
 78e:	10 91 60 01 	lds	r17, 0x0160
 792:	a3 d0       	rcall	.+326    	; 0x8da <__addsf3>
 794:	a8 01       	movw	r20, r16
 796:	97 01       	movw	r18, r14
 798:	04 d1       	rcall	.+520    	; 0x9a2 <__cmpsf2>
 79a:	18 16       	cp	r1, r24
 79c:	94 f0       	brlt	.+36     	; 0x7c2 <__vector_21+0xbc>
volatile static uint8_t measureRate= 0x0100; // поумолчанию - частота замера (F_CPU/1024)/2
uint8_t progFlags= 0b00000000;

inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
 79e:	90 91 56 01 	lds	r25, 0x0156
 7a2:	89 2f       	mov	r24, r25
 7a4:	86 95       	lsr	r24
 7a6:	86 95       	lsr	r24
 7a8:	86 95       	lsr	r24
 7aa:	80 fd       	sbrc	r24, 0
 7ac:	2e c0       	rjmp	.+92     	; 0x80a <__vector_21+0x104>
    {
	    BIT_ON(CONTROL_PORT, LOAD);
 7ae:	eb e2       	ldi	r30, 0x2B	; 43
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	80 64       	ori	r24, 0x40	; 64
 7b6:	80 83       	st	Z, r24
        BIT_ON(progFlags, COOLING);
 7b8:	89 2f       	mov	r24, r25
 7ba:	88 60       	ori	r24, 0x08	; 8
 7bc:	80 93 56 01 	sts	0x0156, r24
 7c0:	24 c0       	rjmp	.+72     	; 0x80a <__vector_21+0x104>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
 7c2:	60 91 5d 01 	lds	r22, 0x015D
 7c6:	70 91 5e 01 	lds	r23, 0x015E
 7ca:	80 91 5f 01 	lds	r24, 0x015F
 7ce:	90 91 60 01 	lds	r25, 0x0160
 7d2:	20 91 11 01 	lds	r18, 0x0111
 7d6:	30 91 12 01 	lds	r19, 0x0112
 7da:	40 91 13 01 	lds	r20, 0x0113
 7de:	50 91 14 01 	lds	r21, 0x0114
 7e2:	df d0       	rcall	.+446    	; 0x9a2 <__cmpsf2>
 7e4:	18 16       	cp	r1, r24
 7e6:	8c f0       	brlt	.+34     	; 0x80a <__vector_21+0x104>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
 7e8:	90 91 56 01 	lds	r25, 0x0156
 7ec:	89 2f       	mov	r24, r25
 7ee:	86 95       	lsr	r24
 7f0:	86 95       	lsr	r24
 7f2:	86 95       	lsr	r24
 7f4:	80 ff       	sbrs	r24, 0
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <__vector_21+0x104>
    {
	    BIT_OFF(CONTROL_PORT, LOAD);
 7f8:	eb e2       	ldi	r30, 0x2B	; 43
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	8f 7b       	andi	r24, 0xBF	; 191
 800:	80 83       	st	Z, r24
        BIT_OFF(progFlags, COOLING);
 802:	89 2f       	mov	r24, r25
 804:	87 7f       	andi	r24, 0xF7	; 247
 806:	80 93 56 01 	sts	0x0156, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
 80a:	ff 91       	pop	r31
 80c:	ef 91       	pop	r30
 80e:	bf 91       	pop	r27
 810:	af 91       	pop	r26
 812:	9f 91       	pop	r25
 814:	8f 91       	pop	r24
 816:	7f 91       	pop	r23
 818:	6f 91       	pop	r22
 81a:	5f 91       	pop	r21
 81c:	4f 91       	pop	r20
 81e:	3f 91       	pop	r19
 820:	2f 91       	pop	r18
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	ff 90       	pop	r15
 828:	ef 90       	pop	r14
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <__vector_9>:

ISR(TIMER2_OVF_vect){                                               //TODO: должен будить процессор в режиме P-save
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	8f 93       	push	r24
 840:	9f 93       	push	r25
    runSeconds++;
 842:	80 91 5c 01 	lds	r24, 0x015C
 846:	8f 5f       	subi	r24, 0xFF	; 255
 848:	80 93 5c 01 	sts	0x015C, r24
    if (runSeconds==timeOut)
 84c:	90 91 5c 01 	lds	r25, 0x015C
 850:	80 91 10 01 	lds	r24, 0x0110
 854:	98 17       	cp	r25, r24
 856:	39 f4       	brne	.+14     	; 0x866 <__vector_9+0x32>
    {
        runSeconds= 0; // сбрасываем счетчик секунд
 858:	10 92 5c 01 	sts	0x015C, r1
        BIT_ON(progFlags, INACTIVE);
 85c:	80 91 56 01 	lds	r24, 0x0156
 860:	80 61       	ori	r24, 0x10	; 16
 862:	80 93 56 01 	sts	0x0156, r24
    }
    return;
}
 866:	9f 91       	pop	r25
 868:	8f 91       	pop	r24
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <__vector_14>:

ISR(TIMER0_COMPA_vect){                                             //TODO: должен будить процессор в режиме P-save
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
    return;
}
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <__vector_2>:

ISR(INT1_vect){                                                     //TODO: должен будить процессор в режиме P-save
 888:	1f 92       	push	r1
 88a:	0f 92       	push	r0
 88c:	0f b6       	in	r0, 0x3f	; 63
 88e:	0f 92       	push	r0
 890:	11 24       	eor	r1, r1
 892:	2f 93       	push	r18
 894:	3f 93       	push	r19
 896:	4f 93       	push	r20
 898:	5f 93       	push	r21
 89a:	6f 93       	push	r22
 89c:	7f 93       	push	r23
 89e:	8f 93       	push	r24
 8a0:	9f 93       	push	r25
 8a2:	af 93       	push	r26
 8a4:	bf 93       	push	r27
 8a6:	ef 93       	push	r30
 8a8:	ff 93       	push	r31
    turnOffSleep();
    BIT_ON(progFlags, LCD_ON);
 8aa:	80 91 56 01 	lds	r24, 0x0156
 8ae:	81 60       	ori	r24, 0x01	; 1
 8b0:	80 93 56 01 	sts	0x0156, r24
    LCD_turnOn();
 8b4:	f8 db       	rcall	.-2064   	; 0xa6 <LCD_turnOn>
 8b6:	ff 91       	pop	r31
 8b8:	ef 91       	pop	r30
 8ba:	bf 91       	pop	r27
 8bc:	af 91       	pop	r26
 8be:	9f 91       	pop	r25
 8c0:	8f 91       	pop	r24
 8c2:	7f 91       	pop	r23
 8c4:	6f 91       	pop	r22
 8c6:	5f 91       	pop	r21
 8c8:	4f 91       	pop	r20
 8ca:	3f 91       	pop	r19
 8cc:	2f 91       	pop	r18
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <__subsf3>:
 8d8:	50 58       	subi	r21, 0x80	; 128

000008da <__addsf3>:
 8da:	bb 27       	eor	r27, r27
 8dc:	aa 27       	eor	r26, r26
 8de:	0e d0       	rcall	.+28     	; 0x8fc <__addsf3x>
 8e0:	75 c1       	rjmp	.+746    	; 0xbcc <__fp_round>
 8e2:	66 d1       	rcall	.+716    	; 0xbb0 <__fp_pscA>
 8e4:	30 f0       	brcs	.+12     	; 0x8f2 <__addsf3+0x18>
 8e6:	6b d1       	rcall	.+726    	; 0xbbe <__fp_pscB>
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__addsf3+0x18>
 8ea:	31 f4       	brne	.+12     	; 0x8f8 <__addsf3+0x1e>
 8ec:	9f 3f       	cpi	r25, 0xFF	; 255
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__addsf3+0x1a>
 8f0:	1e f4       	brtc	.+6      	; 0x8f8 <__addsf3+0x1e>
 8f2:	5b c1       	rjmp	.+694    	; 0xbaa <__fp_nan>
 8f4:	0e f4       	brtc	.+2      	; 0x8f8 <__addsf3+0x1e>
 8f6:	e0 95       	com	r30
 8f8:	e7 fb       	bst	r30, 7
 8fa:	51 c1       	rjmp	.+674    	; 0xb9e <__fp_inf>

000008fc <__addsf3x>:
 8fc:	e9 2f       	mov	r30, r25
 8fe:	77 d1       	rcall	.+750    	; 0xbee <__fp_split3>
 900:	80 f3       	brcs	.-32     	; 0x8e2 <__addsf3+0x8>
 902:	ba 17       	cp	r27, r26
 904:	62 07       	cpc	r22, r18
 906:	73 07       	cpc	r23, r19
 908:	84 07       	cpc	r24, r20
 90a:	95 07       	cpc	r25, r21
 90c:	18 f0       	brcs	.+6      	; 0x914 <__addsf3x+0x18>
 90e:	71 f4       	brne	.+28     	; 0x92c <__addsf3x+0x30>
 910:	9e f5       	brtc	.+102    	; 0x978 <__addsf3x+0x7c>
 912:	8f c1       	rjmp	.+798    	; 0xc32 <__fp_zero>
 914:	0e f4       	brtc	.+2      	; 0x918 <__addsf3x+0x1c>
 916:	e0 95       	com	r30
 918:	0b 2e       	mov	r0, r27
 91a:	ba 2f       	mov	r27, r26
 91c:	a0 2d       	mov	r26, r0
 91e:	0b 01       	movw	r0, r22
 920:	b9 01       	movw	r22, r18
 922:	90 01       	movw	r18, r0
 924:	0c 01       	movw	r0, r24
 926:	ca 01       	movw	r24, r20
 928:	a0 01       	movw	r20, r0
 92a:	11 24       	eor	r1, r1
 92c:	ff 27       	eor	r31, r31
 92e:	59 1b       	sub	r21, r25
 930:	99 f0       	breq	.+38     	; 0x958 <__addsf3x+0x5c>
 932:	59 3f       	cpi	r21, 0xF9	; 249
 934:	50 f4       	brcc	.+20     	; 0x94a <__addsf3x+0x4e>
 936:	50 3e       	cpi	r21, 0xE0	; 224
 938:	68 f1       	brcs	.+90     	; 0x994 <__addsf3x+0x98>
 93a:	1a 16       	cp	r1, r26
 93c:	f0 40       	sbci	r31, 0x00	; 0
 93e:	a2 2f       	mov	r26, r18
 940:	23 2f       	mov	r18, r19
 942:	34 2f       	mov	r19, r20
 944:	44 27       	eor	r20, r20
 946:	58 5f       	subi	r21, 0xF8	; 248
 948:	f3 cf       	rjmp	.-26     	; 0x930 <__addsf3x+0x34>
 94a:	46 95       	lsr	r20
 94c:	37 95       	ror	r19
 94e:	27 95       	ror	r18
 950:	a7 95       	ror	r26
 952:	f0 40       	sbci	r31, 0x00	; 0
 954:	53 95       	inc	r21
 956:	c9 f7       	brne	.-14     	; 0x94a <__addsf3x+0x4e>
 958:	7e f4       	brtc	.+30     	; 0x978 <__addsf3x+0x7c>
 95a:	1f 16       	cp	r1, r31
 95c:	ba 0b       	sbc	r27, r26
 95e:	62 0b       	sbc	r22, r18
 960:	73 0b       	sbc	r23, r19
 962:	84 0b       	sbc	r24, r20
 964:	ba f0       	brmi	.+46     	; 0x994 <__addsf3x+0x98>
 966:	91 50       	subi	r25, 0x01	; 1
 968:	a1 f0       	breq	.+40     	; 0x992 <__addsf3x+0x96>
 96a:	ff 0f       	add	r31, r31
 96c:	bb 1f       	adc	r27, r27
 96e:	66 1f       	adc	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	c2 f7       	brpl	.-16     	; 0x966 <__addsf3x+0x6a>
 976:	0e c0       	rjmp	.+28     	; 0x994 <__addsf3x+0x98>
 978:	ba 0f       	add	r27, r26
 97a:	62 1f       	adc	r22, r18
 97c:	73 1f       	adc	r23, r19
 97e:	84 1f       	adc	r24, r20
 980:	48 f4       	brcc	.+18     	; 0x994 <__addsf3x+0x98>
 982:	87 95       	ror	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	b7 95       	ror	r27
 98a:	f7 95       	ror	r31
 98c:	9e 3f       	cpi	r25, 0xFE	; 254
 98e:	08 f0       	brcs	.+2      	; 0x992 <__addsf3x+0x96>
 990:	b3 cf       	rjmp	.-154    	; 0x8f8 <__addsf3+0x1e>
 992:	93 95       	inc	r25
 994:	88 0f       	add	r24, r24
 996:	08 f0       	brcs	.+2      	; 0x99a <__addsf3x+0x9e>
 998:	99 27       	eor	r25, r25
 99a:	ee 0f       	add	r30, r30
 99c:	97 95       	ror	r25
 99e:	87 95       	ror	r24
 9a0:	08 95       	ret

000009a2 <__cmpsf2>:
 9a2:	d9 d0       	rcall	.+434    	; 0xb56 <__fp_cmp>
 9a4:	08 f4       	brcc	.+2      	; 0x9a8 <__cmpsf2+0x6>
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	08 95       	ret

000009aa <__divsf3>:
 9aa:	0c d0       	rcall	.+24     	; 0x9c4 <__divsf3x>
 9ac:	0f c1       	rjmp	.+542    	; 0xbcc <__fp_round>
 9ae:	07 d1       	rcall	.+526    	; 0xbbe <__fp_pscB>
 9b0:	40 f0       	brcs	.+16     	; 0x9c2 <__divsf3+0x18>
 9b2:	fe d0       	rcall	.+508    	; 0xbb0 <__fp_pscA>
 9b4:	30 f0       	brcs	.+12     	; 0x9c2 <__divsf3+0x18>
 9b6:	21 f4       	brne	.+8      	; 0x9c0 <__divsf3+0x16>
 9b8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <__divsf3+0x18>
 9bc:	f0 c0       	rjmp	.+480    	; 0xb9e <__fp_inf>
 9be:	51 11       	cpse	r21, r1
 9c0:	39 c1       	rjmp	.+626    	; 0xc34 <__fp_szero>
 9c2:	f3 c0       	rjmp	.+486    	; 0xbaa <__fp_nan>

000009c4 <__divsf3x>:
 9c4:	14 d1       	rcall	.+552    	; 0xbee <__fp_split3>
 9c6:	98 f3       	brcs	.-26     	; 0x9ae <__divsf3+0x4>

000009c8 <__divsf3_pse>:
 9c8:	99 23       	and	r25, r25
 9ca:	c9 f3       	breq	.-14     	; 0x9be <__divsf3+0x14>
 9cc:	55 23       	and	r21, r21
 9ce:	b1 f3       	breq	.-20     	; 0x9bc <__divsf3+0x12>
 9d0:	95 1b       	sub	r25, r21
 9d2:	55 0b       	sbc	r21, r21
 9d4:	bb 27       	eor	r27, r27
 9d6:	aa 27       	eor	r26, r26
 9d8:	62 17       	cp	r22, r18
 9da:	73 07       	cpc	r23, r19
 9dc:	84 07       	cpc	r24, r20
 9de:	38 f0       	brcs	.+14     	; 0x9ee <__divsf3_pse+0x26>
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255
 9e4:	22 0f       	add	r18, r18
 9e6:	33 1f       	adc	r19, r19
 9e8:	44 1f       	adc	r20, r20
 9ea:	aa 1f       	adc	r26, r26
 9ec:	a9 f3       	breq	.-22     	; 0x9d8 <__divsf3_pse+0x10>
 9ee:	33 d0       	rcall	.+102    	; 0xa56 <__divsf3_pse+0x8e>
 9f0:	0e 2e       	mov	r0, r30
 9f2:	3a f0       	brmi	.+14     	; 0xa02 <__divsf3_pse+0x3a>
 9f4:	e0 e8       	ldi	r30, 0x80	; 128
 9f6:	30 d0       	rcall	.+96     	; 0xa58 <__divsf3_pse+0x90>
 9f8:	91 50       	subi	r25, 0x01	; 1
 9fa:	50 40       	sbci	r21, 0x00	; 0
 9fc:	e6 95       	lsr	r30
 9fe:	00 1c       	adc	r0, r0
 a00:	ca f7       	brpl	.-14     	; 0x9f4 <__divsf3_pse+0x2c>
 a02:	29 d0       	rcall	.+82     	; 0xa56 <__divsf3_pse+0x8e>
 a04:	fe 2f       	mov	r31, r30
 a06:	27 d0       	rcall	.+78     	; 0xa56 <__divsf3_pse+0x8e>
 a08:	66 0f       	add	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	bb 1f       	adc	r27, r27
 a10:	26 17       	cp	r18, r22
 a12:	37 07       	cpc	r19, r23
 a14:	48 07       	cpc	r20, r24
 a16:	ab 07       	cpc	r26, r27
 a18:	b0 e8       	ldi	r27, 0x80	; 128
 a1a:	09 f0       	breq	.+2      	; 0xa1e <__divsf3_pse+0x56>
 a1c:	bb 0b       	sbc	r27, r27
 a1e:	80 2d       	mov	r24, r0
 a20:	bf 01       	movw	r22, r30
 a22:	ff 27       	eor	r31, r31
 a24:	93 58       	subi	r25, 0x83	; 131
 a26:	5f 4f       	sbci	r21, 0xFF	; 255
 a28:	2a f0       	brmi	.+10     	; 0xa34 <__divsf3_pse+0x6c>
 a2a:	9e 3f       	cpi	r25, 0xFE	; 254
 a2c:	51 05       	cpc	r21, r1
 a2e:	68 f0       	brcs	.+26     	; 0xa4a <__divsf3_pse+0x82>
 a30:	b6 c0       	rjmp	.+364    	; 0xb9e <__fp_inf>
 a32:	00 c1       	rjmp	.+512    	; 0xc34 <__fp_szero>
 a34:	5f 3f       	cpi	r21, 0xFF	; 255
 a36:	ec f3       	brlt	.-6      	; 0xa32 <__divsf3_pse+0x6a>
 a38:	98 3e       	cpi	r25, 0xE8	; 232
 a3a:	dc f3       	brlt	.-10     	; 0xa32 <__divsf3_pse+0x6a>
 a3c:	86 95       	lsr	r24
 a3e:	77 95       	ror	r23
 a40:	67 95       	ror	r22
 a42:	b7 95       	ror	r27
 a44:	f7 95       	ror	r31
 a46:	9f 5f       	subi	r25, 0xFF	; 255
 a48:	c9 f7       	brne	.-14     	; 0xa3c <__divsf3_pse+0x74>
 a4a:	88 0f       	add	r24, r24
 a4c:	91 1d       	adc	r25, r1
 a4e:	96 95       	lsr	r25
 a50:	87 95       	ror	r24
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret
 a56:	e1 e0       	ldi	r30, 0x01	; 1
 a58:	66 0f       	add	r22, r22
 a5a:	77 1f       	adc	r23, r23
 a5c:	88 1f       	adc	r24, r24
 a5e:	bb 1f       	adc	r27, r27
 a60:	62 17       	cp	r22, r18
 a62:	73 07       	cpc	r23, r19
 a64:	84 07       	cpc	r24, r20
 a66:	ba 07       	cpc	r27, r26
 a68:	20 f0       	brcs	.+8      	; 0xa72 <__divsf3_pse+0xaa>
 a6a:	62 1b       	sub	r22, r18
 a6c:	73 0b       	sbc	r23, r19
 a6e:	84 0b       	sbc	r24, r20
 a70:	ba 0b       	sbc	r27, r26
 a72:	ee 1f       	adc	r30, r30
 a74:	88 f7       	brcc	.-30     	; 0xa58 <__divsf3_pse+0x90>
 a76:	e0 95       	com	r30
 a78:	08 95       	ret

00000a7a <__fixsfsi>:
 a7a:	04 d0       	rcall	.+8      	; 0xa84 <__fixunssfsi>
 a7c:	68 94       	set
 a7e:	b1 11       	cpse	r27, r1
 a80:	d9 c0       	rjmp	.+434    	; 0xc34 <__fp_szero>
 a82:	08 95       	ret

00000a84 <__fixunssfsi>:
 a84:	bc d0       	rcall	.+376    	; 0xbfe <__fp_splitA>
 a86:	88 f0       	brcs	.+34     	; 0xaaa <__fixunssfsi+0x26>
 a88:	9f 57       	subi	r25, 0x7F	; 127
 a8a:	90 f0       	brcs	.+36     	; 0xab0 <__fixunssfsi+0x2c>
 a8c:	b9 2f       	mov	r27, r25
 a8e:	99 27       	eor	r25, r25
 a90:	b7 51       	subi	r27, 0x17	; 23
 a92:	a0 f0       	brcs	.+40     	; 0xabc <__fixunssfsi+0x38>
 a94:	d1 f0       	breq	.+52     	; 0xaca <__fixunssfsi+0x46>
 a96:	66 0f       	add	r22, r22
 a98:	77 1f       	adc	r23, r23
 a9a:	88 1f       	adc	r24, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	1a f0       	brmi	.+6      	; 0xaa6 <__fixunssfsi+0x22>
 aa0:	ba 95       	dec	r27
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__fixunssfsi+0x12>
 aa4:	12 c0       	rjmp	.+36     	; 0xaca <__fixunssfsi+0x46>
 aa6:	b1 30       	cpi	r27, 0x01	; 1
 aa8:	81 f0       	breq	.+32     	; 0xaca <__fixunssfsi+0x46>
 aaa:	c3 d0       	rcall	.+390    	; 0xc32 <__fp_zero>
 aac:	b1 e0       	ldi	r27, 0x01	; 1
 aae:	08 95       	ret
 ab0:	c0 c0       	rjmp	.+384    	; 0xc32 <__fp_zero>
 ab2:	67 2f       	mov	r22, r23
 ab4:	78 2f       	mov	r23, r24
 ab6:	88 27       	eor	r24, r24
 ab8:	b8 5f       	subi	r27, 0xF8	; 248
 aba:	39 f0       	breq	.+14     	; 0xaca <__fixunssfsi+0x46>
 abc:	b9 3f       	cpi	r27, 0xF9	; 249
 abe:	cc f3       	brlt	.-14     	; 0xab2 <__fixunssfsi+0x2e>
 ac0:	86 95       	lsr	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	b3 95       	inc	r27
 ac8:	d9 f7       	brne	.-10     	; 0xac0 <__fixunssfsi+0x3c>
 aca:	3e f4       	brtc	.+14     	; 0xada <__fixunssfsi+0x56>
 acc:	90 95       	com	r25
 ace:	80 95       	com	r24
 ad0:	70 95       	com	r23
 ad2:	61 95       	neg	r22
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	08 95       	ret

00000adc <__floatunsisf>:
 adc:	e8 94       	clt
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__floatsisf+0x12>

00000ae0 <__floatsisf>:
 ae0:	97 fb       	bst	r25, 7
 ae2:	3e f4       	brtc	.+14     	; 0xaf2 <__floatsisf+0x12>
 ae4:	90 95       	com	r25
 ae6:	80 95       	com	r24
 ae8:	70 95       	com	r23
 aea:	61 95       	neg	r22
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	8f 4f       	sbci	r24, 0xFF	; 255
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	99 23       	and	r25, r25
 af4:	a9 f0       	breq	.+42     	; 0xb20 <__floatsisf+0x40>
 af6:	f9 2f       	mov	r31, r25
 af8:	96 e9       	ldi	r25, 0x96	; 150
 afa:	bb 27       	eor	r27, r27
 afc:	93 95       	inc	r25
 afe:	f6 95       	lsr	r31
 b00:	87 95       	ror	r24
 b02:	77 95       	ror	r23
 b04:	67 95       	ror	r22
 b06:	b7 95       	ror	r27
 b08:	f1 11       	cpse	r31, r1
 b0a:	f8 cf       	rjmp	.-16     	; 0xafc <__floatsisf+0x1c>
 b0c:	fa f4       	brpl	.+62     	; 0xb4c <__floatsisf+0x6c>
 b0e:	bb 0f       	add	r27, r27
 b10:	11 f4       	brne	.+4      	; 0xb16 <__floatsisf+0x36>
 b12:	60 ff       	sbrs	r22, 0
 b14:	1b c0       	rjmp	.+54     	; 0xb4c <__floatsisf+0x6c>
 b16:	6f 5f       	subi	r22, 0xFF	; 255
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	16 c0       	rjmp	.+44     	; 0xb4c <__floatsisf+0x6c>
 b20:	88 23       	and	r24, r24
 b22:	11 f0       	breq	.+4      	; 0xb28 <__floatsisf+0x48>
 b24:	96 e9       	ldi	r25, 0x96	; 150
 b26:	11 c0       	rjmp	.+34     	; 0xb4a <__floatsisf+0x6a>
 b28:	77 23       	and	r23, r23
 b2a:	21 f0       	breq	.+8      	; 0xb34 <__floatsisf+0x54>
 b2c:	9e e8       	ldi	r25, 0x8E	; 142
 b2e:	87 2f       	mov	r24, r23
 b30:	76 2f       	mov	r23, r22
 b32:	05 c0       	rjmp	.+10     	; 0xb3e <__floatsisf+0x5e>
 b34:	66 23       	and	r22, r22
 b36:	71 f0       	breq	.+28     	; 0xb54 <__floatsisf+0x74>
 b38:	96 e8       	ldi	r25, 0x86	; 134
 b3a:	86 2f       	mov	r24, r22
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	2a f0       	brmi	.+10     	; 0xb4c <__floatsisf+0x6c>
 b42:	9a 95       	dec	r25
 b44:	66 0f       	add	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	da f7       	brpl	.-10     	; 0xb42 <__floatsisf+0x62>
 b4c:	88 0f       	add	r24, r24
 b4e:	96 95       	lsr	r25
 b50:	87 95       	ror	r24
 b52:	97 f9       	bld	r25, 7
 b54:	08 95       	ret

00000b56 <__fp_cmp>:
 b56:	99 0f       	add	r25, r25
 b58:	00 08       	sbc	r0, r0
 b5a:	55 0f       	add	r21, r21
 b5c:	aa 0b       	sbc	r26, r26
 b5e:	e0 e8       	ldi	r30, 0x80	; 128
 b60:	fe ef       	ldi	r31, 0xFE	; 254
 b62:	16 16       	cp	r1, r22
 b64:	17 06       	cpc	r1, r23
 b66:	e8 07       	cpc	r30, r24
 b68:	f9 07       	cpc	r31, r25
 b6a:	c0 f0       	brcs	.+48     	; 0xb9c <__fp_cmp+0x46>
 b6c:	12 16       	cp	r1, r18
 b6e:	13 06       	cpc	r1, r19
 b70:	e4 07       	cpc	r30, r20
 b72:	f5 07       	cpc	r31, r21
 b74:	98 f0       	brcs	.+38     	; 0xb9c <__fp_cmp+0x46>
 b76:	62 1b       	sub	r22, r18
 b78:	73 0b       	sbc	r23, r19
 b7a:	84 0b       	sbc	r24, r20
 b7c:	95 0b       	sbc	r25, r21
 b7e:	39 f4       	brne	.+14     	; 0xb8e <__fp_cmp+0x38>
 b80:	0a 26       	eor	r0, r26
 b82:	61 f0       	breq	.+24     	; 0xb9c <__fp_cmp+0x46>
 b84:	23 2b       	or	r18, r19
 b86:	24 2b       	or	r18, r20
 b88:	25 2b       	or	r18, r21
 b8a:	21 f4       	brne	.+8      	; 0xb94 <__fp_cmp+0x3e>
 b8c:	08 95       	ret
 b8e:	0a 26       	eor	r0, r26
 b90:	09 f4       	brne	.+2      	; 0xb94 <__fp_cmp+0x3e>
 b92:	a1 40       	sbci	r26, 0x01	; 1
 b94:	a6 95       	lsr	r26
 b96:	8f ef       	ldi	r24, 0xFF	; 255
 b98:	81 1d       	adc	r24, r1
 b9a:	81 1d       	adc	r24, r1
 b9c:	08 95       	ret

00000b9e <__fp_inf>:
 b9e:	97 f9       	bld	r25, 7
 ba0:	9f 67       	ori	r25, 0x7F	; 127
 ba2:	80 e8       	ldi	r24, 0x80	; 128
 ba4:	70 e0       	ldi	r23, 0x00	; 0
 ba6:	60 e0       	ldi	r22, 0x00	; 0
 ba8:	08 95       	ret

00000baa <__fp_nan>:
 baa:	9f ef       	ldi	r25, 0xFF	; 255
 bac:	80 ec       	ldi	r24, 0xC0	; 192
 bae:	08 95       	ret

00000bb0 <__fp_pscA>:
 bb0:	00 24       	eor	r0, r0
 bb2:	0a 94       	dec	r0
 bb4:	16 16       	cp	r1, r22
 bb6:	17 06       	cpc	r1, r23
 bb8:	18 06       	cpc	r1, r24
 bba:	09 06       	cpc	r0, r25
 bbc:	08 95       	ret

00000bbe <__fp_pscB>:
 bbe:	00 24       	eor	r0, r0
 bc0:	0a 94       	dec	r0
 bc2:	12 16       	cp	r1, r18
 bc4:	13 06       	cpc	r1, r19
 bc6:	14 06       	cpc	r1, r20
 bc8:	05 06       	cpc	r0, r21
 bca:	08 95       	ret

00000bcc <__fp_round>:
 bcc:	09 2e       	mov	r0, r25
 bce:	03 94       	inc	r0
 bd0:	00 0c       	add	r0, r0
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <__fp_round+0xc>
 bd4:	88 23       	and	r24, r24
 bd6:	52 f0       	brmi	.+20     	; 0xbec <__fp_round+0x20>
 bd8:	bb 0f       	add	r27, r27
 bda:	40 f4       	brcc	.+16     	; 0xbec <__fp_round+0x20>
 bdc:	bf 2b       	or	r27, r31
 bde:	11 f4       	brne	.+4      	; 0xbe4 <__fp_round+0x18>
 be0:	60 ff       	sbrs	r22, 0
 be2:	04 c0       	rjmp	.+8      	; 0xbec <__fp_round+0x20>
 be4:	6f 5f       	subi	r22, 0xFF	; 255
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	08 95       	ret

00000bee <__fp_split3>:
 bee:	57 fd       	sbrc	r21, 7
 bf0:	90 58       	subi	r25, 0x80	; 128
 bf2:	44 0f       	add	r20, r20
 bf4:	55 1f       	adc	r21, r21
 bf6:	59 f0       	breq	.+22     	; 0xc0e <__fp_splitA+0x10>
 bf8:	5f 3f       	cpi	r21, 0xFF	; 255
 bfa:	71 f0       	breq	.+28     	; 0xc18 <__fp_splitA+0x1a>
 bfc:	47 95       	ror	r20

00000bfe <__fp_splitA>:
 bfe:	88 0f       	add	r24, r24
 c00:	97 fb       	bst	r25, 7
 c02:	99 1f       	adc	r25, r25
 c04:	61 f0       	breq	.+24     	; 0xc1e <__fp_splitA+0x20>
 c06:	9f 3f       	cpi	r25, 0xFF	; 255
 c08:	79 f0       	breq	.+30     	; 0xc28 <__fp_splitA+0x2a>
 c0a:	87 95       	ror	r24
 c0c:	08 95       	ret
 c0e:	12 16       	cp	r1, r18
 c10:	13 06       	cpc	r1, r19
 c12:	14 06       	cpc	r1, r20
 c14:	55 1f       	adc	r21, r21
 c16:	f2 cf       	rjmp	.-28     	; 0xbfc <__fp_split3+0xe>
 c18:	46 95       	lsr	r20
 c1a:	f1 df       	rcall	.-30     	; 0xbfe <__fp_splitA>
 c1c:	08 c0       	rjmp	.+16     	; 0xc2e <__fp_splitA+0x30>
 c1e:	16 16       	cp	r1, r22
 c20:	17 06       	cpc	r1, r23
 c22:	18 06       	cpc	r1, r24
 c24:	99 1f       	adc	r25, r25
 c26:	f1 cf       	rjmp	.-30     	; 0xc0a <__fp_splitA+0xc>
 c28:	86 95       	lsr	r24
 c2a:	71 05       	cpc	r23, r1
 c2c:	61 05       	cpc	r22, r1
 c2e:	08 94       	sec
 c30:	08 95       	ret

00000c32 <__fp_zero>:
 c32:	e8 94       	clt

00000c34 <__fp_szero>:
 c34:	bb 27       	eor	r27, r27
 c36:	66 27       	eor	r22, r22
 c38:	77 27       	eor	r23, r23
 c3a:	cb 01       	movw	r24, r22
 c3c:	97 f9       	bld	r25, 7
 c3e:	08 95       	ret

00000c40 <__gesf2>:
 c40:	8a df       	rcall	.-236    	; 0xb56 <__fp_cmp>
 c42:	08 f4       	brcc	.+2      	; 0xc46 <__gesf2+0x6>
 c44:	8f ef       	ldi	r24, 0xFF	; 255
 c46:	08 95       	ret

00000c48 <__mulsf3>:
 c48:	0b d0       	rcall	.+22     	; 0xc60 <__mulsf3x>
 c4a:	c0 cf       	rjmp	.-128    	; 0xbcc <__fp_round>
 c4c:	b1 df       	rcall	.-158    	; 0xbb0 <__fp_pscA>
 c4e:	28 f0       	brcs	.+10     	; 0xc5a <__mulsf3+0x12>
 c50:	b6 df       	rcall	.-148    	; 0xbbe <__fp_pscB>
 c52:	18 f0       	brcs	.+6      	; 0xc5a <__mulsf3+0x12>
 c54:	95 23       	and	r25, r21
 c56:	09 f0       	breq	.+2      	; 0xc5a <__mulsf3+0x12>
 c58:	a2 cf       	rjmp	.-188    	; 0xb9e <__fp_inf>
 c5a:	a7 cf       	rjmp	.-178    	; 0xbaa <__fp_nan>
 c5c:	11 24       	eor	r1, r1
 c5e:	ea cf       	rjmp	.-44     	; 0xc34 <__fp_szero>

00000c60 <__mulsf3x>:
 c60:	c6 df       	rcall	.-116    	; 0xbee <__fp_split3>
 c62:	a0 f3       	brcs	.-24     	; 0xc4c <__mulsf3+0x4>

00000c64 <__mulsf3_pse>:
 c64:	95 9f       	mul	r25, r21
 c66:	d1 f3       	breq	.-12     	; 0xc5c <__mulsf3+0x14>
 c68:	95 0f       	add	r25, r21
 c6a:	50 e0       	ldi	r21, 0x00	; 0
 c6c:	55 1f       	adc	r21, r21
 c6e:	62 9f       	mul	r22, r18
 c70:	f0 01       	movw	r30, r0
 c72:	72 9f       	mul	r23, r18
 c74:	bb 27       	eor	r27, r27
 c76:	f0 0d       	add	r31, r0
 c78:	b1 1d       	adc	r27, r1
 c7a:	63 9f       	mul	r22, r19
 c7c:	aa 27       	eor	r26, r26
 c7e:	f0 0d       	add	r31, r0
 c80:	b1 1d       	adc	r27, r1
 c82:	aa 1f       	adc	r26, r26
 c84:	64 9f       	mul	r22, r20
 c86:	66 27       	eor	r22, r22
 c88:	b0 0d       	add	r27, r0
 c8a:	a1 1d       	adc	r26, r1
 c8c:	66 1f       	adc	r22, r22
 c8e:	82 9f       	mul	r24, r18
 c90:	22 27       	eor	r18, r18
 c92:	b0 0d       	add	r27, r0
 c94:	a1 1d       	adc	r26, r1
 c96:	62 1f       	adc	r22, r18
 c98:	73 9f       	mul	r23, r19
 c9a:	b0 0d       	add	r27, r0
 c9c:	a1 1d       	adc	r26, r1
 c9e:	62 1f       	adc	r22, r18
 ca0:	83 9f       	mul	r24, r19
 ca2:	a0 0d       	add	r26, r0
 ca4:	61 1d       	adc	r22, r1
 ca6:	22 1f       	adc	r18, r18
 ca8:	74 9f       	mul	r23, r20
 caa:	33 27       	eor	r19, r19
 cac:	a0 0d       	add	r26, r0
 cae:	61 1d       	adc	r22, r1
 cb0:	23 1f       	adc	r18, r19
 cb2:	84 9f       	mul	r24, r20
 cb4:	60 0d       	add	r22, r0
 cb6:	21 1d       	adc	r18, r1
 cb8:	82 2f       	mov	r24, r18
 cba:	76 2f       	mov	r23, r22
 cbc:	6a 2f       	mov	r22, r26
 cbe:	11 24       	eor	r1, r1
 cc0:	9f 57       	subi	r25, 0x7F	; 127
 cc2:	50 40       	sbci	r21, 0x00	; 0
 cc4:	8a f0       	brmi	.+34     	; 0xce8 <__mulsf3_pse+0x84>
 cc6:	e1 f0       	breq	.+56     	; 0xd00 <__mulsf3_pse+0x9c>
 cc8:	88 23       	and	r24, r24
 cca:	4a f0       	brmi	.+18     	; 0xcde <__mulsf3_pse+0x7a>
 ccc:	ee 0f       	add	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	bb 1f       	adc	r27, r27
 cd2:	66 1f       	adc	r22, r22
 cd4:	77 1f       	adc	r23, r23
 cd6:	88 1f       	adc	r24, r24
 cd8:	91 50       	subi	r25, 0x01	; 1
 cda:	50 40       	sbci	r21, 0x00	; 0
 cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__mulsf3_pse+0x64>
 cde:	9e 3f       	cpi	r25, 0xFE	; 254
 ce0:	51 05       	cpc	r21, r1
 ce2:	70 f0       	brcs	.+28     	; 0xd00 <__mulsf3_pse+0x9c>
 ce4:	5c cf       	rjmp	.-328    	; 0xb9e <__fp_inf>
 ce6:	a6 cf       	rjmp	.-180    	; 0xc34 <__fp_szero>
 ce8:	5f 3f       	cpi	r21, 0xFF	; 255
 cea:	ec f3       	brlt	.-6      	; 0xce6 <__mulsf3_pse+0x82>
 cec:	98 3e       	cpi	r25, 0xE8	; 232
 cee:	dc f3       	brlt	.-10     	; 0xce6 <__mulsf3_pse+0x82>
 cf0:	86 95       	lsr	r24
 cf2:	77 95       	ror	r23
 cf4:	67 95       	ror	r22
 cf6:	b7 95       	ror	r27
 cf8:	f7 95       	ror	r31
 cfa:	e7 95       	ror	r30
 cfc:	9f 5f       	subi	r25, 0xFF	; 255
 cfe:	c1 f7       	brne	.-16     	; 0xcf0 <__mulsf3_pse+0x8c>
 d00:	fe 2b       	or	r31, r30
 d02:	88 0f       	add	r24, r24
 d04:	91 1d       	adc	r25, r1
 d06:	96 95       	lsr	r25
 d08:	87 95       	ror	r24
 d0a:	97 f9       	bld	r25, 7
 d0c:	08 95       	ret

00000d0e <_exit>:
 d0e:	f8 94       	cli

00000d10 <__stop_program>:
 d10:	ff cf       	rjmp	.-2      	; 0xd10 <__stop_program>
