
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000b98  00000c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800158  00800158  00000c84  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f6  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ff  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016d  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056c  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c6  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d0  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

void LCD_Clear()
{
    //TODO: определить
}
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	8b c3       	rjmp	.+1814   	; 0x720 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c3       	rjmp	.+1680   	; 0x6b6 <__vector_9>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c3       	rjmp	.+1736   	; 0x6f6 <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	9c c2       	rjmp	.+1336   	; 0x58e <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e5       	ldi	r26, 0x58	; 88
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	d0 d1       	rcall	.+928    	; 0x43c <main>
  9c:	7b c5       	rjmp	.+2806   	; 0xb94 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <LCD_Write>:

void LCD_Write(uint8_t data, uint8_t posY, uint8_t posX ) 
{
    cli();
  a0:	f8 94       	cli
	//TODO: определить
    sei();
  a2:	78 94       	sei
}
  a4:	08 95       	ret

000000a6 <LCD_turnOn>:

void LCD_turnOn() 
{
	BIT_OFF(CONTROL_PORT, LCD_LED); // ????????? ?????????
  a6:	eb e2       	ldi	r30, 0x2B	; 43
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
}
  b0:	08 95       	ret

000000b2 <LCD_turnOff>:

void LCD_turnOff() 
{
	BIT_ON(CONTROL_PORT, LCD_LED); // включить подсветку дисплея
  b2:	eb e2       	ldi	r30, 0x2B	; 43
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
}
  bc:	08 95       	ret

000000be <LCD_DisplayAll>:

void LCD_DisplayAll() 
{   
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
	LCD_Write("TEMP :", 0, 0);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	e8 df       	rcall	.-48     	; 0xa0 <LCD_Write>
    LCD_Write((uint8_t)temperatureValue, 0, 8);
  d0:	60 91 5e 01 	lds	r22, 0x015E
  d4:	70 91 5f 01 	lds	r23, 0x015F
  d8:	80 91 60 01 	lds	r24, 0x0160
  dc:	90 91 61 01 	lds	r25, 0x0161
  e0:	14 d4       	rcall	.+2088   	; 0x90a <__fixunssfsi>
  e2:	dc 01       	movw	r26, r24
  e4:	cb 01       	movw	r24, r22
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	48 e0       	ldi	r20, 0x08	; 8
  ea:	da df       	rcall	.-76     	; 0xa0 <LCD_Write>
    if (BIT_READ(progFlags, COOLING))
  ec:	80 91 58 01 	lds	r24, 0x0158
  f0:	86 95       	lsr	r24
  f2:	86 95       	lsr	r24
  f4:	86 95       	lsr	r24
  f6:	80 ff       	sbrs	r24, 0
  f8:	2b c0       	rjmp	.+86     	; 0x150 <LCD_DisplayAll+0x92>
    {
        LCD_Write("COOLING ", 1, 0);
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	ce df       	rcall	.-100    	; 0xa0 <LCD_Write>
        LCD_Write((uint8_t)((temperatureValue - targetTemp)/Tolerance)*100, 1, 8);
 104:	60 91 5e 01 	lds	r22, 0x015E
 108:	70 91 5f 01 	lds	r23, 0x015F
 10c:	80 91 60 01 	lds	r24, 0x0160
 110:	90 91 61 01 	lds	r25, 0x0161
 114:	20 91 11 01 	lds	r18, 0x0111
 118:	30 91 12 01 	lds	r19, 0x0112
 11c:	40 91 13 01 	lds	r20, 0x0113
 120:	50 91 14 01 	lds	r21, 0x0114
 124:	e0 90 59 01 	lds	r14, 0x0159
 128:	f0 90 5a 01 	lds	r15, 0x015A
 12c:	00 91 5b 01 	lds	r16, 0x015B
 130:	10 91 5c 01 	lds	r17, 0x015C
 134:	19 d3       	rcall	.+1586   	; 0x768 <__subsf3>
 136:	a8 01       	movw	r20, r16
 138:	97 01       	movw	r18, r14
 13a:	7f d3       	rcall	.+1790   	; 0x83a <__divsf3>
 13c:	e6 d3       	rcall	.+1996   	; 0x90a <__fixunssfsi>
 13e:	9b 01       	movw	r18, r22
 140:	ac 01       	movw	r20, r24
 142:	84 e6       	ldi	r24, 0x64	; 100
 144:	82 9f       	mul	r24, r18
 146:	80 2d       	mov	r24, r0
 148:	11 24       	eor	r1, r1
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	48 e0       	ldi	r20, 0x08	; 8
 14e:	a8 df       	rcall	.-176    	; 0xa0 <LCD_Write>
    }
}
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	08 95       	ret

0000015a <menuRun>:
    LCD_Clear();
    LCD_DisplayAll();
}

void menuRun()
{   int pos= 0;
 15a:	3f 92       	push	r3
 15c:	4f 92       	push	r4
 15e:	5f 92       	push	r5
 160:	6f 92       	push	r6
 162:	7f 92       	push	r7
 164:	8f 92       	push	r8
 166:	9f 92       	push	r9
 168:	af 92       	push	r10
 16a:	bf 92       	push	r11
 16c:	cf 92       	push	r12
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	df 93       	push	r29
 17a:	cf 93       	push	r28
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	c6 54       	subi	r28, 0x46	; 70
 182:	d0 40       	sbci	r29, 0x00	; 0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
 18e:	de 01       	movw	r26, r28
 190:	11 96       	adiw	r26, 0x01	; 1
 192:	e7 e1       	ldi	r30, 0x17	; 23
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	01 90       	ld	r0, Z+
 19a:	0d 92       	st	X+, r0
 19c:	81 50       	subi	r24, 0x01	; 1
 19e:	e1 f7       	brne	.-8      	; 0x198 <menuRun+0x3e>
	uint8_t values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
 1a0:	60 91 11 01 	lds	r22, 0x0111
 1a4:	70 91 12 01 	lds	r23, 0x0112
 1a8:	80 91 13 01 	lds	r24, 0x0113
 1ac:	90 91 14 01 	lds	r25, 0x0114
 1b0:	c0 90 59 01 	lds	r12, 0x0159
 1b4:	d0 90 5a 01 	lds	r13, 0x015A
 1b8:	e0 90 5b 01 	lds	r14, 0x015B
 1bc:	f0 90 5c 01 	lds	r15, 0x015C
 1c0:	a0 90 15 01 	lds	r10, 0x0115
 1c4:	b0 90 16 01 	lds	r11, 0x0116
 1c8:	20 91 58 01 	lds	r18, 0x0158
 1cc:	26 95       	lsr	r18
 1ce:	26 95       	lsr	r18
 1d0:	bb 24       	eor	r11, r11
 1d2:	b3 94       	inc	r11
 1d4:	b2 22       	and	r11, r18
 1d6:	8e 01       	movw	r16, r28
 1d8:	0f 5b       	subi	r16, 0xBF	; 191
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
 1dc:	96 d3       	rcall	.+1836   	; 0x90a <__fixunssfsi>
 1de:	f8 01       	movw	r30, r16
 1e0:	60 83       	st	Z, r22
 1e2:	c7 01       	movw	r24, r14
 1e4:	b6 01       	movw	r22, r12
 1e6:	91 d3       	rcall	.+1826   	; 0x90a <__fixunssfsi>
 1e8:	f8 01       	movw	r30, r16
 1ea:	61 83       	std	Z+1, r22	; 0x01
 1ec:	a2 82       	std	Z+2, r10	; 0x02
 1ee:	b3 82       	std	Z+3, r11	; 0x03
 1f0:	cc 24       	eor	r12, r12
 1f2:	dd 24       	eor	r13, r13
    LCD_Clear();
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 1f4:	0f 2e       	mov	r0, r31
 1f6:	fb e2       	ldi	r31, 0x2B	; 43
 1f8:	6f 2e       	mov	r6, r31
 1fa:	77 24       	eor	r7, r7
 1fc:	f0 2d       	mov	r31, r0
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
 1fe:	28 01       	movw	r4, r16
                    if(value > 1023) value= 0;
                    if(value < 0) value= 1023;
                	break;
                case 4:
                    if(value > 1) value= 0;
                    if(value < 0) value= 1;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	88 2e       	mov	r8, r24
 206:	39 2e       	mov	r3, r25
                        BIT_WRITE(progFlags, ECONOMY, value);
                    }          
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	27 96       	adiw	r28, 0x07	; 7
 20e:	9f af       	std	Y+63, r25	; 0x3f
 210:	8e af       	std	Y+62, r24	; 0x3e
 212:	27 97       	sbiw	r28, 0x07	; 7
{   int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	uint8_t values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 214:	f3 01       	movw	r30, r6
 216:	80 81       	ld	r24, Z
 218:	83 fd       	sbrc	r24, 3
 21a:	ae c0       	rjmp	.+348    	; 0x378 <menuRun+0x21e>
            BIT_OFF(progFlags, INACTIVE);
 21c:	80 91 58 01 	lds	r24, 0x0158
 220:	8f 7e       	andi	r24, 0xEF	; 239
 222:	80 93 58 01 	sts	0x0158, r24
            int value= values[pos];
 226:	f2 01       	movw	r30, r4
 228:	ec 0d       	add	r30, r12
 22a:	fd 1d       	adc	r31, r13
 22c:	90 80       	ld	r9, Z
 22e:	a9 2c       	mov	r10, r9
 230:	bb 24       	eor	r11, r11
            while(1){
                BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 232:	80 91 58 01 	lds	r24, 0x0158
 236:	8f 7e       	andi	r24, 0xEF	; 239
 238:	80 93 58 01 	sts	0x0158, r24
                LCD_Write(values[pos],1,0);
 23c:	89 2d       	mov	r24, r9
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	2e df       	rcall	.-420    	; 0xa0 <LCD_Write>
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
 244:	f3 01       	movw	r30, r6
 246:	80 81       	ld	r24, Z
 248:	85 fd       	sbrc	r24, 5
 24a:	06 c0       	rjmp	.+12     	; 0x258 <menuRun+0xfe>
                {
                    BIT_OFF(progFlags, INACTIVE);
 24c:	80 91 58 01 	lds	r24, 0x0158
 250:	8f 7e       	andi	r24, 0xEF	; 239
 252:	80 93 58 01 	sts	0x0158, r24
                    values[pos]++;
 256:	93 94       	inc	r9
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
 258:	f3 01       	movw	r30, r6
 25a:	80 81       	ld	r24, Z
 25c:	84 fd       	sbrc	r24, 4
 25e:	06 c0       	rjmp	.+12     	; 0x26c <menuRun+0x112>
                {
                    BIT_OFF(progFlags, INACTIVE);
 260:	80 91 58 01 	lds	r24, 0x0158
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	80 93 58 01 	sts	0x0158, r24
                    values[pos]--;
 26a:	9a 94       	dec	r9
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 26c:	f3 01       	movw	r30, r6
 26e:	80 81       	ld	r24, Z
 270:	82 ff       	sbrs	r24, 2
 272:	7e c0       	rjmp	.+252    	; 0x370 <menuRun+0x216>
                switch (pos)
 274:	f2 e0       	ldi	r31, 0x02	; 2
 276:	cf 16       	cp	r12, r31
 278:	d1 04       	cpc	r13, r1
 27a:	c9 f1       	breq	.+114    	; 0x2ee <menuRun+0x194>
 27c:	23 e0       	ldi	r18, 0x03	; 3
 27e:	c2 16       	cp	r12, r18
 280:	d1 04       	cpc	r13, r1
 282:	34 f4       	brge	.+12     	; 0x290 <menuRun+0x136>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	c8 16       	cp	r12, r24
 288:	d1 04       	cpc	r13, r1
 28a:	09 f0       	breq	.+2      	; 0x28e <menuRun+0x134>
 28c:	55 c0       	rjmp	.+170    	; 0x338 <menuRun+0x1de>
 28e:	0b c0       	rjmp	.+22     	; 0x2a6 <menuRun+0x14c>
 290:	93 e0       	ldi	r25, 0x03	; 3
 292:	c9 16       	cp	r12, r25
 294:	d1 04       	cpc	r13, r1
 296:	09 f4       	brne	.+2      	; 0x29a <menuRun+0x140>
 298:	4f c0       	rjmp	.+158    	; 0x338 <menuRun+0x1de>
 29a:	e4 e0       	ldi	r30, 0x04	; 4
 29c:	ce 16       	cp	r12, r30
 29e:	d1 04       	cpc	r13, r1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <menuRun+0x14a>
 2a2:	4a c0       	rjmp	.+148    	; 0x338 <menuRun+0x1de>
 2a4:	3d c0       	rjmp	.+122    	; 0x320 <menuRun+0x1c6>
                {
                case 1:
                    if(value > MAX_TEMP) value= MIN_TEMP;
 2a6:	b5 01       	movw	r22, r10
 2a8:	88 27       	eor	r24, r24
 2aa:	77 fd       	sbrc	r23, 7
 2ac:	80 95       	com	r24
 2ae:	98 2f       	mov	r25, r24
 2b0:	5a d3       	rcall	.+1716   	; 0x966 <__floatsisf>
 2b2:	7b 01       	movw	r14, r22
 2b4:	8c 01       	movw	r16, r24
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 ea       	ldi	r20, 0xA0	; 160
 2bc:	51 e4       	ldi	r21, 0x41	; 65
 2be:	03 d4       	rcall	.+2054   	; 0xac6 <__gesf2>
 2c0:	18 16       	cp	r1, r24
 2c2:	34 f4       	brge	.+12     	; 0x2d0 <menuRun+0x176>
 2c4:	0f 2e       	mov	r0, r31
 2c6:	ff e0       	ldi	r31, 0x0F	; 15
 2c8:	af 2e       	mov	r10, r31
 2ca:	bb 24       	eor	r11, r11
 2cc:	f0 2d       	mov	r31, r0
 2ce:	34 c0       	rjmp	.+104    	; 0x338 <menuRun+0x1de>
                    if(value < MIN_TEMP) value= MAX_TEMP;
 2d0:	c8 01       	movw	r24, r16
 2d2:	b7 01       	movw	r22, r14
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e7       	ldi	r20, 0x70	; 112
 2da:	51 e4       	ldi	r21, 0x41	; 65
 2dc:	aa d2       	rcall	.+1364   	; 0x832 <__cmpsf2>
 2de:	88 23       	and	r24, r24
 2e0:	5c f5       	brge	.+86     	; 0x338 <menuRun+0x1de>
 2e2:	0f 2e       	mov	r0, r31
 2e4:	f4 e1       	ldi	r31, 0x14	; 20
 2e6:	af 2e       	mov	r10, r31
 2e8:	bb 24       	eor	r11, r11
 2ea:	f0 2d       	mov	r31, r0
 2ec:	25 c0       	rjmp	.+74     	; 0x338 <menuRun+0x1de>
                	break;
                case 2:
                    if(value > MAX_TOL) value= MIN_TOL;
 2ee:	b5 01       	movw	r22, r10
 2f0:	88 27       	eor	r24, r24
 2f2:	77 fd       	sbrc	r23, 7
 2f4:	80 95       	com	r24
 2f6:	98 2f       	mov	r25, r24
 2f8:	36 d3       	rcall	.+1644   	; 0x966 <__floatsisf>
 2fa:	7b 01       	movw	r14, r22
 2fc:	8c 01       	movw	r16, r24
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 e8       	ldi	r20, 0x80	; 128
 304:	5f e3       	ldi	r21, 0x3F	; 63
 306:	df d3       	rcall	.+1982   	; 0xac6 <__gesf2>
 308:	18 16       	cp	r1, r24
 30a:	9c f0       	brlt	.+38     	; 0x332 <menuRun+0x1d8>
                    if(value < MIN_TOL) value= MAX_TOL;
 30c:	c8 01       	movw	r24, r16
 30e:	b7 01       	movw	r22, r14
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	8c d2       	rcall	.+1304   	; 0x832 <__cmpsf2>
 31a:	88 23       	and	r24, r24
 31c:	34 f0       	brlt	.+12     	; 0x32a <menuRun+0x1d0>
 31e:	0c c0       	rjmp	.+24     	; 0x338 <menuRun+0x1de>
                case 3:
                    if(value > 1023) value= 0;
                    if(value < 0) value= 1023;
                	break;
                case 4:
                    if(value > 1) value= 0;
 320:	f2 e0       	ldi	r31, 0x02	; 2
 322:	af 16       	cp	r10, r31
 324:	b1 04       	cpc	r11, r1
 326:	2c f4       	brge	.+10     	; 0x332 <menuRun+0x1d8>
 328:	07 c0       	rjmp	.+14     	; 0x338 <menuRun+0x1de>
                    if(value < 0) value= 1;
 32a:	aa 24       	eor	r10, r10
 32c:	bb 24       	eor	r11, r11
 32e:	a3 94       	inc	r10
 330:	03 c0       	rjmp	.+6      	; 0x338 <menuRun+0x1de>
 332:	88 2d       	mov	r24, r8
 334:	93 2d       	mov	r25, r3
 336:	5c 01       	movw	r10, r24
                	break;
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
 338:	f3 01       	movw	r30, r6
 33a:	80 81       	ld	r24, Z
 33c:	83 fd       	sbrc	r24, 3
 33e:	79 cf       	rjmp	.-270    	; 0x232 <menuRun+0xd8>
                    if(pos!=3){
 340:	f3 e0       	ldi	r31, 0x03	; 3
 342:	cf 16       	cp	r12, r31
 344:	d1 04       	cpc	r13, r1
 346:	29 f0       	breq	.+10     	; 0x352 <menuRun+0x1f8>
 348:	f2 01       	movw	r30, r4
 34a:	ec 0d       	add	r30, r12
 34c:	fd 1d       	adc	r31, r13
                        values[pos]= value;
 34e:	a0 82       	st	Z, r10
 350:	13 c0       	rjmp	.+38     	; 0x378 <menuRun+0x21e>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
 352:	a1 14       	cp	r10, r1
 354:	b1 04       	cpc	r11, r1
 356:	31 f0       	breq	.+12     	; 0x364 <menuRun+0x20a>
 358:	80 91 58 01 	lds	r24, 0x0158
 35c:	84 60       	ori	r24, 0x04	; 4
 35e:	80 93 58 01 	sts	0x0158, r24
 362:	67 cf       	rjmp	.-306    	; 0x232 <menuRun+0xd8>
 364:	80 91 58 01 	lds	r24, 0x0158
 368:	8b 7f       	andi	r24, 0xFB	; 251
 36a:	80 93 58 01 	sts	0x0158, r24
 36e:	61 cf       	rjmp	.-318    	; 0x232 <menuRun+0xd8>
 370:	f2 01       	movw	r30, r4
 372:	ec 0d       	add	r30, r12
 374:	fd 1d       	adc	r31, r13
 376:	90 82       	st	Z, r9
                    }          
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 378:	c6 01       	movw	r24, r12
 37a:	82 95       	swap	r24
 37c:	92 95       	swap	r25
 37e:	90 7f       	andi	r25, 0xF0	; 240
 380:	98 27       	eor	r25, r24
 382:	80 7f       	andi	r24, 0xF0	; 240
 384:	98 27       	eor	r25, r24
 386:	26 96       	adiw	r28, 0x06	; 6
 388:	2f ad       	ldd	r18, Y+63	; 0x3f
 38a:	26 97       	sbiw	r28, 0x06	; 6
 38c:	82 0f       	add	r24, r18
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	86 de       	rcall	.-756    	; 0xa0 <LCD_Write>
        LCD_Write(values[pos],1,0);
 394:	f2 01       	movw	r30, r4
 396:	ec 0d       	add	r30, r12
 398:	fd 1d       	adc	r31, r13
 39a:	80 81       	ld	r24, Z
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	7f de       	rcall	.-770    	; 0xa0 <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
 3a2:	f3 01       	movw	r30, r6
 3a4:	80 81       	ld	r24, Z
 3a6:	85 fd       	sbrc	r24, 5
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <menuRun+0x260>
        {
            BIT_OFF(progFlags, INACTIVE);
 3aa:	80 91 58 01 	lds	r24, 0x0158
 3ae:	8f 7e       	andi	r24, 0xEF	; 239
 3b0:	80 93 58 01 	sts	0x0158, r24
            pos++;
 3b4:	08 94       	sec
 3b6:	c1 1c       	adc	r12, r1
 3b8:	d1 1c       	adc	r13, r1
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
 3ba:	f3 01       	movw	r30, r6
 3bc:	80 81       	ld	r24, Z
 3be:	84 fd       	sbrc	r24, 4
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <menuRun+0x278>
        {
            BIT_OFF(progFlags, INACTIVE);
 3c2:	80 91 58 01 	lds	r24, 0x0158
 3c6:	8f 7e       	andi	r24, 0xEF	; 239
 3c8:	80 93 58 01 	sts	0x0158, r24
            pos--;
 3cc:	08 94       	sec
 3ce:	c1 08       	sbc	r12, r1
 3d0:	d1 08       	sbc	r13, r1
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 3d2:	f3 01       	movw	r30, r6
 3d4:	80 81       	ld	r24, Z
 3d6:	82 ff       	sbrs	r24, 2
 3d8:	12 c0       	rjmp	.+36     	; 0x3fe <menuRun+0x2a4>
        if(pos > 3) pos= 0;
 3da:	f4 e0       	ldi	r31, 0x04	; 4
 3dc:	cf 16       	cp	r12, r31
 3de:	d1 04       	cpc	r13, r1
 3e0:	1c f0       	brlt	.+6      	; 0x3e8 <menuRun+0x28e>
 3e2:	cc 24       	eor	r12, r12
 3e4:	dd 24       	eor	r13, r13
 3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <menuRun+0x29c>
        if(pos < 0) pos= 3;
 3e8:	dd 20       	and	r13, r13
 3ea:	2c f4       	brge	.+10     	; 0x3f6 <menuRun+0x29c>
 3ec:	0f 2e       	mov	r0, r31
 3ee:	f3 e0       	ldi	r31, 0x03	; 3
 3f0:	cf 2e       	mov	r12, r31
 3f2:	dd 24       	eor	r13, r13
 3f4:	f0 2d       	mov	r31, r0
        if(BIT_READ(progFlags, INACTIVE)) break;
 3f6:	80 91 58 01 	lds	r24, 0x0158
 3fa:	84 ff       	sbrs	r24, 4
 3fc:	0b cf       	rjmp	.-490    	; 0x214 <menuRun+0xba>
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
 3fe:	80 91 58 01 	lds	r24, 0x0158
 402:	8d 7e       	andi	r24, 0xED	; 237
 404:	80 93 58 01 	sts	0x0158, r24
}

inline void menuStop()
{
    LCD_Clear();
    LCD_DisplayAll();
 408:	5a de       	rcall	.-844    	; 0xbe <LCD_DisplayAll>
        if(BIT_READ(progFlags, INACTIVE)) break;
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
 40a:	ca 5b       	subi	r28, 0xBA	; 186
 40c:	df 4f       	sbci	r29, 0xFF	; 255
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	cf 91       	pop	r28
 41a:	df 91       	pop	r29
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	7f 90       	pop	r7
 432:	6f 90       	pop	r6
 434:	5f 90       	pop	r5
 436:	4f 90       	pop	r4
 438:	3f 90       	pop	r3
 43a:	08 95       	ret

0000043c <main>:

int main(void)
{   
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
 440:	87 e0       	ldi	r24, 0x07	; 7
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	90 93 c5 00 	sts	0x00C5, r25
 448:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
 44c:	e2 ec       	ldi	r30, 0xC2	; 194
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	8f 7d       	andi	r24, 0xDF	; 223
 454:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
 456:	80 81       	ld	r24, Z
 458:	8f 7e       	andi	r24, 0xEF	; 239
 45a:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
 45c:	a1 ec       	ldi	r26, 0xC1	; 193
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	8c 91       	ld	r24, X
 462:	8b 7f       	andi	r24, 0xFB	; 251
 464:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
 466:	80 81       	ld	r24, Z
 468:	84 60       	ori	r24, 0x04	; 4
 46a:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
 46c:	80 81       	ld	r24, Z
 46e:	82 60       	ori	r24, 0x02	; 2
 470:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
 472:	80 81       	ld	r24, Z
 474:	87 7f       	andi	r24, 0xF7	; 247
 476:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
 478:	8c 91       	ld	r24, X
 47a:	88 60       	ori	r24, 0x08	; 8
 47c:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 1);  // прием разрешен
 47e:	8c 91       	ld	r24, X
 480:	80 61       	ori	r24, 0x10	; 16
 482:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 1); // прерывание приема разрешено
 484:	8c 91       	ld	r24, X
 486:	80 68       	ori	r24, 0x80	; 128
 488:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
 48a:	8c 91       	ld	r24, X
 48c:	80 64       	ori	r24, 0x40	; 64
 48e:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
 490:	8c 91       	ld	r24, X
 492:	8f 7d       	andi	r24, 0xDF	; 223
 494:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    LCD_REG= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3)|(1 << LCD_EN)|(1 << LCD_RS); // LCD на выход
 496:	8f e3       	ldi	r24, 0x3F	; 63
 498:	84 b9       	out	0x04, r24	; 4
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
 49a:	e7 e2       	ldi	r30, 0x27	; 39
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD); // управление подсветкой экрана и нагрузкой на выход
 4a4:	ea e2       	ldi	r30, 0x2A	; 42
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 ec       	ldi	r24, 0xC0	; 192
 4aa:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
 4ac:	80 81       	ld	r24, Z
 4ae:	83 7c       	andi	r24, 0xC3	; 195
 4b0:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
 4b2:	8c e3       	ldi	r24, 0x3C	; 60
 4b4:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
 4b6:	ac e7       	ldi	r26, 0x7C	; 124
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	8c 91       	ld	r24, X
 4bc:	80 64       	ori	r24, 0x40	; 64
 4be:	8c 93       	st	X, r24
    //ADCSRB |= 5 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 1 с регистром B
    ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
 4c0:	ea e7       	ldi	r30, 0x7A	; 122
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	86 60       	ori	r24, 0x06	; 6
 4c8:	80 83       	st	Z, r24
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
 4ca:	8c 91       	ld	r24, X
 4cc:	80 62       	ori	r24, 0x20	; 32
 4ce:	8c 93       	st	X, r24
    //ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
 4d0:	80 81       	ld	r24, Z
 4d2:	88 60       	ori	r24, 0x08	; 8
 4d4:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
 4d6:	80 81       	ld	r24, Z
 4d8:	80 68       	ori	r24, 0x80	; 128
 4da:	80 83       	st	Z, r24
    //DIDR0 |= 1 << ADC0D; // отключить цифровой вход ADC0D 
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 1///
    TCCR1B|= 1 << WGM13; // включить режим CTC - сброс счетчика по совпадению
 4dc:	e1 e8       	ldi	r30, 0x81	; 129
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	80 61       	ori	r24, 0x10	; 16
 4e4:	80 83       	st	Z, r24
    OCR1A= measureRate;
 4e6:	80 91 15 01 	lds	r24, 0x0115
 4ea:	90 91 16 01 	lds	r25, 0x0116
 4ee:	90 93 89 00 	sts	0x0089, r25
 4f2:	80 93 88 00 	sts	0x0088, r24
    TCCR1B |= 5 << CS10; // включить таймер 1 с предделителем 1024
 4f6:	80 81       	ld	r24, Z
 4f8:	85 60       	ori	r24, 0x05	; 5
 4fa:	80 83       	st	Z, r24
    TIMSK1 |= 1 << OCIE1A; // разрешить прерывание таймера по сравнению с регистром A
 4fc:	ef e6       	ldi	r30, 0x6F	; 111
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	82 60       	ori	r24, 0x02	; 2
 504:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
 506:	85 e0       	ldi	r24, 0x05	; 5
 508:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
 50c:	e6 eb       	ldi	r30, 0xB6	; 182
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	80 62       	ori	r24, 0x20	; 32
 514:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
 516:	e0 e7       	ldi	r30, 0x70	; 112
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	81 60       	ori	r24, 0x01	; 1
 51e:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    sei();
 520:	78 94       	sei
        //////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////
        // задача 3: включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
 522:	c9 e2       	ldi	r28, 0x29	; 41
 524:	d0 e0       	ldi	r29, 0x00	; 0
 526:	88 81       	ld	r24, Y
 528:	84 ff       	sbrs	r24, 4
 52a:	06 c0       	rjmp	.+12     	; 0x538 <__stack+0x39>
 52c:	88 81       	ld	r24, Y
 52e:	85 ff       	sbrs	r24, 5
 530:	03 c0       	rjmp	.+6      	; 0x538 <__stack+0x39>
 532:	88 81       	ld	r24, Y
 534:	82 fd       	sbrc	r24, 2
 536:	07 c0       	rjmp	.+14     	; 0x546 <__stack+0x47>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_ON(progFlags, LCD_ON);
 538:	80 91 58 01 	lds	r24, 0x0158
 53c:	8f 7e       	andi	r24, 0xEF	; 239
 53e:	81 60       	ori	r24, 0x01	; 1
 540:	80 93 58 01 	sts	0x0158, r24
            LCD_turnOn();
 544:	b0 dd       	rcall	.-1184   	; 0xa6 <LCD_turnOn>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача 4: входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
 546:	88 81       	ld	r24, Y
 548:	83 fd       	sbrc	r24, 3
 54a:	11 c0       	rjmp	.+34     	; 0x56e <__stack+0x6f>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 54c:	80 91 58 01 	lds	r24, 0x0158
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	80 93 58 01 	sts	0x0158, r24
            if (!BIT_READ(progFlags, LCD_ON))
 556:	80 fd       	sbrc	r24, 0
 558:	04 c0       	rjmp	.+8      	; 0x562 <__stack+0x63>
            {
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
 55a:	81 60       	ori	r24, 0x01	; 1
 55c:	80 93 58 01 	sts	0x0158, r24
                LCD_turnOn();
 560:	a2 dd       	rcall	.-1212   	; 0xa6 <LCD_turnOn>
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
 562:	80 91 58 01 	lds	r24, 0x0158
 566:	82 60       	ori	r24, 0x02	; 2
 568:	80 93 58 01 	sts	0x0158, r24
            menuRun(); // обработка команд меню
 56c:	f6 dd       	rcall	.-1044   	; 0x15a <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // выйти из меню и выключить подсветку по истечении таймаута
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE)){ // ???? ?? ???????
 56e:	80 91 58 01 	lds	r24, 0x0158
 572:	84 ff       	sbrs	r24, 4
 574:	06 c0       	rjmp	.+12     	; 0x582 <__stack+0x83>
            if(BIT_READ(progFlags, LCD_ON)){ // ???? ????????? ????????
 576:	80 ff       	sbrs	r24, 0
 578:	d6 cf       	rjmp	.-84     	; 0x526 <__stack+0x27>
                BIT_OFF(progFlags, LCD_ON);
 57a:	8e 7f       	andi	r24, 0xFE	; 254
 57c:	80 93 58 01 	sts	0x0158, r24
                LCD_turnOff();
 580:	98 dd       	rcall	.-1232   	; 0xb2 <LCD_turnOff>
            //SMCR |= 1 << SE; // засыпает
        }
        //////////////////////////////////////////////////////////////////////////
        // задача 5: отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
 582:	80 91 58 01 	lds	r24, 0x0158
 586:	80 ff       	sbrs	r24, 0
 588:	ce cf       	rjmp	.-100    	; 0x526 <__stack+0x27>
        {
            //LCD_Clear();
            LCD_DisplayAll();
 58a:	99 dd       	rcall	.-1230   	; 0xbe <LCD_DisplayAll>
 58c:	cc cf       	rjmp	.-104    	; 0x526 <__stack+0x27>

0000058e <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){                                                      //TODO: должен будить процессор в режиме P-save
 58e:	1f 92       	push	r1
 590:	0f 92       	push	r0
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	0f 92       	push	r0
 596:	11 24       	eor	r1, r1
 598:	ef 92       	push	r14
 59a:	ff 92       	push	r15
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	2f 93       	push	r18
 5a2:	3f 93       	push	r19
 5a4:	4f 93       	push	r20
 5a6:	5f 93       	push	r21
 5a8:	6f 93       	push	r22
 5aa:	7f 93       	push	r23
 5ac:	8f 93       	push	r24
 5ae:	9f 93       	push	r25
 5b0:	af 93       	push	r26
 5b2:	bf 93       	push	r27
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
    temperatureValue= BYTE_TO_TEMP(ADCH);
 5b8:	60 91 79 00 	lds	r22, 0x0079
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	88 27       	eor	r24, r24
 5c0:	77 fd       	sbrc	r23, 7
 5c2:	80 95       	com	r24
 5c4:	98 2f       	mov	r25, r24
 5c6:	cf d1       	rcall	.+926    	; 0x966 <__floatsisf>
 5c8:	20 e0       	ldi	r18, 0x00	; 0
 5ca:	30 e4       	ldi	r19, 0x40	; 64
 5cc:	4c e9       	ldi	r20, 0x9C	; 156
 5ce:	55 e4       	ldi	r21, 0x45	; 69
 5d0:	7e d2       	rcall	.+1276   	; 0xace <__mulsf3>
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	40 e8       	ldi	r20, 0x80	; 128
 5d8:	5b e3       	ldi	r21, 0x3B	; 59
 5da:	79 d2       	rcall	.+1266   	; 0xace <__mulsf3>
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	4a ef       	ldi	r20, 0xFA	; 250
 5e2:	53 e4       	ldi	r21, 0x43	; 67
 5e4:	c1 d0       	rcall	.+386    	; 0x768 <__subsf3>
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	40 e2       	ldi	r20, 0x20	; 32
 5ec:	51 e4       	ldi	r21, 0x41	; 65
 5ee:	25 d1       	rcall	.+586    	; 0x83a <__divsf3>
 5f0:	60 93 5e 01 	sts	0x015E, r22
 5f4:	70 93 5f 01 	sts	0x015F, r23
 5f8:	80 93 60 01 	sts	0x0160, r24
 5fc:	90 93 61 01 	sts	0x0161, r25
    if (temperatureValue >= targetTemp + Tolerance)
 600:	60 91 11 01 	lds	r22, 0x0111
 604:	70 91 12 01 	lds	r23, 0x0112
 608:	80 91 13 01 	lds	r24, 0x0113
 60c:	90 91 14 01 	lds	r25, 0x0114
 610:	20 91 59 01 	lds	r18, 0x0159
 614:	30 91 5a 01 	lds	r19, 0x015A
 618:	40 91 5b 01 	lds	r20, 0x015B
 61c:	50 91 5c 01 	lds	r21, 0x015C
 620:	e0 90 5e 01 	lds	r14, 0x015E
 624:	f0 90 5f 01 	lds	r15, 0x015F
 628:	00 91 60 01 	lds	r16, 0x0160
 62c:	10 91 61 01 	lds	r17, 0x0161
 630:	9c d0       	rcall	.+312    	; 0x76a <__addsf3>
 632:	a8 01       	movw	r20, r16
 634:	97 01       	movw	r18, r14
 636:	fd d0       	rcall	.+506    	; 0x832 <__cmpsf2>
 638:	18 16       	cp	r1, r24
 63a:	5c f0       	brlt	.+22     	; 0x652 <__vector_21+0xc4>
volatile static uint16_t measureRate= 0x0100; // поумолчанию - частота замера (F_CPU/1024)/2
uint8_t progFlags= 0b00000000;

inline static void turnOnCooler() 
{
	BIT_ON(CONTROL_PORT, LOAD);
 63c:	eb e2       	ldi	r30, 0x2B	; 43
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	80 64       	ori	r24, 0x40	; 64
 644:	80 83       	st	Z, r24
    BIT_ON(progFlags, COOLING);
 646:	80 91 58 01 	lds	r24, 0x0158
 64a:	88 60       	ori	r24, 0x08	; 8
 64c:	80 93 58 01 	sts	0x0158, r24
 650:	1d c0       	rjmp	.+58     	; 0x68c <__vector_21+0xfe>
    temperatureValue= BYTE_TO_TEMP(ADCH);
    if (temperatureValue >= targetTemp + Tolerance)
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
 652:	60 91 5e 01 	lds	r22, 0x015E
 656:	70 91 5f 01 	lds	r23, 0x015F
 65a:	80 91 60 01 	lds	r24, 0x0160
 65e:	90 91 61 01 	lds	r25, 0x0161
 662:	20 91 11 01 	lds	r18, 0x0111
 666:	30 91 12 01 	lds	r19, 0x0112
 66a:	40 91 13 01 	lds	r20, 0x0113
 66e:	50 91 14 01 	lds	r21, 0x0114
 672:	df d0       	rcall	.+446    	; 0x832 <__cmpsf2>
 674:	18 16       	cp	r1, r24
 676:	54 f0       	brlt	.+20     	; 0x68c <__vector_21+0xfe>
    BIT_ON(progFlags, COOLING);
}

inline static void turnOffCooler() 
{
	BIT_OFF(CONTROL_PORT, LOAD);
 678:	eb e2       	ldi	r30, 0x2B	; 43
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	8f 7b       	andi	r24, 0xBF	; 191
 680:	80 83       	st	Z, r24
    BIT_OFF(progFlags, COOLING);
 682:	80 91 58 01 	lds	r24, 0x0158
 686:	87 7f       	andi	r24, 0xF7	; 247
 688:	80 93 58 01 	sts	0x0158, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
 68c:	ff 91       	pop	r31
 68e:	ef 91       	pop	r30
 690:	bf 91       	pop	r27
 692:	af 91       	pop	r26
 694:	9f 91       	pop	r25
 696:	8f 91       	pop	r24
 698:	7f 91       	pop	r23
 69a:	6f 91       	pop	r22
 69c:	5f 91       	pop	r21
 69e:	4f 91       	pop	r20
 6a0:	3f 91       	pop	r19
 6a2:	2f 91       	pop	r18
 6a4:	1f 91       	pop	r17
 6a6:	0f 91       	pop	r16
 6a8:	ff 90       	pop	r15
 6aa:	ef 90       	pop	r14
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <__vector_9>:

ISR(TIMER2_OVF_vect){                                               //TODO: должен будить процессор в режиме P-save
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
    runSeconds++;
 6c4:	80 91 5d 01 	lds	r24, 0x015D
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	80 93 5d 01 	sts	0x015D, r24
    if (runSeconds==timeOut)
 6ce:	90 91 5d 01 	lds	r25, 0x015D
 6d2:	80 91 10 01 	lds	r24, 0x0110
 6d6:	98 17       	cp	r25, r24
 6d8:	29 f4       	brne	.+10     	; 0x6e4 <__vector_9+0x2e>
    {
        BIT_ON(progFlags, INACTIVE);
 6da:	80 91 58 01 	lds	r24, 0x0158
 6de:	80 61       	ori	r24, 0x10	; 16
 6e0:	80 93 58 01 	sts	0x0158, r24
    }
    runSeconds= 0; // сбрасываем счетчик секунд
 6e4:	10 92 5d 01 	sts	0x015D, r1
    return;
}
 6e8:	9f 91       	pop	r25
 6ea:	8f 91       	pop	r24
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_11>:

ISR(TIMER1_COMPA_vect){                                             //TODO: должен будить процессор в режиме P-save
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	8f 93       	push	r24
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
    ADCSRA |= 1 << ADSC;
 706:	ea e7       	ldi	r30, 0x7A	; 122
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	80 64       	ori	r24, 0x40	; 64
 70e:	80 83       	st	Z, r24
    return;
}
 710:	ff 91       	pop	r31
 712:	ef 91       	pop	r30
 714:	8f 91       	pop	r24
 716:	0f 90       	pop	r0
 718:	0f be       	out	0x3f, r0	; 63
 71a:	0f 90       	pop	r0
 71c:	1f 90       	pop	r1
 71e:	18 95       	reti

00000720 <__vector_2>:

ISR(INT1_vect){                                                     //TODO: должен будить процессор в режиме P-save
 720:	1f 92       	push	r1
 722:	0f 92       	push	r0
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	0f 92       	push	r0
 728:	11 24       	eor	r1, r1
 72a:	2f 93       	push	r18
 72c:	3f 93       	push	r19
 72e:	4f 93       	push	r20
 730:	5f 93       	push	r21
 732:	6f 93       	push	r22
 734:	7f 93       	push	r23
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	af 93       	push	r26
 73c:	bf 93       	push	r27
 73e:	ef 93       	push	r30
 740:	ff 93       	push	r31
    turnOffPowerSave();
    LCD_turnOn();
 742:	b1 dc       	rcall	.-1694   	; 0xa6 <LCD_turnOn>
    LCD_DisplayAll();
 744:	bc dc       	rcall	.-1672   	; 0xbe <LCD_DisplayAll>
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	bf 91       	pop	r27
 74c:	af 91       	pop	r26
 74e:	9f 91       	pop	r25
 750:	8f 91       	pop	r24
 752:	7f 91       	pop	r23
 754:	6f 91       	pop	r22
 756:	5f 91       	pop	r21
 758:	4f 91       	pop	r20
 75a:	3f 91       	pop	r19
 75c:	2f 91       	pop	r18
 75e:	0f 90       	pop	r0
 760:	0f be       	out	0x3f, r0	; 63
 762:	0f 90       	pop	r0
 764:	1f 90       	pop	r1
 766:	18 95       	reti

00000768 <__subsf3>:
 768:	50 58       	subi	r21, 0x80	; 128

0000076a <__addsf3>:
 76a:	bb 27       	eor	r27, r27
 76c:	aa 27       	eor	r26, r26
 76e:	0e d0       	rcall	.+28     	; 0x78c <__addsf3x>
 770:	70 c1       	rjmp	.+736    	; 0xa52 <__fp_round>
 772:	61 d1       	rcall	.+706    	; 0xa36 <__fp_pscA>
 774:	30 f0       	brcs	.+12     	; 0x782 <__addsf3+0x18>
 776:	66 d1       	rcall	.+716    	; 0xa44 <__fp_pscB>
 778:	20 f0       	brcs	.+8      	; 0x782 <__addsf3+0x18>
 77a:	31 f4       	brne	.+12     	; 0x788 <__addsf3+0x1e>
 77c:	9f 3f       	cpi	r25, 0xFF	; 255
 77e:	11 f4       	brne	.+4      	; 0x784 <__addsf3+0x1a>
 780:	1e f4       	brtc	.+6      	; 0x788 <__addsf3+0x1e>
 782:	56 c1       	rjmp	.+684    	; 0xa30 <__fp_nan>
 784:	0e f4       	brtc	.+2      	; 0x788 <__addsf3+0x1e>
 786:	e0 95       	com	r30
 788:	e7 fb       	bst	r30, 7
 78a:	4c c1       	rjmp	.+664    	; 0xa24 <__fp_inf>

0000078c <__addsf3x>:
 78c:	e9 2f       	mov	r30, r25
 78e:	72 d1       	rcall	.+740    	; 0xa74 <__fp_split3>
 790:	80 f3       	brcs	.-32     	; 0x772 <__addsf3+0x8>
 792:	ba 17       	cp	r27, r26
 794:	62 07       	cpc	r22, r18
 796:	73 07       	cpc	r23, r19
 798:	84 07       	cpc	r24, r20
 79a:	95 07       	cpc	r25, r21
 79c:	18 f0       	brcs	.+6      	; 0x7a4 <__addsf3x+0x18>
 79e:	71 f4       	brne	.+28     	; 0x7bc <__addsf3x+0x30>
 7a0:	9e f5       	brtc	.+102    	; 0x808 <__addsf3x+0x7c>
 7a2:	8a c1       	rjmp	.+788    	; 0xab8 <__fp_zero>
 7a4:	0e f4       	brtc	.+2      	; 0x7a8 <__addsf3x+0x1c>
 7a6:	e0 95       	com	r30
 7a8:	0b 2e       	mov	r0, r27
 7aa:	ba 2f       	mov	r27, r26
 7ac:	a0 2d       	mov	r26, r0
 7ae:	0b 01       	movw	r0, r22
 7b0:	b9 01       	movw	r22, r18
 7b2:	90 01       	movw	r18, r0
 7b4:	0c 01       	movw	r0, r24
 7b6:	ca 01       	movw	r24, r20
 7b8:	a0 01       	movw	r20, r0
 7ba:	11 24       	eor	r1, r1
 7bc:	ff 27       	eor	r31, r31
 7be:	59 1b       	sub	r21, r25
 7c0:	99 f0       	breq	.+38     	; 0x7e8 <__addsf3x+0x5c>
 7c2:	59 3f       	cpi	r21, 0xF9	; 249
 7c4:	50 f4       	brcc	.+20     	; 0x7da <__addsf3x+0x4e>
 7c6:	50 3e       	cpi	r21, 0xE0	; 224
 7c8:	68 f1       	brcs	.+90     	; 0x824 <__addsf3x+0x98>
 7ca:	1a 16       	cp	r1, r26
 7cc:	f0 40       	sbci	r31, 0x00	; 0
 7ce:	a2 2f       	mov	r26, r18
 7d0:	23 2f       	mov	r18, r19
 7d2:	34 2f       	mov	r19, r20
 7d4:	44 27       	eor	r20, r20
 7d6:	58 5f       	subi	r21, 0xF8	; 248
 7d8:	f3 cf       	rjmp	.-26     	; 0x7c0 <__addsf3x+0x34>
 7da:	46 95       	lsr	r20
 7dc:	37 95       	ror	r19
 7de:	27 95       	ror	r18
 7e0:	a7 95       	ror	r26
 7e2:	f0 40       	sbci	r31, 0x00	; 0
 7e4:	53 95       	inc	r21
 7e6:	c9 f7       	brne	.-14     	; 0x7da <__addsf3x+0x4e>
 7e8:	7e f4       	brtc	.+30     	; 0x808 <__addsf3x+0x7c>
 7ea:	1f 16       	cp	r1, r31
 7ec:	ba 0b       	sbc	r27, r26
 7ee:	62 0b       	sbc	r22, r18
 7f0:	73 0b       	sbc	r23, r19
 7f2:	84 0b       	sbc	r24, r20
 7f4:	ba f0       	brmi	.+46     	; 0x824 <__addsf3x+0x98>
 7f6:	91 50       	subi	r25, 0x01	; 1
 7f8:	a1 f0       	breq	.+40     	; 0x822 <__addsf3x+0x96>
 7fa:	ff 0f       	add	r31, r31
 7fc:	bb 1f       	adc	r27, r27
 7fe:	66 1f       	adc	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	c2 f7       	brpl	.-16     	; 0x7f6 <__addsf3x+0x6a>
 806:	0e c0       	rjmp	.+28     	; 0x824 <__addsf3x+0x98>
 808:	ba 0f       	add	r27, r26
 80a:	62 1f       	adc	r22, r18
 80c:	73 1f       	adc	r23, r19
 80e:	84 1f       	adc	r24, r20
 810:	48 f4       	brcc	.+18     	; 0x824 <__addsf3x+0x98>
 812:	87 95       	ror	r24
 814:	77 95       	ror	r23
 816:	67 95       	ror	r22
 818:	b7 95       	ror	r27
 81a:	f7 95       	ror	r31
 81c:	9e 3f       	cpi	r25, 0xFE	; 254
 81e:	08 f0       	brcs	.+2      	; 0x822 <__addsf3x+0x96>
 820:	b3 cf       	rjmp	.-154    	; 0x788 <__addsf3+0x1e>
 822:	93 95       	inc	r25
 824:	88 0f       	add	r24, r24
 826:	08 f0       	brcs	.+2      	; 0x82a <__addsf3x+0x9e>
 828:	99 27       	eor	r25, r25
 82a:	ee 0f       	add	r30, r30
 82c:	97 95       	ror	r25
 82e:	87 95       	ror	r24
 830:	08 95       	ret

00000832 <__cmpsf2>:
 832:	d4 d0       	rcall	.+424    	; 0x9dc <__fp_cmp>
 834:	08 f4       	brcc	.+2      	; 0x838 <__cmpsf2+0x6>
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	08 95       	ret

0000083a <__divsf3>:
 83a:	0c d0       	rcall	.+24     	; 0x854 <__divsf3x>
 83c:	0a c1       	rjmp	.+532    	; 0xa52 <__fp_round>
 83e:	02 d1       	rcall	.+516    	; 0xa44 <__fp_pscB>
 840:	40 f0       	brcs	.+16     	; 0x852 <__divsf3+0x18>
 842:	f9 d0       	rcall	.+498    	; 0xa36 <__fp_pscA>
 844:	30 f0       	brcs	.+12     	; 0x852 <__divsf3+0x18>
 846:	21 f4       	brne	.+8      	; 0x850 <__divsf3+0x16>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	19 f0       	breq	.+6      	; 0x852 <__divsf3+0x18>
 84c:	eb c0       	rjmp	.+470    	; 0xa24 <__fp_inf>
 84e:	51 11       	cpse	r21, r1
 850:	34 c1       	rjmp	.+616    	; 0xaba <__fp_szero>
 852:	ee c0       	rjmp	.+476    	; 0xa30 <__fp_nan>

00000854 <__divsf3x>:
 854:	0f d1       	rcall	.+542    	; 0xa74 <__fp_split3>
 856:	98 f3       	brcs	.-26     	; 0x83e <__divsf3+0x4>

00000858 <__divsf3_pse>:
 858:	99 23       	and	r25, r25
 85a:	c9 f3       	breq	.-14     	; 0x84e <__divsf3+0x14>
 85c:	55 23       	and	r21, r21
 85e:	b1 f3       	breq	.-20     	; 0x84c <__divsf3+0x12>
 860:	95 1b       	sub	r25, r21
 862:	55 0b       	sbc	r21, r21
 864:	bb 27       	eor	r27, r27
 866:	aa 27       	eor	r26, r26
 868:	62 17       	cp	r22, r18
 86a:	73 07       	cpc	r23, r19
 86c:	84 07       	cpc	r24, r20
 86e:	38 f0       	brcs	.+14     	; 0x87e <__divsf3_pse+0x26>
 870:	9f 5f       	subi	r25, 0xFF	; 255
 872:	5f 4f       	sbci	r21, 0xFF	; 255
 874:	22 0f       	add	r18, r18
 876:	33 1f       	adc	r19, r19
 878:	44 1f       	adc	r20, r20
 87a:	aa 1f       	adc	r26, r26
 87c:	a9 f3       	breq	.-22     	; 0x868 <__divsf3_pse+0x10>
 87e:	33 d0       	rcall	.+102    	; 0x8e6 <__divsf3_pse+0x8e>
 880:	0e 2e       	mov	r0, r30
 882:	3a f0       	brmi	.+14     	; 0x892 <__divsf3_pse+0x3a>
 884:	e0 e8       	ldi	r30, 0x80	; 128
 886:	30 d0       	rcall	.+96     	; 0x8e8 <__divsf3_pse+0x90>
 888:	91 50       	subi	r25, 0x01	; 1
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	e6 95       	lsr	r30
 88e:	00 1c       	adc	r0, r0
 890:	ca f7       	brpl	.-14     	; 0x884 <__divsf3_pse+0x2c>
 892:	29 d0       	rcall	.+82     	; 0x8e6 <__divsf3_pse+0x8e>
 894:	fe 2f       	mov	r31, r30
 896:	27 d0       	rcall	.+78     	; 0x8e6 <__divsf3_pse+0x8e>
 898:	66 0f       	add	r22, r22
 89a:	77 1f       	adc	r23, r23
 89c:	88 1f       	adc	r24, r24
 89e:	bb 1f       	adc	r27, r27
 8a0:	26 17       	cp	r18, r22
 8a2:	37 07       	cpc	r19, r23
 8a4:	48 07       	cpc	r20, r24
 8a6:	ab 07       	cpc	r26, r27
 8a8:	b0 e8       	ldi	r27, 0x80	; 128
 8aa:	09 f0       	breq	.+2      	; 0x8ae <__divsf3_pse+0x56>
 8ac:	bb 0b       	sbc	r27, r27
 8ae:	80 2d       	mov	r24, r0
 8b0:	bf 01       	movw	r22, r30
 8b2:	ff 27       	eor	r31, r31
 8b4:	93 58       	subi	r25, 0x83	; 131
 8b6:	5f 4f       	sbci	r21, 0xFF	; 255
 8b8:	2a f0       	brmi	.+10     	; 0x8c4 <__divsf3_pse+0x6c>
 8ba:	9e 3f       	cpi	r25, 0xFE	; 254
 8bc:	51 05       	cpc	r21, r1
 8be:	68 f0       	brcs	.+26     	; 0x8da <__divsf3_pse+0x82>
 8c0:	b1 c0       	rjmp	.+354    	; 0xa24 <__fp_inf>
 8c2:	fb c0       	rjmp	.+502    	; 0xaba <__fp_szero>
 8c4:	5f 3f       	cpi	r21, 0xFF	; 255
 8c6:	ec f3       	brlt	.-6      	; 0x8c2 <__divsf3_pse+0x6a>
 8c8:	98 3e       	cpi	r25, 0xE8	; 232
 8ca:	dc f3       	brlt	.-10     	; 0x8c2 <__divsf3_pse+0x6a>
 8cc:	86 95       	lsr	r24
 8ce:	77 95       	ror	r23
 8d0:	67 95       	ror	r22
 8d2:	b7 95       	ror	r27
 8d4:	f7 95       	ror	r31
 8d6:	9f 5f       	subi	r25, 0xFF	; 255
 8d8:	c9 f7       	brne	.-14     	; 0x8cc <__divsf3_pse+0x74>
 8da:	88 0f       	add	r24, r24
 8dc:	91 1d       	adc	r25, r1
 8de:	96 95       	lsr	r25
 8e0:	87 95       	ror	r24
 8e2:	97 f9       	bld	r25, 7
 8e4:	08 95       	ret
 8e6:	e1 e0       	ldi	r30, 0x01	; 1
 8e8:	66 0f       	add	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	bb 1f       	adc	r27, r27
 8f0:	62 17       	cp	r22, r18
 8f2:	73 07       	cpc	r23, r19
 8f4:	84 07       	cpc	r24, r20
 8f6:	ba 07       	cpc	r27, r26
 8f8:	20 f0       	brcs	.+8      	; 0x902 <__divsf3_pse+0xaa>
 8fa:	62 1b       	sub	r22, r18
 8fc:	73 0b       	sbc	r23, r19
 8fe:	84 0b       	sbc	r24, r20
 900:	ba 0b       	sbc	r27, r26
 902:	ee 1f       	adc	r30, r30
 904:	88 f7       	brcc	.-30     	; 0x8e8 <__divsf3_pse+0x90>
 906:	e0 95       	com	r30
 908:	08 95       	ret

0000090a <__fixunssfsi>:
 90a:	bc d0       	rcall	.+376    	; 0xa84 <__fp_splitA>
 90c:	88 f0       	brcs	.+34     	; 0x930 <__fixunssfsi+0x26>
 90e:	9f 57       	subi	r25, 0x7F	; 127
 910:	90 f0       	brcs	.+36     	; 0x936 <__fixunssfsi+0x2c>
 912:	b9 2f       	mov	r27, r25
 914:	99 27       	eor	r25, r25
 916:	b7 51       	subi	r27, 0x17	; 23
 918:	a0 f0       	brcs	.+40     	; 0x942 <__fixunssfsi+0x38>
 91a:	d1 f0       	breq	.+52     	; 0x950 <__fixunssfsi+0x46>
 91c:	66 0f       	add	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	1a f0       	brmi	.+6      	; 0x92c <__fixunssfsi+0x22>
 926:	ba 95       	dec	r27
 928:	c9 f7       	brne	.-14     	; 0x91c <__fixunssfsi+0x12>
 92a:	12 c0       	rjmp	.+36     	; 0x950 <__fixunssfsi+0x46>
 92c:	b1 30       	cpi	r27, 0x01	; 1
 92e:	81 f0       	breq	.+32     	; 0x950 <__fixunssfsi+0x46>
 930:	c3 d0       	rcall	.+390    	; 0xab8 <__fp_zero>
 932:	b1 e0       	ldi	r27, 0x01	; 1
 934:	08 95       	ret
 936:	c0 c0       	rjmp	.+384    	; 0xab8 <__fp_zero>
 938:	67 2f       	mov	r22, r23
 93a:	78 2f       	mov	r23, r24
 93c:	88 27       	eor	r24, r24
 93e:	b8 5f       	subi	r27, 0xF8	; 248
 940:	39 f0       	breq	.+14     	; 0x950 <__fixunssfsi+0x46>
 942:	b9 3f       	cpi	r27, 0xF9	; 249
 944:	cc f3       	brlt	.-14     	; 0x938 <__fixunssfsi+0x2e>
 946:	86 95       	lsr	r24
 948:	77 95       	ror	r23
 94a:	67 95       	ror	r22
 94c:	b3 95       	inc	r27
 94e:	d9 f7       	brne	.-10     	; 0x946 <__fixunssfsi+0x3c>
 950:	3e f4       	brtc	.+14     	; 0x960 <__fixunssfsi+0x56>
 952:	90 95       	com	r25
 954:	80 95       	com	r24
 956:	70 95       	com	r23
 958:	61 95       	neg	r22
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	08 95       	ret

00000962 <__floatunsisf>:
 962:	e8 94       	clt
 964:	09 c0       	rjmp	.+18     	; 0x978 <__floatsisf+0x12>

00000966 <__floatsisf>:
 966:	97 fb       	bst	r25, 7
 968:	3e f4       	brtc	.+14     	; 0x978 <__floatsisf+0x12>
 96a:	90 95       	com	r25
 96c:	80 95       	com	r24
 96e:	70 95       	com	r23
 970:	61 95       	neg	r22
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	8f 4f       	sbci	r24, 0xFF	; 255
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	99 23       	and	r25, r25
 97a:	a9 f0       	breq	.+42     	; 0x9a6 <__floatsisf+0x40>
 97c:	f9 2f       	mov	r31, r25
 97e:	96 e9       	ldi	r25, 0x96	; 150
 980:	bb 27       	eor	r27, r27
 982:	93 95       	inc	r25
 984:	f6 95       	lsr	r31
 986:	87 95       	ror	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	b7 95       	ror	r27
 98e:	f1 11       	cpse	r31, r1
 990:	f8 cf       	rjmp	.-16     	; 0x982 <__floatsisf+0x1c>
 992:	fa f4       	brpl	.+62     	; 0x9d2 <__floatsisf+0x6c>
 994:	bb 0f       	add	r27, r27
 996:	11 f4       	brne	.+4      	; 0x99c <__floatsisf+0x36>
 998:	60 ff       	sbrs	r22, 0
 99a:	1b c0       	rjmp	.+54     	; 0x9d2 <__floatsisf+0x6c>
 99c:	6f 5f       	subi	r22, 0xFF	; 255
 99e:	7f 4f       	sbci	r23, 0xFF	; 255
 9a0:	8f 4f       	sbci	r24, 0xFF	; 255
 9a2:	9f 4f       	sbci	r25, 0xFF	; 255
 9a4:	16 c0       	rjmp	.+44     	; 0x9d2 <__floatsisf+0x6c>
 9a6:	88 23       	and	r24, r24
 9a8:	11 f0       	breq	.+4      	; 0x9ae <__floatsisf+0x48>
 9aa:	96 e9       	ldi	r25, 0x96	; 150
 9ac:	11 c0       	rjmp	.+34     	; 0x9d0 <__floatsisf+0x6a>
 9ae:	77 23       	and	r23, r23
 9b0:	21 f0       	breq	.+8      	; 0x9ba <__floatsisf+0x54>
 9b2:	9e e8       	ldi	r25, 0x8E	; 142
 9b4:	87 2f       	mov	r24, r23
 9b6:	76 2f       	mov	r23, r22
 9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__floatsisf+0x5e>
 9ba:	66 23       	and	r22, r22
 9bc:	71 f0       	breq	.+28     	; 0x9da <__floatsisf+0x74>
 9be:	96 e8       	ldi	r25, 0x86	; 134
 9c0:	86 2f       	mov	r24, r22
 9c2:	70 e0       	ldi	r23, 0x00	; 0
 9c4:	60 e0       	ldi	r22, 0x00	; 0
 9c6:	2a f0       	brmi	.+10     	; 0x9d2 <__floatsisf+0x6c>
 9c8:	9a 95       	dec	r25
 9ca:	66 0f       	add	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	da f7       	brpl	.-10     	; 0x9c8 <__floatsisf+0x62>
 9d2:	88 0f       	add	r24, r24
 9d4:	96 95       	lsr	r25
 9d6:	87 95       	ror	r24
 9d8:	97 f9       	bld	r25, 7
 9da:	08 95       	ret

000009dc <__fp_cmp>:
 9dc:	99 0f       	add	r25, r25
 9de:	00 08       	sbc	r0, r0
 9e0:	55 0f       	add	r21, r21
 9e2:	aa 0b       	sbc	r26, r26
 9e4:	e0 e8       	ldi	r30, 0x80	; 128
 9e6:	fe ef       	ldi	r31, 0xFE	; 254
 9e8:	16 16       	cp	r1, r22
 9ea:	17 06       	cpc	r1, r23
 9ec:	e8 07       	cpc	r30, r24
 9ee:	f9 07       	cpc	r31, r25
 9f0:	c0 f0       	brcs	.+48     	; 0xa22 <__fp_cmp+0x46>
 9f2:	12 16       	cp	r1, r18
 9f4:	13 06       	cpc	r1, r19
 9f6:	e4 07       	cpc	r30, r20
 9f8:	f5 07       	cpc	r31, r21
 9fa:	98 f0       	brcs	.+38     	; 0xa22 <__fp_cmp+0x46>
 9fc:	62 1b       	sub	r22, r18
 9fe:	73 0b       	sbc	r23, r19
 a00:	84 0b       	sbc	r24, r20
 a02:	95 0b       	sbc	r25, r21
 a04:	39 f4       	brne	.+14     	; 0xa14 <__fp_cmp+0x38>
 a06:	0a 26       	eor	r0, r26
 a08:	61 f0       	breq	.+24     	; 0xa22 <__fp_cmp+0x46>
 a0a:	23 2b       	or	r18, r19
 a0c:	24 2b       	or	r18, r20
 a0e:	25 2b       	or	r18, r21
 a10:	21 f4       	brne	.+8      	; 0xa1a <__fp_cmp+0x3e>
 a12:	08 95       	ret
 a14:	0a 26       	eor	r0, r26
 a16:	09 f4       	brne	.+2      	; 0xa1a <__fp_cmp+0x3e>
 a18:	a1 40       	sbci	r26, 0x01	; 1
 a1a:	a6 95       	lsr	r26
 a1c:	8f ef       	ldi	r24, 0xFF	; 255
 a1e:	81 1d       	adc	r24, r1
 a20:	81 1d       	adc	r24, r1
 a22:	08 95       	ret

00000a24 <__fp_inf>:
 a24:	97 f9       	bld	r25, 7
 a26:	9f 67       	ori	r25, 0x7F	; 127
 a28:	80 e8       	ldi	r24, 0x80	; 128
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	60 e0       	ldi	r22, 0x00	; 0
 a2e:	08 95       	ret

00000a30 <__fp_nan>:
 a30:	9f ef       	ldi	r25, 0xFF	; 255
 a32:	80 ec       	ldi	r24, 0xC0	; 192
 a34:	08 95       	ret

00000a36 <__fp_pscA>:
 a36:	00 24       	eor	r0, r0
 a38:	0a 94       	dec	r0
 a3a:	16 16       	cp	r1, r22
 a3c:	17 06       	cpc	r1, r23
 a3e:	18 06       	cpc	r1, r24
 a40:	09 06       	cpc	r0, r25
 a42:	08 95       	ret

00000a44 <__fp_pscB>:
 a44:	00 24       	eor	r0, r0
 a46:	0a 94       	dec	r0
 a48:	12 16       	cp	r1, r18
 a4a:	13 06       	cpc	r1, r19
 a4c:	14 06       	cpc	r1, r20
 a4e:	05 06       	cpc	r0, r21
 a50:	08 95       	ret

00000a52 <__fp_round>:
 a52:	09 2e       	mov	r0, r25
 a54:	03 94       	inc	r0
 a56:	00 0c       	add	r0, r0
 a58:	11 f4       	brne	.+4      	; 0xa5e <__fp_round+0xc>
 a5a:	88 23       	and	r24, r24
 a5c:	52 f0       	brmi	.+20     	; 0xa72 <__fp_round+0x20>
 a5e:	bb 0f       	add	r27, r27
 a60:	40 f4       	brcc	.+16     	; 0xa72 <__fp_round+0x20>
 a62:	bf 2b       	or	r27, r31
 a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0x18>
 a66:	60 ff       	sbrs	r22, 0
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <__fp_round+0x20>
 a6a:	6f 5f       	subi	r22, 0xFF	; 255
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	08 95       	ret

00000a74 <__fp_split3>:
 a74:	57 fd       	sbrc	r21, 7
 a76:	90 58       	subi	r25, 0x80	; 128
 a78:	44 0f       	add	r20, r20
 a7a:	55 1f       	adc	r21, r21
 a7c:	59 f0       	breq	.+22     	; 0xa94 <__fp_splitA+0x10>
 a7e:	5f 3f       	cpi	r21, 0xFF	; 255
 a80:	71 f0       	breq	.+28     	; 0xa9e <__fp_splitA+0x1a>
 a82:	47 95       	ror	r20

00000a84 <__fp_splitA>:
 a84:	88 0f       	add	r24, r24
 a86:	97 fb       	bst	r25, 7
 a88:	99 1f       	adc	r25, r25
 a8a:	61 f0       	breq	.+24     	; 0xaa4 <__fp_splitA+0x20>
 a8c:	9f 3f       	cpi	r25, 0xFF	; 255
 a8e:	79 f0       	breq	.+30     	; 0xaae <__fp_splitA+0x2a>
 a90:	87 95       	ror	r24
 a92:	08 95       	ret
 a94:	12 16       	cp	r1, r18
 a96:	13 06       	cpc	r1, r19
 a98:	14 06       	cpc	r1, r20
 a9a:	55 1f       	adc	r21, r21
 a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <__fp_split3+0xe>
 a9e:	46 95       	lsr	r20
 aa0:	f1 df       	rcall	.-30     	; 0xa84 <__fp_splitA>
 aa2:	08 c0       	rjmp	.+16     	; 0xab4 <__fp_splitA+0x30>
 aa4:	16 16       	cp	r1, r22
 aa6:	17 06       	cpc	r1, r23
 aa8:	18 06       	cpc	r1, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	f1 cf       	rjmp	.-30     	; 0xa90 <__fp_splitA+0xc>
 aae:	86 95       	lsr	r24
 ab0:	71 05       	cpc	r23, r1
 ab2:	61 05       	cpc	r22, r1
 ab4:	08 94       	sec
 ab6:	08 95       	ret

00000ab8 <__fp_zero>:
 ab8:	e8 94       	clt

00000aba <__fp_szero>:
 aba:	bb 27       	eor	r27, r27
 abc:	66 27       	eor	r22, r22
 abe:	77 27       	eor	r23, r23
 ac0:	cb 01       	movw	r24, r22
 ac2:	97 f9       	bld	r25, 7
 ac4:	08 95       	ret

00000ac6 <__gesf2>:
 ac6:	8a df       	rcall	.-236    	; 0x9dc <__fp_cmp>
 ac8:	08 f4       	brcc	.+2      	; 0xacc <__gesf2+0x6>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	08 95       	ret

00000ace <__mulsf3>:
 ace:	0b d0       	rcall	.+22     	; 0xae6 <__mulsf3x>
 ad0:	c0 cf       	rjmp	.-128    	; 0xa52 <__fp_round>
 ad2:	b1 df       	rcall	.-158    	; 0xa36 <__fp_pscA>
 ad4:	28 f0       	brcs	.+10     	; 0xae0 <__mulsf3+0x12>
 ad6:	b6 df       	rcall	.-148    	; 0xa44 <__fp_pscB>
 ad8:	18 f0       	brcs	.+6      	; 0xae0 <__mulsf3+0x12>
 ada:	95 23       	and	r25, r21
 adc:	09 f0       	breq	.+2      	; 0xae0 <__mulsf3+0x12>
 ade:	a2 cf       	rjmp	.-188    	; 0xa24 <__fp_inf>
 ae0:	a7 cf       	rjmp	.-178    	; 0xa30 <__fp_nan>
 ae2:	11 24       	eor	r1, r1
 ae4:	ea cf       	rjmp	.-44     	; 0xaba <__fp_szero>

00000ae6 <__mulsf3x>:
 ae6:	c6 df       	rcall	.-116    	; 0xa74 <__fp_split3>
 ae8:	a0 f3       	brcs	.-24     	; 0xad2 <__mulsf3+0x4>

00000aea <__mulsf3_pse>:
 aea:	95 9f       	mul	r25, r21
 aec:	d1 f3       	breq	.-12     	; 0xae2 <__mulsf3+0x14>
 aee:	95 0f       	add	r25, r21
 af0:	50 e0       	ldi	r21, 0x00	; 0
 af2:	55 1f       	adc	r21, r21
 af4:	62 9f       	mul	r22, r18
 af6:	f0 01       	movw	r30, r0
 af8:	72 9f       	mul	r23, r18
 afa:	bb 27       	eor	r27, r27
 afc:	f0 0d       	add	r31, r0
 afe:	b1 1d       	adc	r27, r1
 b00:	63 9f       	mul	r22, r19
 b02:	aa 27       	eor	r26, r26
 b04:	f0 0d       	add	r31, r0
 b06:	b1 1d       	adc	r27, r1
 b08:	aa 1f       	adc	r26, r26
 b0a:	64 9f       	mul	r22, r20
 b0c:	66 27       	eor	r22, r22
 b0e:	b0 0d       	add	r27, r0
 b10:	a1 1d       	adc	r26, r1
 b12:	66 1f       	adc	r22, r22
 b14:	82 9f       	mul	r24, r18
 b16:	22 27       	eor	r18, r18
 b18:	b0 0d       	add	r27, r0
 b1a:	a1 1d       	adc	r26, r1
 b1c:	62 1f       	adc	r22, r18
 b1e:	73 9f       	mul	r23, r19
 b20:	b0 0d       	add	r27, r0
 b22:	a1 1d       	adc	r26, r1
 b24:	62 1f       	adc	r22, r18
 b26:	83 9f       	mul	r24, r19
 b28:	a0 0d       	add	r26, r0
 b2a:	61 1d       	adc	r22, r1
 b2c:	22 1f       	adc	r18, r18
 b2e:	74 9f       	mul	r23, r20
 b30:	33 27       	eor	r19, r19
 b32:	a0 0d       	add	r26, r0
 b34:	61 1d       	adc	r22, r1
 b36:	23 1f       	adc	r18, r19
 b38:	84 9f       	mul	r24, r20
 b3a:	60 0d       	add	r22, r0
 b3c:	21 1d       	adc	r18, r1
 b3e:	82 2f       	mov	r24, r18
 b40:	76 2f       	mov	r23, r22
 b42:	6a 2f       	mov	r22, r26
 b44:	11 24       	eor	r1, r1
 b46:	9f 57       	subi	r25, 0x7F	; 127
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	8a f0       	brmi	.+34     	; 0xb6e <__mulsf3_pse+0x84>
 b4c:	e1 f0       	breq	.+56     	; 0xb86 <__mulsf3_pse+0x9c>
 b4e:	88 23       	and	r24, r24
 b50:	4a f0       	brmi	.+18     	; 0xb64 <__mulsf3_pse+0x7a>
 b52:	ee 0f       	add	r30, r30
 b54:	ff 1f       	adc	r31, r31
 b56:	bb 1f       	adc	r27, r27
 b58:	66 1f       	adc	r22, r22
 b5a:	77 1f       	adc	r23, r23
 b5c:	88 1f       	adc	r24, r24
 b5e:	91 50       	subi	r25, 0x01	; 1
 b60:	50 40       	sbci	r21, 0x00	; 0
 b62:	a9 f7       	brne	.-22     	; 0xb4e <__mulsf3_pse+0x64>
 b64:	9e 3f       	cpi	r25, 0xFE	; 254
 b66:	51 05       	cpc	r21, r1
 b68:	70 f0       	brcs	.+28     	; 0xb86 <__mulsf3_pse+0x9c>
 b6a:	5c cf       	rjmp	.-328    	; 0xa24 <__fp_inf>
 b6c:	a6 cf       	rjmp	.-180    	; 0xaba <__fp_szero>
 b6e:	5f 3f       	cpi	r21, 0xFF	; 255
 b70:	ec f3       	brlt	.-6      	; 0xb6c <__mulsf3_pse+0x82>
 b72:	98 3e       	cpi	r25, 0xE8	; 232
 b74:	dc f3       	brlt	.-10     	; 0xb6c <__mulsf3_pse+0x82>
 b76:	86 95       	lsr	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b7 95       	ror	r27
 b7e:	f7 95       	ror	r31
 b80:	e7 95       	ror	r30
 b82:	9f 5f       	subi	r25, 0xFF	; 255
 b84:	c1 f7       	brne	.-16     	; 0xb76 <__mulsf3_pse+0x8c>
 b86:	fe 2b       	or	r31, r30
 b88:	88 0f       	add	r24, r24
 b8a:	91 1d       	adc	r25, r1
 b8c:	96 95       	lsr	r25
 b8e:	87 95       	ror	r24
 b90:	97 f9       	bld	r25, 7
 b92:	08 95       	ret

00000b94 <_exit>:
 b94:	f8 94       	cli

00000b96 <__stop_program>:
 b96:	ff cf       	rjmp	.-2      	; 0xb96 <__stop_program>
