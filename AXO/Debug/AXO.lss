
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000010be  00001152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080015c  0080015c  000011ae  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d7  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013f1  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  000029f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001416  00000000  00000000  00002f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  0000438c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c02  00000000  00000000  00004a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  0000564a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    //TODO: запретить прерывание INT1
    //TODO: включить непрерывное преобразование АЦП
    //TODO: разрешить прерывание по переполнению таймера 2
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
}
void LCDhome(void)			//LCD cursor home
{
       2:	00 00       	nop
       4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
       6:	00 00       	nop
       8:	eb c1       	rjmp	.+982    	; 0x3e0 <__vector_2>
       a:	00 00       	nop
       c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
       e:	00 00       	nop
      10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
      12:	00 00       	nop
      14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
      16:	00 00       	nop
      18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
      1a:	00 00       	nop
      1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
      1e:	00 00       	nop
      20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
      22:	00 00       	nop
      24:	fa c0       	rjmp	.+500    	; 0x21a <__vector_9>
      26:	00 00       	nop
      28:	5a c0       	rjmp	.+180    	; 0xde <__bad_interrupt>
      2a:	00 00       	nop
      2c:	58 c0       	rjmp	.+176    	; 0xde <__bad_interrupt>
      2e:	00 00       	nop
      30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
      32:	00 00       	nop
      34:	54 c0       	rjmp	.+168    	; 0xde <__bad_interrupt>
      36:	00 00       	nop
      38:	31 c1       	rjmp	.+610    	; 0x29c <__vector_14>
      3a:	00 00       	nop
      3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
      3e:	00 00       	nop
      40:	4e c0       	rjmp	.+156    	; 0xde <__bad_interrupt>
      42:	00 00       	nop
      44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
      46:	00 00       	nop
      48:	4a c0       	rjmp	.+148    	; 0xde <__bad_interrupt>
      4a:	00 00       	nop
      4c:	31 c1       	rjmp	.+610    	; 0x2b0 <__vector_19>
      4e:	00 00       	nop
      50:	5e c1       	rjmp	.+700    	; 0x30e <__vector_20>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__vector_21>
      56:	00 00       	nop
      58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
      5a:	00 00       	nop
      5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
      5e:	00 00       	nop
      60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
      62:	00 00       	nop
      64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
	...

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d4 e0       	ldi	r29, 0x04	; 4
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	ee eb       	ldi	r30, 0xBE	; 190
      bc:	f0 e1       	ldi	r31, 0x10	; 16
      be:	02 c0       	rjmp	.+4      	; 0xc4 <.do_copy_data_start>

000000c0 <.do_copy_data_loop>:
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0

000000c4 <.do_copy_data_start>:
      c4:	ac 35       	cpi	r26, 0x5C	; 92
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <.do_copy_data_loop>

000000ca <__do_clear_bss>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	ac e5       	ldi	r26, 0x5C	; 92
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	af 36       	cpi	r26, 0x6F	; 111
      d6:	b1 07       	cpc	r27, r17
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	fb d3       	rcall	.+2038   	; 0x8d2 <main>
      dc:	ee c7       	rjmp	.+4060   	; 0x10ba <_exit>

000000de <__bad_interrupt>:
      de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	2f 93       	push	r18
      f4:	3f 93       	push	r19
      f6:	4f 93       	push	r20
      f8:	5f 93       	push	r21
      fa:	6f 93       	push	r22
      fc:	7f 93       	push	r23
      fe:	8f 93       	push	r24
     100:	9f 93       	push	r25
     102:	af 93       	push	r26
     104:	bf 93       	push	r27
     106:	ef 93       	push	r30
     108:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
     10a:	60 91 79 00 	lds	r22, 0x0079
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	66 0f       	add	r22, r22
     112:	77 1f       	adc	r23, r23
     114:	66 0f       	add	r22, r22
     116:	77 1f       	adc	r23, r23
     118:	88 27       	eor	r24, r24
     11a:	77 fd       	sbrc	r23, 7
     11c:	80 95       	com	r24
     11e:	98 2f       	mov	r25, r24
     120:	b5 d6       	rcall	.+3434   	; 0xe8c <__floatsisf>
     122:	2c e5       	ldi	r18, 0x5C	; 92
     124:	3f e8       	ldi	r19, 0x8F	; 143
     126:	42 e4       	ldi	r20, 0x42	; 66
     128:	5e e3       	ldi	r21, 0x3E	; 62
     12a:	64 d7       	rcall	.+3784   	; 0xff4 <__mulsf3>
     12c:	60 93 61 01 	sts	0x0161, r22
     130:	70 93 62 01 	sts	0x0162, r23
     134:	80 93 63 01 	sts	0x0163, r24
     138:	90 93 64 01 	sts	0x0164, r25
    if (temperatureValue >= (targetTemp + Tolerance))
     13c:	60 91 16 01 	lds	r22, 0x0116
     140:	70 91 17 01 	lds	r23, 0x0117
     144:	80 91 18 01 	lds	r24, 0x0118
     148:	90 91 19 01 	lds	r25, 0x0119
     14c:	20 91 5c 01 	lds	r18, 0x015C
     150:	30 91 5d 01 	lds	r19, 0x015D
     154:	40 91 5e 01 	lds	r20, 0x015E
     158:	50 91 5f 01 	lds	r21, 0x015F
     15c:	e0 90 61 01 	lds	r14, 0x0161
     160:	f0 90 62 01 	lds	r15, 0x0162
     164:	00 91 63 01 	lds	r16, 0x0163
     168:	10 91 64 01 	lds	r17, 0x0164
     16c:	8c d5       	rcall	.+2840   	; 0xc86 <__addsf3>
     16e:	a8 01       	movw	r20, r16
     170:	97 01       	movw	r18, r14
     172:	ed d5       	rcall	.+3034   	; 0xd4e <__cmpsf2>
     174:	18 16       	cp	r1, r24
     176:	ac f0       	brlt	.+42     	; 0x1a2 <__vector_21+0xc2>
    BIT_OFF(progFlags, FAN_ON);
}

inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
     178:	90 91 15 01 	lds	r25, 0x0115
     17c:	89 2f       	mov	r24, r25
     17e:	86 95       	lsr	r24
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	80 fd       	sbrc	r24, 0
     186:	34 c0       	rjmp	.+104    	; 0x1f0 <__vector_21+0x110>
    }
}

inline static void turnOnFan() 
{
	BIT_WRITE(CONTROL_PORT, FAN, 1);
     188:	eb e2       	ldi	r30, 0x2B	; 43
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	81 60       	ori	r24, 0x01	; 1
     190:	80 83       	st	Z, r24
inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
    {   
        turnOnFan();
	    BIT_WRITE(CONTROL_PORT, LOAD, 1);
     192:	80 81       	ld	r24, Z
     194:	80 64       	ori	r24, 0x40	; 64
     196:	80 83       	st	Z, r24
        BIT_WRITE(progFlags, COOLING, 1);
     198:	89 2f       	mov	r24, r25
     19a:	88 62       	ori	r24, 0x28	; 40
     19c:	80 93 15 01 	sts	0x0115, r24
     1a0:	27 c0       	rjmp	.+78     	; 0x1f0 <__vector_21+0x110>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
     1a2:	60 91 61 01 	lds	r22, 0x0161
     1a6:	70 91 62 01 	lds	r23, 0x0162
     1aa:	80 91 63 01 	lds	r24, 0x0163
     1ae:	90 91 64 01 	lds	r25, 0x0164
     1b2:	20 91 16 01 	lds	r18, 0x0116
     1b6:	30 91 17 01 	lds	r19, 0x0117
     1ba:	40 91 18 01 	lds	r20, 0x0118
     1be:	50 91 19 01 	lds	r21, 0x0119
     1c2:	c5 d5       	rcall	.+2954   	; 0xd4e <__cmpsf2>
     1c4:	18 16       	cp	r1, r24
     1c6:	a4 f0       	brlt	.+40     	; 0x1f0 <__vector_21+0x110>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
     1c8:	90 91 15 01 	lds	r25, 0x0115
     1cc:	89 2f       	mov	r24, r25
     1ce:	86 95       	lsr	r24
     1d0:	86 95       	lsr	r24
     1d2:	86 95       	lsr	r24
     1d4:	80 ff       	sbrs	r24, 0
     1d6:	0c c0       	rjmp	.+24     	; 0x1f0 <__vector_21+0x110>
	BIT_WRITE(progFlags, FAN_ON, 1);
}

inline static void turnOffFan()
{
    BIT_OFF(CONTROL_PORT, FAN);
     1d8:	eb e2       	ldi	r30, 0x2B	; 43
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	8e 7f       	andi	r24, 0xFE	; 254
     1e0:	80 83       	st	Z, r24
inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
    {
        turnOffFan();
	    BIT_OFF(CONTROL_PORT, LOAD);
     1e2:	80 81       	ld	r24, Z
     1e4:	8f 7b       	andi	r24, 0xBF	; 191
     1e6:	80 83       	st	Z, r24
        BIT_OFF(progFlags, COOLING);
     1e8:	89 2f       	mov	r24, r25
     1ea:	87 7d       	andi	r24, 0xD7	; 215
     1ec:	80 93 15 01 	sts	0x0115, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
     1f0:	ff 91       	pop	r31
     1f2:	ef 91       	pop	r30
     1f4:	bf 91       	pop	r27
     1f6:	af 91       	pop	r26
     1f8:	9f 91       	pop	r25
     1fa:	8f 91       	pop	r24
     1fc:	7f 91       	pop	r23
     1fe:	6f 91       	pop	r22
     200:	5f 91       	pop	r21
     202:	4f 91       	pop	r20
     204:	3f 91       	pop	r19
     206:	2f 91       	pop	r18
     208:	1f 91       	pop	r17
     20a:	0f 91       	pop	r16
     20c:	ff 90       	pop	r15
     20e:	ef 90       	pop	r14
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <__vector_9>:



ISR(TIMER2_OVF_vect){
     21a:	1f 92       	push	r1
     21c:	0f 92       	push	r0
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	0f 92       	push	r0
     222:	11 24       	eor	r1, r1
     224:	8f 93       	push	r24
     226:	9f 93       	push	r25
     228:	af 93       	push	r26
     22a:	bf 93       	push	r27
     22c:	ef 93       	push	r30
     22e:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
     230:	80 91 61 01 	lds	r24, 0x0161
     234:	90 91 62 01 	lds	r25, 0x0162
     238:	a0 91 63 01 	lds	r26, 0x0163
     23c:	b0 91 64 01 	lds	r27, 0x0164

inline static void sendData( volatile double a) 
{
    //BIN8toASCII3(USART_buffer[0], USART_buffer[1], USART_buffer[2],a); //TODO: доопределить
    //memcpy(&USART_buffer,&a, 8);
    USART_buffer[7]= '\n';
     240:	ee e6       	ldi	r30, 0x6E	; 110
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	8a e0       	ldi	r24, 0x0A	; 10
     246:	80 83       	st	Z, r24
    UDR0= *USART_buffer;
     248:	37 97       	sbiw	r30, 0x07	; 7
     24a:	80 81       	ld	r24, Z
     24c:	80 93 c6 00 	sts	0x00C6, r24
    USART_index= 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 66 01 	sts	0x0166, r25
     258:	80 93 65 01 	sts	0x0165, r24
    //USART_buffer++;
    BIT_WRITE(UCSR0B, UDRIE0, 1);
     25c:	e1 ec       	ldi	r30, 0xC1	; 193
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	80 62       	ori	r24, 0x20	; 32
     264:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
    runSeconds++;
     266:	80 91 60 01 	lds	r24, 0x0160
     26a:	8f 5f       	subi	r24, 0xFF	; 255
     26c:	80 93 60 01 	sts	0x0160, r24
    if (runSeconds==timeOut)
     270:	80 91 60 01 	lds	r24, 0x0160
     274:	8a 30       	cpi	r24, 0x0A	; 10
     276:	39 f4       	brne	.+14     	; 0x286 <__vector_9+0x6c>
    {
        runSeconds= 0; // сбрасывает счетчик секунд
     278:	10 92 60 01 	sts	0x0160, r1
        BIT_WRITE(progFlags, INACTIVE, 1);
     27c:	80 91 15 01 	lds	r24, 0x0115
     280:	80 61       	ori	r24, 0x10	; 16
     282:	80 93 15 01 	sts	0x0115, r24
    }
    return;
}
     286:	ff 91       	pop	r31
     288:	ef 91       	pop	r30
     28a:	bf 91       	pop	r27
     28c:	af 91       	pop	r26
     28e:	9f 91       	pop	r25
     290:	8f 91       	pop	r24
     292:	0f 90       	pop	r0
     294:	0f be       	out	0x3f, r0	; 63
     296:	0f 90       	pop	r0
     298:	1f 90       	pop	r1
     29a:	18 95       	reti

0000029c <__vector_14>:

ISR(TIMER0_COMPA_vect){
     29c:	1f 92       	push	r1
     29e:	0f 92       	push	r0
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	0f 92       	push	r0
     2a4:	11 24       	eor	r1, r1
    return;
}
     2a6:	0f 90       	pop	r0
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <__vector_19>:
    BIT_WRITE(progFlags, LCD_ON, 1);
    LCD_prepare("TEMP:", 5, 0, 0);
    LCDvisible();
}

ISR(USART_UDRE_vect){
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
     2be:	ef 93       	push	r30
     2c0:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : отдавать модулю УСАПП следующий байт сообщения
    //////////////////////////////////////////////////////////////////////////
    UDR0= USART_buffer[USART_index];
     2c2:	e0 91 65 01 	lds	r30, 0x0165
     2c6:	f0 91 66 01 	lds	r31, 0x0166
     2ca:	e9 59       	subi	r30, 0x99	; 153
     2cc:	fe 4f       	sbci	r31, 0xFE	; 254
     2ce:	80 81       	ld	r24, Z
     2d0:	80 93 c6 00 	sts	0x00C6, r24
    USART_index++;
     2d4:	80 91 65 01 	lds	r24, 0x0165
     2d8:	90 91 66 01 	lds	r25, 0x0166
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	90 93 66 01 	sts	0x0166, r25
     2e2:	80 93 65 01 	sts	0x0165, r24
    if(USART_index == 8) {
     2e6:	80 91 65 01 	lds	r24, 0x0165
     2ea:	90 91 66 01 	lds	r25, 0x0166
     2ee:	08 97       	sbiw	r24, 0x08	; 8
     2f0:	29 f4       	brne	.+10     	; 0x2fc <__vector_19+0x4c>
        BIT_WRITE(UCSR0B, UDRIE0, 0);
     2f2:	e1 ec       	ldi	r30, 0xC1	; 193
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	8f 7d       	andi	r24, 0xDF	; 223
     2fa:	80 83       	st	Z, r24
    }
}
     2fc:	ff 91       	pop	r31
     2fe:	ef 91       	pop	r30
     300:	9f 91       	pop	r25
     302:	8f 91       	pop	r24
     304:	0f 90       	pop	r0
     306:	0f be       	out	0x3f, r0	; 63
     308:	0f 90       	pop	r0
     30a:	1f 90       	pop	r1
     30c:	18 95       	reti

0000030e <__vector_20>:

ISR(USART_TX_vect){
     30e:	1f 92       	push	r1
     310:	0f 92       	push	r0
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	0f 92       	push	r0
     316:	11 24       	eor	r1, r1
    return;
     318:	0f 90       	pop	r0
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	0f 90       	pop	r0
     31e:	1f 90       	pop	r1
     320:	18 95       	reti

00000322 <LCD_DisplayAll>:
    LCDGotoXY(x, y);
    LCDstring(str, size);
}

void LCD_DisplayAll()
{   
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
    LCDGotoXY(6, 0);
     32a:	86 e0       	ldi	r24, 0x06	; 6
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	1f d4       	rcall	.+2110   	; 0xb6e <LCDGotoXY>
    LCDstring((unsigned char)temperatureValue, 8);
     330:	60 91 61 01 	lds	r22, 0x0161
     334:	70 91 62 01 	lds	r23, 0x0162
     338:	80 91 63 01 	lds	r24, 0x0163
     33c:	90 91 64 01 	lds	r25, 0x0164
     340:	77 d5       	rcall	.+2798   	; 0xe30 <__fixunssfsi>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	68 e0       	ldi	r22, 0x08	; 8
     34a:	f9 d3       	rcall	.+2034   	; 0xb3e <LCDstring>
    if (BIT_READ(progFlags, COOLING))
     34c:	80 91 15 01 	lds	r24, 0x0115
     350:	86 95       	lsr	r24
     352:	86 95       	lsr	r24
     354:	86 95       	lsr	r24
     356:	80 ff       	sbrs	r24, 0
     358:	2f c0       	rjmp	.+94     	; 0x3b8 <LCD_DisplayAll+0x96>
    {
        LCDGotoXY(0, 1);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	07 d4       	rcall	.+2062   	; 0xb6e <LCDGotoXY>
        LCDstring("COOLING ", 8);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	68 e0       	ldi	r22, 0x08	; 8
     366:	eb d3       	rcall	.+2006   	; 0xb3e <LCDstring>
        LCDGotoXY(8, 1);
     368:	88 e0       	ldi	r24, 0x08	; 8
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	00 d4       	rcall	.+2048   	; 0xb6e <LCDGotoXY>
        LCDstring((unsigned char)((temperatureValue - targetTemp)/Tolerance)*100, 8);
     36e:	60 91 61 01 	lds	r22, 0x0161
     372:	70 91 62 01 	lds	r23, 0x0162
     376:	80 91 63 01 	lds	r24, 0x0163
     37a:	90 91 64 01 	lds	r25, 0x0164
     37e:	20 91 16 01 	lds	r18, 0x0116
     382:	30 91 17 01 	lds	r19, 0x0117
     386:	40 91 18 01 	lds	r20, 0x0118
     38a:	50 91 19 01 	lds	r21, 0x0119
     38e:	e0 90 5c 01 	lds	r14, 0x015C
     392:	f0 90 5d 01 	lds	r15, 0x015D
     396:	00 91 5e 01 	lds	r16, 0x015E
     39a:	10 91 5f 01 	lds	r17, 0x015F
     39e:	72 d4       	rcall	.+2276   	; 0xc84 <__subsf3>
     3a0:	a8 01       	movw	r20, r16
     3a2:	97 01       	movw	r18, r14
     3a4:	d8 d4       	rcall	.+2480   	; 0xd56 <__divsf3>
     3a6:	44 d5       	rcall	.+2696   	; 0xe30 <__fixunssfsi>
     3a8:	9b 01       	movw	r18, r22
     3aa:	ac 01       	movw	r20, r24
     3ac:	84 e6       	ldi	r24, 0x64	; 100
     3ae:	28 9f       	mul	r18, r24
     3b0:	c0 01       	movw	r24, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	68 e0       	ldi	r22, 0x08	; 8
     3b6:	c3 d3       	rcall	.+1926   	; 0xb3e <LCDstring>
    }
}
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	08 95       	ret

000003c2 <LCD_prepare>:
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}

void LCD_prepare(unsigned char* str, uint8_t size, int x, int y)
{
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	8c 01       	movw	r16, r24
     3ca:	f6 2e       	mov	r15, r22
     3cc:	84 2f       	mov	r24, r20
    LCDGotoXY(x, y);
     3ce:	62 2f       	mov	r22, r18
     3d0:	ce d3       	rcall	.+1948   	; 0xb6e <LCDGotoXY>
    LCDstring(str, size);
     3d2:	c8 01       	movw	r24, r16
     3d4:	6f 2d       	mov	r22, r15
     3d6:	b3 d3       	rcall	.+1894   	; 0xb3e <LCDstring>
}
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	08 95       	ret

000003e0 <__vector_2>:

ISR(TIMER0_COMPA_vect){
    return;
}

ISR(INT1_vect){
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : выходить из сна
    //////////////////////////////////////////////////////////////////////////
    turnOffSleep();
    BIT_WRITE(progFlags, LCD_ON, 1);
     402:	80 91 15 01 	lds	r24, 0x0115
     406:	81 60       	ori	r24, 0x01	; 1
     408:	80 93 15 01 	sts	0x0115, r24
    LCD_prepare("TEMP:", 5, 0, 0);
     40c:	89 e0       	ldi	r24, 0x09	; 9
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	65 e0       	ldi	r22, 0x05	; 5
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	d3 df       	rcall	.-90     	; 0x3c2 <LCD_prepare>
    LCDvisible();
     41c:	31 d4       	rcall	.+2146   	; 0xc80 <LCDvisible>
}
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <menuRun>:
}

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()
{
     440:	2f 92       	push	r2
     442:	3f 92       	push	r3
     444:	4f 92       	push	r4
     446:	5f 92       	push	r5
     448:	6f 92       	push	r6
     44a:	7f 92       	push	r7
     44c:	8f 92       	push	r8
     44e:	9f 92       	push	r9
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	df 93       	push	r29
     462:	cf 93       	push	r28
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	c9 54       	subi	r28, 0x49	; 73
     46a:	d0 40       	sbci	r29, 0x00	; 0
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
     476:	de 01       	movw	r26, r28
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	eb e1       	ldi	r30, 0x1B	; 27
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	80 e4       	ldi	r24, 0x40	; 64
     480:	01 90       	ld	r0, Z+
     482:	0d 92       	st	X+, r0
     484:	81 50       	subi	r24, 0x01	; 1
     486:	e1 f7       	brne	.-8      	; 0x480 <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
     488:	60 91 16 01 	lds	r22, 0x0116
     48c:	70 91 17 01 	lds	r23, 0x0117
     490:	80 91 18 01 	lds	r24, 0x0118
     494:	90 91 19 01 	lds	r25, 0x0119
     498:	c0 90 5c 01 	lds	r12, 0x015C
     49c:	d0 90 5d 01 	lds	r13, 0x015D
     4a0:	e0 90 5e 01 	lds	r14, 0x015E
     4a4:	f0 90 5f 01 	lds	r15, 0x015F
     4a8:	b0 90 1a 01 	lds	r11, 0x011A
     4ac:	00 91 15 01 	lds	r16, 0x0115
     4b0:	06 95       	lsr	r16
     4b2:	06 95       	lsr	r16
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	01 70       	andi	r16, 0x01	; 1
     4b8:	10 70       	andi	r17, 0x00	; 0
     4ba:	b5 d4       	rcall	.+2410   	; 0xe26 <__fixsfsi>
     4bc:	fe 01       	movw	r30, r28
     4be:	ef 5b       	subi	r30, 0xBF	; 191
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	71 83       	std	Z+1, r23	; 0x01
     4c4:	60 83       	st	Z, r22
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	ad d4       	rcall	.+2394   	; 0xe26 <__fixsfsi>
     4cc:	fe 01       	movw	r30, r28
     4ce:	ed 5b       	subi	r30, 0xBD	; 189
     4d0:	ff 4f       	sbci	r31, 0xFF	; 255
     4d2:	71 83       	std	Z+1, r23	; 0x01
     4d4:	60 83       	st	Z, r22
     4d6:	fe 01       	movw	r30, r28
     4d8:	eb 5b       	subi	r30, 0xBB	; 187
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	b0 82       	st	Z, r11
     4de:	11 82       	std	Z+1, r1	; 0x01
     4e0:	fe 01       	movw	r30, r28
     4e2:	e9 5b       	subi	r30, 0xB9	; 185
     4e4:	ff 4f       	sbci	r31, 0xFF	; 255
     4e6:	11 83       	std	Z+1, r17	; 0x01
     4e8:	00 83       	st	Z, r16
    LCDclr();
     4ea:	27 d3       	rcall	.+1614   	; 0xb3a <LCDclr>
     4ec:	cc 24       	eor	r12, r12
     4ee:	dd 24       	eor	r13, r13
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     4f0:	0f 2e       	mov	r0, r31
     4f2:	fb e2       	ldi	r31, 0x2B	; 43
     4f4:	af 2e       	mov	r10, r31
     4f6:	bb 24       	eor	r11, r11
     4f8:	f0 2d       	mov	r31, r0
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f1 e4       	ldi	r31, 0x41	; 65
     4fe:	2f 2e       	mov	r2, r31
     500:	33 24       	eor	r3, r3
     502:	f0 2d       	mov	r31, r0
     504:	2c 0e       	add	r2, r28
     506:	3d 1e       	adc	r3, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	68 2e       	mov	r6, r24
     50e:	2a 96       	adiw	r28, 0x0a	; 10
     510:	9f af       	std	Y+63, r25	; 0x3f
     512:	2a 97       	sbiw	r28, 0x0a	; 10
     514:	ae c1       	rjmp	.+860    	; 0x872 <__stack+0x373>
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCDclr();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
     516:	f5 01       	movw	r30, r10
     518:	80 81       	ld	r24, Z
     51a:	83 fd       	sbrc	r24, 3
     51c:	57 c1       	rjmp	.+686    	; 0x7cc <__stack+0x2cd>
            BIT_OFF(progFlags, INACTIVE);
     51e:	0f 2e       	mov	r0, r31
     520:	ff ee       	ldi	r31, 0xEF	; 239
     522:	7f 2e       	mov	r7, r31
     524:	f0 2d       	mov	r31, r0
     526:	79 22       	and	r7, r25
     528:	70 92 15 01 	sts	0x0115, r7
            int value= values[pos];
     52c:	c6 01       	movw	r24, r12
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	f1 01       	movw	r30, r2
     534:	e8 0f       	add	r30, r24
     536:	f9 1f       	adc	r31, r25
     538:	40 80       	ld	r4, Z
     53a:	51 80       	ldd	r5, Z+1	; 0x01
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     53c:	4f 01       	movw	r8, r30
     53e:	40 c1       	rjmp	.+640    	; 0x7c0 <__stack+0x2c1>
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     540:	f5 01       	movw	r30, r10
     542:	80 81       	ld	r24, Z
     544:	85 fd       	sbrc	r24, 5
     546:	8a c0       	rjmp	.+276    	; 0x65c <__stack+0x15d>
                {
                    BIT_OFF(progFlags, INACTIVE);
     548:	ff ee       	ldi	r31, 0xEF	; 239
     54a:	7f 22       	and	r7, r31
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     54c:	f4 01       	movw	r30, r8
     54e:	80 81       	ld	r24, Z
     550:	91 81       	ldd	r25, Z+1	; 0x01
     552:	9c 01       	movw	r18, r24
     554:	2f 5f       	subi	r18, 0xFF	; 255
     556:	3f 4f       	sbci	r19, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     558:	f2 e0       	ldi	r31, 0x02	; 2
     55a:	cf 16       	cp	r12, r31
     55c:	d1 04       	cpc	r13, r1
     55e:	c1 f1       	breq	.+112    	; 0x5d0 <__stack+0xd1>
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	c8 16       	cp	r12, r24
     564:	d1 04       	cpc	r13, r1
     566:	34 f4       	brge	.+12     	; 0x574 <__stack+0x75>
     568:	e1 e0       	ldi	r30, 0x01	; 1
     56a:	ce 16       	cp	r12, r30
     56c:	d1 04       	cpc	r13, r1
     56e:	09 f0       	breq	.+2      	; 0x572 <__stack+0x73>
     570:	6c c0       	rjmp	.+216    	; 0x64a <__stack+0x14b>
     572:	0b c0       	rjmp	.+22     	; 0x58a <__stack+0x8b>
     574:	f3 e0       	ldi	r31, 0x03	; 3
     576:	cf 16       	cp	r12, r31
     578:	d1 04       	cpc	r13, r1
     57a:	09 f4       	brne	.+2      	; 0x57e <__stack+0x7f>
     57c:	49 c0       	rjmp	.+146    	; 0x610 <__stack+0x111>
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	c8 16       	cp	r12, r24
     582:	d1 04       	cpc	r13, r1
     584:	09 f0       	breq	.+2      	; 0x588 <__stack+0x89>
     586:	61 c0       	rjmp	.+194    	; 0x64a <__stack+0x14b>
     588:	4d c0       	rjmp	.+154    	; 0x624 <__stack+0x125>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     58a:	b9 01       	movw	r22, r18
     58c:	88 27       	eor	r24, r24
     58e:	77 fd       	sbrc	r23, 7
     590:	80 95       	com	r24
     592:	98 2f       	mov	r25, r24
     594:	7b d4       	rcall	.+2294   	; 0xe8c <__floatsisf>
     596:	7b 01       	movw	r14, r22
     598:	8c 01       	movw	r16, r24
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	40 e7       	ldi	r20, 0x70	; 112
     5a0:	51 e4       	ldi	r21, 0x41	; 65
     5a2:	d5 d3       	rcall	.+1962   	; 0xd4e <__cmpsf2>
     5a4:	88 23       	and	r24, r24
     5a6:	1c f4       	brge	.+6      	; 0x5ae <__stack+0xaf>
     5a8:	8f e0       	ldi	r24, 0x0F	; 15
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	54 c0       	rjmp	.+168    	; 0x656 <__stack+0x157>
     5ae:	c8 01       	movw	r24, r16
     5b0:	b7 01       	movw	r22, r14
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 ea       	ldi	r20, 0xA0	; 160
     5b8:	51 e4       	ldi	r21, 0x41	; 65
     5ba:	18 d5       	rcall	.+2608   	; 0xfec <__gesf2>
     5bc:	18 16       	cp	r1, r24
     5be:	1c f4       	brge	.+6      	; 0x5c6 <__stack+0xc7>
     5c0:	84 e1       	ldi	r24, 0x14	; 20
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	48 c0       	rjmp	.+144    	; 0x656 <__stack+0x157>
     5c6:	c8 01       	movw	r24, r16
     5c8:	b7 01       	movw	r22, r14
     5ca:	2d d4       	rcall	.+2138   	; 0xe26 <__fixsfsi>
     5cc:	cb 01       	movw	r24, r22
     5ce:	43 c0       	rjmp	.+134    	; 0x656 <__stack+0x157>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     5d0:	b9 01       	movw	r22, r18
     5d2:	88 27       	eor	r24, r24
     5d4:	77 fd       	sbrc	r23, 7
     5d6:	80 95       	com	r24
     5d8:	98 2f       	mov	r25, r24
     5da:	58 d4       	rcall	.+2224   	; 0xe8c <__floatsisf>
     5dc:	7b 01       	movw	r14, r22
     5de:	8c 01       	movw	r16, r24
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	b2 d3       	rcall	.+1892   	; 0xd4e <__cmpsf2>
     5ea:	88 23       	and	r24, r24
     5ec:	84 f1       	brlt	.+96     	; 0x64e <__stack+0x14f>
     5ee:	c8 01       	movw	r24, r16
     5f0:	b7 01       	movw	r22, r14
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e8       	ldi	r20, 0x80	; 128
     5f8:	5f e3       	ldi	r21, 0x3F	; 63
     5fa:	f8 d4       	rcall	.+2544   	; 0xfec <__gesf2>
     5fc:	18 16       	cp	r1, r24
     5fe:	1c f4       	brge	.+6      	; 0x606 <__stack+0x107>
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	28 c0       	rjmp	.+80     	; 0x656 <__stack+0x157>
     606:	c8 01       	movw	r24, r16
     608:	b7 01       	movw	r22, r14
     60a:	0d d4       	rcall	.+2074   	; 0xe26 <__fixsfsi>
     60c:	cb 01       	movw	r24, r22
     60e:	23 c0       	rjmp	.+70     	; 0x656 <__stack+0x157>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     610:	33 23       	and	r19, r19
     612:	1c f4       	brge	.+6      	; 0x61a <__stack+0x11b>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	93 e0       	ldi	r25, 0x03	; 3
     618:	1e c0       	rjmp	.+60     	; 0x656 <__stack+0x157>
     61a:	e4 e0       	ldi	r30, 0x04	; 4
     61c:	20 30       	cpi	r18, 0x00	; 0
     61e:	3e 07       	cpc	r19, r30
     620:	a4 f0       	brlt	.+40     	; 0x64a <__stack+0x14b>
     622:	15 c0       	rjmp	.+42     	; 0x64e <__stack+0x14f>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     624:	c9 01       	movw	r24, r18
     626:	52 2f       	mov	r21, r18
     628:	49 2f       	mov	r20, r25
     62a:	12 16       	cp	r1, r18
     62c:	13 06       	cpc	r1, r19
     62e:	24 f4       	brge	.+8      	; 0x638 <__stack+0x139>
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	58 2f       	mov	r21, r24
     636:	49 2f       	mov	r20, r25
     638:	85 2f       	mov	r24, r21
     63a:	94 2f       	mov	r25, r20
     63c:	99 23       	and	r25, r25
     63e:	5c f4       	brge	.+22     	; 0x656 <__stack+0x157>
     640:	86 2d       	mov	r24, r6
     642:	2a 96       	adiw	r28, 0x0a	; 10
     644:	9f ad       	ldd	r25, Y+63	; 0x3f
     646:	2a 97       	sbiw	r28, 0x0a	; 10
     648:	06 c0       	rjmp	.+12     	; 0x656 <__stack+0x157>
     64a:	c9 01       	movw	r24, r18
     64c:	04 c0       	rjmp	.+8      	; 0x656 <__stack+0x157>
     64e:	86 2d       	mov	r24, r6
     650:	2a 96       	adiw	r28, 0x0a	; 10
     652:	9f ad       	ldd	r25, Y+63	; 0x3f
     654:	2a 97       	sbiw	r28, 0x0a	; 10
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     656:	f4 01       	movw	r30, r8
     658:	91 83       	std	Z+1, r25	; 0x01
     65a:	80 83       	st	Z, r24
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     65c:	f5 01       	movw	r30, r10
     65e:	80 81       	ld	r24, Z
     660:	84 fd       	sbrc	r24, 4
     662:	8a c0       	rjmp	.+276    	; 0x778 <__stack+0x279>
                {
                    BIT_OFF(progFlags, INACTIVE);
     664:	ff ee       	ldi	r31, 0xEF	; 239
     666:	7f 22       	and	r7, r31
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     668:	f4 01       	movw	r30, r8
     66a:	80 81       	ld	r24, Z
     66c:	91 81       	ldd	r25, Z+1	; 0x01
     66e:	9c 01       	movw	r18, r24
     670:	21 50       	subi	r18, 0x01	; 1
     672:	30 40       	sbci	r19, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     674:	f2 e0       	ldi	r31, 0x02	; 2
     676:	cf 16       	cp	r12, r31
     678:	d1 04       	cpc	r13, r1
     67a:	c1 f1       	breq	.+112    	; 0x6ec <__stack+0x1ed>
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	c8 16       	cp	r12, r24
     680:	d1 04       	cpc	r13, r1
     682:	34 f4       	brge	.+12     	; 0x690 <__stack+0x191>
     684:	e1 e0       	ldi	r30, 0x01	; 1
     686:	ce 16       	cp	r12, r30
     688:	d1 04       	cpc	r13, r1
     68a:	09 f0       	breq	.+2      	; 0x68e <__stack+0x18f>
     68c:	6c c0       	rjmp	.+216    	; 0x766 <__stack+0x267>
     68e:	0b c0       	rjmp	.+22     	; 0x6a6 <__stack+0x1a7>
     690:	f3 e0       	ldi	r31, 0x03	; 3
     692:	cf 16       	cp	r12, r31
     694:	d1 04       	cpc	r13, r1
     696:	09 f4       	brne	.+2      	; 0x69a <__stack+0x19b>
     698:	49 c0       	rjmp	.+146    	; 0x72c <__stack+0x22d>
     69a:	84 e0       	ldi	r24, 0x04	; 4
     69c:	c8 16       	cp	r12, r24
     69e:	d1 04       	cpc	r13, r1
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <__stack+0x1a5>
     6a2:	61 c0       	rjmp	.+194    	; 0x766 <__stack+0x267>
     6a4:	4d c0       	rjmp	.+154    	; 0x740 <__stack+0x241>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     6a6:	b9 01       	movw	r22, r18
     6a8:	88 27       	eor	r24, r24
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	80 95       	com	r24
     6ae:	98 2f       	mov	r25, r24
     6b0:	ed d3       	rcall	.+2010   	; 0xe8c <__floatsisf>
     6b2:	7b 01       	movw	r14, r22
     6b4:	8c 01       	movw	r16, r24
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e7       	ldi	r20, 0x70	; 112
     6bc:	51 e4       	ldi	r21, 0x41	; 65
     6be:	47 d3       	rcall	.+1678   	; 0xd4e <__cmpsf2>
     6c0:	88 23       	and	r24, r24
     6c2:	1c f4       	brge	.+6      	; 0x6ca <__stack+0x1cb>
     6c4:	8f e0       	ldi	r24, 0x0F	; 15
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	54 c0       	rjmp	.+168    	; 0x772 <__stack+0x273>
     6ca:	c8 01       	movw	r24, r16
     6cc:	b7 01       	movw	r22, r14
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 ea       	ldi	r20, 0xA0	; 160
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	8a d4       	rcall	.+2324   	; 0xfec <__gesf2>
     6d8:	18 16       	cp	r1, r24
     6da:	1c f4       	brge	.+6      	; 0x6e2 <__stack+0x1e3>
     6dc:	84 e1       	ldi	r24, 0x14	; 20
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	48 c0       	rjmp	.+144    	; 0x772 <__stack+0x273>
     6e2:	c8 01       	movw	r24, r16
     6e4:	b7 01       	movw	r22, r14
     6e6:	9f d3       	rcall	.+1854   	; 0xe26 <__fixsfsi>
     6e8:	cb 01       	movw	r24, r22
     6ea:	43 c0       	rjmp	.+134    	; 0x772 <__stack+0x273>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     6ec:	b9 01       	movw	r22, r18
     6ee:	88 27       	eor	r24, r24
     6f0:	77 fd       	sbrc	r23, 7
     6f2:	80 95       	com	r24
     6f4:	98 2f       	mov	r25, r24
     6f6:	ca d3       	rcall	.+1940   	; 0xe8c <__floatsisf>
     6f8:	7b 01       	movw	r14, r22
     6fa:	8c 01       	movw	r16, r24
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	24 d3       	rcall	.+1608   	; 0xd4e <__cmpsf2>
     706:	88 23       	and	r24, r24
     708:	84 f1       	brlt	.+96     	; 0x76a <__stack+0x26b>
     70a:	c8 01       	movw	r24, r16
     70c:	b7 01       	movw	r22, r14
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e8       	ldi	r20, 0x80	; 128
     714:	5f e3       	ldi	r21, 0x3F	; 63
     716:	6a d4       	rcall	.+2260   	; 0xfec <__gesf2>
     718:	18 16       	cp	r1, r24
     71a:	1c f4       	brge	.+6      	; 0x722 <__stack+0x223>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	28 c0       	rjmp	.+80     	; 0x772 <__stack+0x273>
     722:	c8 01       	movw	r24, r16
     724:	b7 01       	movw	r22, r14
     726:	7f d3       	rcall	.+1790   	; 0xe26 <__fixsfsi>
     728:	cb 01       	movw	r24, r22
     72a:	23 c0       	rjmp	.+70     	; 0x772 <__stack+0x273>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     72c:	33 23       	and	r19, r19
     72e:	1c f4       	brge	.+6      	; 0x736 <__stack+0x237>
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	1e c0       	rjmp	.+60     	; 0x772 <__stack+0x273>
     736:	e4 e0       	ldi	r30, 0x04	; 4
     738:	20 30       	cpi	r18, 0x00	; 0
     73a:	3e 07       	cpc	r19, r30
     73c:	a4 f0       	brlt	.+40     	; 0x766 <__stack+0x267>
     73e:	15 c0       	rjmp	.+42     	; 0x76a <__stack+0x26b>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     740:	c9 01       	movw	r24, r18
     742:	52 2f       	mov	r21, r18
     744:	49 2f       	mov	r20, r25
     746:	12 16       	cp	r1, r18
     748:	13 06       	cpc	r1, r19
     74a:	24 f4       	brge	.+8      	; 0x754 <__stack+0x255>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	58 2f       	mov	r21, r24
     752:	49 2f       	mov	r20, r25
     754:	85 2f       	mov	r24, r21
     756:	94 2f       	mov	r25, r20
     758:	99 23       	and	r25, r25
     75a:	5c f4       	brge	.+22     	; 0x772 <__stack+0x273>
     75c:	86 2d       	mov	r24, r6
     75e:	2a 96       	adiw	r28, 0x0a	; 10
     760:	9f ad       	ldd	r25, Y+63	; 0x3f
     762:	2a 97       	sbiw	r28, 0x0a	; 10
     764:	06 c0       	rjmp	.+12     	; 0x772 <__stack+0x273>
     766:	c9 01       	movw	r24, r18
     768:	04 c0       	rjmp	.+8      	; 0x772 <__stack+0x273>
     76a:	86 2d       	mov	r24, r6
     76c:	2a 96       	adiw	r28, 0x0a	; 10
     76e:	9f ad       	ldd	r25, Y+63	; 0x3f
     770:	2a 97       	sbiw	r28, 0x0a	; 10
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     772:	f4 01       	movw	r30, r8
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	80 83       	st	Z, r24

                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
     778:	f5 01       	movw	r30, r10
     77a:	80 81       	ld	r24, Z
     77c:	83 fd       	sbrc	r24, 3
     77e:	20 c0       	rjmp	.+64     	; 0x7c0 <__stack+0x2c1>
     780:	70 92 15 01 	sts	0x0115, r7
                    if(pos!=3){
     784:	f3 e0       	ldi	r31, 0x03	; 3
     786:	cf 16       	cp	r12, r31
     788:	d1 04       	cpc	r13, r1
     78a:	49 f0       	breq	.+18     	; 0x79e <__stack+0x29f>
                        values[pos]= (uint8_t)value;
     78c:	c6 01       	movw	r24, r12
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	f1 01       	movw	r30, r2
     794:	e8 0f       	add	r30, r24
     796:	f9 1f       	adc	r31, r25
     798:	40 82       	st	Z, r4
     79a:	11 82       	std	Z+1, r1	; 0x01
     79c:	17 c0       	rjmp	.+46     	; 0x7cc <__stack+0x2cd>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
     79e:	41 14       	cp	r4, r1
     7a0:	51 04       	cpc	r5, r1
     7a2:	49 f0       	breq	.+18     	; 0x7b6 <__stack+0x2b7>
     7a4:	c2 01       	movw	r24, r4
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	87 29       	or	r24, r7
     7b0:	80 93 15 01 	sts	0x0115, r24
     7b4:	0b c0       	rjmp	.+22     	; 0x7cc <__stack+0x2cd>
     7b6:	87 2d       	mov	r24, r7
     7b8:	8b 7f       	andi	r24, 0xFB	; 251
     7ba:	80 93 15 01 	sts	0x0115, r24
     7be:	06 c0       	rjmp	.+12     	; 0x7cc <__stack+0x2cd>
    LCDclr();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     7c0:	f5 01       	movw	r30, r10
     7c2:	80 81       	ld	r24, Z
     7c4:	82 ff       	sbrs	r24, 2
     7c6:	bc ce       	rjmp	.-648    	; 0x540 <__stack+0x41>
     7c8:	70 92 15 01 	sts	0x0115, r7
                        break;
                    }          
                }                  
            }
        }
        LCDGotoXY(0, 0);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	ce d1       	rcall	.+924    	; 0xb6e <LCDGotoXY>
        LCDstring(menu[pos],16);
     7d2:	c6 01       	movw	r24, r12
     7d4:	82 95       	swap	r24
     7d6:	92 95       	swap	r25
     7d8:	90 7f       	andi	r25, 0xF0	; 240
     7da:	98 27       	eor	r25, r24
     7dc:	80 7f       	andi	r24, 0xF0	; 240
     7de:	98 27       	eor	r25, r24
     7e0:	21 e0       	ldi	r18, 0x01	; 1
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	2c 0f       	add	r18, r28
     7e6:	3d 1f       	adc	r19, r29
     7e8:	82 0f       	add	r24, r18
     7ea:	93 1f       	adc	r25, r19
     7ec:	60 e1       	ldi	r22, 0x10	; 16
     7ee:	a7 d1       	rcall	.+846    	; 0xb3e <LCDstring>
        LCDGotoXY(0, 1);
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	bc d1       	rcall	.+888    	; 0xb6e <LCDGotoXY>
        LCDstring(values[pos],1);
     7f6:	c6 01       	movw	r24, r12
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	f1 01       	movw	r30, r2
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	80 81       	ld	r24, Z
     804:	91 81       	ldd	r25, Z+1	; 0x01
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	9a d1       	rcall	.+820    	; 0xb3e <LCDstring>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     80a:	f5 01       	movw	r30, r10
     80c:	80 81       	ld	r24, Z
     80e:	85 fd       	sbrc	r24, 5
     810:	16 c0       	rjmp	.+44     	; 0x83e <__stack+0x33f>
        {
            BIT_OFF(progFlags, INACTIVE);
     812:	80 91 15 01 	lds	r24, 0x0115
     816:	8f 7e       	andi	r24, 0xEF	; 239
     818:	80 93 15 01 	sts	0x0115, r24
            pos++;
     81c:	08 94       	sec
     81e:	c1 1c       	adc	r12, r1
     820:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     822:	dd 20       	and	r13, r13
     824:	34 f4       	brge	.+12     	; 0x832 <__stack+0x333>
     826:	0f 2e       	mov	r0, r31
     828:	f3 e0       	ldi	r31, 0x03	; 3
     82a:	cf 2e       	mov	r12, r31
     82c:	dd 24       	eor	r13, r13
     82e:	f0 2d       	mov	r31, r0
     830:	06 c0       	rjmp	.+12     	; 0x83e <__stack+0x33f>
     832:	f4 e0       	ldi	r31, 0x04	; 4
     834:	cf 16       	cp	r12, r31
     836:	d1 04       	cpc	r13, r1
     838:	14 f0       	brlt	.+4      	; 0x83e <__stack+0x33f>
     83a:	cc 24       	eor	r12, r12
     83c:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     83e:	f5 01       	movw	r30, r10
     840:	80 81       	ld	r24, Z
     842:	84 fd       	sbrc	r24, 4
     844:	16 c0       	rjmp	.+44     	; 0x872 <__stack+0x373>
        {
            BIT_OFF(progFlags, INACTIVE);
     846:	80 91 15 01 	lds	r24, 0x0115
     84a:	8f 7e       	andi	r24, 0xEF	; 239
     84c:	80 93 15 01 	sts	0x0115, r24
            pos--;
     850:	08 94       	sec
     852:	c1 08       	sbc	r12, r1
     854:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     856:	dd 20       	and	r13, r13
     858:	34 f4       	brge	.+12     	; 0x866 <__stack+0x367>
     85a:	0f 2e       	mov	r0, r31
     85c:	f3 e0       	ldi	r31, 0x03	; 3
     85e:	cf 2e       	mov	r12, r31
     860:	dd 24       	eor	r13, r13
     862:	f0 2d       	mov	r31, r0
     864:	06 c0       	rjmp	.+12     	; 0x872 <__stack+0x373>
     866:	f4 e0       	ldi	r31, 0x04	; 4
     868:	cf 16       	cp	r12, r31
     86a:	d1 04       	cpc	r13, r1
     86c:	14 f0       	brlt	.+4      	; 0x872 <__stack+0x373>
     86e:	cc 24       	eor	r12, r12
     870:	dd 24       	eor	r13, r13
{
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCDclr();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     872:	90 91 15 01 	lds	r25, 0x0115
     876:	94 fd       	sbrc	r25, 4
     878:	4e ce       	rjmp	.-868    	; 0x516 <__stack+0x17>
     87a:	f5 01       	movw	r30, r10
     87c:	80 81       	ld	r24, Z
     87e:	82 ff       	sbrs	r24, 2
     880:	4a ce       	rjmp	.-876    	; 0x516 <__stack+0x17>
            pos--;
            pos= CIRCLE(pos, 0, 3);
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
     882:	89 2f       	mov	r24, r25
     884:	8d 7e       	andi	r24, 0xED	; 237
     886:	80 93 15 01 	sts	0x0115, r24
    }
}

inline void menuStop()
{
    LCDclr();
     88a:	57 d1       	rcall	.+686    	; 0xb3a <LCDclr>
    LCD_prepare("TEMP:", 5, 0, 0);
     88c:	89 e0       	ldi	r24, 0x09	; 9
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	65 e0       	ldi	r22, 0x05	; 5
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	93 dd       	rcall	.-1242   	; 0x3c2 <LCD_prepare>
    LCD_DisplayAll();
     89c:	42 dd       	rcall	.-1404   	; 0x322 <LCD_DisplayAll>
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
     89e:	c7 5b       	subi	r28, 0xB7	; 183
     8a0:	df 4f       	sbci	r29, 0xFF	; 255
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	bf 90       	pop	r11
     8be:	af 90       	pop	r10
     8c0:	9f 90       	pop	r9
     8c2:	8f 90       	pop	r8
     8c4:	7f 90       	pop	r7
     8c6:	6f 90       	pop	r6
     8c8:	5f 90       	pop	r5
     8ca:	4f 90       	pop	r4
     8cc:	3f 90       	pop	r3
     8ce:	2f 90       	pop	r2
     8d0:	08 95       	ret

000008d2 <main>:

int main(void)
{
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	90 93 c5 00 	sts	0x00C5, r25
     8e2:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
     8e6:	e2 ec       	ldi	r30, 0xC2	; 194
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 7d       	andi	r24, 0xDF	; 223
     8ee:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
     8f0:	80 81       	ld	r24, Z
     8f2:	8f 7e       	andi	r24, 0xEF	; 239
     8f4:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
     8f6:	a1 ec       	ldi	r26, 0xC1	; 193
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	8c 91       	ld	r24, X
     8fc:	8b 7f       	andi	r24, 0xFB	; 251
     8fe:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
     900:	80 81       	ld	r24, Z
     902:	84 60       	ori	r24, 0x04	; 4
     904:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
     906:	80 81       	ld	r24, Z
     908:	82 60       	ori	r24, 0x02	; 2
     90a:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
     90c:	80 81       	ld	r24, Z
     90e:	87 7f       	andi	r24, 0xF7	; 247
     910:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
     912:	8c 91       	ld	r24, X
     914:	88 60       	ori	r24, 0x08	; 8
     916:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 0);  // прием запрещен
     918:	8c 91       	ld	r24, X
     91a:	8f 7e       	andi	r24, 0xEF	; 239
     91c:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 0); // прерывание приема запрещено
     91e:	8c 91       	ld	r24, X
     920:	8f 77       	andi	r24, 0x7F	; 127
     922:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
     924:	8c 91       	ld	r24, X
     926:	80 64       	ori	r24, 0x40	; 64
     928:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
     92a:	8c 91       	ld	r24, X
     92c:	8f 7d       	andi	r24, 0xDF	; 223
     92e:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
     930:	e7 e2       	ldi	r30, 0x27	; 39
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD)|(1<<FAN); // управление подсветкой экрана, нагрузкой и вентилятором на выход
     93a:	ea e2       	ldi	r30, 0x2A	; 42
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	81 ec       	ldi	r24, 0xC1	; 193
     940:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
     942:	80 81       	ld	r24, Z
     944:	83 7c       	andi	r24, 0xC3	; 195
     946:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
     948:	8c e3       	ldi	r24, 0x3C	; 60
     94a:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
     94c:	ec e7       	ldi	r30, 0x7C	; 124
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	80 64       	ori	r24, 0x40	; 64
     954:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
     956:	ab e7       	ldi	r26, 0x7B	; 123
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	8c 91       	ld	r24, X
     95c:	83 60       	ori	r24, 0x03	; 3
     95e:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
     960:	80 81       	ld	r24, Z
     962:	80 62       	ori	r24, 0x20	; 32
     964:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
     966:	0a e7       	ldi	r16, 0x7A	; 122
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	f8 01       	movw	r30, r16
     96c:	80 81       	ld	r24, Z
     96e:	80 62       	ori	r24, 0x20	; 32
     970:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
     972:	80 81       	ld	r24, Z
     974:	88 60       	ori	r24, 0x08	; 8
     976:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
     978:	80 81       	ld	r24, Z
     97a:	80 68       	ori	r24, 0x80	; 128
     97c:	80 83       	st	Z, r24
    DIDR0 |= 1 << ADC0D; // отключить буффер цифрового входа ADC0D
     97e:	ee e7       	ldi	r30, 0x7E	; 126
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	81 60       	ori	r24, 0x01	; 1
     986:	80 83       	st	Z, r24
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
     988:	e4 e4       	ldi	r30, 0x44	; 68
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	82 60       	ori	r24, 0x02	; 2
     990:	80 83       	st	Z, r24
    OCR0A= measureRate;
     992:	80 91 1a 01 	lds	r24, 0x011A
     996:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
     998:	e5 e4       	ldi	r30, 0x45	; 69
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	84 60       	ori	r24, 0x04	; 4
     9a0:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
     9a2:	ee e6       	ldi	r30, 0x6E	; 110
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	82 60       	ori	r24, 0x02	; 2
     9aa:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
     9ac:	85 e0       	ldi	r24, 0x05	; 5
     9ae:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
     9b2:	e6 eb       	ldi	r30, 0xB6	; 182
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	80 62       	ori	r24, 0x20	; 32
     9ba:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
     9bc:	e0 e7       	ldi	r30, 0x70	; 112
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	81 60       	ori	r24, 0x01	; 1
     9c4:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCDinit();
     9c6:	02 d1       	rcall	.+516    	; 0xbcc <LCDinit>

    BIT_WRITE(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
     9c8:	e4 e6       	ldi	r30, 0x64	; 100
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	80 68       	ori	r24, 0x80	; 128
     9d0:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
     9d2:	80 81       	ld	r24, Z
     9d4:	88 60       	ori	r24, 0x08	; 8
     9d6:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
     9d8:	80 81       	ld	r24, Z
     9da:	84 60       	ori	r24, 0x04	; 4
     9dc:	80 83       	st	Z, r24
    BIT_WRITE(ACSR, ACD, 1); // отключить аналоговый компаратор
     9de:	e0 e5       	ldi	r30, 0x50	; 80
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	80 68       	ori	r24, 0x80	; 128
     9e6:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
     9e8:	f8 01       	movw	r30, r16
     9ea:	80 81       	ld	r24, Z
     9ec:	80 64       	ori	r24, 0x40	; 64
     9ee:	80 83       	st	Z, r24

    sei();
     9f0:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
     9f2:	c9 e2       	ldi	r28, 0x29	; 41
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_WRITE(progFlags, LCD_ON, 1);
            LCD_prepare("TEMP:", 5, 0, 0);
     9f6:	09 e0       	ldi	r16, 0x09	; 9
     9f8:	11 e0       	ldi	r17, 0x01	; 1
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
     9fa:	88 81       	ld	r24, Y
     9fc:	84 ff       	sbrs	r24, 4
     9fe:	06 c0       	rjmp	.+12     	; 0xa0c <main+0x13a>
     a00:	88 81       	ld	r24, Y
     a02:	85 ff       	sbrs	r24, 5
     a04:	03 c0       	rjmp	.+6      	; 0xa0c <main+0x13a>
     a06:	88 81       	ld	r24, Y
     a08:	82 fd       	sbrc	r24, 2
     a0a:	0e c0       	rjmp	.+28     	; 0xa28 <main+0x156>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_WRITE(progFlags, LCD_ON, 1);
     a0c:	80 91 15 01 	lds	r24, 0x0115
     a10:	8f 7e       	andi	r24, 0xEF	; 239
     a12:	81 60       	ori	r24, 0x01	; 1
     a14:	80 93 15 01 	sts	0x0115, r24
            LCD_prepare("TEMP:", 5, 0, 0);
     a18:	c8 01       	movw	r24, r16
     a1a:	65 e0       	ldi	r22, 0x05	; 5
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	ce dc       	rcall	.-1636   	; 0x3c2 <LCD_prepare>
            LCDvisible();
     a26:	2c d1       	rcall	.+600    	; 0xc80 <LCDvisible>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
     a28:	88 81       	ld	r24, Y
     a2a:	83 fd       	sbrc	r24, 3
     a2c:	18 c0       	rjmp	.+48     	; 0xa5e <main+0x18c>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
     a2e:	80 91 15 01 	lds	r24, 0x0115
     a32:	8f 7e       	andi	r24, 0xEF	; 239
     a34:	80 93 15 01 	sts	0x0115, r24
            if (!BIT_READ(progFlags, LCD_ON))
     a38:	80 fd       	sbrc	r24, 0
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <main+0x180>
            {
                BIT_WRITE(progFlags, LCD_ON, 1); // включить подсветку дисплея
     a3c:	81 60       	ori	r24, 0x01	; 1
     a3e:	80 93 15 01 	sts	0x0115, r24
                LCD_prepare("TEMP:", 5, 0, 0);
     a42:	c8 01       	movw	r24, r16
     a44:	65 e0       	ldi	r22, 0x05	; 5
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	b9 dc       	rcall	.-1678   	; 0x3c2 <LCD_prepare>
                LCDvisible();
     a50:	17 d1       	rcall	.+558    	; 0xc80 <LCDvisible>
            }
            BIT_WRITE(progFlags, MENU_ON, 1); // включить меню
     a52:	80 91 15 01 	lds	r24, 0x0115
     a56:	82 60       	ori	r24, 0x02	; 2
     a58:	80 93 15 01 	sts	0x0115, r24
            menuRun(); // обработка команд меню
     a5c:	f1 dc       	rcall	.-1566   	; 0x440 <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE))
     a5e:	80 91 15 01 	lds	r24, 0x0115
     a62:	84 ff       	sbrs	r24, 4
     a64:	06 c0       	rjmp	.+12     	; 0xa72 <main+0x1a0>
        {
            if(BIT_READ(progFlags, LCD_ON))
     a66:	80 ff       	sbrs	r24, 0
     a68:	c8 cf       	rjmp	.-112    	; 0x9fa <main+0x128>
            {
                BIT_OFF(progFlags, LCD_ON);
     a6a:	8e 7f       	andi	r24, 0xFE	; 254
     a6c:	80 93 15 01 	sts	0x0115, r24
                LCDblank();
     a70:	05 d1       	rcall	.+522    	; 0xc7c <LCDblank>
        }
        
        //////////////////////////////////////////////////////////////////////////
        // задача : отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
     a72:	80 91 15 01 	lds	r24, 0x0115
     a76:	80 ff       	sbrs	r24, 0
     a78:	c0 cf       	rjmp	.-128    	; 0x9fa <main+0x128>
        {
            LCD_DisplayAll();
     a7a:	53 dc       	rcall	.-1882   	; 0x322 <LCD_DisplayAll>
     a7c:	be cf       	rjmp	.-132    	; 0x9fa <main+0x128>

00000a7e <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29

#ifdef LCD_4bit
	//4 bit part
	LDP=((ch&0b11110000)>>4);
     a82:	98 2f       	mov	r25, r24
     a84:	92 95       	swap	r25
     a86:	9f 70       	andi	r25, 0x0F	; 15
     a88:	a5 e2       	ldi	r26, 0x25	; 37
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	9c 93       	st	X, r25
	LCP|=1<<LCD_RS;
     a8e:	e8 e2       	ldi	r30, 0x28	; 40
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	90 81       	ld	r25, Z
     a94:	92 60       	ori	r25, 0x02	; 2
     a96:	90 83       	st	Z, r25
	LCP|=1<<LCD_E;		
     a98:	90 81       	ld	r25, Z
     a9a:	98 60       	ori	r25, 0x08	; 8
     a9c:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a9e:	2a ef       	ldi	r18, 0xFA	; 250
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	e9 01       	movw	r28, r18
     aa4:	21 97       	sbiw	r28, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <LCDsendChar+0x26>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     aa8:	90 81       	ld	r25, Z
     aaa:	97 7f       	andi	r25, 0xF7	; 247
     aac:	90 83       	st	Z, r25
	LCP&=~(1<<LCD_RS);
     aae:	90 81       	ld	r25, Z
     ab0:	9d 7f       	andi	r25, 0xFD	; 253
     ab2:	90 83       	st	Z, r25
     ab4:	e9 01       	movw	r28, r18
     ab6:	21 97       	sbiw	r28, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <LCDsendChar+0x38>
	_delay_ms(1);
	LDP=(ch&0b00001111);
     aba:	8f 70       	andi	r24, 0x0F	; 15
     abc:	8c 93       	st	X, r24
	LCP|=1<<LCD_RS;
     abe:	80 81       	ld	r24, Z
     ac0:	82 60       	ori	r24, 0x02	; 2
     ac2:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     ac4:	80 81       	ld	r24, Z
     ac6:	88 60       	ori	r24, 0x08	; 8
     ac8:	80 83       	st	Z, r24
     aca:	c9 01       	movw	r24, r18
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <LCDsendChar+0x4e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     ad0:	80 81       	ld	r24, Z
     ad2:	87 7f       	andi	r24, 0xF7	; 247
     ad4:	80 83       	st	Z, r24
	LCP&=~(1<<LCD_RS);
     ad6:	80 81       	ld	r24, Z
     ad8:	8d 7f       	andi	r24, 0xFD	; 253
     ada:	80 83       	st	Z, r24
     adc:	c9 01       	movw	r24, r18
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <LCDsendChar+0x60>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
#ifdef LCD_4bit	
	//4 bit part
	LDP=((cmd&0b11110000)>>4);
     aec:	98 2f       	mov	r25, r24
     aee:	92 95       	swap	r25
     af0:	9f 70       	andi	r25, 0x0F	; 15
     af2:	a5 e2       	ldi	r26, 0x25	; 37
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	9c 93       	st	X, r25
	LCP|=1<<LCD_E;		
     af8:	e8 e2       	ldi	r30, 0x28	; 40
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	90 81       	ld	r25, Z
     afe:	98 60       	ori	r25, 0x08	; 8
     b00:	90 83       	st	Z, r25
     b02:	2a ef       	ldi	r18, 0xFA	; 250
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	e9 01       	movw	r28, r18
     b08:	21 97       	sbiw	r28, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <LCDsendCommand+0x20>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     b0c:	90 81       	ld	r25, Z
     b0e:	97 7f       	andi	r25, 0xF7	; 247
     b10:	90 83       	st	Z, r25
     b12:	e9 01       	movw	r28, r18
     b14:	21 97       	sbiw	r28, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LDP=(cmd&0b00001111);	
     b18:	8f 70       	andi	r24, 0x0F	; 15
     b1a:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     b1c:	80 81       	ld	r24, Z
     b1e:	88 60       	ori	r24, 0x08	; 8
     b20:	80 83       	st	Z, r24
     b22:	c9 01       	movw	r24, r18
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <LCDsendCommand+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     b28:	80 81       	ld	r24, Z
     b2a:	87 7f       	andi	r24, 0xF7	; 247
     b2c:	80 83       	st	Z, r24
     b2e:	c9 01       	movw	r24, r18
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <LCDsendCommand+0x48>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     b3a:	81 e0       	ldi	r24, 0x01	; 1
}
     b3c:	d5 cf       	rjmp	.-86     	; 0xae8 <LCDsendCommand>

00000b3e <LCDstring>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	9c 01       	movw	r18, r24
     b48:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	59 f0       	breq	.+22     	; 0xb64 <LCDstring+0x26>

	// print data
	for(i=0; i<nBytes; i++)
     b4e:	66 23       	and	r22, r22
     b50:	49 f0       	breq	.+18     	; 0xb64 <LCDstring+0x26>
     b52:	18 2f       	mov	r17, r24
     b54:	28 2f       	mov	r18, r24
     b56:	e9 01       	movw	r28, r18
	{
		LCDsendChar(data[i]);
     b58:	89 91       	ld	r24, Y+
     b5a:	91 df       	rcall	.-222    	; 0xa7e <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     b5c:	9e 01       	movw	r18, r28
     b5e:	21 1b       	sub	r18, r17
     b60:	20 17       	cp	r18, r16
     b62:	d0 f3       	brcs	.-12     	; 0xb58 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     b6e:	62 30       	cpi	r22, 0x02	; 2
     b70:	31 f0       	breq	.+12     	; 0xb7e <LCDGotoXY+0x10>
     b72:	63 30       	cpi	r22, 0x03	; 3
     b74:	31 f0       	breq	.+12     	; 0xb82 <LCDGotoXY+0x14>
     b76:	61 30       	cpi	r22, 0x01	; 1
     b78:	29 f4       	brne	.+10     	; 0xb84 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     b7a:	80 5c       	subi	r24, 0xC0	; 192
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     b7e:	8c 5e       	subi	r24, 0xEC	; 236
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     b82:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     b84:	80 68       	ori	r24, 0x80	; 128
	
}
     b86:	b0 cf       	rjmp	.-160    	; 0xae8 <LCDsendCommand>

00000b88 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     b96:	66 0f       	add	r22, r22
     b98:	66 0f       	add	r22, r22
     b9a:	66 0f       	add	r22, r22
     b9c:	06 2f       	mov	r16, r22
     b9e:	00 64       	ori	r16, 0x40	; 64
     ba0:	c0 e0       	ldi	r28, 0x00	; 0
     ba2:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     ba4:	f7 01       	movw	r30, r14
     ba6:	ec 0f       	add	r30, r28
     ba8:	fd 1f       	adc	r31, r29
     baa:	14 91       	lpm	r17, Z+
		LCDsendCommand(a++);
     bac:	80 2f       	mov	r24, r16
     bae:	8c 0f       	add	r24, r28
     bb0:	9b df       	rcall	.-202    	; 0xae8 <LCDsendCommand>
		LCDsendChar(pcc);
     bb2:	81 2f       	mov	r24, r17
     bb4:	64 df       	rcall	.-312    	; 0xa7e <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     bb6:	21 96       	adiw	r28, 0x01	; 1
     bb8:	c8 30       	cpi	r28, 0x08	; 8
     bba:	d1 05       	cpc	r29, r1
     bbc:	99 f7       	brne	.-26     	; 0xba4 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	86 ea       	ldi	r24, 0xA6	; 166
     bd4:	9e e0       	ldi	r25, 0x0E	; 14
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	f1 f7       	brne	.-4      	; 0xbd6 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     bda:	45 e2       	ldi	r20, 0x25	; 37
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	fa 01       	movw	r30, r20
     be0:	10 82       	st	Z, r1
	LCP=0x00;
     be2:	a8 e2       	ldi	r26, 0x28	; 40
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	1c 92       	st	X, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     be8:	e4 e2       	ldi	r30, 0x24	; 36
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	8f 60       	ori	r24, 0x0F	; 15
     bf0:	80 83       	st	Z, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     bf2:	e7 e2       	ldi	r30, 0x27	; 39
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	8e 60       	ori	r24, 0x0E	; 14
     bfa:	80 83       	st	Z, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	fa 01       	movw	r30, r20
     c00:	90 83       	st	Z, r25
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c02:	8c 91       	ld	r24, X
     c04:	88 60       	ori	r24, 0x08	; 8
     c06:	8c 93       	st	X, r24
     c08:	2a ef       	ldi	r18, 0xFA	; 250
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <LCDinit+0x42>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c12:	8c 91       	ld	r24, X
     c14:	87 7f       	andi	r24, 0xF7	; 247
     c16:	8c 93       	st	X, r24
     c18:	f9 01       	movw	r30, r18
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <LCDinit+0x4e>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c1e:	fa 01       	movw	r30, r20
     c20:	90 83       	st	Z, r25
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c22:	8c 91       	ld	r24, X
     c24:	88 60       	ori	r24, 0x08	; 8
     c26:	8c 93       	st	X, r24
     c28:	c9 01       	movw	r24, r18
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <LCDinit+0x5e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c2e:	8c 91       	ld	r24, X
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	8c 93       	st	X, r24
     c34:	c9 01       	movw	r24, r18
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <LCDinit+0x6a>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c3e:	8c 91       	ld	r24, X
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	8c 93       	st	X, r24
     c44:	c9 01       	movw	r24, r18
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <LCDinit+0x7a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c4a:	8c 91       	ld	r24, X
     c4c:	87 7f       	andi	r24, 0xF7	; 247
     c4e:	8c 93       	st	X, r24
     c50:	c9 01       	movw	r24, r18
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <LCDinit+0x86>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     c56:	88 e2       	ldi	r24, 0x28	; 40
     c58:	47 df       	rcall	.-370    	; 0xae8 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     c5a:	8c e0       	ldi	r24, 0x0C	; 12
     c5c:	45 df       	rcall	.-374    	; 0xae8 <LCDsendCommand>
     c5e:	c8 e6       	ldi	r28, 0x68	; 104
     c60:	d0 e0       	ldi	r29, 0x00	; 0
     c62:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     c64:	16 2f       	mov	r17, r22
     c66:	1f 5f       	subi	r17, 0xFF	; 255
     c68:	ce 01       	movw	r24, r28
     c6a:	8e df       	rcall	.-228    	; 0xb88 <LCDdefinechar>
     c6c:	28 96       	adiw	r28, 0x08	; 8
     c6e:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     c70:	18 30       	cpi	r17, 0x08	; 8
     c72:	c1 f7       	brne	.-16     	; 0xc64 <LCDinit+0x98>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	08 95       	ret

00000c7c <LCDblank>:
{
	LCDsendCommand(0x0C);
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     c7c:	88 e0       	ldi	r24, 0x08	; 8
}
     c7e:	34 cf       	rjmp	.-408    	; 0xae8 <LCDsendCommand>

00000c80 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     c80:	8c e0       	ldi	r24, 0x0C	; 12
}
     c82:	32 cf       	rjmp	.-412    	; 0xae8 <LCDsendCommand>

00000c84 <__subsf3>:
     c84:	50 58       	subi	r21, 0x80	; 128

00000c86 <__addsf3>:
     c86:	bb 27       	eor	r27, r27
     c88:	aa 27       	eor	r26, r26
     c8a:	0e d0       	rcall	.+28     	; 0xca8 <__addsf3x>
     c8c:	75 c1       	rjmp	.+746    	; 0xf78 <__fp_round>
     c8e:	66 d1       	rcall	.+716    	; 0xf5c <__fp_pscA>
     c90:	30 f0       	brcs	.+12     	; 0xc9e <__addsf3+0x18>
     c92:	6b d1       	rcall	.+726    	; 0xf6a <__fp_pscB>
     c94:	20 f0       	brcs	.+8      	; 0xc9e <__addsf3+0x18>
     c96:	31 f4       	brne	.+12     	; 0xca4 <__addsf3+0x1e>
     c98:	9f 3f       	cpi	r25, 0xFF	; 255
     c9a:	11 f4       	brne	.+4      	; 0xca0 <__addsf3+0x1a>
     c9c:	1e f4       	brtc	.+6      	; 0xca4 <__addsf3+0x1e>
     c9e:	5b c1       	rjmp	.+694    	; 0xf56 <__fp_nan>
     ca0:	0e f4       	brtc	.+2      	; 0xca4 <__addsf3+0x1e>
     ca2:	e0 95       	com	r30
     ca4:	e7 fb       	bst	r30, 7
     ca6:	51 c1       	rjmp	.+674    	; 0xf4a <__fp_inf>

00000ca8 <__addsf3x>:
     ca8:	e9 2f       	mov	r30, r25
     caa:	77 d1       	rcall	.+750    	; 0xf9a <__fp_split3>
     cac:	80 f3       	brcs	.-32     	; 0xc8e <__addsf3+0x8>
     cae:	ba 17       	cp	r27, r26
     cb0:	62 07       	cpc	r22, r18
     cb2:	73 07       	cpc	r23, r19
     cb4:	84 07       	cpc	r24, r20
     cb6:	95 07       	cpc	r25, r21
     cb8:	18 f0       	brcs	.+6      	; 0xcc0 <__addsf3x+0x18>
     cba:	71 f4       	brne	.+28     	; 0xcd8 <__addsf3x+0x30>
     cbc:	9e f5       	brtc	.+102    	; 0xd24 <__addsf3x+0x7c>
     cbe:	8f c1       	rjmp	.+798    	; 0xfde <__fp_zero>
     cc0:	0e f4       	brtc	.+2      	; 0xcc4 <__addsf3x+0x1c>
     cc2:	e0 95       	com	r30
     cc4:	0b 2e       	mov	r0, r27
     cc6:	ba 2f       	mov	r27, r26
     cc8:	a0 2d       	mov	r26, r0
     cca:	0b 01       	movw	r0, r22
     ccc:	b9 01       	movw	r22, r18
     cce:	90 01       	movw	r18, r0
     cd0:	0c 01       	movw	r0, r24
     cd2:	ca 01       	movw	r24, r20
     cd4:	a0 01       	movw	r20, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	ff 27       	eor	r31, r31
     cda:	59 1b       	sub	r21, r25
     cdc:	99 f0       	breq	.+38     	; 0xd04 <__addsf3x+0x5c>
     cde:	59 3f       	cpi	r21, 0xF9	; 249
     ce0:	50 f4       	brcc	.+20     	; 0xcf6 <__addsf3x+0x4e>
     ce2:	50 3e       	cpi	r21, 0xE0	; 224
     ce4:	68 f1       	brcs	.+90     	; 0xd40 <__addsf3x+0x98>
     ce6:	1a 16       	cp	r1, r26
     ce8:	f0 40       	sbci	r31, 0x00	; 0
     cea:	a2 2f       	mov	r26, r18
     cec:	23 2f       	mov	r18, r19
     cee:	34 2f       	mov	r19, r20
     cf0:	44 27       	eor	r20, r20
     cf2:	58 5f       	subi	r21, 0xF8	; 248
     cf4:	f3 cf       	rjmp	.-26     	; 0xcdc <__addsf3x+0x34>
     cf6:	46 95       	lsr	r20
     cf8:	37 95       	ror	r19
     cfa:	27 95       	ror	r18
     cfc:	a7 95       	ror	r26
     cfe:	f0 40       	sbci	r31, 0x00	; 0
     d00:	53 95       	inc	r21
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <__addsf3x+0x4e>
     d04:	7e f4       	brtc	.+30     	; 0xd24 <__addsf3x+0x7c>
     d06:	1f 16       	cp	r1, r31
     d08:	ba 0b       	sbc	r27, r26
     d0a:	62 0b       	sbc	r22, r18
     d0c:	73 0b       	sbc	r23, r19
     d0e:	84 0b       	sbc	r24, r20
     d10:	ba f0       	brmi	.+46     	; 0xd40 <__addsf3x+0x98>
     d12:	91 50       	subi	r25, 0x01	; 1
     d14:	a1 f0       	breq	.+40     	; 0xd3e <__addsf3x+0x96>
     d16:	ff 0f       	add	r31, r31
     d18:	bb 1f       	adc	r27, r27
     d1a:	66 1f       	adc	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	88 1f       	adc	r24, r24
     d20:	c2 f7       	brpl	.-16     	; 0xd12 <__addsf3x+0x6a>
     d22:	0e c0       	rjmp	.+28     	; 0xd40 <__addsf3x+0x98>
     d24:	ba 0f       	add	r27, r26
     d26:	62 1f       	adc	r22, r18
     d28:	73 1f       	adc	r23, r19
     d2a:	84 1f       	adc	r24, r20
     d2c:	48 f4       	brcc	.+18     	; 0xd40 <__addsf3x+0x98>
     d2e:	87 95       	ror	r24
     d30:	77 95       	ror	r23
     d32:	67 95       	ror	r22
     d34:	b7 95       	ror	r27
     d36:	f7 95       	ror	r31
     d38:	9e 3f       	cpi	r25, 0xFE	; 254
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <__addsf3x+0x96>
     d3c:	b3 cf       	rjmp	.-154    	; 0xca4 <__addsf3+0x1e>
     d3e:	93 95       	inc	r25
     d40:	88 0f       	add	r24, r24
     d42:	08 f0       	brcs	.+2      	; 0xd46 <__addsf3x+0x9e>
     d44:	99 27       	eor	r25, r25
     d46:	ee 0f       	add	r30, r30
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	08 95       	ret

00000d4e <__cmpsf2>:
     d4e:	d9 d0       	rcall	.+434    	; 0xf02 <__fp_cmp>
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__cmpsf2+0x6>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	08 95       	ret

00000d56 <__divsf3>:
     d56:	0c d0       	rcall	.+24     	; 0xd70 <__divsf3x>
     d58:	0f c1       	rjmp	.+542    	; 0xf78 <__fp_round>
     d5a:	07 d1       	rcall	.+526    	; 0xf6a <__fp_pscB>
     d5c:	40 f0       	brcs	.+16     	; 0xd6e <__divsf3+0x18>
     d5e:	fe d0       	rcall	.+508    	; 0xf5c <__fp_pscA>
     d60:	30 f0       	brcs	.+12     	; 0xd6e <__divsf3+0x18>
     d62:	21 f4       	brne	.+8      	; 0xd6c <__divsf3+0x16>
     d64:	5f 3f       	cpi	r21, 0xFF	; 255
     d66:	19 f0       	breq	.+6      	; 0xd6e <__divsf3+0x18>
     d68:	f0 c0       	rjmp	.+480    	; 0xf4a <__fp_inf>
     d6a:	51 11       	cpse	r21, r1
     d6c:	39 c1       	rjmp	.+626    	; 0xfe0 <__fp_szero>
     d6e:	f3 c0       	rjmp	.+486    	; 0xf56 <__fp_nan>

00000d70 <__divsf3x>:
     d70:	14 d1       	rcall	.+552    	; 0xf9a <__fp_split3>
     d72:	98 f3       	brcs	.-26     	; 0xd5a <__divsf3+0x4>

00000d74 <__divsf3_pse>:
     d74:	99 23       	and	r25, r25
     d76:	c9 f3       	breq	.-14     	; 0xd6a <__divsf3+0x14>
     d78:	55 23       	and	r21, r21
     d7a:	b1 f3       	breq	.-20     	; 0xd68 <__divsf3+0x12>
     d7c:	95 1b       	sub	r25, r21
     d7e:	55 0b       	sbc	r21, r21
     d80:	bb 27       	eor	r27, r27
     d82:	aa 27       	eor	r26, r26
     d84:	62 17       	cp	r22, r18
     d86:	73 07       	cpc	r23, r19
     d88:	84 07       	cpc	r24, r20
     d8a:	38 f0       	brcs	.+14     	; 0xd9a <__divsf3_pse+0x26>
     d8c:	9f 5f       	subi	r25, 0xFF	; 255
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	44 1f       	adc	r20, r20
     d96:	aa 1f       	adc	r26, r26
     d98:	a9 f3       	breq	.-22     	; 0xd84 <__divsf3_pse+0x10>
     d9a:	33 d0       	rcall	.+102    	; 0xe02 <__divsf3_pse+0x8e>
     d9c:	0e 2e       	mov	r0, r30
     d9e:	3a f0       	brmi	.+14     	; 0xdae <__divsf3_pse+0x3a>
     da0:	e0 e8       	ldi	r30, 0x80	; 128
     da2:	30 d0       	rcall	.+96     	; 0xe04 <__divsf3_pse+0x90>
     da4:	91 50       	subi	r25, 0x01	; 1
     da6:	50 40       	sbci	r21, 0x00	; 0
     da8:	e6 95       	lsr	r30
     daa:	00 1c       	adc	r0, r0
     dac:	ca f7       	brpl	.-14     	; 0xda0 <__divsf3_pse+0x2c>
     dae:	29 d0       	rcall	.+82     	; 0xe02 <__divsf3_pse+0x8e>
     db0:	fe 2f       	mov	r31, r30
     db2:	27 d0       	rcall	.+78     	; 0xe02 <__divsf3_pse+0x8e>
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	88 1f       	adc	r24, r24
     dba:	bb 1f       	adc	r27, r27
     dbc:	26 17       	cp	r18, r22
     dbe:	37 07       	cpc	r19, r23
     dc0:	48 07       	cpc	r20, r24
     dc2:	ab 07       	cpc	r26, r27
     dc4:	b0 e8       	ldi	r27, 0x80	; 128
     dc6:	09 f0       	breq	.+2      	; 0xdca <__divsf3_pse+0x56>
     dc8:	bb 0b       	sbc	r27, r27
     dca:	80 2d       	mov	r24, r0
     dcc:	bf 01       	movw	r22, r30
     dce:	ff 27       	eor	r31, r31
     dd0:	93 58       	subi	r25, 0x83	; 131
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	2a f0       	brmi	.+10     	; 0xde0 <__divsf3_pse+0x6c>
     dd6:	9e 3f       	cpi	r25, 0xFE	; 254
     dd8:	51 05       	cpc	r21, r1
     dda:	68 f0       	brcs	.+26     	; 0xdf6 <__divsf3_pse+0x82>
     ddc:	b6 c0       	rjmp	.+364    	; 0xf4a <__fp_inf>
     dde:	00 c1       	rjmp	.+512    	; 0xfe0 <__fp_szero>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	ec f3       	brlt	.-6      	; 0xdde <__divsf3_pse+0x6a>
     de4:	98 3e       	cpi	r25, 0xE8	; 232
     de6:	dc f3       	brlt	.-10     	; 0xdde <__divsf3_pse+0x6a>
     de8:	86 95       	lsr	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f7 95       	ror	r31
     df2:	9f 5f       	subi	r25, 0xFF	; 255
     df4:	c9 f7       	brne	.-14     	; 0xde8 <__divsf3_pse+0x74>
     df6:	88 0f       	add	r24, r24
     df8:	91 1d       	adc	r25, r1
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	97 f9       	bld	r25, 7
     e00:	08 95       	ret
     e02:	e1 e0       	ldi	r30, 0x01	; 1
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	bb 1f       	adc	r27, r27
     e0c:	62 17       	cp	r22, r18
     e0e:	73 07       	cpc	r23, r19
     e10:	84 07       	cpc	r24, r20
     e12:	ba 07       	cpc	r27, r26
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__divsf3_pse+0xaa>
     e16:	62 1b       	sub	r22, r18
     e18:	73 0b       	sbc	r23, r19
     e1a:	84 0b       	sbc	r24, r20
     e1c:	ba 0b       	sbc	r27, r26
     e1e:	ee 1f       	adc	r30, r30
     e20:	88 f7       	brcc	.-30     	; 0xe04 <__divsf3_pse+0x90>
     e22:	e0 95       	com	r30
     e24:	08 95       	ret

00000e26 <__fixsfsi>:
     e26:	04 d0       	rcall	.+8      	; 0xe30 <__fixunssfsi>
     e28:	68 94       	set
     e2a:	b1 11       	cpse	r27, r1
     e2c:	d9 c0       	rjmp	.+434    	; 0xfe0 <__fp_szero>
     e2e:	08 95       	ret

00000e30 <__fixunssfsi>:
     e30:	bc d0       	rcall	.+376    	; 0xfaa <__fp_splitA>
     e32:	88 f0       	brcs	.+34     	; 0xe56 <__fixunssfsi+0x26>
     e34:	9f 57       	subi	r25, 0x7F	; 127
     e36:	90 f0       	brcs	.+36     	; 0xe5c <__fixunssfsi+0x2c>
     e38:	b9 2f       	mov	r27, r25
     e3a:	99 27       	eor	r25, r25
     e3c:	b7 51       	subi	r27, 0x17	; 23
     e3e:	a0 f0       	brcs	.+40     	; 0xe68 <__fixunssfsi+0x38>
     e40:	d1 f0       	breq	.+52     	; 0xe76 <__fixunssfsi+0x46>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	1a f0       	brmi	.+6      	; 0xe52 <__fixunssfsi+0x22>
     e4c:	ba 95       	dec	r27
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__fixunssfsi+0x12>
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <__fixunssfsi+0x46>
     e52:	b1 30       	cpi	r27, 0x01	; 1
     e54:	81 f0       	breq	.+32     	; 0xe76 <__fixunssfsi+0x46>
     e56:	c3 d0       	rcall	.+390    	; 0xfde <__fp_zero>
     e58:	b1 e0       	ldi	r27, 0x01	; 1
     e5a:	08 95       	ret
     e5c:	c0 c0       	rjmp	.+384    	; 0xfde <__fp_zero>
     e5e:	67 2f       	mov	r22, r23
     e60:	78 2f       	mov	r23, r24
     e62:	88 27       	eor	r24, r24
     e64:	b8 5f       	subi	r27, 0xF8	; 248
     e66:	39 f0       	breq	.+14     	; 0xe76 <__fixunssfsi+0x46>
     e68:	b9 3f       	cpi	r27, 0xF9	; 249
     e6a:	cc f3       	brlt	.-14     	; 0xe5e <__fixunssfsi+0x2e>
     e6c:	86 95       	lsr	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b3 95       	inc	r27
     e74:	d9 f7       	brne	.-10     	; 0xe6c <__fixunssfsi+0x3c>
     e76:	3e f4       	brtc	.+14     	; 0xe86 <__fixunssfsi+0x56>
     e78:	90 95       	com	r25
     e7a:	80 95       	com	r24
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	8f 4f       	sbci	r24, 0xFF	; 255
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	08 95       	ret

00000e88 <__floatunsisf>:
     e88:	e8 94       	clt
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <__floatsisf+0x12>

00000e8c <__floatsisf>:
     e8c:	97 fb       	bst	r25, 7
     e8e:	3e f4       	brtc	.+14     	; 0xe9e <__floatsisf+0x12>
     e90:	90 95       	com	r25
     e92:	80 95       	com	r24
     e94:	70 95       	com	r23
     e96:	61 95       	neg	r22
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	99 23       	and	r25, r25
     ea0:	a9 f0       	breq	.+42     	; 0xecc <__floatsisf+0x40>
     ea2:	f9 2f       	mov	r31, r25
     ea4:	96 e9       	ldi	r25, 0x96	; 150
     ea6:	bb 27       	eor	r27, r27
     ea8:	93 95       	inc	r25
     eaa:	f6 95       	lsr	r31
     eac:	87 95       	ror	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f1 11       	cpse	r31, r1
     eb6:	f8 cf       	rjmp	.-16     	; 0xea8 <__floatsisf+0x1c>
     eb8:	fa f4       	brpl	.+62     	; 0xef8 <__floatsisf+0x6c>
     eba:	bb 0f       	add	r27, r27
     ebc:	11 f4       	brne	.+4      	; 0xec2 <__floatsisf+0x36>
     ebe:	60 ff       	sbrs	r22, 0
     ec0:	1b c0       	rjmp	.+54     	; 0xef8 <__floatsisf+0x6c>
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	16 c0       	rjmp	.+44     	; 0xef8 <__floatsisf+0x6c>
     ecc:	88 23       	and	r24, r24
     ece:	11 f0       	breq	.+4      	; 0xed4 <__floatsisf+0x48>
     ed0:	96 e9       	ldi	r25, 0x96	; 150
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <__floatsisf+0x6a>
     ed4:	77 23       	and	r23, r23
     ed6:	21 f0       	breq	.+8      	; 0xee0 <__floatsisf+0x54>
     ed8:	9e e8       	ldi	r25, 0x8E	; 142
     eda:	87 2f       	mov	r24, r23
     edc:	76 2f       	mov	r23, r22
     ede:	05 c0       	rjmp	.+10     	; 0xeea <__floatsisf+0x5e>
     ee0:	66 23       	and	r22, r22
     ee2:	71 f0       	breq	.+28     	; 0xf00 <__floatsisf+0x74>
     ee4:	96 e8       	ldi	r25, 0x86	; 134
     ee6:	86 2f       	mov	r24, r22
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	2a f0       	brmi	.+10     	; 0xef8 <__floatsisf+0x6c>
     eee:	9a 95       	dec	r25
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	da f7       	brpl	.-10     	; 0xeee <__floatsisf+0x62>
     ef8:	88 0f       	add	r24, r24
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	97 f9       	bld	r25, 7
     f00:	08 95       	ret

00000f02 <__fp_cmp>:
     f02:	99 0f       	add	r25, r25
     f04:	00 08       	sbc	r0, r0
     f06:	55 0f       	add	r21, r21
     f08:	aa 0b       	sbc	r26, r26
     f0a:	e0 e8       	ldi	r30, 0x80	; 128
     f0c:	fe ef       	ldi	r31, 0xFE	; 254
     f0e:	16 16       	cp	r1, r22
     f10:	17 06       	cpc	r1, r23
     f12:	e8 07       	cpc	r30, r24
     f14:	f9 07       	cpc	r31, r25
     f16:	c0 f0       	brcs	.+48     	; 0xf48 <__fp_cmp+0x46>
     f18:	12 16       	cp	r1, r18
     f1a:	13 06       	cpc	r1, r19
     f1c:	e4 07       	cpc	r30, r20
     f1e:	f5 07       	cpc	r31, r21
     f20:	98 f0       	brcs	.+38     	; 0xf48 <__fp_cmp+0x46>
     f22:	62 1b       	sub	r22, r18
     f24:	73 0b       	sbc	r23, r19
     f26:	84 0b       	sbc	r24, r20
     f28:	95 0b       	sbc	r25, r21
     f2a:	39 f4       	brne	.+14     	; 0xf3a <__fp_cmp+0x38>
     f2c:	0a 26       	eor	r0, r26
     f2e:	61 f0       	breq	.+24     	; 0xf48 <__fp_cmp+0x46>
     f30:	23 2b       	or	r18, r19
     f32:	24 2b       	or	r18, r20
     f34:	25 2b       	or	r18, r21
     f36:	21 f4       	brne	.+8      	; 0xf40 <__fp_cmp+0x3e>
     f38:	08 95       	ret
     f3a:	0a 26       	eor	r0, r26
     f3c:	09 f4       	brne	.+2      	; 0xf40 <__fp_cmp+0x3e>
     f3e:	a1 40       	sbci	r26, 0x01	; 1
     f40:	a6 95       	lsr	r26
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	81 1d       	adc	r24, r1
     f46:	81 1d       	adc	r24, r1
     f48:	08 95       	ret

00000f4a <__fp_inf>:
     f4a:	97 f9       	bld	r25, 7
     f4c:	9f 67       	ori	r25, 0x7F	; 127
     f4e:	80 e8       	ldi	r24, 0x80	; 128
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	08 95       	ret

00000f56 <__fp_nan>:
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	80 ec       	ldi	r24, 0xC0	; 192
     f5a:	08 95       	ret

00000f5c <__fp_pscA>:
     f5c:	00 24       	eor	r0, r0
     f5e:	0a 94       	dec	r0
     f60:	16 16       	cp	r1, r22
     f62:	17 06       	cpc	r1, r23
     f64:	18 06       	cpc	r1, r24
     f66:	09 06       	cpc	r0, r25
     f68:	08 95       	ret

00000f6a <__fp_pscB>:
     f6a:	00 24       	eor	r0, r0
     f6c:	0a 94       	dec	r0
     f6e:	12 16       	cp	r1, r18
     f70:	13 06       	cpc	r1, r19
     f72:	14 06       	cpc	r1, r20
     f74:	05 06       	cpc	r0, r21
     f76:	08 95       	ret

00000f78 <__fp_round>:
     f78:	09 2e       	mov	r0, r25
     f7a:	03 94       	inc	r0
     f7c:	00 0c       	add	r0, r0
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__fp_round+0xc>
     f80:	88 23       	and	r24, r24
     f82:	52 f0       	brmi	.+20     	; 0xf98 <__fp_round+0x20>
     f84:	bb 0f       	add	r27, r27
     f86:	40 f4       	brcc	.+16     	; 0xf98 <__fp_round+0x20>
     f88:	bf 2b       	or	r27, r31
     f8a:	11 f4       	brne	.+4      	; 0xf90 <__fp_round+0x18>
     f8c:	60 ff       	sbrs	r22, 0
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <__fp_round+0x20>
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	08 95       	ret

00000f9a <__fp_split3>:
     f9a:	57 fd       	sbrc	r21, 7
     f9c:	90 58       	subi	r25, 0x80	; 128
     f9e:	44 0f       	add	r20, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	59 f0       	breq	.+22     	; 0xfba <__fp_splitA+0x10>
     fa4:	5f 3f       	cpi	r21, 0xFF	; 255
     fa6:	71 f0       	breq	.+28     	; 0xfc4 <__fp_splitA+0x1a>
     fa8:	47 95       	ror	r20

00000faa <__fp_splitA>:
     faa:	88 0f       	add	r24, r24
     fac:	97 fb       	bst	r25, 7
     fae:	99 1f       	adc	r25, r25
     fb0:	61 f0       	breq	.+24     	; 0xfca <__fp_splitA+0x20>
     fb2:	9f 3f       	cpi	r25, 0xFF	; 255
     fb4:	79 f0       	breq	.+30     	; 0xfd4 <__fp_splitA+0x2a>
     fb6:	87 95       	ror	r24
     fb8:	08 95       	ret
     fba:	12 16       	cp	r1, r18
     fbc:	13 06       	cpc	r1, r19
     fbe:	14 06       	cpc	r1, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	f2 cf       	rjmp	.-28     	; 0xfa8 <__fp_split3+0xe>
     fc4:	46 95       	lsr	r20
     fc6:	f1 df       	rcall	.-30     	; 0xfaa <__fp_splitA>
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <__fp_splitA+0x30>
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	18 06       	cpc	r1, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	f1 cf       	rjmp	.-30     	; 0xfb6 <__fp_splitA+0xc>
     fd4:	86 95       	lsr	r24
     fd6:	71 05       	cpc	r23, r1
     fd8:	61 05       	cpc	r22, r1
     fda:	08 94       	sec
     fdc:	08 95       	ret

00000fde <__fp_zero>:
     fde:	e8 94       	clt

00000fe0 <__fp_szero>:
     fe0:	bb 27       	eor	r27, r27
     fe2:	66 27       	eor	r22, r22
     fe4:	77 27       	eor	r23, r23
     fe6:	cb 01       	movw	r24, r22
     fe8:	97 f9       	bld	r25, 7
     fea:	08 95       	ret

00000fec <__gesf2>:
     fec:	8a df       	rcall	.-236    	; 0xf02 <__fp_cmp>
     fee:	08 f4       	brcc	.+2      	; 0xff2 <__gesf2+0x6>
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	08 95       	ret

00000ff4 <__mulsf3>:
     ff4:	0b d0       	rcall	.+22     	; 0x100c <__mulsf3x>
     ff6:	c0 cf       	rjmp	.-128    	; 0xf78 <__fp_round>
     ff8:	b1 df       	rcall	.-158    	; 0xf5c <__fp_pscA>
     ffa:	28 f0       	brcs	.+10     	; 0x1006 <__mulsf3+0x12>
     ffc:	b6 df       	rcall	.-148    	; 0xf6a <__fp_pscB>
     ffe:	18 f0       	brcs	.+6      	; 0x1006 <__mulsf3+0x12>
    1000:	95 23       	and	r25, r21
    1002:	09 f0       	breq	.+2      	; 0x1006 <__mulsf3+0x12>
    1004:	a2 cf       	rjmp	.-188    	; 0xf4a <__fp_inf>
    1006:	a7 cf       	rjmp	.-178    	; 0xf56 <__fp_nan>
    1008:	11 24       	eor	r1, r1
    100a:	ea cf       	rjmp	.-44     	; 0xfe0 <__fp_szero>

0000100c <__mulsf3x>:
    100c:	c6 df       	rcall	.-116    	; 0xf9a <__fp_split3>
    100e:	a0 f3       	brcs	.-24     	; 0xff8 <__mulsf3+0x4>

00001010 <__mulsf3_pse>:
    1010:	95 9f       	mul	r25, r21
    1012:	d1 f3       	breq	.-12     	; 0x1008 <__mulsf3+0x14>
    1014:	95 0f       	add	r25, r21
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	55 1f       	adc	r21, r21
    101a:	62 9f       	mul	r22, r18
    101c:	f0 01       	movw	r30, r0
    101e:	72 9f       	mul	r23, r18
    1020:	bb 27       	eor	r27, r27
    1022:	f0 0d       	add	r31, r0
    1024:	b1 1d       	adc	r27, r1
    1026:	63 9f       	mul	r22, r19
    1028:	aa 27       	eor	r26, r26
    102a:	f0 0d       	add	r31, r0
    102c:	b1 1d       	adc	r27, r1
    102e:	aa 1f       	adc	r26, r26
    1030:	64 9f       	mul	r22, r20
    1032:	66 27       	eor	r22, r22
    1034:	b0 0d       	add	r27, r0
    1036:	a1 1d       	adc	r26, r1
    1038:	66 1f       	adc	r22, r22
    103a:	82 9f       	mul	r24, r18
    103c:	22 27       	eor	r18, r18
    103e:	b0 0d       	add	r27, r0
    1040:	a1 1d       	adc	r26, r1
    1042:	62 1f       	adc	r22, r18
    1044:	73 9f       	mul	r23, r19
    1046:	b0 0d       	add	r27, r0
    1048:	a1 1d       	adc	r26, r1
    104a:	62 1f       	adc	r22, r18
    104c:	83 9f       	mul	r24, r19
    104e:	a0 0d       	add	r26, r0
    1050:	61 1d       	adc	r22, r1
    1052:	22 1f       	adc	r18, r18
    1054:	74 9f       	mul	r23, r20
    1056:	33 27       	eor	r19, r19
    1058:	a0 0d       	add	r26, r0
    105a:	61 1d       	adc	r22, r1
    105c:	23 1f       	adc	r18, r19
    105e:	84 9f       	mul	r24, r20
    1060:	60 0d       	add	r22, r0
    1062:	21 1d       	adc	r18, r1
    1064:	82 2f       	mov	r24, r18
    1066:	76 2f       	mov	r23, r22
    1068:	6a 2f       	mov	r22, r26
    106a:	11 24       	eor	r1, r1
    106c:	9f 57       	subi	r25, 0x7F	; 127
    106e:	50 40       	sbci	r21, 0x00	; 0
    1070:	8a f0       	brmi	.+34     	; 0x1094 <__mulsf3_pse+0x84>
    1072:	e1 f0       	breq	.+56     	; 0x10ac <__mulsf3_pse+0x9c>
    1074:	88 23       	and	r24, r24
    1076:	4a f0       	brmi	.+18     	; 0x108a <__mulsf3_pse+0x7a>
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	bb 1f       	adc	r27, r27
    107e:	66 1f       	adc	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	88 1f       	adc	r24, r24
    1084:	91 50       	subi	r25, 0x01	; 1
    1086:	50 40       	sbci	r21, 0x00	; 0
    1088:	a9 f7       	brne	.-22     	; 0x1074 <__mulsf3_pse+0x64>
    108a:	9e 3f       	cpi	r25, 0xFE	; 254
    108c:	51 05       	cpc	r21, r1
    108e:	70 f0       	brcs	.+28     	; 0x10ac <__mulsf3_pse+0x9c>
    1090:	5c cf       	rjmp	.-328    	; 0xf4a <__fp_inf>
    1092:	a6 cf       	rjmp	.-180    	; 0xfe0 <__fp_szero>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	ec f3       	brlt	.-6      	; 0x1092 <__mulsf3_pse+0x82>
    1098:	98 3e       	cpi	r25, 0xE8	; 232
    109a:	dc f3       	brlt	.-10     	; 0x1092 <__mulsf3_pse+0x82>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	e7 95       	ror	r30
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	c1 f7       	brne	.-16     	; 0x109c <__mulsf3_pse+0x8c>
    10ac:	fe 2b       	or	r31, r30
    10ae:	88 0f       	add	r24, r24
    10b0:	91 1d       	adc	r25, r1
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	97 f9       	bld	r25, 7
    10b8:	08 95       	ret

000010ba <_exit>:
    10ba:	f8 94       	cli

000010bc <__stop_program>:
    10bc:	ff cf       	rjmp	.-2      	; 0x10bc <__stop_program>
