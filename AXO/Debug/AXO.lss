
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00001060  000010f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800158  00800158  0000114c  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012c  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000498  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029b  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a94  00000000  00000000  00001a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000204  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042d  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002c41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
void turnOffSleep()
//TODO: запретить прерывание INT1
{
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
       6:	00 00       	nop
       8:	0c c1       	rjmp	.+536    	; 0x222 <__vector_2>
       a:	00 00       	nop
       c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
       e:	00 00       	nop
      10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
      12:	00 00       	nop
      14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
      16:	00 00       	nop
      18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
      1e:	00 00       	nop
      20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
      22:	00 00       	nop
      24:	d4 c0       	rjmp	.+424    	; 0x1ce <__vector_9>
      26:	00 00       	nop
      28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
      2e:	00 00       	nop
      30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
      32:	00 00       	nop
      34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__vector_14>
      3a:	00 00       	nop
      3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
      3e:	00 00       	nop
      40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
      42:	00 00       	nop
      44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
      46:	00 00       	nop
      48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
      4e:	00 00       	nop
      50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c0       	rjmp	.+74     	; 0xa0 <__vector_21>
      56:	00 00       	nop
      58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
      5e:	00 00       	nop
      60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
      62:	00 00       	nop
      64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e6       	ldi	r30, 0x60	; 96
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 35       	cpi	r26, 0x58	; 88
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e5       	ldi	r26, 0x58	; 88
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 36       	cpi	r26, 0x61	; 97
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	72 d3       	rcall	.+1764   	; 0x780 <main>
      9c:	df c7       	rjmp	.+4030   	; 0x105c <_exit>

0000009e <__bad_interrupt>:
      9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){                                                      //TODO: должен будить процессор в режиме P-save
      a0:	1f 92       	push	r1
      a2:	0f 92       	push	r0
      a4:	0f b6       	in	r0, 0x3f	; 63
      a6:	0f 92       	push	r0
      a8:	11 24       	eor	r1, r1
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	0f 93       	push	r16
      b0:	1f 93       	push	r17
      b2:	2f 93       	push	r18
      b4:	3f 93       	push	r19
      b6:	4f 93       	push	r20
      b8:	5f 93       	push	r21
      ba:	6f 93       	push	r22
      bc:	7f 93       	push	r23
      be:	8f 93       	push	r24
      c0:	9f 93       	push	r25
      c2:	af 93       	push	r26
      c4:	bf 93       	push	r27
      c6:	ef 93       	push	r30
      c8:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
      ca:	60 91 79 00 	lds	r22, 0x0079
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	66 0f       	add	r22, r22
      d2:	77 1f       	adc	r23, r23
      d4:	66 0f       	add	r22, r22
      d6:	77 1f       	adc	r23, r23
      d8:	88 27       	eor	r24, r24
      da:	77 fd       	sbrc	r23, 7
      dc:	80 95       	com	r24
      de:	98 2f       	mov	r25, r24
      e0:	a6 d6       	rcall	.+3404   	; 0xe2e <__floatsisf>
      e2:	2c e5       	ldi	r18, 0x5C	; 92
      e4:	3f e8       	ldi	r19, 0x8F	; 143
      e6:	42 e4       	ldi	r20, 0x42	; 66
      e8:	5e e3       	ldi	r21, 0x3E	; 62
      ea:	55 d7       	rcall	.+3754   	; 0xf96 <__mulsf3>
      ec:	60 93 5d 01 	sts	0x015D, r22
      f0:	70 93 5e 01 	sts	0x015E, r23
      f4:	80 93 5f 01 	sts	0x015F, r24
      f8:	90 93 60 01 	sts	0x0160, r25
    if (temperatureValue >= (targetTemp + Tolerance))
      fc:	60 91 12 01 	lds	r22, 0x0112
     100:	70 91 13 01 	lds	r23, 0x0113
     104:	80 91 14 01 	lds	r24, 0x0114
     108:	90 91 15 01 	lds	r25, 0x0115
     10c:	20 91 58 01 	lds	r18, 0x0158
     110:	30 91 59 01 	lds	r19, 0x0159
     114:	40 91 5a 01 	lds	r20, 0x015A
     118:	50 91 5b 01 	lds	r21, 0x015B
     11c:	e0 90 5d 01 	lds	r14, 0x015D
     120:	f0 90 5e 01 	lds	r15, 0x015E
     124:	00 91 5f 01 	lds	r16, 0x015F
     128:	10 91 60 01 	lds	r17, 0x0160
     12c:	7d d5       	rcall	.+2810   	; 0xc28 <__addsf3>
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	de d5       	rcall	.+3004   	; 0xcf0 <__cmpsf2>
     134:	18 16       	cp	r1, r24
     136:	94 f0       	brlt	.+36     	; 0x15c <__vector_21+0xbc>
volatile static uint8_t measureRate= 0x80; // поумолчанию - частота замера (F_CPU/1024)/2
uint8_t progFlags= 0b00000100;

inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
     138:	90 91 11 01 	lds	r25, 0x0111
     13c:	89 2f       	mov	r24, r25
     13e:	86 95       	lsr	r24
     140:	86 95       	lsr	r24
     142:	86 95       	lsr	r24
     144:	80 fd       	sbrc	r24, 0
     146:	2e c0       	rjmp	.+92     	; 0x1a4 <__vector_21+0x104>
    {
	    BIT_ON(CONTROL_PORT, LOAD);
     148:	eb e2       	ldi	r30, 0x2B	; 43
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	80 64       	ori	r24, 0x40	; 64
     150:	80 83       	st	Z, r24
        BIT_ON(progFlags, COOLING);
     152:	89 2f       	mov	r24, r25
     154:	88 60       	ori	r24, 0x08	; 8
     156:	80 93 11 01 	sts	0x0111, r24
     15a:	24 c0       	rjmp	.+72     	; 0x1a4 <__vector_21+0x104>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
     15c:	60 91 5d 01 	lds	r22, 0x015D
     160:	70 91 5e 01 	lds	r23, 0x015E
     164:	80 91 5f 01 	lds	r24, 0x015F
     168:	90 91 60 01 	lds	r25, 0x0160
     16c:	20 91 12 01 	lds	r18, 0x0112
     170:	30 91 13 01 	lds	r19, 0x0113
     174:	40 91 14 01 	lds	r20, 0x0114
     178:	50 91 15 01 	lds	r21, 0x0115
     17c:	b9 d5       	rcall	.+2930   	; 0xcf0 <__cmpsf2>
     17e:	18 16       	cp	r1, r24
     180:	8c f0       	brlt	.+34     	; 0x1a4 <__vector_21+0x104>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
     182:	90 91 11 01 	lds	r25, 0x0111
     186:	89 2f       	mov	r24, r25
     188:	86 95       	lsr	r24
     18a:	86 95       	lsr	r24
     18c:	86 95       	lsr	r24
     18e:	80 ff       	sbrs	r24, 0
     190:	09 c0       	rjmp	.+18     	; 0x1a4 <__vector_21+0x104>
    {
	    BIT_OFF(CONTROL_PORT, LOAD);
     192:	eb e2       	ldi	r30, 0x2B	; 43
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	8f 7b       	andi	r24, 0xBF	; 191
     19a:	80 83       	st	Z, r24
        BIT_OFF(progFlags, COOLING);
     19c:	89 2f       	mov	r24, r25
     19e:	87 7f       	andi	r24, 0xF7	; 247
     1a0:	80 93 11 01 	sts	0x0111, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	bf 91       	pop	r27
     1aa:	af 91       	pop	r26
     1ac:	9f 91       	pop	r25
     1ae:	8f 91       	pop	r24
     1b0:	7f 91       	pop	r23
     1b2:	6f 91       	pop	r22
     1b4:	5f 91       	pop	r21
     1b6:	4f 91       	pop	r20
     1b8:	3f 91       	pop	r19
     1ba:	2f 91       	pop	r18
     1bc:	1f 91       	pop	r17
     1be:	0f 91       	pop	r16
     1c0:	ff 90       	pop	r15
     1c2:	ef 90       	pop	r14
     1c4:	0f 90       	pop	r0
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	0f 90       	pop	r0
     1ca:	1f 90       	pop	r1
     1cc:	18 95       	reti

000001ce <__vector_9>:

ISR(TIMER2_OVF_vect){                                               //TODO: должен будить процессор в режиме P-save
     1ce:	1f 92       	push	r1
     1d0:	0f 92       	push	r0
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	8f 93       	push	r24
     1da:	9f 93       	push	r25
    runSeconds++;
     1dc:	80 91 5c 01 	lds	r24, 0x015C
     1e0:	8f 5f       	subi	r24, 0xFF	; 255
     1e2:	80 93 5c 01 	sts	0x015C, r24
    if (runSeconds==timeOut)
     1e6:	90 91 5c 01 	lds	r25, 0x015C
     1ea:	80 91 10 01 	lds	r24, 0x0110
     1ee:	98 17       	cp	r25, r24
     1f0:	39 f4       	brne	.+14     	; 0x200 <__vector_9+0x32>
    {
        runSeconds= 0; // сбрасываем счетчик секунд
     1f2:	10 92 5c 01 	sts	0x015C, r1
        BIT_ON(progFlags, INACTIVE);
     1f6:	80 91 11 01 	lds	r24, 0x0111
     1fa:	80 61       	ori	r24, 0x10	; 16
     1fc:	80 93 11 01 	sts	0x0111, r24
    }
    return;
}
     200:	9f 91       	pop	r25
     202:	8f 91       	pop	r24
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <__vector_14>:

ISR(TIMER0_COMPA_vect){                                             //TODO: должен будить процессор в режиме P-save
     20e:	1f 92       	push	r1
     210:	0f 92       	push	r0
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	0f 92       	push	r0
     216:	11 24       	eor	r1, r1
    return;
}
     218:	0f 90       	pop	r0
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	0f 90       	pop	r0
     21e:	1f 90       	pop	r1
     220:	18 95       	reti

00000222 <__vector_2>:

ISR(INT1_vect){                                                     //TODO: должен будить процессор в режиме P-save
     222:	1f 92       	push	r1
     224:	0f 92       	push	r0
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	0f 92       	push	r0
     22a:	11 24       	eor	r1, r1
     22c:	2f 93       	push	r18
     22e:	3f 93       	push	r19
     230:	4f 93       	push	r20
     232:	5f 93       	push	r21
     234:	6f 93       	push	r22
     236:	7f 93       	push	r23
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25
     23c:	af 93       	push	r26
     23e:	bf 93       	push	r27
     240:	ef 93       	push	r30
     242:	ff 93       	push	r31
    turnOffSleep();
    BIT_ON(progFlags, LCD_ON);
     244:	80 91 11 01 	lds	r24, 0x0111
     248:	81 60       	ori	r24, 0x01	; 1
     24a:	80 93 11 01 	sts	0x0111, r24
    LCD_turnOn();
     24e:	26 d4       	rcall	.+2124   	; 0xa9c <LCD_turnOn>
     250:	ff 91       	pop	r31
     252:	ef 91       	pop	r30
     254:	bf 91       	pop	r27
     256:	af 91       	pop	r26
     258:	9f 91       	pop	r25
     25a:	8f 91       	pop	r24
     25c:	7f 91       	pop	r23
     25e:	6f 91       	pop	r22
     260:	5f 91       	pop	r21
     262:	4f 91       	pop	r20
     264:	3f 91       	pop	r19
     266:	2f 91       	pop	r18
     268:	0f 90       	pop	r0
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	0f 90       	pop	r0
     26e:	1f 90       	pop	r1
     270:	18 95       	reti

00000272 <LCD_DisplayAll>:
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}

void LCD_DisplayAll()
{   
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
	LCD_Write("TEMP :", 0, 0);
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	9d d4       	rcall	.+2362   	; 0xbbe <LCD_Write>
    LCD_Write((char)temperatureValue, 0, 8);
     284:	60 91 5d 01 	lds	r22, 0x015D
     288:	70 91 5e 01 	lds	r23, 0x015E
     28c:	80 91 5f 01 	lds	r24, 0x015F
     290:	90 91 60 01 	lds	r25, 0x0160
     294:	9e d5       	rcall	.+2876   	; 0xdd2 <__fixunssfsi>
     296:	dc 01       	movw	r26, r24
     298:	cb 01       	movw	r24, r22
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	48 e0       	ldi	r20, 0x08	; 8
     2a0:	8e d4       	rcall	.+2332   	; 0xbbe <LCD_Write>
    if (BIT_READ(progFlags, COOLING))
     2a2:	80 91 11 01 	lds	r24, 0x0111
     2a6:	86 95       	lsr	r24
     2a8:	86 95       	lsr	r24
     2aa:	86 95       	lsr	r24
     2ac:	80 ff       	sbrs	r24, 0
     2ae:	2b c0       	rjmp	.+86     	; 0x306 <LCD_DisplayAll+0x94>
    {
        LCD_Write("COOLING ", 1, 0);
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	82 d4       	rcall	.+2308   	; 0xbbe <LCD_Write>
        LCD_Write((char)((temperatureValue - targetTemp)/Tolerance)*100, 1, 8);
     2ba:	60 91 5d 01 	lds	r22, 0x015D
     2be:	70 91 5e 01 	lds	r23, 0x015E
     2c2:	80 91 5f 01 	lds	r24, 0x015F
     2c6:	90 91 60 01 	lds	r25, 0x0160
     2ca:	20 91 12 01 	lds	r18, 0x0112
     2ce:	30 91 13 01 	lds	r19, 0x0113
     2d2:	40 91 14 01 	lds	r20, 0x0114
     2d6:	50 91 15 01 	lds	r21, 0x0115
     2da:	e0 90 58 01 	lds	r14, 0x0158
     2de:	f0 90 59 01 	lds	r15, 0x0159
     2e2:	00 91 5a 01 	lds	r16, 0x015A
     2e6:	10 91 5b 01 	lds	r17, 0x015B
     2ea:	9d d4       	rcall	.+2362   	; 0xc26 <__subsf3>
     2ec:	a8 01       	movw	r20, r16
     2ee:	97 01       	movw	r18, r14
     2f0:	03 d5       	rcall	.+2566   	; 0xcf8 <__divsf3>
     2f2:	6f d5       	rcall	.+2782   	; 0xdd2 <__fixunssfsi>
     2f4:	9b 01       	movw	r18, r22
     2f6:	ac 01       	movw	r20, r24
     2f8:	84 e6       	ldi	r24, 0x64	; 100
     2fa:	28 9f       	mul	r18, r24
     2fc:	c0 01       	movw	r24, r0
     2fe:	11 24       	eor	r1, r1
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	48 e0       	ldi	r20, 0x08	; 8
     304:	5c d4       	rcall	.+2232   	; 0xbbe <LCD_Write>
    }
}
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	08 95       	ret

00000310 <menuRun>:

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()

{
     310:	2f 92       	push	r2
     312:	3f 92       	push	r3
     314:	4f 92       	push	r4
     316:	5f 92       	push	r5
     318:	6f 92       	push	r6
     31a:	7f 92       	push	r7
     31c:	8f 92       	push	r8
     31e:	9f 92       	push	r9
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	c9 54       	subi	r28, 0x49	; 73
     33a:	d0 40       	sbci	r29, 0x00	; 0
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
     346:	de 01       	movw	r26, r28
     348:	11 96       	adiw	r26, 0x01	; 1
     34a:	e7 e1       	ldi	r30, 0x17	; 23
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	80 e4       	ldi	r24, 0x40	; 64
     350:	01 90       	ld	r0, Z+
     352:	0d 92       	st	X+, r0
     354:	81 50       	subi	r24, 0x01	; 1
     356:	e1 f7       	brne	.-8      	; 0x350 <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
     358:	60 91 12 01 	lds	r22, 0x0112
     35c:	70 91 13 01 	lds	r23, 0x0113
     360:	80 91 14 01 	lds	r24, 0x0114
     364:	90 91 15 01 	lds	r25, 0x0115
     368:	c0 90 58 01 	lds	r12, 0x0158
     36c:	d0 90 59 01 	lds	r13, 0x0159
     370:	e0 90 5a 01 	lds	r14, 0x015A
     374:	f0 90 5b 01 	lds	r15, 0x015B
     378:	b0 90 16 01 	lds	r11, 0x0116
     37c:	00 91 11 01 	lds	r16, 0x0111
     380:	06 95       	lsr	r16
     382:	06 95       	lsr	r16
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	01 70       	andi	r16, 0x01	; 1
     388:	10 70       	andi	r17, 0x00	; 0
     38a:	1e d5       	rcall	.+2620   	; 0xdc8 <__fixsfsi>
     38c:	fe 01       	movw	r30, r28
     38e:	ef 5b       	subi	r30, 0xBF	; 191
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	71 83       	std	Z+1, r23	; 0x01
     394:	60 83       	st	Z, r22
     396:	c7 01       	movw	r24, r14
     398:	b6 01       	movw	r22, r12
     39a:	16 d5       	rcall	.+2604   	; 0xdc8 <__fixsfsi>
     39c:	fe 01       	movw	r30, r28
     39e:	ed 5b       	subi	r30, 0xBD	; 189
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	71 83       	std	Z+1, r23	; 0x01
     3a4:	60 83       	st	Z, r22
     3a6:	fe 01       	movw	r30, r28
     3a8:	eb 5b       	subi	r30, 0xBB	; 187
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	b0 82       	st	Z, r11
     3ae:	11 82       	std	Z+1, r1	; 0x01
     3b0:	fe 01       	movw	r30, r28
     3b2:	e9 5b       	subi	r30, 0xB9	; 185
     3b4:	ff 4f       	sbci	r31, 0xFF	; 255
     3b6:	11 83       	std	Z+1, r17	; 0x01
     3b8:	00 83       	st	Z, r16
    LCD_Clear();
     3ba:	eb d2       	rcall	.+1494   	; 0x992 <LCD_Clear>
     3bc:	cc 24       	eor	r12, r12
     3be:	dd 24       	eor	r13, r13
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     3c0:	0f 2e       	mov	r0, r31
     3c2:	fb e2       	ldi	r31, 0x2B	; 43
     3c4:	af 2e       	mov	r10, r31
     3c6:	bb 24       	eor	r11, r11
     3c8:	f0 2d       	mov	r31, r0
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
     3ca:	0f 2e       	mov	r0, r31
     3cc:	f1 e4       	ldi	r31, 0x41	; 65
     3ce:	4f 2e       	mov	r4, r31
     3d0:	55 24       	eor	r5, r5
     3d2:	f0 2d       	mov	r31, r0
     3d4:	4c 0e       	add	r4, r28
     3d6:	5d 1e       	adc	r5, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	68 2e       	mov	r6, r24
     3de:	2a 96       	adiw	r28, 0x0a	; 10
     3e0:	9f af       	std	Y+63, r25	; 0x3f
     3e2:	2a 97       	sbiw	r28, 0x0a	; 10
     3e4:	a5 c1       	rjmp	.+842    	; 0x730 <__stack+0x231>
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
     3e6:	f5 01       	movw	r30, r10
     3e8:	80 81       	ld	r24, Z
     3ea:	83 fd       	sbrc	r24, 3
     3ec:	52 c1       	rjmp	.+676    	; 0x692 <__stack+0x193>
            BIT_OFF(progFlags, INACTIVE);
     3ee:	0f 2e       	mov	r0, r31
     3f0:	ff ee       	ldi	r31, 0xEF	; 239
     3f2:	7f 2e       	mov	r7, r31
     3f4:	f0 2d       	mov	r31, r0
     3f6:	79 22       	and	r7, r25
     3f8:	70 92 11 01 	sts	0x0111, r7
            int value= values[pos];
     3fc:	c6 01       	movw	r24, r12
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	f2 01       	movw	r30, r4
     404:	e8 0f       	add	r30, r24
     406:	f9 1f       	adc	r31, r25
     408:	20 80       	ld	r2, Z
     40a:	31 80       	ldd	r3, Z+1	; 0x01
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     40c:	4f 01       	movw	r8, r30
     40e:	3b c1       	rjmp	.+630    	; 0x686 <__stack+0x187>
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     410:	f5 01       	movw	r30, r10
     412:	80 81       	ld	r24, Z
     414:	85 fd       	sbrc	r24, 5
     416:	8a c0       	rjmp	.+276    	; 0x52c <__stack+0x2d>
                {
                    BIT_OFF(progFlags, INACTIVE);
     418:	ff ee       	ldi	r31, 0xEF	; 239
     41a:	7f 22       	and	r7, r31
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     41c:	f4 01       	movw	r30, r8
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	9c 01       	movw	r18, r24
     424:	2f 5f       	subi	r18, 0xFF	; 255
     426:	3f 4f       	sbci	r19, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	cf 16       	cp	r12, r31
     42c:	d1 04       	cpc	r13, r1
     42e:	c1 f1       	breq	.+112    	; 0x4a0 <menuRun+0x190>
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	c8 16       	cp	r12, r24
     434:	d1 04       	cpc	r13, r1
     436:	34 f4       	brge	.+12     	; 0x444 <menuRun+0x134>
     438:	e1 e0       	ldi	r30, 0x01	; 1
     43a:	ce 16       	cp	r12, r30
     43c:	d1 04       	cpc	r13, r1
     43e:	09 f0       	breq	.+2      	; 0x442 <menuRun+0x132>
     440:	6c c0       	rjmp	.+216    	; 0x51a <__stack+0x1b>
     442:	0b c0       	rjmp	.+22     	; 0x45a <menuRun+0x14a>
     444:	f3 e0       	ldi	r31, 0x03	; 3
     446:	cf 16       	cp	r12, r31
     448:	d1 04       	cpc	r13, r1
     44a:	09 f4       	brne	.+2      	; 0x44e <menuRun+0x13e>
     44c:	49 c0       	rjmp	.+146    	; 0x4e0 <menuRun+0x1d0>
     44e:	84 e0       	ldi	r24, 0x04	; 4
     450:	c8 16       	cp	r12, r24
     452:	d1 04       	cpc	r13, r1
     454:	09 f0       	breq	.+2      	; 0x458 <menuRun+0x148>
     456:	61 c0       	rjmp	.+194    	; 0x51a <__stack+0x1b>
     458:	4d c0       	rjmp	.+154    	; 0x4f4 <menuRun+0x1e4>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     45a:	b9 01       	movw	r22, r18
     45c:	88 27       	eor	r24, r24
     45e:	77 fd       	sbrc	r23, 7
     460:	80 95       	com	r24
     462:	98 2f       	mov	r25, r24
     464:	e4 d4       	rcall	.+2504   	; 0xe2e <__floatsisf>
     466:	7b 01       	movw	r14, r22
     468:	8c 01       	movw	r16, r24
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	40 e7       	ldi	r20, 0x70	; 112
     470:	51 e4       	ldi	r21, 0x41	; 65
     472:	3e d4       	rcall	.+2172   	; 0xcf0 <__cmpsf2>
     474:	88 23       	and	r24, r24
     476:	1c f4       	brge	.+6      	; 0x47e <menuRun+0x16e>
     478:	8f e0       	ldi	r24, 0x0F	; 15
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	54 c0       	rjmp	.+168    	; 0x526 <__stack+0x27>
     47e:	c8 01       	movw	r24, r16
     480:	b7 01       	movw	r22, r14
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 ea       	ldi	r20, 0xA0	; 160
     488:	51 e4       	ldi	r21, 0x41	; 65
     48a:	81 d5       	rcall	.+2818   	; 0xf8e <__gesf2>
     48c:	18 16       	cp	r1, r24
     48e:	1c f4       	brge	.+6      	; 0x496 <menuRun+0x186>
     490:	84 e1       	ldi	r24, 0x14	; 20
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	48 c0       	rjmp	.+144    	; 0x526 <__stack+0x27>
     496:	c8 01       	movw	r24, r16
     498:	b7 01       	movw	r22, r14
     49a:	96 d4       	rcall	.+2348   	; 0xdc8 <__fixsfsi>
     49c:	cb 01       	movw	r24, r22
     49e:	43 c0       	rjmp	.+134    	; 0x526 <__stack+0x27>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     4a0:	b9 01       	movw	r22, r18
     4a2:	88 27       	eor	r24, r24
     4a4:	77 fd       	sbrc	r23, 7
     4a6:	80 95       	com	r24
     4a8:	98 2f       	mov	r25, r24
     4aa:	c1 d4       	rcall	.+2434   	; 0xe2e <__floatsisf>
     4ac:	7b 01       	movw	r14, r22
     4ae:	8c 01       	movw	r16, r24
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	1b d4       	rcall	.+2102   	; 0xcf0 <__cmpsf2>
     4ba:	88 23       	and	r24, r24
     4bc:	84 f1       	brlt	.+96     	; 0x51e <__stack+0x1f>
     4be:	c8 01       	movw	r24, r16
     4c0:	b7 01       	movw	r22, r14
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e8       	ldi	r20, 0x80	; 128
     4c8:	5f e3       	ldi	r21, 0x3F	; 63
     4ca:	61 d5       	rcall	.+2754   	; 0xf8e <__gesf2>
     4cc:	18 16       	cp	r1, r24
     4ce:	1c f4       	brge	.+6      	; 0x4d6 <menuRun+0x1c6>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	28 c0       	rjmp	.+80     	; 0x526 <__stack+0x27>
     4d6:	c8 01       	movw	r24, r16
     4d8:	b7 01       	movw	r22, r14
     4da:	76 d4       	rcall	.+2284   	; 0xdc8 <__fixsfsi>
     4dc:	cb 01       	movw	r24, r22
     4de:	23 c0       	rjmp	.+70     	; 0x526 <__stack+0x27>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     4e0:	33 23       	and	r19, r19
     4e2:	1c f4       	brge	.+6      	; 0x4ea <menuRun+0x1da>
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	1e c0       	rjmp	.+60     	; 0x526 <__stack+0x27>
     4ea:	e4 e0       	ldi	r30, 0x04	; 4
     4ec:	20 30       	cpi	r18, 0x00	; 0
     4ee:	3e 07       	cpc	r19, r30
     4f0:	a4 f0       	brlt	.+40     	; 0x51a <__stack+0x1b>
     4f2:	15 c0       	rjmp	.+42     	; 0x51e <__stack+0x1f>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     4f4:	c9 01       	movw	r24, r18
     4f6:	52 2f       	mov	r21, r18
     4f8:	49 2f       	mov	r20, r25
     4fa:	12 16       	cp	r1, r18
     4fc:	13 06       	cpc	r1, r19
     4fe:	24 f4       	brge	.+8      	; 0x508 <__stack+0x9>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	58 2f       	mov	r21, r24
     506:	49 2f       	mov	r20, r25
     508:	85 2f       	mov	r24, r21
     50a:	94 2f       	mov	r25, r20
     50c:	99 23       	and	r25, r25
     50e:	5c f4       	brge	.+22     	; 0x526 <__stack+0x27>
     510:	86 2d       	mov	r24, r6
     512:	2a 96       	adiw	r28, 0x0a	; 10
     514:	9f ad       	ldd	r25, Y+63	; 0x3f
     516:	2a 97       	sbiw	r28, 0x0a	; 10
     518:	06 c0       	rjmp	.+12     	; 0x526 <__stack+0x27>
     51a:	c9 01       	movw	r24, r18
     51c:	04 c0       	rjmp	.+8      	; 0x526 <__stack+0x27>
     51e:	86 2d       	mov	r24, r6
     520:	2a 96       	adiw	r28, 0x0a	; 10
     522:	9f ad       	ldd	r25, Y+63	; 0x3f
     524:	2a 97       	sbiw	r28, 0x0a	; 10
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     526:	f4 01       	movw	r30, r8
     528:	91 83       	std	Z+1, r25	; 0x01
     52a:	80 83       	st	Z, r24
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     52c:	f5 01       	movw	r30, r10
     52e:	80 81       	ld	r24, Z
     530:	84 fd       	sbrc	r24, 4
     532:	8a c0       	rjmp	.+276    	; 0x648 <__stack+0x149>
                {
                    BIT_OFF(progFlags, INACTIVE);
     534:	ff ee       	ldi	r31, 0xEF	; 239
     536:	7f 22       	and	r7, r31
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     538:	f4 01       	movw	r30, r8
     53a:	80 81       	ld	r24, Z
     53c:	91 81       	ldd	r25, Z+1	; 0x01
     53e:	9c 01       	movw	r18, r24
     540:	21 50       	subi	r18, 0x01	; 1
     542:	30 40       	sbci	r19, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	cf 16       	cp	r12, r31
     548:	d1 04       	cpc	r13, r1
     54a:	c1 f1       	breq	.+112    	; 0x5bc <__stack+0xbd>
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	c8 16       	cp	r12, r24
     550:	d1 04       	cpc	r13, r1
     552:	34 f4       	brge	.+12     	; 0x560 <__stack+0x61>
     554:	e1 e0       	ldi	r30, 0x01	; 1
     556:	ce 16       	cp	r12, r30
     558:	d1 04       	cpc	r13, r1
     55a:	09 f0       	breq	.+2      	; 0x55e <__stack+0x5f>
     55c:	6c c0       	rjmp	.+216    	; 0x636 <__stack+0x137>
     55e:	0b c0       	rjmp	.+22     	; 0x576 <__stack+0x77>
     560:	f3 e0       	ldi	r31, 0x03	; 3
     562:	cf 16       	cp	r12, r31
     564:	d1 04       	cpc	r13, r1
     566:	09 f4       	brne	.+2      	; 0x56a <__stack+0x6b>
     568:	49 c0       	rjmp	.+146    	; 0x5fc <__stack+0xfd>
     56a:	84 e0       	ldi	r24, 0x04	; 4
     56c:	c8 16       	cp	r12, r24
     56e:	d1 04       	cpc	r13, r1
     570:	09 f0       	breq	.+2      	; 0x574 <__stack+0x75>
     572:	61 c0       	rjmp	.+194    	; 0x636 <__stack+0x137>
     574:	4d c0       	rjmp	.+154    	; 0x610 <__stack+0x111>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     576:	b9 01       	movw	r22, r18
     578:	88 27       	eor	r24, r24
     57a:	77 fd       	sbrc	r23, 7
     57c:	80 95       	com	r24
     57e:	98 2f       	mov	r25, r24
     580:	56 d4       	rcall	.+2220   	; 0xe2e <__floatsisf>
     582:	7b 01       	movw	r14, r22
     584:	8c 01       	movw	r16, r24
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e7       	ldi	r20, 0x70	; 112
     58c:	51 e4       	ldi	r21, 0x41	; 65
     58e:	b0 d3       	rcall	.+1888   	; 0xcf0 <__cmpsf2>
     590:	88 23       	and	r24, r24
     592:	1c f4       	brge	.+6      	; 0x59a <__stack+0x9b>
     594:	8f e0       	ldi	r24, 0x0F	; 15
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	54 c0       	rjmp	.+168    	; 0x642 <__stack+0x143>
     59a:	c8 01       	movw	r24, r16
     59c:	b7 01       	movw	r22, r14
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 ea       	ldi	r20, 0xA0	; 160
     5a4:	51 e4       	ldi	r21, 0x41	; 65
     5a6:	f3 d4       	rcall	.+2534   	; 0xf8e <__gesf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	1c f4       	brge	.+6      	; 0x5b2 <__stack+0xb3>
     5ac:	84 e1       	ldi	r24, 0x14	; 20
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	48 c0       	rjmp	.+144    	; 0x642 <__stack+0x143>
     5b2:	c8 01       	movw	r24, r16
     5b4:	b7 01       	movw	r22, r14
     5b6:	08 d4       	rcall	.+2064   	; 0xdc8 <__fixsfsi>
     5b8:	cb 01       	movw	r24, r22
     5ba:	43 c0       	rjmp	.+134    	; 0x642 <__stack+0x143>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     5bc:	b9 01       	movw	r22, r18
     5be:	88 27       	eor	r24, r24
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	80 95       	com	r24
     5c4:	98 2f       	mov	r25, r24
     5c6:	33 d4       	rcall	.+2150   	; 0xe2e <__floatsisf>
     5c8:	7b 01       	movw	r14, r22
     5ca:	8c 01       	movw	r16, r24
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	8d d3       	rcall	.+1818   	; 0xcf0 <__cmpsf2>
     5d6:	88 23       	and	r24, r24
     5d8:	84 f1       	brlt	.+96     	; 0x63a <__stack+0x13b>
     5da:	c8 01       	movw	r24, r16
     5dc:	b7 01       	movw	r22, r14
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e8       	ldi	r20, 0x80	; 128
     5e4:	5f e3       	ldi	r21, 0x3F	; 63
     5e6:	d3 d4       	rcall	.+2470   	; 0xf8e <__gesf2>
     5e8:	18 16       	cp	r1, r24
     5ea:	1c f4       	brge	.+6      	; 0x5f2 <__stack+0xf3>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	28 c0       	rjmp	.+80     	; 0x642 <__stack+0x143>
     5f2:	c8 01       	movw	r24, r16
     5f4:	b7 01       	movw	r22, r14
     5f6:	e8 d3       	rcall	.+2000   	; 0xdc8 <__fixsfsi>
     5f8:	cb 01       	movw	r24, r22
     5fa:	23 c0       	rjmp	.+70     	; 0x642 <__stack+0x143>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     5fc:	33 23       	and	r19, r19
     5fe:	1c f4       	brge	.+6      	; 0x606 <__stack+0x107>
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	1e c0       	rjmp	.+60     	; 0x642 <__stack+0x143>
     606:	e4 e0       	ldi	r30, 0x04	; 4
     608:	20 30       	cpi	r18, 0x00	; 0
     60a:	3e 07       	cpc	r19, r30
     60c:	a4 f0       	brlt	.+40     	; 0x636 <__stack+0x137>
     60e:	15 c0       	rjmp	.+42     	; 0x63a <__stack+0x13b>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     610:	c9 01       	movw	r24, r18
     612:	52 2f       	mov	r21, r18
     614:	49 2f       	mov	r20, r25
     616:	12 16       	cp	r1, r18
     618:	13 06       	cpc	r1, r19
     61a:	24 f4       	brge	.+8      	; 0x624 <__stack+0x125>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	58 2f       	mov	r21, r24
     622:	49 2f       	mov	r20, r25
     624:	85 2f       	mov	r24, r21
     626:	94 2f       	mov	r25, r20
     628:	99 23       	and	r25, r25
     62a:	5c f4       	brge	.+22     	; 0x642 <__stack+0x143>
     62c:	86 2d       	mov	r24, r6
     62e:	2a 96       	adiw	r28, 0x0a	; 10
     630:	9f ad       	ldd	r25, Y+63	; 0x3f
     632:	2a 97       	sbiw	r28, 0x0a	; 10
     634:	06 c0       	rjmp	.+12     	; 0x642 <__stack+0x143>
     636:	c9 01       	movw	r24, r18
     638:	04 c0       	rjmp	.+8      	; 0x642 <__stack+0x143>
     63a:	86 2d       	mov	r24, r6
     63c:	2a 96       	adiw	r28, 0x0a	; 10
     63e:	9f ad       	ldd	r25, Y+63	; 0x3f
     640:	2a 97       	sbiw	r28, 0x0a	; 10
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     642:	f4 01       	movw	r30, r8
     644:	91 83       	std	Z+1, r25	; 0x01
     646:	80 83       	st	Z, r24

                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
     648:	f5 01       	movw	r30, r10
     64a:	80 81       	ld	r24, Z
     64c:	83 fd       	sbrc	r24, 3
     64e:	1b c0       	rjmp	.+54     	; 0x686 <__stack+0x187>
     650:	70 92 11 01 	sts	0x0111, r7
                    if(pos!=3){
     654:	f3 e0       	ldi	r31, 0x03	; 3
     656:	cf 16       	cp	r12, r31
     658:	d1 04       	cpc	r13, r1
     65a:	49 f0       	breq	.+18     	; 0x66e <__stack+0x16f>
                        values[pos]= (uint8_t)value;
     65c:	c6 01       	movw	r24, r12
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	f2 01       	movw	r30, r4
     664:	e8 0f       	add	r30, r24
     666:	f9 1f       	adc	r31, r25
     668:	20 82       	st	Z, r2
     66a:	11 82       	std	Z+1, r1	; 0x01
     66c:	12 c0       	rjmp	.+36     	; 0x692 <__stack+0x193>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
     66e:	23 28       	or	r2, r3
     670:	29 f0       	breq	.+10     	; 0x67c <__stack+0x17d>
     672:	87 2d       	mov	r24, r7
     674:	84 60       	ori	r24, 0x04	; 4
     676:	80 93 11 01 	sts	0x0111, r24
     67a:	0b c0       	rjmp	.+22     	; 0x692 <__stack+0x193>
     67c:	87 2d       	mov	r24, r7
     67e:	8b 7f       	andi	r24, 0xFB	; 251
     680:	80 93 11 01 	sts	0x0111, r24
     684:	06 c0       	rjmp	.+12     	; 0x692 <__stack+0x193>
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     686:	f5 01       	movw	r30, r10
     688:	80 81       	ld	r24, Z
     68a:	82 ff       	sbrs	r24, 2
     68c:	c1 ce       	rjmp	.-638    	; 0x410 <menuRun+0x100>
     68e:	70 92 11 01 	sts	0x0111, r7
                        break;
                    }          
                }                  
            }
        }
        LCD_Write(menu[pos],0,0);
     692:	c6 01       	movw	r24, r12
     694:	82 95       	swap	r24
     696:	92 95       	swap	r25
     698:	90 7f       	andi	r25, 0xF0	; 240
     69a:	98 27       	eor	r25, r24
     69c:	80 7f       	andi	r24, 0xF0	; 240
     69e:	98 27       	eor	r25, r24
     6a0:	21 e0       	ldi	r18, 0x01	; 1
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	2c 0f       	add	r18, r28
     6a6:	3d 1f       	adc	r19, r29
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	86 d2       	rcall	.+1292   	; 0xbbe <LCD_Write>
        LCD_Write(values[pos],1,0);
     6b2:	c6 01       	movw	r24, r12
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	f2 01       	movw	r30, r4
     6ba:	e8 0f       	add	r30, r24
     6bc:	f9 1f       	adc	r31, r25
     6be:	80 81       	ld	r24, Z
     6c0:	91 81       	ldd	r25, Z+1	; 0x01
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	7b d2       	rcall	.+1270   	; 0xbbe <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     6c8:	f5 01       	movw	r30, r10
     6ca:	80 81       	ld	r24, Z
     6cc:	85 fd       	sbrc	r24, 5
     6ce:	16 c0       	rjmp	.+44     	; 0x6fc <__stack+0x1fd>
        {
            BIT_OFF(progFlags, INACTIVE);
     6d0:	80 91 11 01 	lds	r24, 0x0111
     6d4:	8f 7e       	andi	r24, 0xEF	; 239
     6d6:	80 93 11 01 	sts	0x0111, r24
            pos++;
     6da:	08 94       	sec
     6dc:	c1 1c       	adc	r12, r1
     6de:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     6e0:	dd 20       	and	r13, r13
     6e2:	34 f4       	brge	.+12     	; 0x6f0 <__stack+0x1f1>
     6e4:	0f 2e       	mov	r0, r31
     6e6:	f3 e0       	ldi	r31, 0x03	; 3
     6e8:	cf 2e       	mov	r12, r31
     6ea:	dd 24       	eor	r13, r13
     6ec:	f0 2d       	mov	r31, r0
     6ee:	06 c0       	rjmp	.+12     	; 0x6fc <__stack+0x1fd>
     6f0:	f4 e0       	ldi	r31, 0x04	; 4
     6f2:	cf 16       	cp	r12, r31
     6f4:	d1 04       	cpc	r13, r1
     6f6:	14 f0       	brlt	.+4      	; 0x6fc <__stack+0x1fd>
     6f8:	cc 24       	eor	r12, r12
     6fa:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     6fc:	f5 01       	movw	r30, r10
     6fe:	80 81       	ld	r24, Z
     700:	84 fd       	sbrc	r24, 4
     702:	16 c0       	rjmp	.+44     	; 0x730 <__stack+0x231>
        {
            BIT_OFF(progFlags, INACTIVE);
     704:	80 91 11 01 	lds	r24, 0x0111
     708:	8f 7e       	andi	r24, 0xEF	; 239
     70a:	80 93 11 01 	sts	0x0111, r24
            pos--;
     70e:	08 94       	sec
     710:	c1 08       	sbc	r12, r1
     712:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     714:	dd 20       	and	r13, r13
     716:	34 f4       	brge	.+12     	; 0x724 <__stack+0x225>
     718:	0f 2e       	mov	r0, r31
     71a:	f3 e0       	ldi	r31, 0x03	; 3
     71c:	cf 2e       	mov	r12, r31
     71e:	dd 24       	eor	r13, r13
     720:	f0 2d       	mov	r31, r0
     722:	06 c0       	rjmp	.+12     	; 0x730 <__stack+0x231>
     724:	f4 e0       	ldi	r31, 0x04	; 4
     726:	cf 16       	cp	r12, r31
     728:	d1 04       	cpc	r13, r1
     72a:	14 f0       	brlt	.+4      	; 0x730 <__stack+0x231>
     72c:	cc 24       	eor	r12, r12
     72e:	dd 24       	eor	r13, r13
{
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     730:	90 91 11 01 	lds	r25, 0x0111
     734:	94 fd       	sbrc	r25, 4
     736:	57 ce       	rjmp	.-850    	; 0x3e6 <menuRun+0xd6>
     738:	f5 01       	movw	r30, r10
     73a:	80 81       	ld	r24, Z
     73c:	82 ff       	sbrs	r24, 2
     73e:	53 ce       	rjmp	.-858    	; 0x3e6 <menuRun+0xd6>
            pos--;
            pos= CIRCLE(pos, 0, 3);
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
     740:	89 2f       	mov	r24, r25
     742:	8d 7e       	andi	r24, 0xED	; 237
     744:	80 93 11 01 	sts	0x0111, r24
    }
}

inline void menuStop()
{
    LCD_Clear();
     748:	24 d1       	rcall	.+584    	; 0x992 <LCD_Clear>
    LCD_DisplayAll();
     74a:	93 dd       	rcall	.-1242   	; 0x272 <LCD_DisplayAll>
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
     74c:	c7 5b       	subi	r28, 0xB7	; 183
     74e:	df 4f       	sbci	r29, 0xFF	; 255
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	bf 90       	pop	r11
     76c:	af 90       	pop	r10
     76e:	9f 90       	pop	r9
     770:	8f 90       	pop	r8
     772:	7f 90       	pop	r7
     774:	6f 90       	pop	r6
     776:	5f 90       	pop	r5
     778:	4f 90       	pop	r4
     77a:	3f 90       	pop	r3
     77c:	2f 90       	pop	r2
     77e:	08 95       	ret

00000780 <main>:

int main(void)
{   
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
     788:	87 e0       	ldi	r24, 0x07	; 7
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	90 93 c5 00 	sts	0x00C5, r25
     790:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
     794:	e2 ec       	ldi	r30, 0xC2	; 194
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	8f 7d       	andi	r24, 0xDF	; 223
     79c:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
     79e:	80 81       	ld	r24, Z
     7a0:	8f 7e       	andi	r24, 0xEF	; 239
     7a2:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
     7a4:	a1 ec       	ldi	r26, 0xC1	; 193
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	8c 91       	ld	r24, X
     7aa:	8b 7f       	andi	r24, 0xFB	; 251
     7ac:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
     7ae:	80 81       	ld	r24, Z
     7b0:	84 60       	ori	r24, 0x04	; 4
     7b2:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
     7b4:	80 81       	ld	r24, Z
     7b6:	82 60       	ori	r24, 0x02	; 2
     7b8:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
     7ba:	80 81       	ld	r24, Z
     7bc:	87 7f       	andi	r24, 0xF7	; 247
     7be:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
     7c0:	8c 91       	ld	r24, X
     7c2:	88 60       	ori	r24, 0x08	; 8
     7c4:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 1);  // прием разрешен
     7c6:	8c 91       	ld	r24, X
     7c8:	80 61       	ori	r24, 0x10	; 16
     7ca:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 1); // прерывание приема разрешено
     7cc:	8c 91       	ld	r24, X
     7ce:	80 68       	ori	r24, 0x80	; 128
     7d0:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
     7d2:	8c 91       	ld	r24, X
     7d4:	80 64       	ori	r24, 0x40	; 64
     7d6:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
     7d8:	8c 91       	ld	r24, X
     7da:	8f 7d       	andi	r24, 0xDF	; 223
     7dc:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
     7de:	e7 e2       	ldi	r30, 0x27	; 39
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	8e 7f       	andi	r24, 0xFE	; 254
     7e6:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD); // управление подсветкой экрана и нагрузкой на выход
     7e8:	ea e2       	ldi	r30, 0x2A	; 42
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 ec       	ldi	r24, 0xC0	; 192
     7ee:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
     7f0:	80 81       	ld	r24, Z
     7f2:	83 7c       	andi	r24, 0xC3	; 195
     7f4:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
     7f6:	8c e3       	ldi	r24, 0x3C	; 60
     7f8:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
     7fa:	ec e7       	ldi	r30, 0x7C	; 124
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	80 64       	ori	r24, 0x40	; 64
     802:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
     804:	ab e7       	ldi	r26, 0x7B	; 123
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	8c 91       	ld	r24, X
     80a:	83 60       	ori	r24, 0x03	; 3
     80c:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
     80e:	80 81       	ld	r24, Z
     810:	80 62       	ori	r24, 0x20	; 32
     812:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
     814:	0a e7       	ldi	r16, 0x7A	; 122
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	f8 01       	movw	r30, r16
     81a:	80 81       	ld	r24, Z
     81c:	80 62       	ori	r24, 0x20	; 32
     81e:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
     820:	80 81       	ld	r24, Z
     822:	88 60       	ori	r24, 0x08	; 8
     824:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
     826:	80 81       	ld	r24, Z
     828:	80 68       	ori	r24, 0x80	; 128
     82a:	80 83       	st	Z, r24
    //DIDR0 |= 1 << ADC0D; // отключить цифровой вход ADC0D
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
     82c:	e4 e4       	ldi	r30, 0x44	; 68
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	82 60       	ori	r24, 0x02	; 2
     834:	80 83       	st	Z, r24
    OCR0A= measureRate;
     836:	80 91 16 01 	lds	r24, 0x0116
     83a:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
     83c:	e5 e4       	ldi	r30, 0x45	; 69
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	84 60       	ori	r24, 0x04	; 4
     844:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
     846:	ee e6       	ldi	r30, 0x6E	; 110
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	82 60       	ori	r24, 0x02	; 2
     84e:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
     850:	85 e0       	ldi	r24, 0x05	; 5
     852:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
     856:	e6 eb       	ldi	r30, 0xB6	; 182
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	80 62       	ori	r24, 0x20	; 32
     85e:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
     860:	e0 e7       	ldi	r30, 0x70	; 112
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	81 60       	ori	r24, 0x01	; 1
     868:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCD_Init();
     86a:	c0 d0       	rcall	.+384    	; 0x9ec <LCD_Init>

    BIT_WRITE(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
     86c:	e4 e6       	ldi	r30, 0x64	; 100
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	80 68       	ori	r24, 0x80	; 128
     874:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
     876:	80 81       	ld	r24, Z
     878:	88 60       	ori	r24, 0x08	; 8
     87a:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
     87c:	80 81       	ld	r24, Z
     87e:	84 60       	ori	r24, 0x04	; 4
     880:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
     882:	f8 01       	movw	r30, r16
     884:	80 81       	ld	r24, Z
     886:	80 64       	ori	r24, 0x40	; 64
     888:	80 83       	st	Z, r24

    sei();
     88a:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
     88c:	c9 e2       	ldi	r28, 0x29	; 41
     88e:	d0 e0       	ldi	r29, 0x00	; 0
     890:	88 81       	ld	r24, Y
     892:	84 ff       	sbrs	r24, 4
     894:	06 c0       	rjmp	.+12     	; 0x8a2 <main+0x122>
     896:	88 81       	ld	r24, Y
     898:	85 ff       	sbrs	r24, 5
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <main+0x122>
     89c:	88 81       	ld	r24, Y
     89e:	82 fd       	sbrc	r24, 2
     8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <main+0x130>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_ON(progFlags, LCD_ON);
     8a2:	80 91 11 01 	lds	r24, 0x0111
     8a6:	8f 7e       	andi	r24, 0xEF	; 239
     8a8:	81 60       	ori	r24, 0x01	; 1
     8aa:	80 93 11 01 	sts	0x0111, r24
            LCD_turnOn();
     8ae:	f6 d0       	rcall	.+492    	; 0xa9c <LCD_turnOn>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
     8b0:	88 81       	ld	r24, Y
     8b2:	83 fd       	sbrc	r24, 3
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <main+0x158>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
     8b6:	80 91 11 01 	lds	r24, 0x0111
     8ba:	8f 7e       	andi	r24, 0xEF	; 239
     8bc:	80 93 11 01 	sts	0x0111, r24
            if (!BIT_READ(progFlags, LCD_ON))
     8c0:	80 fd       	sbrc	r24, 0
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <main+0x14c>
            {
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
     8c4:	81 60       	ori	r24, 0x01	; 1
     8c6:	80 93 11 01 	sts	0x0111, r24
                LCD_turnOn();
     8ca:	e8 d0       	rcall	.+464    	; 0xa9c <LCD_turnOn>
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
     8cc:	80 91 11 01 	lds	r24, 0x0111
     8d0:	82 60       	ori	r24, 0x02	; 2
     8d2:	80 93 11 01 	sts	0x0111, r24
            menuRun(); // обработка команд меню
     8d6:	1c dd       	rcall	.-1480   	; 0x310 <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE))
     8d8:	80 91 11 01 	lds	r24, 0x0111
     8dc:	84 ff       	sbrs	r24, 4
     8de:	06 c0       	rjmp	.+12     	; 0x8ec <main+0x16c>
        {
            if(BIT_READ(progFlags, LCD_ON))
     8e0:	80 ff       	sbrs	r24, 0
     8e2:	d6 cf       	rjmp	.-84     	; 0x890 <main+0x110>
            {
                BIT_OFF(progFlags, LCD_ON);
     8e4:	8e 7f       	andi	r24, 0xFE	; 254
     8e6:	80 93 11 01 	sts	0x0111, r24
                LCD_turnOff();
     8ea:	0a d1       	rcall	.+532    	; 0xb00 <LCD_turnOff>
            }
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
     8ec:	80 91 11 01 	lds	r24, 0x0111
     8f0:	80 ff       	sbrs	r24, 0
     8f2:	ce cf       	rjmp	.-100    	; 0x890 <main+0x110>
        {
            LCD_DisplayAll();
     8f4:	be dc       	rcall	.-1668   	; 0x272 <LCD_DisplayAll>
     8f6:	cc cf       	rjmp	.-104    	; 0x890 <main+0x110>

000008f8 <LCD_Busy>:
 #include "LCD.h"

int LCD_Busy() //TODO: для чтения нужны ножка RW
{
    uint8_t input= 0;
    BIT_ON(PORTC, LCD_RW);
     8f8:	e8 e2       	ldi	r30, 0x28	; 40
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	84 60       	ori	r24, 0x04	; 4
     900:	80 83       	st	Z, r24
    LCD_DREG&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     902:	e4 e2       	ldi	r30, 0x24	; 36
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	80 7f       	andi	r24, 0xF0	; 240
     90a:	80 83       	st	Z, r24
    LCD_DPORT|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
     90c:	e5 e2       	ldi	r30, 0x25	; 37
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	8f 60       	ori	r24, 0x0F	; 15
     914:	80 83       	st	Z, r24
    BIT_ON(LCD_DPORT, LCD_EN);
     916:	80 81       	ld	r24, Z
     918:	88 60       	ori	r24, 0x08	; 8
     91a:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     91c:	2e e0       	ldi	r18, 0x0E	; 14
     91e:	82 2f       	mov	r24, r18
     920:	8a 95       	dec	r24
     922:	f1 f7       	brne	.-4      	; 0x920 <LCD_Busy+0x28>
    _delay_loop_1(14);
    BIT_OFF(LCD_DPORT, LCD_EN);
     924:	80 81       	ld	r24, Z
     926:	87 7f       	andi	r24, 0xF7	; 247
     928:	80 83       	st	Z, r24
    input= LCD_IN << 4;
     92a:	a3 e2       	ldi	r26, 0x23	; 35
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	9c 91       	ld	r25, X
     930:	92 95       	swap	r25
     932:	90 7f       	andi	r25, 0xF0	; 240
    BIT_ON(LCD_DPORT, LCD_EN);
     934:	80 81       	ld	r24, Z
     936:	88 60       	ori	r24, 0x08	; 8
     938:	80 83       	st	Z, r24
     93a:	2a 95       	dec	r18
     93c:	f1 f7       	brne	.-4      	; 0x93a <LCD_Busy+0x42>
    _delay_loop_1(14);
    BIT_OFF(LCD_DPORT, LCD_EN);
     93e:	80 81       	ld	r24, Z
     940:	87 7f       	andi	r24, 0xF7	; 247
     942:	80 83       	st	Z, r24
    input|= LCD_IN;
     944:	8c 91       	ld	r24, X
    if(BIT_READ(input, 7))
     946:	98 2b       	or	r25, r24
     948:	84 f4       	brge	.+32     	; 0x96a <LCD_Busy+0x72>
    {
        LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     94a:	80 81       	ld	r24, Z
     94c:	80 7f       	andi	r24, 0xF0	; 240
     94e:	80 83       	st	Z, r24
        LCD_DREG|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
     950:	e4 e2       	ldi	r30, 0x24	; 36
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	8f 60       	ori	r24, 0x0F	; 15
     958:	80 83       	st	Z, r24
        BIT_OFF(PORTC, LCD_RW);
     95a:	e8 e2       	ldi	r30, 0x28	; 40
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	8b 7f       	andi	r24, 0xFB	; 251
     962:	80 83       	st	Z, r24
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	11 c0       	rjmp	.+34     	; 0x98c <LCD_Busy+0x94>
        return 1;
    }
    LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
     96a:	e5 e2       	ldi	r30, 0x25	; 37
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	80 7f       	andi	r24, 0xF0	; 240
     972:	80 83       	st	Z, r24
    LCD_DREG|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
     974:	e4 e2       	ldi	r30, 0x24	; 36
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	8f 60       	ori	r24, 0x0F	; 15
     97c:	80 83       	st	Z, r24
    BIT_OFF(PORTC, LCD_RW);
     97e:	e8 e2       	ldi	r30, 0x28	; 40
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	8b 7f       	andi	r24, 0xFB	; 251
     986:	80 83       	st	Z, r24
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
}
     98c:	82 2f       	mov	r24, r18
     98e:	93 2f       	mov	r25, r19
     990:	08 95       	ret

00000992 <LCD_Clear>:

 void LCD_Clear()
 {
    while(LCD_Busy());
     992:	b2 df       	rcall	.-156    	; 0x8f8 <LCD_Busy>
     994:	89 2b       	or	r24, r25
     996:	e9 f7       	brne	.-6      	; 0x992 <LCD_Clear>
    BIT_OFF(LCD_DPORT, LCD_RS);
     998:	e5 e2       	ldi	r30, 0x25	; 37
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	8d 7f       	andi	r24, 0xFD	; 253
     9a0:	80 83       	st	Z, r24
    BIT_ON(LCD_DPORT, LCD_EN);
     9a2:	80 81       	ld	r24, Z
     9a4:	88 60       	ori	r24, 0x08	; 8
     9a6:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     9a8:	80 81       	ld	r24, Z
     9aa:	87 7f       	andi	r24, 0xF7	; 247
     9ac:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     9ae:	80 81       	ld	r24, Z
     9b0:	8b 7f       	andi	r24, 0xFB	; 251
     9b2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     9b4:	80 81       	ld	r24, Z
     9b6:	8d 7f       	andi	r24, 0xFD	; 253
     9b8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     9ba:	80 81       	ld	r24, Z
     9bc:	8e 7f       	andi	r24, 0xFE	; 254
     9be:	80 83       	st	Z, r24
    BIT_OFF(LCD_DPORT, LCD_EN);
     9c0:	80 81       	ld	r24, Z
     9c2:	87 7f       	andi	r24, 0xF7	; 247
     9c4:	80 83       	st	Z, r24
    BIT_ON(LCD_DPORT, LCD_EN);
     9c6:	80 81       	ld	r24, Z
     9c8:	88 60       	ori	r24, 0x08	; 8
     9ca:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     9cc:	80 81       	ld	r24, Z
     9ce:	87 7f       	andi	r24, 0xF7	; 247
     9d0:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     9d2:	80 81       	ld	r24, Z
     9d4:	8b 7f       	andi	r24, 0xFB	; 251
     9d6:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     9d8:	80 81       	ld	r24, Z
     9da:	8d 7f       	andi	r24, 0xFD	; 253
     9dc:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 1);
     9de:	80 81       	ld	r24, Z
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	80 83       	st	Z, r24
    BIT_OFF(LCD_DPORT, LCD_EN);
     9e4:	80 81       	ld	r24, Z
     9e6:	87 7f       	andi	r24, 0xF7	; 247
     9e8:	80 83       	st	Z, r24
 }
     9ea:	08 95       	ret

000009ec <LCD_Init>:

 void LCD_Init()
 {
    LCD_CREG= (1 << LCD_EN)|(1 << LCD_RS)|(1 << LCD_RW); // управляющие на выход
     9ec:	8e e0       	ldi	r24, 0x0E	; 14
     9ee:	84 b9       	out	0x04, r24	; 4
    while(LCD_Busy());
     9f0:	83 df       	rcall	.-250    	; 0x8f8 <LCD_Busy>
     9f2:	89 2b       	or	r24, r25
     9f4:	e9 f7       	brne	.-6      	; 0x9f0 <LCD_Init+0x4>
    BIT_OFF(LCD_DPORT, LCD_RS); // шина 4 бита, 2 строки, символ 5x8 точек
     9f6:	e5 e2       	ldi	r30, 0x25	; 37
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	8d 7f       	andi	r24, 0xFD	; 253
     9fe:	80 83       	st	Z, r24
    BIT_ON(LCD_DPORT, LCD_EN);
     a00:	80 81       	ld	r24, Z
     a02:	88 60       	ori	r24, 0x08	; 8
     a04:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     a06:	80 81       	ld	r24, Z
     a08:	87 7f       	andi	r24, 0xF7	; 247
     a0a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     a0c:	80 81       	ld	r24, Z
     a0e:	8b 7f       	andi	r24, 0xFB	; 251
     a10:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     a12:	80 81       	ld	r24, Z
     a14:	82 60       	ori	r24, 0x02	; 2
     a16:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a18:	80 81       	ld	r24, Z
     a1a:	8e 7f       	andi	r24, 0xFE	; 254
     a1c:	80 83       	st	Z, r24
    BIT_OFF(LCD_DPORT, LCD_EN);
     a1e:	80 81       	ld	r24, Z
     a20:	87 7f       	andi	r24, 0xF7	; 247
     a22:	80 83       	st	Z, r24
    BIT_ON(LCD_DPORT, LCD_EN);
     a24:	80 81       	ld	r24, Z
     a26:	88 60       	ori	r24, 0x08	; 8
     a28:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     a2a:	80 81       	ld	r24, Z
     a2c:	88 60       	ori	r24, 0x08	; 8
     a2e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     a30:	80 81       	ld	r24, Z
     a32:	8b 7f       	andi	r24, 0xFB	; 251
     a34:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     a36:	80 81       	ld	r24, Z
     a38:	8d 7f       	andi	r24, 0xFD	; 253
     a3a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a3c:	80 81       	ld	r24, Z
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 83       	st	Z, r24
    BIT_OFF(LCD_DPORT, LCD_EN);
     a42:	80 81       	ld	r24, Z
     a44:	87 7f       	andi	r24, 0xF7	; 247
     a46:	80 83       	st	Z, r24
    while(LCD_Busy());
     a48:	57 df       	rcall	.-338    	; 0x8f8 <LCD_Busy>
     a4a:	89 2b       	or	r24, r25
     a4c:	e9 f7       	brne	.-6      	; 0xa48 <LCD_Init+0x5c>
    BIT_ON(LCD_DPORT, LCD_EN); // инкремент счетчика, сдвига экрана нет
     a4e:	e5 e2       	ldi	r30, 0x25	; 37
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	88 60       	ori	r24, 0x08	; 8
     a56:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     a58:	80 81       	ld	r24, Z
     a5a:	87 7f       	andi	r24, 0xF7	; 247
     a5c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     a5e:	80 81       	ld	r24, Z
     a60:	8b 7f       	andi	r24, 0xFB	; 251
     a62:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     a64:	80 81       	ld	r24, Z
     a66:	8d 7f       	andi	r24, 0xFD	; 253
     a68:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a6a:	80 81       	ld	r24, Z
     a6c:	8e 7f       	andi	r24, 0xFE	; 254
     a6e:	80 83       	st	Z, r24
    BIT_OFF(LCD_DPORT, LCD_EN);
     a70:	80 81       	ld	r24, Z
     a72:	87 7f       	andi	r24, 0xF7	; 247
     a74:	80 83       	st	Z, r24
    BIT_ON(LCD_DPORT, LCD_EN);
     a76:	80 81       	ld	r24, Z
     a78:	88 60       	ori	r24, 0x08	; 8
     a7a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     a7c:	80 81       	ld	r24, Z
     a7e:	87 7f       	andi	r24, 0xF7	; 247
     a80:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 1);
     a82:	80 81       	ld	r24, Z
     a84:	84 60       	ori	r24, 0x04	; 4
     a86:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     a88:	80 81       	ld	r24, Z
     a8a:	82 60       	ori	r24, 0x02	; 2
     a8c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a8e:	80 81       	ld	r24, Z
     a90:	8e 7f       	andi	r24, 0xFE	; 254
     a92:	80 83       	st	Z, r24
    BIT_OFF(LCD_DPORT, LCD_EN);
     a94:	80 81       	ld	r24, Z
     a96:	87 7f       	andi	r24, 0xF7	; 247
     a98:	80 83       	st	Z, r24
    void LCD_Clear();
 }
     a9a:	08 95       	ret

00000a9c <LCD_turnOn>:
     sei();
 }

 void LCD_turnOn()
 {
     BIT_ON(CONTROL_PORT, LCD_LED);
     a9c:	eb e2       	ldi	r30, 0x2B	; 43
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	80 83       	st	Z, r24
     while(LCD_Busy());
     aa6:	28 df       	rcall	.-432    	; 0x8f8 <LCD_Busy>
     aa8:	89 2b       	or	r24, r25
     aaa:	e9 f7       	brne	.-6      	; 0xaa6 <LCD_turnOn+0xa>
     BIT_OFF(LCD_DPORT, LCD_RS); // включить экран, курсора нет
     aac:	e5 e2       	ldi	r30, 0x25	; 37
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	8d 7f       	andi	r24, 0xFD	; 253
     ab4:	80 83       	st	Z, r24
     BIT_ON(LCD_DPORT, LCD_EN);
     ab6:	80 81       	ld	r24, Z
     ab8:	88 60       	ori	r24, 0x08	; 8
     aba:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     abc:	80 81       	ld	r24, Z
     abe:	87 7f       	andi	r24, 0xF7	; 247
     ac0:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     ac2:	80 81       	ld	r24, Z
     ac4:	8b 7f       	andi	r24, 0xFB	; 251
     ac6:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     ac8:	80 81       	ld	r24, Z
     aca:	8d 7f       	andi	r24, 0xFD	; 253
     acc:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     ace:	80 81       	ld	r24, Z
     ad0:	8e 7f       	andi	r24, 0xFE	; 254
     ad2:	80 83       	st	Z, r24
     BIT_OFF(LCD_DPORT, LCD_EN);
     ad4:	80 81       	ld	r24, Z
     ad6:	87 7f       	andi	r24, 0xF7	; 247
     ad8:	80 83       	st	Z, r24
     BIT_ON(LCD_DPORT, LCD_EN);
     ada:	80 81       	ld	r24, Z
     adc:	88 60       	ori	r24, 0x08	; 8
     ade:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     ae0:	80 81       	ld	r24, Z
     ae2:	88 60       	ori	r24, 0x08	; 8
     ae4:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D2, 1);
     ae6:	80 81       	ld	r24, Z
     ae8:	84 60       	ori	r24, 0x04	; 4
     aea:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     aec:	80 81       	ld	r24, Z
     aee:	8d 7f       	andi	r24, 0xFD	; 253
     af0:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     af2:	80 81       	ld	r24, Z
     af4:	8e 7f       	andi	r24, 0xFE	; 254
     af6:	80 83       	st	Z, r24
     BIT_OFF(LCD_DPORT, LCD_EN);
     af8:	80 81       	ld	r24, Z
     afa:	87 7f       	andi	r24, 0xF7	; 247
     afc:	80 83       	st	Z, r24
 }
     afe:	08 95       	ret

00000b00 <LCD_turnOff>:

 void LCD_turnOff()
 {
     BIT_OFF(CONTROL_PORT, LCD_LED);
     b00:	eb e2       	ldi	r30, 0x2B	; 43
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	8f 77       	andi	r24, 0x7F	; 127
     b08:	80 83       	st	Z, r24
     while(LCD_Busy());
     b0a:	f6 de       	rcall	.-532    	; 0x8f8 <LCD_Busy>
     b0c:	89 2b       	or	r24, r25
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <LCD_turnOff+0xa>
     BIT_OFF(LCD_DPORT, LCD_RS); // выключить экран, курсора нет
     b10:	e5 e2       	ldi	r30, 0x25	; 37
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8d 7f       	andi	r24, 0xFD	; 253
     b18:	80 83       	st	Z, r24
     BIT_ON(LCD_DPORT, LCD_EN);
     b1a:	80 81       	ld	r24, Z
     b1c:	88 60       	ori	r24, 0x08	; 8
     b1e:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     b20:	80 81       	ld	r24, Z
     b22:	87 7f       	andi	r24, 0xF7	; 247
     b24:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     b26:	80 81       	ld	r24, Z
     b28:	8b 7f       	andi	r24, 0xFB	; 251
     b2a:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     b2c:	80 81       	ld	r24, Z
     b2e:	8d 7f       	andi	r24, 0xFD	; 253
     b30:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     b32:	80 81       	ld	r24, Z
     b34:	8e 7f       	andi	r24, 0xFE	; 254
     b36:	80 83       	st	Z, r24
     BIT_OFF(LCD_DPORT, LCD_EN);
     b38:	80 81       	ld	r24, Z
     b3a:	87 7f       	andi	r24, 0xF7	; 247
     b3c:	80 83       	st	Z, r24
     BIT_ON(LCD_DPORT, LCD_EN);
     b3e:	80 81       	ld	r24, Z
     b40:	88 60       	ori	r24, 0x08	; 8
     b42:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     b44:	80 81       	ld	r24, Z
     b46:	88 60       	ori	r24, 0x08	; 8
     b48:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     b4a:	80 81       	ld	r24, Z
     b4c:	8b 7f       	andi	r24, 0xFB	; 251
     b4e:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     b50:	80 81       	ld	r24, Z
     b52:	8d 7f       	andi	r24, 0xFD	; 253
     b54:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     b56:	80 81       	ld	r24, Z
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	80 83       	st	Z, r24
     BIT_OFF(LCD_DPORT, LCD_EN);
     b5c:	80 81       	ld	r24, Z
     b5e:	87 7f       	andi	r24, 0xF7	; 247
     b60:	80 83       	st	Z, r24
 }
     b62:	08 95       	ret

00000b64 <LCD_SetCursor>:
 
 void LCD_SetCursor(int row, int col)
 {  
    while(LCD_Busy());
     b64:	c9 de       	rcall	.-622    	; 0x8f8 <LCD_Busy>
     b66:	89 2b       	or	r24, r25
     b68:	e9 f7       	brne	.-6      	; 0xb64 <LCD_SetCursor>
    BIT_OFF(LCD_DPORT, LCD_RS); // переместрить курсор на адрес 0 в DDRAM
     b6a:	e5 e2       	ldi	r30, 0x25	; 37
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8d 7f       	andi	r24, 0xFD	; 253
     b72:	80 83       	st	Z, r24
    BIT_ON(LCD_DPORT, LCD_EN);                                           //TODO: конвертация номера строки и столбца в адрес
     b74:	80 81       	ld	r24, Z
     b76:	88 60       	ori	r24, 0x08	; 8
     b78:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     b7a:	80 81       	ld	r24, Z
     b7c:	88 60       	ori	r24, 0x08	; 8
     b7e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     b80:	80 81       	ld	r24, Z
     b82:	8b 7f       	andi	r24, 0xFB	; 251
     b84:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     b86:	80 81       	ld	r24, Z
     b88:	8d 7f       	andi	r24, 0xFD	; 253
     b8a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     b8c:	80 81       	ld	r24, Z
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	80 83       	st	Z, r24
    BIT_OFF(LCD_DPORT, LCD_EN);
     b92:	80 81       	ld	r24, Z
     b94:	87 7f       	andi	r24, 0xF7	; 247
     b96:	80 83       	st	Z, r24
    BIT_ON(LCD_DPORT, LCD_EN);
     b98:	80 81       	ld	r24, Z
     b9a:	88 60       	ori	r24, 0x08	; 8
     b9c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     b9e:	80 81       	ld	r24, Z
     ba0:	87 7f       	andi	r24, 0xF7	; 247
     ba2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     ba4:	80 81       	ld	r24, Z
     ba6:	8b 7f       	andi	r24, 0xFB	; 251
     ba8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     baa:	80 81       	ld	r24, Z
     bac:	8d 7f       	andi	r24, 0xFD	; 253
     bae:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     bb0:	80 81       	ld	r24, Z
     bb2:	8e 7f       	andi	r24, 0xFE	; 254
     bb4:	80 83       	st	Z, r24
    BIT_OFF(LCD_DPORT, LCD_EN);
     bb6:	80 81       	ld	r24, Z
     bb8:	87 7f       	andi	r24, 0xF7	; 247
     bba:	80 83       	st	Z, r24
 }
     bbc:	08 95       	ret

00000bbe <LCD_Write>:
    BIT_OFF(LCD_DPORT, LCD_EN);
    void LCD_Clear();
 }

 void LCD_Write(char* data, uint8_t posY, uint8_t posX ) //TODO: доопределить, учесть конветацию чисел в символы
 {
     bbe:	86 2f       	mov	r24, r22
     LCD_SetCursor(posY, posX);
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	64 2f       	mov	r22, r20
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	ce df       	rcall	.-100    	; 0xb64 <LCD_SetCursor>
     cli();
     bc8:	f8 94       	cli
     while(LCD_Busy());
     bca:	96 de       	rcall	.-724    	; 0x8f8 <LCD_Busy>
     bcc:	89 2b       	or	r24, r25
     bce:	e9 f7       	brne	.-6      	; 0xbca <LCD_Write+0xc>
     BIT_ON(LCD_DPORT, LCD_RS);
     bd0:	e5 e2       	ldi	r30, 0x25	; 37
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	80 83       	st	Z, r24
     BIT_ON(LCD_DPORT, LCD_EN);
     bda:	80 81       	ld	r24, Z
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     be0:	80 81       	ld	r24, Z
     be2:	87 7f       	andi	r24, 0xF7	; 247
     be4:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     be6:	80 81       	ld	r24, Z
     be8:	8b 7f       	andi	r24, 0xFB	; 251
     bea:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     bec:	80 81       	ld	r24, Z
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     bf2:	80 81       	ld	r24, Z
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	80 83       	st	Z, r24
     BIT_OFF(LCD_DPORT, LCD_EN);
     bf8:	80 81       	ld	r24, Z
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	80 83       	st	Z, r24
     BIT_ON(LCD_DPORT, LCD_EN);
     bfe:	80 81       	ld	r24, Z
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     c04:	80 81       	ld	r24, Z
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     c0a:	80 81       	ld	r24, Z
     c0c:	8b 7f       	andi	r24, 0xFB	; 251
     c0e:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     c10:	80 81       	ld	r24, Z
     c12:	82 60       	ori	r24, 0x02	; 2
     c14:	80 83       	st	Z, r24
     BIT_WRITE(LCD_DPORT, LCD_D0, 1);
     c16:	80 81       	ld	r24, Z
     c18:	81 60       	ori	r24, 0x01	; 1
     c1a:	80 83       	st	Z, r24
     BIT_OFF(LCD_DPORT, LCD_EN);
     c1c:	80 81       	ld	r24, Z
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	80 83       	st	Z, r24
     sei();
     c22:	78 94       	sei
 }
     c24:	08 95       	ret

00000c26 <__subsf3>:
     c26:	50 58       	subi	r21, 0x80	; 128

00000c28 <__addsf3>:
     c28:	bb 27       	eor	r27, r27
     c2a:	aa 27       	eor	r26, r26
     c2c:	0e d0       	rcall	.+28     	; 0xc4a <__addsf3x>
     c2e:	75 c1       	rjmp	.+746    	; 0xf1a <__fp_round>
     c30:	66 d1       	rcall	.+716    	; 0xefe <__fp_pscA>
     c32:	30 f0       	brcs	.+12     	; 0xc40 <__addsf3+0x18>
     c34:	6b d1       	rcall	.+726    	; 0xf0c <__fp_pscB>
     c36:	20 f0       	brcs	.+8      	; 0xc40 <__addsf3+0x18>
     c38:	31 f4       	brne	.+12     	; 0xc46 <__addsf3+0x1e>
     c3a:	9f 3f       	cpi	r25, 0xFF	; 255
     c3c:	11 f4       	brne	.+4      	; 0xc42 <__addsf3+0x1a>
     c3e:	1e f4       	brtc	.+6      	; 0xc46 <__addsf3+0x1e>
     c40:	5b c1       	rjmp	.+694    	; 0xef8 <__fp_nan>
     c42:	0e f4       	brtc	.+2      	; 0xc46 <__addsf3+0x1e>
     c44:	e0 95       	com	r30
     c46:	e7 fb       	bst	r30, 7
     c48:	51 c1       	rjmp	.+674    	; 0xeec <__fp_inf>

00000c4a <__addsf3x>:
     c4a:	e9 2f       	mov	r30, r25
     c4c:	77 d1       	rcall	.+750    	; 0xf3c <__fp_split3>
     c4e:	80 f3       	brcs	.-32     	; 0xc30 <__addsf3+0x8>
     c50:	ba 17       	cp	r27, r26
     c52:	62 07       	cpc	r22, r18
     c54:	73 07       	cpc	r23, r19
     c56:	84 07       	cpc	r24, r20
     c58:	95 07       	cpc	r25, r21
     c5a:	18 f0       	brcs	.+6      	; 0xc62 <__addsf3x+0x18>
     c5c:	71 f4       	brne	.+28     	; 0xc7a <__addsf3x+0x30>
     c5e:	9e f5       	brtc	.+102    	; 0xcc6 <__addsf3x+0x7c>
     c60:	8f c1       	rjmp	.+798    	; 0xf80 <__fp_zero>
     c62:	0e f4       	brtc	.+2      	; 0xc66 <__addsf3x+0x1c>
     c64:	e0 95       	com	r30
     c66:	0b 2e       	mov	r0, r27
     c68:	ba 2f       	mov	r27, r26
     c6a:	a0 2d       	mov	r26, r0
     c6c:	0b 01       	movw	r0, r22
     c6e:	b9 01       	movw	r22, r18
     c70:	90 01       	movw	r18, r0
     c72:	0c 01       	movw	r0, r24
     c74:	ca 01       	movw	r24, r20
     c76:	a0 01       	movw	r20, r0
     c78:	11 24       	eor	r1, r1
     c7a:	ff 27       	eor	r31, r31
     c7c:	59 1b       	sub	r21, r25
     c7e:	99 f0       	breq	.+38     	; 0xca6 <__addsf3x+0x5c>
     c80:	59 3f       	cpi	r21, 0xF9	; 249
     c82:	50 f4       	brcc	.+20     	; 0xc98 <__addsf3x+0x4e>
     c84:	50 3e       	cpi	r21, 0xE0	; 224
     c86:	68 f1       	brcs	.+90     	; 0xce2 <__addsf3x+0x98>
     c88:	1a 16       	cp	r1, r26
     c8a:	f0 40       	sbci	r31, 0x00	; 0
     c8c:	a2 2f       	mov	r26, r18
     c8e:	23 2f       	mov	r18, r19
     c90:	34 2f       	mov	r19, r20
     c92:	44 27       	eor	r20, r20
     c94:	58 5f       	subi	r21, 0xF8	; 248
     c96:	f3 cf       	rjmp	.-26     	; 0xc7e <__addsf3x+0x34>
     c98:	46 95       	lsr	r20
     c9a:	37 95       	ror	r19
     c9c:	27 95       	ror	r18
     c9e:	a7 95       	ror	r26
     ca0:	f0 40       	sbci	r31, 0x00	; 0
     ca2:	53 95       	inc	r21
     ca4:	c9 f7       	brne	.-14     	; 0xc98 <__addsf3x+0x4e>
     ca6:	7e f4       	brtc	.+30     	; 0xcc6 <__addsf3x+0x7c>
     ca8:	1f 16       	cp	r1, r31
     caa:	ba 0b       	sbc	r27, r26
     cac:	62 0b       	sbc	r22, r18
     cae:	73 0b       	sbc	r23, r19
     cb0:	84 0b       	sbc	r24, r20
     cb2:	ba f0       	brmi	.+46     	; 0xce2 <__addsf3x+0x98>
     cb4:	91 50       	subi	r25, 0x01	; 1
     cb6:	a1 f0       	breq	.+40     	; 0xce0 <__addsf3x+0x96>
     cb8:	ff 0f       	add	r31, r31
     cba:	bb 1f       	adc	r27, r27
     cbc:	66 1f       	adc	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	88 1f       	adc	r24, r24
     cc2:	c2 f7       	brpl	.-16     	; 0xcb4 <__addsf3x+0x6a>
     cc4:	0e c0       	rjmp	.+28     	; 0xce2 <__addsf3x+0x98>
     cc6:	ba 0f       	add	r27, r26
     cc8:	62 1f       	adc	r22, r18
     cca:	73 1f       	adc	r23, r19
     ccc:	84 1f       	adc	r24, r20
     cce:	48 f4       	brcc	.+18     	; 0xce2 <__addsf3x+0x98>
     cd0:	87 95       	ror	r24
     cd2:	77 95       	ror	r23
     cd4:	67 95       	ror	r22
     cd6:	b7 95       	ror	r27
     cd8:	f7 95       	ror	r31
     cda:	9e 3f       	cpi	r25, 0xFE	; 254
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <__addsf3x+0x96>
     cde:	b3 cf       	rjmp	.-154    	; 0xc46 <__addsf3+0x1e>
     ce0:	93 95       	inc	r25
     ce2:	88 0f       	add	r24, r24
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <__addsf3x+0x9e>
     ce6:	99 27       	eor	r25, r25
     ce8:	ee 0f       	add	r30, r30
     cea:	97 95       	ror	r25
     cec:	87 95       	ror	r24
     cee:	08 95       	ret

00000cf0 <__cmpsf2>:
     cf0:	d9 d0       	rcall	.+434    	; 0xea4 <__fp_cmp>
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__cmpsf2+0x6>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	08 95       	ret

00000cf8 <__divsf3>:
     cf8:	0c d0       	rcall	.+24     	; 0xd12 <__divsf3x>
     cfa:	0f c1       	rjmp	.+542    	; 0xf1a <__fp_round>
     cfc:	07 d1       	rcall	.+526    	; 0xf0c <__fp_pscB>
     cfe:	40 f0       	brcs	.+16     	; 0xd10 <__divsf3+0x18>
     d00:	fe d0       	rcall	.+508    	; 0xefe <__fp_pscA>
     d02:	30 f0       	brcs	.+12     	; 0xd10 <__divsf3+0x18>
     d04:	21 f4       	brne	.+8      	; 0xd0e <__divsf3+0x16>
     d06:	5f 3f       	cpi	r21, 0xFF	; 255
     d08:	19 f0       	breq	.+6      	; 0xd10 <__divsf3+0x18>
     d0a:	f0 c0       	rjmp	.+480    	; 0xeec <__fp_inf>
     d0c:	51 11       	cpse	r21, r1
     d0e:	39 c1       	rjmp	.+626    	; 0xf82 <__fp_szero>
     d10:	f3 c0       	rjmp	.+486    	; 0xef8 <__fp_nan>

00000d12 <__divsf3x>:
     d12:	14 d1       	rcall	.+552    	; 0xf3c <__fp_split3>
     d14:	98 f3       	brcs	.-26     	; 0xcfc <__divsf3+0x4>

00000d16 <__divsf3_pse>:
     d16:	99 23       	and	r25, r25
     d18:	c9 f3       	breq	.-14     	; 0xd0c <__divsf3+0x14>
     d1a:	55 23       	and	r21, r21
     d1c:	b1 f3       	breq	.-20     	; 0xd0a <__divsf3+0x12>
     d1e:	95 1b       	sub	r25, r21
     d20:	55 0b       	sbc	r21, r21
     d22:	bb 27       	eor	r27, r27
     d24:	aa 27       	eor	r26, r26
     d26:	62 17       	cp	r22, r18
     d28:	73 07       	cpc	r23, r19
     d2a:	84 07       	cpc	r24, r20
     d2c:	38 f0       	brcs	.+14     	; 0xd3c <__divsf3_pse+0x26>
     d2e:	9f 5f       	subi	r25, 0xFF	; 255
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	22 0f       	add	r18, r18
     d34:	33 1f       	adc	r19, r19
     d36:	44 1f       	adc	r20, r20
     d38:	aa 1f       	adc	r26, r26
     d3a:	a9 f3       	breq	.-22     	; 0xd26 <__divsf3_pse+0x10>
     d3c:	33 d0       	rcall	.+102    	; 0xda4 <__divsf3_pse+0x8e>
     d3e:	0e 2e       	mov	r0, r30
     d40:	3a f0       	brmi	.+14     	; 0xd50 <__divsf3_pse+0x3a>
     d42:	e0 e8       	ldi	r30, 0x80	; 128
     d44:	30 d0       	rcall	.+96     	; 0xda6 <__divsf3_pse+0x90>
     d46:	91 50       	subi	r25, 0x01	; 1
     d48:	50 40       	sbci	r21, 0x00	; 0
     d4a:	e6 95       	lsr	r30
     d4c:	00 1c       	adc	r0, r0
     d4e:	ca f7       	brpl	.-14     	; 0xd42 <__divsf3_pse+0x2c>
     d50:	29 d0       	rcall	.+82     	; 0xda4 <__divsf3_pse+0x8e>
     d52:	fe 2f       	mov	r31, r30
     d54:	27 d0       	rcall	.+78     	; 0xda4 <__divsf3_pse+0x8e>
     d56:	66 0f       	add	r22, r22
     d58:	77 1f       	adc	r23, r23
     d5a:	88 1f       	adc	r24, r24
     d5c:	bb 1f       	adc	r27, r27
     d5e:	26 17       	cp	r18, r22
     d60:	37 07       	cpc	r19, r23
     d62:	48 07       	cpc	r20, r24
     d64:	ab 07       	cpc	r26, r27
     d66:	b0 e8       	ldi	r27, 0x80	; 128
     d68:	09 f0       	breq	.+2      	; 0xd6c <__divsf3_pse+0x56>
     d6a:	bb 0b       	sbc	r27, r27
     d6c:	80 2d       	mov	r24, r0
     d6e:	bf 01       	movw	r22, r30
     d70:	ff 27       	eor	r31, r31
     d72:	93 58       	subi	r25, 0x83	; 131
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	2a f0       	brmi	.+10     	; 0xd82 <__divsf3_pse+0x6c>
     d78:	9e 3f       	cpi	r25, 0xFE	; 254
     d7a:	51 05       	cpc	r21, r1
     d7c:	68 f0       	brcs	.+26     	; 0xd98 <__divsf3_pse+0x82>
     d7e:	b6 c0       	rjmp	.+364    	; 0xeec <__fp_inf>
     d80:	00 c1       	rjmp	.+512    	; 0xf82 <__fp_szero>
     d82:	5f 3f       	cpi	r21, 0xFF	; 255
     d84:	ec f3       	brlt	.-6      	; 0xd80 <__divsf3_pse+0x6a>
     d86:	98 3e       	cpi	r25, 0xE8	; 232
     d88:	dc f3       	brlt	.-10     	; 0xd80 <__divsf3_pse+0x6a>
     d8a:	86 95       	lsr	r24
     d8c:	77 95       	ror	r23
     d8e:	67 95       	ror	r22
     d90:	b7 95       	ror	r27
     d92:	f7 95       	ror	r31
     d94:	9f 5f       	subi	r25, 0xFF	; 255
     d96:	c9 f7       	brne	.-14     	; 0xd8a <__divsf3_pse+0x74>
     d98:	88 0f       	add	r24, r24
     d9a:	91 1d       	adc	r25, r1
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	97 f9       	bld	r25, 7
     da2:	08 95       	ret
     da4:	e1 e0       	ldi	r30, 0x01	; 1
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	bb 1f       	adc	r27, r27
     dae:	62 17       	cp	r22, r18
     db0:	73 07       	cpc	r23, r19
     db2:	84 07       	cpc	r24, r20
     db4:	ba 07       	cpc	r27, r26
     db6:	20 f0       	brcs	.+8      	; 0xdc0 <__divsf3_pse+0xaa>
     db8:	62 1b       	sub	r22, r18
     dba:	73 0b       	sbc	r23, r19
     dbc:	84 0b       	sbc	r24, r20
     dbe:	ba 0b       	sbc	r27, r26
     dc0:	ee 1f       	adc	r30, r30
     dc2:	88 f7       	brcc	.-30     	; 0xda6 <__divsf3_pse+0x90>
     dc4:	e0 95       	com	r30
     dc6:	08 95       	ret

00000dc8 <__fixsfsi>:
     dc8:	04 d0       	rcall	.+8      	; 0xdd2 <__fixunssfsi>
     dca:	68 94       	set
     dcc:	b1 11       	cpse	r27, r1
     dce:	d9 c0       	rjmp	.+434    	; 0xf82 <__fp_szero>
     dd0:	08 95       	ret

00000dd2 <__fixunssfsi>:
     dd2:	bc d0       	rcall	.+376    	; 0xf4c <__fp_splitA>
     dd4:	88 f0       	brcs	.+34     	; 0xdf8 <__fixunssfsi+0x26>
     dd6:	9f 57       	subi	r25, 0x7F	; 127
     dd8:	90 f0       	brcs	.+36     	; 0xdfe <__fixunssfsi+0x2c>
     dda:	b9 2f       	mov	r27, r25
     ddc:	99 27       	eor	r25, r25
     dde:	b7 51       	subi	r27, 0x17	; 23
     de0:	a0 f0       	brcs	.+40     	; 0xe0a <__fixunssfsi+0x38>
     de2:	d1 f0       	breq	.+52     	; 0xe18 <__fixunssfsi+0x46>
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	1a f0       	brmi	.+6      	; 0xdf4 <__fixunssfsi+0x22>
     dee:	ba 95       	dec	r27
     df0:	c9 f7       	brne	.-14     	; 0xde4 <__fixunssfsi+0x12>
     df2:	12 c0       	rjmp	.+36     	; 0xe18 <__fixunssfsi+0x46>
     df4:	b1 30       	cpi	r27, 0x01	; 1
     df6:	81 f0       	breq	.+32     	; 0xe18 <__fixunssfsi+0x46>
     df8:	c3 d0       	rcall	.+390    	; 0xf80 <__fp_zero>
     dfa:	b1 e0       	ldi	r27, 0x01	; 1
     dfc:	08 95       	ret
     dfe:	c0 c0       	rjmp	.+384    	; 0xf80 <__fp_zero>
     e00:	67 2f       	mov	r22, r23
     e02:	78 2f       	mov	r23, r24
     e04:	88 27       	eor	r24, r24
     e06:	b8 5f       	subi	r27, 0xF8	; 248
     e08:	39 f0       	breq	.+14     	; 0xe18 <__fixunssfsi+0x46>
     e0a:	b9 3f       	cpi	r27, 0xF9	; 249
     e0c:	cc f3       	brlt	.-14     	; 0xe00 <__fixunssfsi+0x2e>
     e0e:	86 95       	lsr	r24
     e10:	77 95       	ror	r23
     e12:	67 95       	ror	r22
     e14:	b3 95       	inc	r27
     e16:	d9 f7       	brne	.-10     	; 0xe0e <__fixunssfsi+0x3c>
     e18:	3e f4       	brtc	.+14     	; 0xe28 <__fixunssfsi+0x56>
     e1a:	90 95       	com	r25
     e1c:	80 95       	com	r24
     e1e:	70 95       	com	r23
     e20:	61 95       	neg	r22
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	8f 4f       	sbci	r24, 0xFF	; 255
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	08 95       	ret

00000e2a <__floatunsisf>:
     e2a:	e8 94       	clt
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <__floatsisf+0x12>

00000e2e <__floatsisf>:
     e2e:	97 fb       	bst	r25, 7
     e30:	3e f4       	brtc	.+14     	; 0xe40 <__floatsisf+0x12>
     e32:	90 95       	com	r25
     e34:	80 95       	com	r24
     e36:	70 95       	com	r23
     e38:	61 95       	neg	r22
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	8f 4f       	sbci	r24, 0xFF	; 255
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	99 23       	and	r25, r25
     e42:	a9 f0       	breq	.+42     	; 0xe6e <__floatsisf+0x40>
     e44:	f9 2f       	mov	r31, r25
     e46:	96 e9       	ldi	r25, 0x96	; 150
     e48:	bb 27       	eor	r27, r27
     e4a:	93 95       	inc	r25
     e4c:	f6 95       	lsr	r31
     e4e:	87 95       	ror	r24
     e50:	77 95       	ror	r23
     e52:	67 95       	ror	r22
     e54:	b7 95       	ror	r27
     e56:	f1 11       	cpse	r31, r1
     e58:	f8 cf       	rjmp	.-16     	; 0xe4a <__floatsisf+0x1c>
     e5a:	fa f4       	brpl	.+62     	; 0xe9a <__floatsisf+0x6c>
     e5c:	bb 0f       	add	r27, r27
     e5e:	11 f4       	brne	.+4      	; 0xe64 <__floatsisf+0x36>
     e60:	60 ff       	sbrs	r22, 0
     e62:	1b c0       	rjmp	.+54     	; 0xe9a <__floatsisf+0x6c>
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	16 c0       	rjmp	.+44     	; 0xe9a <__floatsisf+0x6c>
     e6e:	88 23       	and	r24, r24
     e70:	11 f0       	breq	.+4      	; 0xe76 <__floatsisf+0x48>
     e72:	96 e9       	ldi	r25, 0x96	; 150
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <__floatsisf+0x6a>
     e76:	77 23       	and	r23, r23
     e78:	21 f0       	breq	.+8      	; 0xe82 <__floatsisf+0x54>
     e7a:	9e e8       	ldi	r25, 0x8E	; 142
     e7c:	87 2f       	mov	r24, r23
     e7e:	76 2f       	mov	r23, r22
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <__floatsisf+0x5e>
     e82:	66 23       	and	r22, r22
     e84:	71 f0       	breq	.+28     	; 0xea2 <__floatsisf+0x74>
     e86:	96 e8       	ldi	r25, 0x86	; 134
     e88:	86 2f       	mov	r24, r22
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	2a f0       	brmi	.+10     	; 0xe9a <__floatsisf+0x6c>
     e90:	9a 95       	dec	r25
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	88 1f       	adc	r24, r24
     e98:	da f7       	brpl	.-10     	; 0xe90 <__floatsisf+0x62>
     e9a:	88 0f       	add	r24, r24
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	97 f9       	bld	r25, 7
     ea2:	08 95       	ret

00000ea4 <__fp_cmp>:
     ea4:	99 0f       	add	r25, r25
     ea6:	00 08       	sbc	r0, r0
     ea8:	55 0f       	add	r21, r21
     eaa:	aa 0b       	sbc	r26, r26
     eac:	e0 e8       	ldi	r30, 0x80	; 128
     eae:	fe ef       	ldi	r31, 0xFE	; 254
     eb0:	16 16       	cp	r1, r22
     eb2:	17 06       	cpc	r1, r23
     eb4:	e8 07       	cpc	r30, r24
     eb6:	f9 07       	cpc	r31, r25
     eb8:	c0 f0       	brcs	.+48     	; 0xeea <__fp_cmp+0x46>
     eba:	12 16       	cp	r1, r18
     ebc:	13 06       	cpc	r1, r19
     ebe:	e4 07       	cpc	r30, r20
     ec0:	f5 07       	cpc	r31, r21
     ec2:	98 f0       	brcs	.+38     	; 0xeea <__fp_cmp+0x46>
     ec4:	62 1b       	sub	r22, r18
     ec6:	73 0b       	sbc	r23, r19
     ec8:	84 0b       	sbc	r24, r20
     eca:	95 0b       	sbc	r25, r21
     ecc:	39 f4       	brne	.+14     	; 0xedc <__fp_cmp+0x38>
     ece:	0a 26       	eor	r0, r26
     ed0:	61 f0       	breq	.+24     	; 0xeea <__fp_cmp+0x46>
     ed2:	23 2b       	or	r18, r19
     ed4:	24 2b       	or	r18, r20
     ed6:	25 2b       	or	r18, r21
     ed8:	21 f4       	brne	.+8      	; 0xee2 <__fp_cmp+0x3e>
     eda:	08 95       	ret
     edc:	0a 26       	eor	r0, r26
     ede:	09 f4       	brne	.+2      	; 0xee2 <__fp_cmp+0x3e>
     ee0:	a1 40       	sbci	r26, 0x01	; 1
     ee2:	a6 95       	lsr	r26
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	81 1d       	adc	r24, r1
     ee8:	81 1d       	adc	r24, r1
     eea:	08 95       	ret

00000eec <__fp_inf>:
     eec:	97 f9       	bld	r25, 7
     eee:	9f 67       	ori	r25, 0x7F	; 127
     ef0:	80 e8       	ldi	r24, 0x80	; 128
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	08 95       	ret

00000ef8 <__fp_nan>:
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	80 ec       	ldi	r24, 0xC0	; 192
     efc:	08 95       	ret

00000efe <__fp_pscA>:
     efe:	00 24       	eor	r0, r0
     f00:	0a 94       	dec	r0
     f02:	16 16       	cp	r1, r22
     f04:	17 06       	cpc	r1, r23
     f06:	18 06       	cpc	r1, r24
     f08:	09 06       	cpc	r0, r25
     f0a:	08 95       	ret

00000f0c <__fp_pscB>:
     f0c:	00 24       	eor	r0, r0
     f0e:	0a 94       	dec	r0
     f10:	12 16       	cp	r1, r18
     f12:	13 06       	cpc	r1, r19
     f14:	14 06       	cpc	r1, r20
     f16:	05 06       	cpc	r0, r21
     f18:	08 95       	ret

00000f1a <__fp_round>:
     f1a:	09 2e       	mov	r0, r25
     f1c:	03 94       	inc	r0
     f1e:	00 0c       	add	r0, r0
     f20:	11 f4       	brne	.+4      	; 0xf26 <__fp_round+0xc>
     f22:	88 23       	and	r24, r24
     f24:	52 f0       	brmi	.+20     	; 0xf3a <__fp_round+0x20>
     f26:	bb 0f       	add	r27, r27
     f28:	40 f4       	brcc	.+16     	; 0xf3a <__fp_round+0x20>
     f2a:	bf 2b       	or	r27, r31
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__fp_round+0x18>
     f2e:	60 ff       	sbrs	r22, 0
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <__fp_round+0x20>
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 4f       	sbci	r24, 0xFF	; 255
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	08 95       	ret

00000f3c <__fp_split3>:
     f3c:	57 fd       	sbrc	r21, 7
     f3e:	90 58       	subi	r25, 0x80	; 128
     f40:	44 0f       	add	r20, r20
     f42:	55 1f       	adc	r21, r21
     f44:	59 f0       	breq	.+22     	; 0xf5c <__fp_splitA+0x10>
     f46:	5f 3f       	cpi	r21, 0xFF	; 255
     f48:	71 f0       	breq	.+28     	; 0xf66 <__fp_splitA+0x1a>
     f4a:	47 95       	ror	r20

00000f4c <__fp_splitA>:
     f4c:	88 0f       	add	r24, r24
     f4e:	97 fb       	bst	r25, 7
     f50:	99 1f       	adc	r25, r25
     f52:	61 f0       	breq	.+24     	; 0xf6c <__fp_splitA+0x20>
     f54:	9f 3f       	cpi	r25, 0xFF	; 255
     f56:	79 f0       	breq	.+30     	; 0xf76 <__fp_splitA+0x2a>
     f58:	87 95       	ror	r24
     f5a:	08 95       	ret
     f5c:	12 16       	cp	r1, r18
     f5e:	13 06       	cpc	r1, r19
     f60:	14 06       	cpc	r1, r20
     f62:	55 1f       	adc	r21, r21
     f64:	f2 cf       	rjmp	.-28     	; 0xf4a <__fp_split3+0xe>
     f66:	46 95       	lsr	r20
     f68:	f1 df       	rcall	.-30     	; 0xf4c <__fp_splitA>
     f6a:	08 c0       	rjmp	.+16     	; 0xf7c <__fp_splitA+0x30>
     f6c:	16 16       	cp	r1, r22
     f6e:	17 06       	cpc	r1, r23
     f70:	18 06       	cpc	r1, r24
     f72:	99 1f       	adc	r25, r25
     f74:	f1 cf       	rjmp	.-30     	; 0xf58 <__fp_splitA+0xc>
     f76:	86 95       	lsr	r24
     f78:	71 05       	cpc	r23, r1
     f7a:	61 05       	cpc	r22, r1
     f7c:	08 94       	sec
     f7e:	08 95       	ret

00000f80 <__fp_zero>:
     f80:	e8 94       	clt

00000f82 <__fp_szero>:
     f82:	bb 27       	eor	r27, r27
     f84:	66 27       	eor	r22, r22
     f86:	77 27       	eor	r23, r23
     f88:	cb 01       	movw	r24, r22
     f8a:	97 f9       	bld	r25, 7
     f8c:	08 95       	ret

00000f8e <__gesf2>:
     f8e:	8a df       	rcall	.-236    	; 0xea4 <__fp_cmp>
     f90:	08 f4       	brcc	.+2      	; 0xf94 <__gesf2+0x6>
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	08 95       	ret

00000f96 <__mulsf3>:
     f96:	0b d0       	rcall	.+22     	; 0xfae <__mulsf3x>
     f98:	c0 cf       	rjmp	.-128    	; 0xf1a <__fp_round>
     f9a:	b1 df       	rcall	.-158    	; 0xefe <__fp_pscA>
     f9c:	28 f0       	brcs	.+10     	; 0xfa8 <__mulsf3+0x12>
     f9e:	b6 df       	rcall	.-148    	; 0xf0c <__fp_pscB>
     fa0:	18 f0       	brcs	.+6      	; 0xfa8 <__mulsf3+0x12>
     fa2:	95 23       	and	r25, r21
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <__mulsf3+0x12>
     fa6:	a2 cf       	rjmp	.-188    	; 0xeec <__fp_inf>
     fa8:	a7 cf       	rjmp	.-178    	; 0xef8 <__fp_nan>
     faa:	11 24       	eor	r1, r1
     fac:	ea cf       	rjmp	.-44     	; 0xf82 <__fp_szero>

00000fae <__mulsf3x>:
     fae:	c6 df       	rcall	.-116    	; 0xf3c <__fp_split3>
     fb0:	a0 f3       	brcs	.-24     	; 0xf9a <__mulsf3+0x4>

00000fb2 <__mulsf3_pse>:
     fb2:	95 9f       	mul	r25, r21
     fb4:	d1 f3       	breq	.-12     	; 0xfaa <__mulsf3+0x14>
     fb6:	95 0f       	add	r25, r21
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	55 1f       	adc	r21, r21
     fbc:	62 9f       	mul	r22, r18
     fbe:	f0 01       	movw	r30, r0
     fc0:	72 9f       	mul	r23, r18
     fc2:	bb 27       	eor	r27, r27
     fc4:	f0 0d       	add	r31, r0
     fc6:	b1 1d       	adc	r27, r1
     fc8:	63 9f       	mul	r22, r19
     fca:	aa 27       	eor	r26, r26
     fcc:	f0 0d       	add	r31, r0
     fce:	b1 1d       	adc	r27, r1
     fd0:	aa 1f       	adc	r26, r26
     fd2:	64 9f       	mul	r22, r20
     fd4:	66 27       	eor	r22, r22
     fd6:	b0 0d       	add	r27, r0
     fd8:	a1 1d       	adc	r26, r1
     fda:	66 1f       	adc	r22, r22
     fdc:	82 9f       	mul	r24, r18
     fde:	22 27       	eor	r18, r18
     fe0:	b0 0d       	add	r27, r0
     fe2:	a1 1d       	adc	r26, r1
     fe4:	62 1f       	adc	r22, r18
     fe6:	73 9f       	mul	r23, r19
     fe8:	b0 0d       	add	r27, r0
     fea:	a1 1d       	adc	r26, r1
     fec:	62 1f       	adc	r22, r18
     fee:	83 9f       	mul	r24, r19
     ff0:	a0 0d       	add	r26, r0
     ff2:	61 1d       	adc	r22, r1
     ff4:	22 1f       	adc	r18, r18
     ff6:	74 9f       	mul	r23, r20
     ff8:	33 27       	eor	r19, r19
     ffa:	a0 0d       	add	r26, r0
     ffc:	61 1d       	adc	r22, r1
     ffe:	23 1f       	adc	r18, r19
    1000:	84 9f       	mul	r24, r20
    1002:	60 0d       	add	r22, r0
    1004:	21 1d       	adc	r18, r1
    1006:	82 2f       	mov	r24, r18
    1008:	76 2f       	mov	r23, r22
    100a:	6a 2f       	mov	r22, r26
    100c:	11 24       	eor	r1, r1
    100e:	9f 57       	subi	r25, 0x7F	; 127
    1010:	50 40       	sbci	r21, 0x00	; 0
    1012:	8a f0       	brmi	.+34     	; 0x1036 <__mulsf3_pse+0x84>
    1014:	e1 f0       	breq	.+56     	; 0x104e <__mulsf3_pse+0x9c>
    1016:	88 23       	and	r24, r24
    1018:	4a f0       	brmi	.+18     	; 0x102c <__mulsf3_pse+0x7a>
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	bb 1f       	adc	r27, r27
    1020:	66 1f       	adc	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	88 1f       	adc	r24, r24
    1026:	91 50       	subi	r25, 0x01	; 1
    1028:	50 40       	sbci	r21, 0x00	; 0
    102a:	a9 f7       	brne	.-22     	; 0x1016 <__mulsf3_pse+0x64>
    102c:	9e 3f       	cpi	r25, 0xFE	; 254
    102e:	51 05       	cpc	r21, r1
    1030:	70 f0       	brcs	.+28     	; 0x104e <__mulsf3_pse+0x9c>
    1032:	5c cf       	rjmp	.-328    	; 0xeec <__fp_inf>
    1034:	a6 cf       	rjmp	.-180    	; 0xf82 <__fp_szero>
    1036:	5f 3f       	cpi	r21, 0xFF	; 255
    1038:	ec f3       	brlt	.-6      	; 0x1034 <__mulsf3_pse+0x82>
    103a:	98 3e       	cpi	r25, 0xE8	; 232
    103c:	dc f3       	brlt	.-10     	; 0x1034 <__mulsf3_pse+0x82>
    103e:	86 95       	lsr	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	f7 95       	ror	r31
    1048:	e7 95       	ror	r30
    104a:	9f 5f       	subi	r25, 0xFF	; 255
    104c:	c1 f7       	brne	.-16     	; 0x103e <__mulsf3_pse+0x8c>
    104e:	fe 2b       	or	r31, r30
    1050:	88 0f       	add	r24, r24
    1052:	91 1d       	adc	r25, r1
    1054:	96 95       	lsr	r25
    1056:	87 95       	ror	r24
    1058:	97 f9       	bld	r25, 7
    105a:	08 95       	ret

0000105c <_exit>:
    105c:	f8 94       	cli

0000105e <__stop_program>:
    105e:	ff cf       	rjmp	.-2      	; 0x105e <__stop_program>
