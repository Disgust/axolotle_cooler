
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000b36  00000bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800158  00800158  00000c22  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e0  00000000  00000000  00000ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ab  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011a  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053c  00000000  00000000  00001147  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019a  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	BIT_OFF(CONTROL_PORT, LOAD);
    BIT_OFF(progFlags, COOLING);
}

void LCD_Clear()
{
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c3       	rjmp	.+1684   	; 0x6ba <__vector_9>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c3       	rjmp	.+1710   	; 0x6dc <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	ec c2       	rjmp	.+1496   	; 0x62e <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e5       	ldi	r26, 0x58	; 88
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	b5 d1       	rcall	.+874    	; 0x406 <main>
  9c:	4a c5       	rjmp	.+2708   	; 0xb32 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <turnOnCooler>:
volatile static uint16_t measureRate= 0x0100; // поумолчанию - частота замера (F_CPU/1024)/2
static uint8_t progFlags= 0b00000000;

void turnOnCooler() 
{
	BIT_ON(CONTROL_PORT, LOAD);
  a0:	eb e2       	ldi	r30, 0x2B	; 43
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	80 83       	st	Z, r24
    BIT_ON(progFlags, COOLING);
  aa:	80 91 5c 01 	lds	r24, 0x015C
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	80 93 5c 01 	sts	0x015C, r24
}
  b4:	08 95       	ret

000000b6 <turnOffCooler>:

void turnOffCooler() 
{
	BIT_OFF(CONTROL_PORT, LOAD);
  b6:	eb e2       	ldi	r30, 0x2B	; 43
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	87 7f       	andi	r24, 0xF7	; 247
  be:	80 83       	st	Z, r24
    BIT_OFF(progFlags, COOLING);
  c0:	80 91 5c 01 	lds	r24, 0x015C
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	80 93 5c 01 	sts	0x015C, r24
}
  ca:	08 95       	ret

000000cc <LCD_Write>:
    //TODO: определить
}

void LCD_Write(uint8_t data, uint8_t posY, uint8_t posX ) 
{
    cli();
  cc:	f8 94       	cli
	//TODO: определить
    sei();
  ce:	78 94       	sei
}
  d0:	08 95       	ret

000000d2 <LCD_DisplayAll>:
{
	//TODO: определить
}

void LCD_DisplayAll() 
{   
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
	LCD_Write("TEMP :", 0, 0);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	f4 df       	rcall	.-24     	; 0xcc <LCD_Write>
    LCD_Write((uint8_t)temperatureValue, 0, 8);
  e4:	60 91 5e 01 	lds	r22, 0x015E
  e8:	70 91 5f 01 	lds	r23, 0x015F
  ec:	80 91 60 01 	lds	r24, 0x0160
  f0:	90 91 61 01 	lds	r25, 0x0161
  f4:	d9 d3       	rcall	.+1970   	; 0x8a8 <__fixunssfsi>
  f6:	dc 01       	movw	r26, r24
  f8:	cb 01       	movw	r24, r22
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	48 e0       	ldi	r20, 0x08	; 8
  fe:	e6 df       	rcall	.-52     	; 0xcc <LCD_Write>
    if (BIT_READ(progFlags, COOLING))
 100:	80 91 5c 01 	lds	r24, 0x015C
 104:	86 95       	lsr	r24
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	80 ff       	sbrs	r24, 0
 10c:	2b c0       	rjmp	.+86     	; 0x164 <LCD_DisplayAll+0x92>
    {
        LCD_Write("COOLING ", 1, 0);
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	da df       	rcall	.-76     	; 0xcc <LCD_Write>
        LCD_Write((uint8_t)((temperatureValue - targetTemp)/Tolerance)*100, 1, 8);
 118:	60 91 5e 01 	lds	r22, 0x015E
 11c:	70 91 5f 01 	lds	r23, 0x015F
 120:	80 91 60 01 	lds	r24, 0x0160
 124:	90 91 61 01 	lds	r25, 0x0161
 128:	20 91 13 01 	lds	r18, 0x0113
 12c:	30 91 14 01 	lds	r19, 0x0114
 130:	40 91 15 01 	lds	r20, 0x0115
 134:	50 91 16 01 	lds	r21, 0x0116
 138:	e0 90 58 01 	lds	r14, 0x0158
 13c:	f0 90 59 01 	lds	r15, 0x0159
 140:	00 91 5a 01 	lds	r16, 0x015A
 144:	10 91 5b 01 	lds	r17, 0x015B
 148:	de d2       	rcall	.+1468   	; 0x706 <__subsf3>
 14a:	a8 01       	movw	r20, r16
 14c:	97 01       	movw	r18, r14
 14e:	44 d3       	rcall	.+1672   	; 0x7d8 <__divsf3>
 150:	ab d3       	rcall	.+1878   	; 0x8a8 <__fixunssfsi>
 152:	9b 01       	movw	r18, r22
 154:	ac 01       	movw	r20, r24
 156:	84 e6       	ldi	r24, 0x64	; 100
 158:	82 9f       	mul	r24, r18
 15a:	80 2d       	mov	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	48 e0       	ldi	r20, 0x08	; 8
 162:	b4 df       	rcall	.-152    	; 0xcc <LCD_Write>
    }
}
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	08 95       	ret

0000016e <menuRun>:


void menuRun()
{   int pos= 0;
 16e:	2f 92       	push	r2
 170:	3f 92       	push	r3
 172:	4f 92       	push	r4
 174:	5f 92       	push	r5
 176:	6f 92       	push	r6
 178:	7f 92       	push	r7
 17a:	8f 92       	push	r8
 17c:	9f 92       	push	r9
 17e:	af 92       	push	r10
 180:	bf 92       	push	r11
 182:	cf 92       	push	r12
 184:	df 92       	push	r13
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	df 93       	push	r29
 190:	cf 93       	push	r28
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	c6 54       	subi	r28, 0x46	; 70
 198:	d0 40       	sbci	r29, 0x00	; 0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
 1a4:	de 01       	movw	r26, r28
 1a6:	11 96       	adiw	r26, 0x01	; 1
 1a8:	e7 e1       	ldi	r30, 0x17	; 23
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	01 90       	ld	r0, Z+
 1b0:	0d 92       	st	X+, r0
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <menuRun+0x40>
	uint8_t values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
 1b6:	60 91 13 01 	lds	r22, 0x0113
 1ba:	70 91 14 01 	lds	r23, 0x0114
 1be:	80 91 15 01 	lds	r24, 0x0115
 1c2:	90 91 16 01 	lds	r25, 0x0116
 1c6:	c0 90 58 01 	lds	r12, 0x0158
 1ca:	d0 90 59 01 	lds	r13, 0x0159
 1ce:	e0 90 5a 01 	lds	r14, 0x015A
 1d2:	f0 90 5b 01 	lds	r15, 0x015B
 1d6:	a0 90 11 01 	lds	r10, 0x0111
 1da:	b0 90 12 01 	lds	r11, 0x0112
 1de:	80 90 5c 01 	lds	r8, 0x015C
 1e2:	8e 01       	movw	r16, r28
 1e4:	0f 5b       	subi	r16, 0xBF	; 191
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	5f d3       	rcall	.+1726   	; 0x8a8 <__fixunssfsi>
 1ea:	f8 01       	movw	r30, r16
 1ec:	60 83       	st	Z, r22
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	5a d3       	rcall	.+1716   	; 0x8a8 <__fixunssfsi>
 1f4:	f8 01       	movw	r30, r16
 1f6:	61 83       	std	Z+1, r22	; 0x01
 1f8:	a2 82       	std	Z+2, r10	; 0x02
 1fa:	88 2d       	mov	r24, r8
 1fc:	86 95       	lsr	r24
 1fe:	86 95       	lsr	r24
 200:	81 70       	andi	r24, 0x01	; 1
 202:	83 83       	std	Z+3, r24	; 0x03
 204:	cc 24       	eor	r12, r12
 206:	dd 24       	eor	r13, r13
    LCD_Clear();
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 208:	0f 2e       	mov	r0, r31
 20a:	fb e2       	ldi	r31, 0x2B	; 43
 20c:	6f 2e       	mov	r6, r31
 20e:	77 24       	eor	r7, r7
 210:	f0 2d       	mov	r31, r0
            int value= values[pos];
 212:	28 01       	movw	r4, r16
                    if(value > 1023) value= 0;
                    if(value < 0) value= 1023;
                	break;
                case 4:
                    if(value > 1) value= 0;
                    if(value < 0) value= 1;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	38 2e       	mov	r3, r24
 21a:	29 2e       	mov	r2, r25
                        BIT_WRITE(progFlags, ECONOMY, value);
                    }                        
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	27 96       	adiw	r28, 0x07	; 7
 222:	9f af       	std	Y+63, r25	; 0x3f
 224:	8e af       	std	Y+62, r24	; 0x3e
 226:	27 97       	sbiw	r28, 0x07	; 7
 228:	05 c0       	rjmp	.+10     	; 0x234 <menuRun+0xc6>


void menuRun()
{   int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	uint8_t values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
 22a:	0f 2e       	mov	r0, r31
 22c:	f3 e0       	ldi	r31, 0x03	; 3
 22e:	cf 2e       	mov	r12, r31
 230:	dd 24       	eor	r13, r13
 232:	f0 2d       	mov	r31, r0
    LCD_Clear();
    while (1){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
 234:	f3 01       	movw	r30, r6
 236:	80 81       	ld	r24, Z
 238:	86 fd       	sbrc	r24, 6
 23a:	95 c0       	rjmp	.+298    	; 0x366 <menuRun+0x1f8>
            int value= values[pos];
 23c:	f2 01       	movw	r30, r4
 23e:	ec 0d       	add	r30, r12
 240:	fd 1d       	adc	r31, r13
 242:	90 80       	ld	r9, Z
 244:	a9 2c       	mov	r10, r9
 246:	bb 24       	eor	r11, r11
            while(1){
                BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 248:	ff ee       	ldi	r31, 0xEF	; 239
 24a:	8f 22       	and	r8, r31
                LCD_Write(values[pos],1,0);
 24c:	89 2d       	mov	r24, r9
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	3c df       	rcall	.-392    	; 0xcc <LCD_Write>
                if (!BIT_READ(CONTROL_PORT, BUTTON_P)) values[pos]++;
 254:	f3 01       	movw	r30, r6
 256:	80 81       	ld	r24, Z
 258:	84 ff       	sbrs	r24, 4
 25a:	93 94       	inc	r9
                if (!BIT_READ(CONTROL_PORT, BUTTON_M)) values[pos]--;
 25c:	f3 01       	movw	r30, r6
 25e:	80 81       	ld	r24, Z
 260:	85 ff       	sbrs	r24, 5
 262:	9a 94       	dec	r9
                if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 264:	f3 01       	movw	r30, r6
 266:	80 81       	ld	r24, Z
 268:	88 23       	and	r24, r24
 26a:	0c f0       	brlt	.+2      	; 0x26e <menuRun+0x100>
 26c:	78 c0       	rjmp	.+240    	; 0x35e <menuRun+0x1f0>
                switch (pos)
 26e:	f2 e0       	ldi	r31, 0x02	; 2
 270:	cf 16       	cp	r12, r31
 272:	d1 04       	cpc	r13, r1
 274:	c9 f1       	breq	.+114    	; 0x2e8 <menuRun+0x17a>
 276:	23 e0       	ldi	r18, 0x03	; 3
 278:	c2 16       	cp	r12, r18
 27a:	d1 04       	cpc	r13, r1
 27c:	34 f4       	brge	.+12     	; 0x28a <menuRun+0x11c>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	c8 16       	cp	r12, r24
 282:	d1 04       	cpc	r13, r1
 284:	09 f0       	breq	.+2      	; 0x288 <menuRun+0x11a>
 286:	55 c0       	rjmp	.+170    	; 0x332 <menuRun+0x1c4>
 288:	0b c0       	rjmp	.+22     	; 0x2a0 <menuRun+0x132>
 28a:	93 e0       	ldi	r25, 0x03	; 3
 28c:	c9 16       	cp	r12, r25
 28e:	d1 04       	cpc	r13, r1
 290:	09 f4       	brne	.+2      	; 0x294 <menuRun+0x126>
 292:	4f c0       	rjmp	.+158    	; 0x332 <menuRun+0x1c4>
 294:	e4 e0       	ldi	r30, 0x04	; 4
 296:	ce 16       	cp	r12, r30
 298:	d1 04       	cpc	r13, r1
 29a:	09 f0       	breq	.+2      	; 0x29e <menuRun+0x130>
 29c:	4a c0       	rjmp	.+148    	; 0x332 <menuRun+0x1c4>
 29e:	3d c0       	rjmp	.+122    	; 0x31a <menuRun+0x1ac>
                {
                case 1:
                    if(value > MAX_TEMP) value= MIN_TEMP;
 2a0:	b5 01       	movw	r22, r10
 2a2:	88 27       	eor	r24, r24
 2a4:	77 fd       	sbrc	r23, 7
 2a6:	80 95       	com	r24
 2a8:	98 2f       	mov	r25, r24
 2aa:	2c d3       	rcall	.+1624   	; 0x904 <__floatsisf>
 2ac:	7b 01       	movw	r14, r22
 2ae:	8c 01       	movw	r16, r24
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 ea       	ldi	r20, 0xA0	; 160
 2b6:	51 e4       	ldi	r21, 0x41	; 65
 2b8:	d5 d3       	rcall	.+1962   	; 0xa64 <__gesf2>
 2ba:	18 16       	cp	r1, r24
 2bc:	34 f4       	brge	.+12     	; 0x2ca <menuRun+0x15c>
 2be:	0f 2e       	mov	r0, r31
 2c0:	ff e0       	ldi	r31, 0x0F	; 15
 2c2:	af 2e       	mov	r10, r31
 2c4:	bb 24       	eor	r11, r11
 2c6:	f0 2d       	mov	r31, r0
 2c8:	34 c0       	rjmp	.+104    	; 0x332 <menuRun+0x1c4>
                    if(value < MIN_TEMP) value= MAX_TEMP;
 2ca:	c8 01       	movw	r24, r16
 2cc:	b7 01       	movw	r22, r14
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e7       	ldi	r20, 0x70	; 112
 2d4:	51 e4       	ldi	r21, 0x41	; 65
 2d6:	7c d2       	rcall	.+1272   	; 0x7d0 <__cmpsf2>
 2d8:	88 23       	and	r24, r24
 2da:	5c f5       	brge	.+86     	; 0x332 <menuRun+0x1c4>
 2dc:	0f 2e       	mov	r0, r31
 2de:	f4 e1       	ldi	r31, 0x14	; 20
 2e0:	af 2e       	mov	r10, r31
 2e2:	bb 24       	eor	r11, r11
 2e4:	f0 2d       	mov	r31, r0
 2e6:	25 c0       	rjmp	.+74     	; 0x332 <menuRun+0x1c4>
                	break;
                case 2:
                    if(value > MAX_TOL) value= MIN_TOL;
 2e8:	b5 01       	movw	r22, r10
 2ea:	88 27       	eor	r24, r24
 2ec:	77 fd       	sbrc	r23, 7
 2ee:	80 95       	com	r24
 2f0:	98 2f       	mov	r25, r24
 2f2:	08 d3       	rcall	.+1552   	; 0x904 <__floatsisf>
 2f4:	7b 01       	movw	r14, r22
 2f6:	8c 01       	movw	r16, r24
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e8       	ldi	r20, 0x80	; 128
 2fe:	5f e3       	ldi	r21, 0x3F	; 63
 300:	b1 d3       	rcall	.+1890   	; 0xa64 <__gesf2>
 302:	18 16       	cp	r1, r24
 304:	9c f0       	brlt	.+38     	; 0x32c <menuRun+0x1be>
                    if(value < MIN_TOL) value= MAX_TOL;
 306:	c8 01       	movw	r24, r16
 308:	b7 01       	movw	r22, r14
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	5e d2       	rcall	.+1212   	; 0x7d0 <__cmpsf2>
 314:	88 23       	and	r24, r24
 316:	34 f0       	brlt	.+12     	; 0x324 <menuRun+0x1b6>
 318:	0c c0       	rjmp	.+24     	; 0x332 <menuRun+0x1c4>
                case 3:
                    if(value > 1023) value= 0;
                    if(value < 0) value= 1023;
                	break;
                case 4:
                    if(value > 1) value= 0;
 31a:	f2 e0       	ldi	r31, 0x02	; 2
 31c:	af 16       	cp	r10, r31
 31e:	b1 04       	cpc	r11, r1
 320:	2c f4       	brge	.+10     	; 0x32c <menuRun+0x1be>
 322:	07 c0       	rjmp	.+14     	; 0x332 <menuRun+0x1c4>
                    if(value < 0) value= 1;
 324:	aa 24       	eor	r10, r10
 326:	bb 24       	eor	r11, r11
 328:	a3 94       	inc	r10
 32a:	03 c0       	rjmp	.+6      	; 0x332 <menuRun+0x1c4>
 32c:	83 2d       	mov	r24, r3
 32e:	92 2d       	mov	r25, r2
 330:	5c 01       	movw	r10, r24
                	break;
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
 332:	f3 01       	movw	r30, r6
 334:	80 81       	ld	r24, Z
 336:	86 fd       	sbrc	r24, 6
 338:	87 cf       	rjmp	.-242    	; 0x248 <menuRun+0xda>
                    if(pos!=3){
 33a:	f3 e0       	ldi	r31, 0x03	; 3
 33c:	cf 16       	cp	r12, r31
 33e:	d1 04       	cpc	r13, r1
 340:	29 f0       	breq	.+10     	; 0x34c <menuRun+0x1de>
 342:	f2 01       	movw	r30, r4
 344:	ec 0d       	add	r30, r12
 346:	fd 1d       	adc	r31, r13
                        values[pos]= value;
 348:	a0 82       	st	Z, r10
 34a:	0d c0       	rjmp	.+26     	; 0x366 <menuRun+0x1f8>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
 34c:	a1 14       	cp	r10, r1
 34e:	b1 04       	cpc	r11, r1
 350:	19 f0       	breq	.+6      	; 0x358 <menuRun+0x1ea>
 352:	24 e0       	ldi	r18, 0x04	; 4
 354:	82 2a       	or	r8, r18
 356:	78 cf       	rjmp	.-272    	; 0x248 <menuRun+0xda>
 358:	8b ef       	ldi	r24, 0xFB	; 251
 35a:	88 22       	and	r8, r24
 35c:	75 cf       	rjmp	.-278    	; 0x248 <menuRun+0xda>
 35e:	f2 01       	movw	r30, r4
 360:	ec 0d       	add	r30, r12
 362:	fd 1d       	adc	r31, r13
 364:	90 82       	st	Z, r9
                    }                        
                }                    
            }
        }
        LCD_Write(menu[pos],0,0);
 366:	c6 01       	movw	r24, r12
 368:	82 95       	swap	r24
 36a:	92 95       	swap	r25
 36c:	90 7f       	andi	r25, 0xF0	; 240
 36e:	98 27       	eor	r25, r24
 370:	80 7f       	andi	r24, 0xF0	; 240
 372:	98 27       	eor	r25, r24
 374:	26 96       	adiw	r28, 0x06	; 6
 376:	ef ad       	ldd	r30, Y+63	; 0x3f
 378:	26 97       	sbiw	r28, 0x06	; 6
 37a:	8e 0f       	add	r24, r30
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	a5 de       	rcall	.-694    	; 0xcc <LCD_Write>
        LCD_Write(values[pos],1,0);
 382:	f2 01       	movw	r30, r4
 384:	ec 0d       	add	r30, r12
 386:	fd 1d       	adc	r31, r13
 388:	80 81       	ld	r24, Z
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	9e de       	rcall	.-708    	; 0xcc <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P)) pos++;
 390:	f3 01       	movw	r30, r6
 392:	80 81       	ld	r24, Z
 394:	84 fd       	sbrc	r24, 4
 396:	03 c0       	rjmp	.+6      	; 0x39e <menuRun+0x230>
 398:	08 94       	sec
 39a:	c1 1c       	adc	r12, r1
 39c:	d1 1c       	adc	r13, r1
        if (!BIT_READ(CONTROL_PORT, BUTTON_M)) pos--;
 39e:	f3 01       	movw	r30, r6
 3a0:	80 81       	ld	r24, Z
 3a2:	85 fd       	sbrc	r24, 5
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <menuRun+0x23e>
 3a6:	08 94       	sec
 3a8:	c1 08       	sbc	r12, r1
 3aa:	d1 08       	sbc	r13, r1
        if (!BIT_READ(CONTROL_PORT, BUTTON_BACK)) break;
 3ac:	f3 01       	movw	r30, r6
 3ae:	80 81       	ld	r24, Z
 3b0:	88 23       	and	r24, r24
 3b2:	5c f4       	brge	.+22     	; 0x3ca <menuRun+0x25c>
        if(pos > 3) pos= 0;
 3b4:	f4 e0       	ldi	r31, 0x04	; 4
 3b6:	cf 16       	cp	r12, r31
 3b8:	d1 04       	cpc	r13, r1
 3ba:	1c f0       	brlt	.+6      	; 0x3c2 <menuRun+0x254>
 3bc:	cc 24       	eor	r12, r12
 3be:	dd 24       	eor	r13, r13
 3c0:	39 cf       	rjmp	.-398    	; 0x234 <menuRun+0xc6>
        if(pos < 0) pos= 3;
 3c2:	dd 20       	and	r13, r13
 3c4:	0c f0       	brlt	.+2      	; 0x3c8 <menuRun+0x25a>
 3c6:	36 cf       	rjmp	.-404    	; 0x234 <menuRun+0xc6>
 3c8:	30 cf       	rjmp	.-416    	; 0x22a <menuRun+0xbc>
 3ca:	80 92 5c 01 	sts	0x015C, r8
    }
}
 3ce:	ca 5b       	subi	r28, 0xBA	; 186
 3d0:	df 4f       	sbci	r29, 0xFF	; 255
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	cf 91       	pop	r28
 3de:	df 91       	pop	r29
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	cf 90       	pop	r12
 3ec:	bf 90       	pop	r11
 3ee:	af 90       	pop	r10
 3f0:	9f 90       	pop	r9
 3f2:	8f 90       	pop	r8
 3f4:	7f 90       	pop	r7
 3f6:	6f 90       	pop	r6
 3f8:	5f 90       	pop	r5
 3fa:	4f 90       	pop	r4
 3fc:	3f 90       	pop	r3
 3fe:	2f 90       	pop	r2
 400:	08 95       	ret

00000402 <menuStop>:

void menuStop() 
{
    LCD_Clear();
	LCD_DisplayAll();
 402:	67 ce       	rjmp	.-818    	; 0xd2 <LCD_DisplayAll>
}
 404:	08 95       	ret

00000406 <main>:

int main(void)
{   
 406:	cf 92       	push	r12
 408:	df 92       	push	r13
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
 416:	87 e0       	ldi	r24, 0x07	; 7
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 c5 00 	sts	0x00C5, r25
 41e:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
 422:	e2 ec       	ldi	r30, 0xC2	; 194
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	8f 7d       	andi	r24, 0xDF	; 223
 42a:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
 42c:	80 81       	ld	r24, Z
 42e:	8f 7e       	andi	r24, 0xEF	; 239
 430:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
 432:	a1 ec       	ldi	r26, 0xC1	; 193
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	8c 91       	ld	r24, X
 438:	8b 7f       	andi	r24, 0xFB	; 251
 43a:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
 43c:	80 81       	ld	r24, Z
 43e:	84 60       	ori	r24, 0x04	; 4
 440:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
 442:	80 81       	ld	r24, Z
 444:	82 60       	ori	r24, 0x02	; 2
 446:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
 448:	80 81       	ld	r24, Z
 44a:	87 7f       	andi	r24, 0xF7	; 247
 44c:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
 44e:	8c 91       	ld	r24, X
 450:	88 60       	ori	r24, 0x08	; 8
 452:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 1);  // прием разрешен
 454:	8c 91       	ld	r24, X
 456:	80 61       	ori	r24, 0x10	; 16
 458:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 1); // прерывание приема разрешено
 45a:	8c 91       	ld	r24, X
 45c:	80 68       	ori	r24, 0x80	; 128
 45e:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
 460:	8c 91       	ld	r24, X
 462:	80 64       	ori	r24, 0x40	; 64
 464:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
 466:	8c 91       	ld	r24, X
 468:	8f 7d       	andi	r24, 0xDF	; 223
 46a:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    LCD_REG= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3)|(1 << LCD_EN)|(1 << LCD_RS); // LCD на выход
 46c:	8f e3       	ldi	r24, 0x3F	; 63
 46e:	84 b9       	out	0x04, r24	; 4
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
 470:	e7 e2       	ldi	r30, 0x27	; 39
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	8e 7f       	andi	r24, 0xFE	; 254
 478:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD); // управление подсветкой экрана и нагрузкой на выход
 47a:	ea e2       	ldi	r30, 0x2A	; 42
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
 482:	80 81       	ld	r24, Z
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
 488:	80 ef       	ldi	r24, 0xF0	; 240
 48a:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
 48c:	ac e7       	ldi	r26, 0x7C	; 124
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	8c 91       	ld	r24, X
 492:	80 64       	ori	r24, 0x40	; 64
 494:	8c 93       	st	X, r24
    //ADCSRB |= 5 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 1 с регистром B
    ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
 496:	ea e7       	ldi	r30, 0x7A	; 122
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	86 60       	ori	r24, 0x06	; 6
 49e:	80 83       	st	Z, r24
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
 4a0:	8c 91       	ld	r24, X
 4a2:	80 62       	ori	r24, 0x20	; 32
 4a4:	8c 93       	st	X, r24
    //ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
 4a6:	80 81       	ld	r24, Z
 4a8:	88 60       	ori	r24, 0x08	; 8
 4aa:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
 4ac:	80 81       	ld	r24, Z
 4ae:	80 68       	ori	r24, 0x80	; 128
 4b0:	80 83       	st	Z, r24
    DIDR0 |= 1 << ADC0D; // отключить цифровой вход ADC0D 
 4b2:	ee e7       	ldi	r30, 0x7E	; 126
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	81 60       	ori	r24, 0x01	; 1
 4ba:	80 83       	st	Z, r24
    //PRR  |= 1 << PRADC; // режим работы во сне
    //SMCR |= 1 << SM0;
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 1///
    TCCR1B|= 1 << WGM13; // включить режим CTC - сброс счетчика по совпадению
 4bc:	e1 e8       	ldi	r30, 0x81	; 129
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	80 61       	ori	r24, 0x10	; 16
 4c4:	80 83       	st	Z, r24
    OCR1A= measureRate;
 4c6:	80 91 11 01 	lds	r24, 0x0111
 4ca:	90 91 12 01 	lds	r25, 0x0112
 4ce:	90 93 89 00 	sts	0x0089, r25
 4d2:	80 93 88 00 	sts	0x0088, r24
    TCCR1B |= 5 << CS10; // включить таймер 1 с предделителем 1024
 4d6:	80 81       	ld	r24, Z
 4d8:	85 60       	ori	r24, 0x05	; 5
 4da:	80 83       	st	Z, r24
    TIMSK1 |= 1 << OCIE1A; // разрешить прерывание таймера по сравнению с регистром A
 4dc:	ef e6       	ldi	r30, 0x6F	; 111
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	82 60       	ori	r24, 0x02	; 2
 4e4:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
 4e6:	85 e0       	ldi	r24, 0x05	; 5
 4e8:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
 4ec:	e6 eb       	ldi	r30, 0xB6	; 182
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	80 62       	ori	r24, 0x20	; 32
 4f4:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
 4f6:	e0 e7       	ldi	r30, 0x70	; 112
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    sei();
 500:	78 94       	sei
            if(!BIT_READ(progFlags, INACTIVE)){ // если не активен
                if(BIT_READ(progFlags, MENU_ON)){ // если меню включено
                    BIT_OFF(progFlags, MENU_ON); 
                } else if(BIT_READ(progFlags, LCD_ON)){ // если подсветка включена
                    BIT_OFF(progFlags, LCD_ON);
                    BIT_OFF(CONTROL_PORT, LCD_LED); // выключить подсветку
 502:	0f 2e       	mov	r0, r31
 504:	fb e2       	ldi	r31, 0x2B	; 43
 506:	cf 2e       	mov	r12, r31
 508:	dd 24       	eor	r13, r13
 50a:	f0 2d       	mov	r31, r0
            runSeconds= 0; // сбрасываем счетчик секунд
        }
        //////////////////////////////////////////////////////////////////////////
        // задача 3: включать подсветку если нажата кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
 50c:	c9 e2       	ldi	r28, 0x29	; 41
 50e:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача 1: сравнивать значения датчика и управлять нагрузкой
        //////////////////////////////////////////////////////////////////////////
        if (temperatureValue >= targetTemp + Tolerance)
 510:	60 91 13 01 	lds	r22, 0x0113
 514:	70 91 14 01 	lds	r23, 0x0114
 518:	80 91 15 01 	lds	r24, 0x0115
 51c:	90 91 16 01 	lds	r25, 0x0116
 520:	20 91 58 01 	lds	r18, 0x0158
 524:	30 91 59 01 	lds	r19, 0x0159
 528:	40 91 5a 01 	lds	r20, 0x015A
 52c:	50 91 5b 01 	lds	r21, 0x015B
 530:	e0 90 5e 01 	lds	r14, 0x015E
 534:	f0 90 5f 01 	lds	r15, 0x015F
 538:	00 91 60 01 	lds	r16, 0x0160
 53c:	10 91 61 01 	lds	r17, 0x0161
 540:	e3 d0       	rcall	.+454    	; 0x708 <__addsf3>
 542:	a8 01       	movw	r20, r16
 544:	97 01       	movw	r18, r14
 546:	44 d1       	rcall	.+648    	; 0x7d0 <__cmpsf2>
 548:	18 16       	cp	r1, r24
 54a:	14 f0       	brlt	.+4      	; 0x550 <__stack+0x51>
        {
            turnOnCooler(); // включить охладитель
 54c:	a9 dd       	rcall	.-1198   	; 0xa0 <turnOnCooler>
 54e:	14 c0       	rjmp	.+40     	; 0x578 <__stack+0x79>
        }
        else if(temperatureValue <= targetTemp)
 550:	60 91 5e 01 	lds	r22, 0x015E
 554:	70 91 5f 01 	lds	r23, 0x015F
 558:	80 91 60 01 	lds	r24, 0x0160
 55c:	90 91 61 01 	lds	r25, 0x0161
 560:	20 91 13 01 	lds	r18, 0x0113
 564:	30 91 14 01 	lds	r19, 0x0114
 568:	40 91 15 01 	lds	r20, 0x0115
 56c:	50 91 16 01 	lds	r21, 0x0116
 570:	2f d1       	rcall	.+606    	; 0x7d0 <__cmpsf2>
 572:	18 16       	cp	r1, r24
 574:	0c f0       	brlt	.+2      	; 0x578 <__stack+0x79>
        {
            turnOffCooler(); // выключить охладитель
 576:	9f dd       	rcall	.-1218   	; 0xb6 <turnOffCooler>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача 2: выходить из меню и выключать подсветку по истечении таймаута
        //////////////////////////////////////////////////////////////////////////
        if(runSeconds >= timeOut) // проверить количество секунд
 578:	90 91 5d 01 	lds	r25, 0x015D
 57c:	80 91 10 01 	lds	r24, 0x0110
 580:	98 17       	cp	r25, r24
 582:	28 f1       	brcs	.+74     	; 0x5ce <__stack+0xcf>
        {
            if(!BIT_READ(progFlags, INACTIVE)){ // если не активен
 584:	80 91 5c 01 	lds	r24, 0x015C
 588:	84 fd       	sbrc	r24, 4
 58a:	10 c0       	rjmp	.+32     	; 0x5ac <__stack+0xad>
                if(BIT_READ(progFlags, MENU_ON)){ // если меню включено
 58c:	81 ff       	sbrs	r24, 1
 58e:	04 c0       	rjmp	.+8      	; 0x598 <__stack+0x99>
                    BIT_OFF(progFlags, MENU_ON); 
 590:	8d 7f       	andi	r24, 0xFD	; 253
 592:	80 93 5c 01 	sts	0x015C, r24
 596:	09 c0       	rjmp	.+18     	; 0x5aa <__stack+0xab>
                } else if(BIT_READ(progFlags, LCD_ON)){ // если подсветка включена
 598:	80 ff       	sbrs	r24, 0
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <__stack+0xab>
                    BIT_OFF(progFlags, LCD_ON);
 59c:	8e 7f       	andi	r24, 0xFE	; 254
 59e:	80 93 5c 01 	sts	0x015C, r24
                    BIT_OFF(CONTROL_PORT, LCD_LED); // выключить подсветку
 5a2:	f6 01       	movw	r30, r12
 5a4:	80 81       	ld	r24, Z
 5a6:	8b 7f       	andi	r24, 0xFB	; 251
 5a8:	80 83       	st	Z, r24
                    LCD_turnOff();
                }
                menuStop(); // выйти из меню
 5aa:	2b df       	rcall	.-426    	; 0x402 <menuStop>
            }
            if((BIT_READ(progFlags, MENU_ON))||(BIT_READ(progFlags, LCD_ON))) { // если меню или подсветка включены 
 5ac:	40 91 5c 01 	lds	r20, 0x015C
 5b0:	84 2f       	mov	r24, r20
 5b2:	86 95       	lsr	r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	24 2f       	mov	r18, r20
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	82 2b       	or	r24, r18
 5bc:	93 2b       	or	r25, r19
 5be:	80 ff       	sbrs	r24, 0
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <__stack+0xcb>
                BIT_ON(progFlags, INACTIVE); // установить флаг неактивности
 5c2:	84 2f       	mov	r24, r20
 5c4:	80 61       	ori	r24, 0x10	; 16
 5c6:	80 93 5c 01 	sts	0x015C, r24
            }
            runSeconds= 0; // сбрасываем счетчик секунд
 5ca:	10 92 5d 01 	sts	0x015D, r1
        }
        //////////////////////////////////////////////////////////////////////////
        // задача 3: включать подсветку если нажата кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
 5ce:	88 81       	ld	r24, Y
 5d0:	85 ff       	sbrs	r24, 5
 5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <__stack+0xe1>
 5d4:	88 81       	ld	r24, Y
 5d6:	84 ff       	sbrs	r24, 4
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <__stack+0xe1>
 5da:	88 81       	ld	r24, Y
 5dc:	88 23       	and	r24, r24
 5de:	54 f0       	brlt	.+20     	; 0x5f4 <__stack+0xf5>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 5e0:	80 91 5c 01 	lds	r24, 0x015C
 5e4:	8f 7e       	andi	r24, 0xEF	; 239
            BIT_ON(progFlags, LCD_ON);
 5e6:	81 60       	ori	r24, 0x01	; 1
 5e8:	80 93 5c 01 	sts	0x015C, r24
            LCD_turnOn();
            BIT_ON(CONTROL_PORT, LCD_LED); // включить подсветку дисплея
 5ec:	f6 01       	movw	r30, r12
 5ee:	80 81       	ld	r24, Z
 5f0:	84 60       	ori	r24, 0x04	; 4
 5f2:	80 83       	st	Z, r24
        }
        //////////////////////////////////////////////////////////////////////////
        // задача 4: входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU
 5f4:	88 81       	ld	r24, Y
 5f6:	86 fd       	sbrc	r24, 6
 5f8:	0f c0       	rjmp	.+30     	; 0x618 <__stack+0x119>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
 5fa:	80 91 5c 01 	lds	r24, 0x015C
 5fe:	8f 7e       	andi	r24, 0xEF	; 239
 600:	80 93 5c 01 	sts	0x015C, r24
            if (!BIT_READ(progFlags, LCD_ON))
 604:	80 fd       	sbrc	r24, 0
 606:	03 c0       	rjmp	.+6      	; 0x60e <__stack+0x10f>
            {
                LCD_turnOn();
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	80 93 5c 01 	sts	0x015C, r24
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
 60e:	80 91 5c 01 	lds	r24, 0x015C
 612:	82 60       	ori	r24, 0x02	; 2
 614:	80 93 5c 01 	sts	0x015C, r24
        }
        //////////////////////////////////////////////////////////////////////////
        // задача 5: запускать обработку команд если меню включено
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, MENU_ON)) 
 618:	80 91 5c 01 	lds	r24, 0x015C
 61c:	81 ff       	sbrs	r24, 1
 61e:	01 c0       	rjmp	.+2      	; 0x622 <__stack+0x123>
        {
            menuRun(); // обработка команд меню
 620:	a6 dd       	rcall	.-1204   	; 0x16e <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача 6: отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
 622:	80 91 5c 01 	lds	r24, 0x015C
 626:	80 ff       	sbrs	r24, 0
 628:	73 cf       	rjmp	.-282    	; 0x510 <__stack+0x11>
        {
            LCD_Clear();
            LCD_DisplayAll();
 62a:	53 dd       	rcall	.-1370   	; 0xd2 <LCD_DisplayAll>
 62c:	71 cf       	rjmp	.-286    	; 0x510 <__stack+0x11>

0000062e <__vector_21>:
    }
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///
ISR(ADC_vect){
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	2f 93       	push	r18
 63a:	3f 93       	push	r19
 63c:	4f 93       	push	r20
 63e:	5f 93       	push	r21
 640:	6f 93       	push	r22
 642:	7f 93       	push	r23
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	af 93       	push	r26
 64a:	bf 93       	push	r27
 64c:	ef 93       	push	r30
 64e:	ff 93       	push	r31
    temperatureValue= BYTE_TO_TEMP(ADCH);
 650:	60 91 79 00 	lds	r22, 0x0079
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	88 27       	eor	r24, r24
 658:	77 fd       	sbrc	r23, 7
 65a:	80 95       	com	r24
 65c:	98 2f       	mov	r25, r24
 65e:	52 d1       	rcall	.+676    	; 0x904 <__floatsisf>
 660:	20 e0       	ldi	r18, 0x00	; 0
 662:	30 e4       	ldi	r19, 0x40	; 64
 664:	4c e9       	ldi	r20, 0x9C	; 156
 666:	55 e4       	ldi	r21, 0x45	; 69
 668:	01 d2       	rcall	.+1026   	; 0xa6c <__mulsf3>
 66a:	20 e0       	ldi	r18, 0x00	; 0
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	40 e8       	ldi	r20, 0x80	; 128
 670:	5b e3       	ldi	r21, 0x3B	; 59
 672:	fc d1       	rcall	.+1016   	; 0xa6c <__mulsf3>
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	4a ef       	ldi	r20, 0xFA	; 250
 67a:	53 e4       	ldi	r21, 0x43	; 67
 67c:	44 d0       	rcall	.+136    	; 0x706 <__subsf3>
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	40 e2       	ldi	r20, 0x20	; 32
 684:	51 e4       	ldi	r21, 0x41	; 65
 686:	a8 d0       	rcall	.+336    	; 0x7d8 <__divsf3>
 688:	60 93 5e 01 	sts	0x015E, r22
 68c:	70 93 5f 01 	sts	0x015F, r23
 690:	80 93 60 01 	sts	0x0160, r24
 694:	90 93 61 01 	sts	0x0161, r25
}
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_9>:

ISR(TIMER2_OVF_vect){
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	8f 93       	push	r24
    runSeconds++;
 6c6:	80 91 5d 01 	lds	r24, 0x015D
 6ca:	8f 5f       	subi	r24, 0xFF	; 255
 6cc:	80 93 5d 01 	sts	0x015D, r24
    return;
}
 6d0:	8f 91       	pop	r24
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <__vector_11>:

ISR(TIMER1_COMPA_vect){
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	8f 93       	push	r24
 6e8:	ef 93       	push	r30
 6ea:	ff 93       	push	r31
    ADCSRA |= 1 << ADSC;
 6ec:	ea e7       	ldi	r30, 0x7A	; 122
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	80 64       	ori	r24, 0x40	; 64
 6f4:	80 83       	st	Z, r24
    return;
 6f6:	ff 91       	pop	r31
 6f8:	ef 91       	pop	r30
 6fa:	8f 91       	pop	r24
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <__subsf3>:
 706:	50 58       	subi	r21, 0x80	; 128

00000708 <__addsf3>:
 708:	bb 27       	eor	r27, r27
 70a:	aa 27       	eor	r26, r26
 70c:	0e d0       	rcall	.+28     	; 0x72a <__addsf3x>
 70e:	70 c1       	rjmp	.+736    	; 0x9f0 <__fp_round>
 710:	61 d1       	rcall	.+706    	; 0x9d4 <__fp_pscA>
 712:	30 f0       	brcs	.+12     	; 0x720 <__addsf3+0x18>
 714:	66 d1       	rcall	.+716    	; 0x9e2 <__fp_pscB>
 716:	20 f0       	brcs	.+8      	; 0x720 <__addsf3+0x18>
 718:	31 f4       	brne	.+12     	; 0x726 <__addsf3+0x1e>
 71a:	9f 3f       	cpi	r25, 0xFF	; 255
 71c:	11 f4       	brne	.+4      	; 0x722 <__addsf3+0x1a>
 71e:	1e f4       	brtc	.+6      	; 0x726 <__addsf3+0x1e>
 720:	56 c1       	rjmp	.+684    	; 0x9ce <__fp_nan>
 722:	0e f4       	brtc	.+2      	; 0x726 <__addsf3+0x1e>
 724:	e0 95       	com	r30
 726:	e7 fb       	bst	r30, 7
 728:	4c c1       	rjmp	.+664    	; 0x9c2 <__fp_inf>

0000072a <__addsf3x>:
 72a:	e9 2f       	mov	r30, r25
 72c:	72 d1       	rcall	.+740    	; 0xa12 <__fp_split3>
 72e:	80 f3       	brcs	.-32     	; 0x710 <__addsf3+0x8>
 730:	ba 17       	cp	r27, r26
 732:	62 07       	cpc	r22, r18
 734:	73 07       	cpc	r23, r19
 736:	84 07       	cpc	r24, r20
 738:	95 07       	cpc	r25, r21
 73a:	18 f0       	brcs	.+6      	; 0x742 <__addsf3x+0x18>
 73c:	71 f4       	brne	.+28     	; 0x75a <__addsf3x+0x30>
 73e:	9e f5       	brtc	.+102    	; 0x7a6 <__addsf3x+0x7c>
 740:	8a c1       	rjmp	.+788    	; 0xa56 <__fp_zero>
 742:	0e f4       	brtc	.+2      	; 0x746 <__addsf3x+0x1c>
 744:	e0 95       	com	r30
 746:	0b 2e       	mov	r0, r27
 748:	ba 2f       	mov	r27, r26
 74a:	a0 2d       	mov	r26, r0
 74c:	0b 01       	movw	r0, r22
 74e:	b9 01       	movw	r22, r18
 750:	90 01       	movw	r18, r0
 752:	0c 01       	movw	r0, r24
 754:	ca 01       	movw	r24, r20
 756:	a0 01       	movw	r20, r0
 758:	11 24       	eor	r1, r1
 75a:	ff 27       	eor	r31, r31
 75c:	59 1b       	sub	r21, r25
 75e:	99 f0       	breq	.+38     	; 0x786 <__addsf3x+0x5c>
 760:	59 3f       	cpi	r21, 0xF9	; 249
 762:	50 f4       	brcc	.+20     	; 0x778 <__addsf3x+0x4e>
 764:	50 3e       	cpi	r21, 0xE0	; 224
 766:	68 f1       	brcs	.+90     	; 0x7c2 <__addsf3x+0x98>
 768:	1a 16       	cp	r1, r26
 76a:	f0 40       	sbci	r31, 0x00	; 0
 76c:	a2 2f       	mov	r26, r18
 76e:	23 2f       	mov	r18, r19
 770:	34 2f       	mov	r19, r20
 772:	44 27       	eor	r20, r20
 774:	58 5f       	subi	r21, 0xF8	; 248
 776:	f3 cf       	rjmp	.-26     	; 0x75e <__addsf3x+0x34>
 778:	46 95       	lsr	r20
 77a:	37 95       	ror	r19
 77c:	27 95       	ror	r18
 77e:	a7 95       	ror	r26
 780:	f0 40       	sbci	r31, 0x00	; 0
 782:	53 95       	inc	r21
 784:	c9 f7       	brne	.-14     	; 0x778 <__addsf3x+0x4e>
 786:	7e f4       	brtc	.+30     	; 0x7a6 <__addsf3x+0x7c>
 788:	1f 16       	cp	r1, r31
 78a:	ba 0b       	sbc	r27, r26
 78c:	62 0b       	sbc	r22, r18
 78e:	73 0b       	sbc	r23, r19
 790:	84 0b       	sbc	r24, r20
 792:	ba f0       	brmi	.+46     	; 0x7c2 <__addsf3x+0x98>
 794:	91 50       	subi	r25, 0x01	; 1
 796:	a1 f0       	breq	.+40     	; 0x7c0 <__addsf3x+0x96>
 798:	ff 0f       	add	r31, r31
 79a:	bb 1f       	adc	r27, r27
 79c:	66 1f       	adc	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	c2 f7       	brpl	.-16     	; 0x794 <__addsf3x+0x6a>
 7a4:	0e c0       	rjmp	.+28     	; 0x7c2 <__addsf3x+0x98>
 7a6:	ba 0f       	add	r27, r26
 7a8:	62 1f       	adc	r22, r18
 7aa:	73 1f       	adc	r23, r19
 7ac:	84 1f       	adc	r24, r20
 7ae:	48 f4       	brcc	.+18     	; 0x7c2 <__addsf3x+0x98>
 7b0:	87 95       	ror	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f7 95       	ror	r31
 7ba:	9e 3f       	cpi	r25, 0xFE	; 254
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <__addsf3x+0x96>
 7be:	b3 cf       	rjmp	.-154    	; 0x726 <__addsf3+0x1e>
 7c0:	93 95       	inc	r25
 7c2:	88 0f       	add	r24, r24
 7c4:	08 f0       	brcs	.+2      	; 0x7c8 <__addsf3x+0x9e>
 7c6:	99 27       	eor	r25, r25
 7c8:	ee 0f       	add	r30, r30
 7ca:	97 95       	ror	r25
 7cc:	87 95       	ror	r24
 7ce:	08 95       	ret

000007d0 <__cmpsf2>:
 7d0:	d4 d0       	rcall	.+424    	; 0x97a <__fp_cmp>
 7d2:	08 f4       	brcc	.+2      	; 0x7d6 <__cmpsf2+0x6>
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	08 95       	ret

000007d8 <__divsf3>:
 7d8:	0c d0       	rcall	.+24     	; 0x7f2 <__divsf3x>
 7da:	0a c1       	rjmp	.+532    	; 0x9f0 <__fp_round>
 7dc:	02 d1       	rcall	.+516    	; 0x9e2 <__fp_pscB>
 7de:	40 f0       	brcs	.+16     	; 0x7f0 <__divsf3+0x18>
 7e0:	f9 d0       	rcall	.+498    	; 0x9d4 <__fp_pscA>
 7e2:	30 f0       	brcs	.+12     	; 0x7f0 <__divsf3+0x18>
 7e4:	21 f4       	brne	.+8      	; 0x7ee <__divsf3+0x16>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	19 f0       	breq	.+6      	; 0x7f0 <__divsf3+0x18>
 7ea:	eb c0       	rjmp	.+470    	; 0x9c2 <__fp_inf>
 7ec:	51 11       	cpse	r21, r1
 7ee:	34 c1       	rjmp	.+616    	; 0xa58 <__fp_szero>
 7f0:	ee c0       	rjmp	.+476    	; 0x9ce <__fp_nan>

000007f2 <__divsf3x>:
 7f2:	0f d1       	rcall	.+542    	; 0xa12 <__fp_split3>
 7f4:	98 f3       	brcs	.-26     	; 0x7dc <__divsf3+0x4>

000007f6 <__divsf3_pse>:
 7f6:	99 23       	and	r25, r25
 7f8:	c9 f3       	breq	.-14     	; 0x7ec <__divsf3+0x14>
 7fa:	55 23       	and	r21, r21
 7fc:	b1 f3       	breq	.-20     	; 0x7ea <__divsf3+0x12>
 7fe:	95 1b       	sub	r25, r21
 800:	55 0b       	sbc	r21, r21
 802:	bb 27       	eor	r27, r27
 804:	aa 27       	eor	r26, r26
 806:	62 17       	cp	r22, r18
 808:	73 07       	cpc	r23, r19
 80a:	84 07       	cpc	r24, r20
 80c:	38 f0       	brcs	.+14     	; 0x81c <__divsf3_pse+0x26>
 80e:	9f 5f       	subi	r25, 0xFF	; 255
 810:	5f 4f       	sbci	r21, 0xFF	; 255
 812:	22 0f       	add	r18, r18
 814:	33 1f       	adc	r19, r19
 816:	44 1f       	adc	r20, r20
 818:	aa 1f       	adc	r26, r26
 81a:	a9 f3       	breq	.-22     	; 0x806 <__divsf3_pse+0x10>
 81c:	33 d0       	rcall	.+102    	; 0x884 <__divsf3_pse+0x8e>
 81e:	0e 2e       	mov	r0, r30
 820:	3a f0       	brmi	.+14     	; 0x830 <__divsf3_pse+0x3a>
 822:	e0 e8       	ldi	r30, 0x80	; 128
 824:	30 d0       	rcall	.+96     	; 0x886 <__divsf3_pse+0x90>
 826:	91 50       	subi	r25, 0x01	; 1
 828:	50 40       	sbci	r21, 0x00	; 0
 82a:	e6 95       	lsr	r30
 82c:	00 1c       	adc	r0, r0
 82e:	ca f7       	brpl	.-14     	; 0x822 <__divsf3_pse+0x2c>
 830:	29 d0       	rcall	.+82     	; 0x884 <__divsf3_pse+0x8e>
 832:	fe 2f       	mov	r31, r30
 834:	27 d0       	rcall	.+78     	; 0x884 <__divsf3_pse+0x8e>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	bb 1f       	adc	r27, r27
 83e:	26 17       	cp	r18, r22
 840:	37 07       	cpc	r19, r23
 842:	48 07       	cpc	r20, r24
 844:	ab 07       	cpc	r26, r27
 846:	b0 e8       	ldi	r27, 0x80	; 128
 848:	09 f0       	breq	.+2      	; 0x84c <__divsf3_pse+0x56>
 84a:	bb 0b       	sbc	r27, r27
 84c:	80 2d       	mov	r24, r0
 84e:	bf 01       	movw	r22, r30
 850:	ff 27       	eor	r31, r31
 852:	93 58       	subi	r25, 0x83	; 131
 854:	5f 4f       	sbci	r21, 0xFF	; 255
 856:	2a f0       	brmi	.+10     	; 0x862 <__divsf3_pse+0x6c>
 858:	9e 3f       	cpi	r25, 0xFE	; 254
 85a:	51 05       	cpc	r21, r1
 85c:	68 f0       	brcs	.+26     	; 0x878 <__divsf3_pse+0x82>
 85e:	b1 c0       	rjmp	.+354    	; 0x9c2 <__fp_inf>
 860:	fb c0       	rjmp	.+502    	; 0xa58 <__fp_szero>
 862:	5f 3f       	cpi	r21, 0xFF	; 255
 864:	ec f3       	brlt	.-6      	; 0x860 <__divsf3_pse+0x6a>
 866:	98 3e       	cpi	r25, 0xE8	; 232
 868:	dc f3       	brlt	.-10     	; 0x860 <__divsf3_pse+0x6a>
 86a:	86 95       	lsr	r24
 86c:	77 95       	ror	r23
 86e:	67 95       	ror	r22
 870:	b7 95       	ror	r27
 872:	f7 95       	ror	r31
 874:	9f 5f       	subi	r25, 0xFF	; 255
 876:	c9 f7       	brne	.-14     	; 0x86a <__divsf3_pse+0x74>
 878:	88 0f       	add	r24, r24
 87a:	91 1d       	adc	r25, r1
 87c:	96 95       	lsr	r25
 87e:	87 95       	ror	r24
 880:	97 f9       	bld	r25, 7
 882:	08 95       	ret
 884:	e1 e0       	ldi	r30, 0x01	; 1
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	bb 1f       	adc	r27, r27
 88e:	62 17       	cp	r22, r18
 890:	73 07       	cpc	r23, r19
 892:	84 07       	cpc	r24, r20
 894:	ba 07       	cpc	r27, r26
 896:	20 f0       	brcs	.+8      	; 0x8a0 <__divsf3_pse+0xaa>
 898:	62 1b       	sub	r22, r18
 89a:	73 0b       	sbc	r23, r19
 89c:	84 0b       	sbc	r24, r20
 89e:	ba 0b       	sbc	r27, r26
 8a0:	ee 1f       	adc	r30, r30
 8a2:	88 f7       	brcc	.-30     	; 0x886 <__divsf3_pse+0x90>
 8a4:	e0 95       	com	r30
 8a6:	08 95       	ret

000008a8 <__fixunssfsi>:
 8a8:	bc d0       	rcall	.+376    	; 0xa22 <__fp_splitA>
 8aa:	88 f0       	brcs	.+34     	; 0x8ce <__fixunssfsi+0x26>
 8ac:	9f 57       	subi	r25, 0x7F	; 127
 8ae:	90 f0       	brcs	.+36     	; 0x8d4 <__fixunssfsi+0x2c>
 8b0:	b9 2f       	mov	r27, r25
 8b2:	99 27       	eor	r25, r25
 8b4:	b7 51       	subi	r27, 0x17	; 23
 8b6:	a0 f0       	brcs	.+40     	; 0x8e0 <__fixunssfsi+0x38>
 8b8:	d1 f0       	breq	.+52     	; 0x8ee <__fixunssfsi+0x46>
 8ba:	66 0f       	add	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	1a f0       	brmi	.+6      	; 0x8ca <__fixunssfsi+0x22>
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__fixunssfsi+0x12>
 8c8:	12 c0       	rjmp	.+36     	; 0x8ee <__fixunssfsi+0x46>
 8ca:	b1 30       	cpi	r27, 0x01	; 1
 8cc:	81 f0       	breq	.+32     	; 0x8ee <__fixunssfsi+0x46>
 8ce:	c3 d0       	rcall	.+390    	; 0xa56 <__fp_zero>
 8d0:	b1 e0       	ldi	r27, 0x01	; 1
 8d2:	08 95       	ret
 8d4:	c0 c0       	rjmp	.+384    	; 0xa56 <__fp_zero>
 8d6:	67 2f       	mov	r22, r23
 8d8:	78 2f       	mov	r23, r24
 8da:	88 27       	eor	r24, r24
 8dc:	b8 5f       	subi	r27, 0xF8	; 248
 8de:	39 f0       	breq	.+14     	; 0x8ee <__fixunssfsi+0x46>
 8e0:	b9 3f       	cpi	r27, 0xF9	; 249
 8e2:	cc f3       	brlt	.-14     	; 0x8d6 <__fixunssfsi+0x2e>
 8e4:	86 95       	lsr	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	b3 95       	inc	r27
 8ec:	d9 f7       	brne	.-10     	; 0x8e4 <__fixunssfsi+0x3c>
 8ee:	3e f4       	brtc	.+14     	; 0x8fe <__fixunssfsi+0x56>
 8f0:	90 95       	com	r25
 8f2:	80 95       	com	r24
 8f4:	70 95       	com	r23
 8f6:	61 95       	neg	r22
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	08 95       	ret

00000900 <__floatunsisf>:
 900:	e8 94       	clt
 902:	09 c0       	rjmp	.+18     	; 0x916 <__floatsisf+0x12>

00000904 <__floatsisf>:
 904:	97 fb       	bst	r25, 7
 906:	3e f4       	brtc	.+14     	; 0x916 <__floatsisf+0x12>
 908:	90 95       	com	r25
 90a:	80 95       	com	r24
 90c:	70 95       	com	r23
 90e:	61 95       	neg	r22
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	8f 4f       	sbci	r24, 0xFF	; 255
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	99 23       	and	r25, r25
 918:	a9 f0       	breq	.+42     	; 0x944 <__floatsisf+0x40>
 91a:	f9 2f       	mov	r31, r25
 91c:	96 e9       	ldi	r25, 0x96	; 150
 91e:	bb 27       	eor	r27, r27
 920:	93 95       	inc	r25
 922:	f6 95       	lsr	r31
 924:	87 95       	ror	r24
 926:	77 95       	ror	r23
 928:	67 95       	ror	r22
 92a:	b7 95       	ror	r27
 92c:	f1 11       	cpse	r31, r1
 92e:	f8 cf       	rjmp	.-16     	; 0x920 <__floatsisf+0x1c>
 930:	fa f4       	brpl	.+62     	; 0x970 <__floatsisf+0x6c>
 932:	bb 0f       	add	r27, r27
 934:	11 f4       	brne	.+4      	; 0x93a <__floatsisf+0x36>
 936:	60 ff       	sbrs	r22, 0
 938:	1b c0       	rjmp	.+54     	; 0x970 <__floatsisf+0x6c>
 93a:	6f 5f       	subi	r22, 0xFF	; 255
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	16 c0       	rjmp	.+44     	; 0x970 <__floatsisf+0x6c>
 944:	88 23       	and	r24, r24
 946:	11 f0       	breq	.+4      	; 0x94c <__floatsisf+0x48>
 948:	96 e9       	ldi	r25, 0x96	; 150
 94a:	11 c0       	rjmp	.+34     	; 0x96e <__floatsisf+0x6a>
 94c:	77 23       	and	r23, r23
 94e:	21 f0       	breq	.+8      	; 0x958 <__floatsisf+0x54>
 950:	9e e8       	ldi	r25, 0x8E	; 142
 952:	87 2f       	mov	r24, r23
 954:	76 2f       	mov	r23, r22
 956:	05 c0       	rjmp	.+10     	; 0x962 <__floatsisf+0x5e>
 958:	66 23       	and	r22, r22
 95a:	71 f0       	breq	.+28     	; 0x978 <__floatsisf+0x74>
 95c:	96 e8       	ldi	r25, 0x86	; 134
 95e:	86 2f       	mov	r24, r22
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	2a f0       	brmi	.+10     	; 0x970 <__floatsisf+0x6c>
 966:	9a 95       	dec	r25
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	88 1f       	adc	r24, r24
 96e:	da f7       	brpl	.-10     	; 0x966 <__floatsisf+0x62>
 970:	88 0f       	add	r24, r24
 972:	96 95       	lsr	r25
 974:	87 95       	ror	r24
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret

0000097a <__fp_cmp>:
 97a:	99 0f       	add	r25, r25
 97c:	00 08       	sbc	r0, r0
 97e:	55 0f       	add	r21, r21
 980:	aa 0b       	sbc	r26, r26
 982:	e0 e8       	ldi	r30, 0x80	; 128
 984:	fe ef       	ldi	r31, 0xFE	; 254
 986:	16 16       	cp	r1, r22
 988:	17 06       	cpc	r1, r23
 98a:	e8 07       	cpc	r30, r24
 98c:	f9 07       	cpc	r31, r25
 98e:	c0 f0       	brcs	.+48     	; 0x9c0 <__fp_cmp+0x46>
 990:	12 16       	cp	r1, r18
 992:	13 06       	cpc	r1, r19
 994:	e4 07       	cpc	r30, r20
 996:	f5 07       	cpc	r31, r21
 998:	98 f0       	brcs	.+38     	; 0x9c0 <__fp_cmp+0x46>
 99a:	62 1b       	sub	r22, r18
 99c:	73 0b       	sbc	r23, r19
 99e:	84 0b       	sbc	r24, r20
 9a0:	95 0b       	sbc	r25, r21
 9a2:	39 f4       	brne	.+14     	; 0x9b2 <__fp_cmp+0x38>
 9a4:	0a 26       	eor	r0, r26
 9a6:	61 f0       	breq	.+24     	; 0x9c0 <__fp_cmp+0x46>
 9a8:	23 2b       	or	r18, r19
 9aa:	24 2b       	or	r18, r20
 9ac:	25 2b       	or	r18, r21
 9ae:	21 f4       	brne	.+8      	; 0x9b8 <__fp_cmp+0x3e>
 9b0:	08 95       	ret
 9b2:	0a 26       	eor	r0, r26
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <__fp_cmp+0x3e>
 9b6:	a1 40       	sbci	r26, 0x01	; 1
 9b8:	a6 95       	lsr	r26
 9ba:	8f ef       	ldi	r24, 0xFF	; 255
 9bc:	81 1d       	adc	r24, r1
 9be:	81 1d       	adc	r24, r1
 9c0:	08 95       	ret

000009c2 <__fp_inf>:
 9c2:	97 f9       	bld	r25, 7
 9c4:	9f 67       	ori	r25, 0x7F	; 127
 9c6:	80 e8       	ldi	r24, 0x80	; 128
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	08 95       	ret

000009ce <__fp_nan>:
 9ce:	9f ef       	ldi	r25, 0xFF	; 255
 9d0:	80 ec       	ldi	r24, 0xC0	; 192
 9d2:	08 95       	ret

000009d4 <__fp_pscA>:
 9d4:	00 24       	eor	r0, r0
 9d6:	0a 94       	dec	r0
 9d8:	16 16       	cp	r1, r22
 9da:	17 06       	cpc	r1, r23
 9dc:	18 06       	cpc	r1, r24
 9de:	09 06       	cpc	r0, r25
 9e0:	08 95       	ret

000009e2 <__fp_pscB>:
 9e2:	00 24       	eor	r0, r0
 9e4:	0a 94       	dec	r0
 9e6:	12 16       	cp	r1, r18
 9e8:	13 06       	cpc	r1, r19
 9ea:	14 06       	cpc	r1, r20
 9ec:	05 06       	cpc	r0, r21
 9ee:	08 95       	ret

000009f0 <__fp_round>:
 9f0:	09 2e       	mov	r0, r25
 9f2:	03 94       	inc	r0
 9f4:	00 0c       	add	r0, r0
 9f6:	11 f4       	brne	.+4      	; 0x9fc <__fp_round+0xc>
 9f8:	88 23       	and	r24, r24
 9fa:	52 f0       	brmi	.+20     	; 0xa10 <__fp_round+0x20>
 9fc:	bb 0f       	add	r27, r27
 9fe:	40 f4       	brcc	.+16     	; 0xa10 <__fp_round+0x20>
 a00:	bf 2b       	or	r27, r31
 a02:	11 f4       	brne	.+4      	; 0xa08 <__fp_round+0x18>
 a04:	60 ff       	sbrs	r22, 0
 a06:	04 c0       	rjmp	.+8      	; 0xa10 <__fp_round+0x20>
 a08:	6f 5f       	subi	r22, 0xFF	; 255
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	08 95       	ret

00000a12 <__fp_split3>:
 a12:	57 fd       	sbrc	r21, 7
 a14:	90 58       	subi	r25, 0x80	; 128
 a16:	44 0f       	add	r20, r20
 a18:	55 1f       	adc	r21, r21
 a1a:	59 f0       	breq	.+22     	; 0xa32 <__fp_splitA+0x10>
 a1c:	5f 3f       	cpi	r21, 0xFF	; 255
 a1e:	71 f0       	breq	.+28     	; 0xa3c <__fp_splitA+0x1a>
 a20:	47 95       	ror	r20

00000a22 <__fp_splitA>:
 a22:	88 0f       	add	r24, r24
 a24:	97 fb       	bst	r25, 7
 a26:	99 1f       	adc	r25, r25
 a28:	61 f0       	breq	.+24     	; 0xa42 <__fp_splitA+0x20>
 a2a:	9f 3f       	cpi	r25, 0xFF	; 255
 a2c:	79 f0       	breq	.+30     	; 0xa4c <__fp_splitA+0x2a>
 a2e:	87 95       	ror	r24
 a30:	08 95       	ret
 a32:	12 16       	cp	r1, r18
 a34:	13 06       	cpc	r1, r19
 a36:	14 06       	cpc	r1, r20
 a38:	55 1f       	adc	r21, r21
 a3a:	f2 cf       	rjmp	.-28     	; 0xa20 <__fp_split3+0xe>
 a3c:	46 95       	lsr	r20
 a3e:	f1 df       	rcall	.-30     	; 0xa22 <__fp_splitA>
 a40:	08 c0       	rjmp	.+16     	; 0xa52 <__fp_splitA+0x30>
 a42:	16 16       	cp	r1, r22
 a44:	17 06       	cpc	r1, r23
 a46:	18 06       	cpc	r1, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	f1 cf       	rjmp	.-30     	; 0xa2e <__fp_splitA+0xc>
 a4c:	86 95       	lsr	r24
 a4e:	71 05       	cpc	r23, r1
 a50:	61 05       	cpc	r22, r1
 a52:	08 94       	sec
 a54:	08 95       	ret

00000a56 <__fp_zero>:
 a56:	e8 94       	clt

00000a58 <__fp_szero>:
 a58:	bb 27       	eor	r27, r27
 a5a:	66 27       	eor	r22, r22
 a5c:	77 27       	eor	r23, r23
 a5e:	cb 01       	movw	r24, r22
 a60:	97 f9       	bld	r25, 7
 a62:	08 95       	ret

00000a64 <__gesf2>:
 a64:	8a df       	rcall	.-236    	; 0x97a <__fp_cmp>
 a66:	08 f4       	brcc	.+2      	; 0xa6a <__gesf2+0x6>
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	08 95       	ret

00000a6c <__mulsf3>:
 a6c:	0b d0       	rcall	.+22     	; 0xa84 <__mulsf3x>
 a6e:	c0 cf       	rjmp	.-128    	; 0x9f0 <__fp_round>
 a70:	b1 df       	rcall	.-158    	; 0x9d4 <__fp_pscA>
 a72:	28 f0       	brcs	.+10     	; 0xa7e <__mulsf3+0x12>
 a74:	b6 df       	rcall	.-148    	; 0x9e2 <__fp_pscB>
 a76:	18 f0       	brcs	.+6      	; 0xa7e <__mulsf3+0x12>
 a78:	95 23       	and	r25, r21
 a7a:	09 f0       	breq	.+2      	; 0xa7e <__mulsf3+0x12>
 a7c:	a2 cf       	rjmp	.-188    	; 0x9c2 <__fp_inf>
 a7e:	a7 cf       	rjmp	.-178    	; 0x9ce <__fp_nan>
 a80:	11 24       	eor	r1, r1
 a82:	ea cf       	rjmp	.-44     	; 0xa58 <__fp_szero>

00000a84 <__mulsf3x>:
 a84:	c6 df       	rcall	.-116    	; 0xa12 <__fp_split3>
 a86:	a0 f3       	brcs	.-24     	; 0xa70 <__mulsf3+0x4>

00000a88 <__mulsf3_pse>:
 a88:	95 9f       	mul	r25, r21
 a8a:	d1 f3       	breq	.-12     	; 0xa80 <__mulsf3+0x14>
 a8c:	95 0f       	add	r25, r21
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	55 1f       	adc	r21, r21
 a92:	62 9f       	mul	r22, r18
 a94:	f0 01       	movw	r30, r0
 a96:	72 9f       	mul	r23, r18
 a98:	bb 27       	eor	r27, r27
 a9a:	f0 0d       	add	r31, r0
 a9c:	b1 1d       	adc	r27, r1
 a9e:	63 9f       	mul	r22, r19
 aa0:	aa 27       	eor	r26, r26
 aa2:	f0 0d       	add	r31, r0
 aa4:	b1 1d       	adc	r27, r1
 aa6:	aa 1f       	adc	r26, r26
 aa8:	64 9f       	mul	r22, r20
 aaa:	66 27       	eor	r22, r22
 aac:	b0 0d       	add	r27, r0
 aae:	a1 1d       	adc	r26, r1
 ab0:	66 1f       	adc	r22, r22
 ab2:	82 9f       	mul	r24, r18
 ab4:	22 27       	eor	r18, r18
 ab6:	b0 0d       	add	r27, r0
 ab8:	a1 1d       	adc	r26, r1
 aba:	62 1f       	adc	r22, r18
 abc:	73 9f       	mul	r23, r19
 abe:	b0 0d       	add	r27, r0
 ac0:	a1 1d       	adc	r26, r1
 ac2:	62 1f       	adc	r22, r18
 ac4:	83 9f       	mul	r24, r19
 ac6:	a0 0d       	add	r26, r0
 ac8:	61 1d       	adc	r22, r1
 aca:	22 1f       	adc	r18, r18
 acc:	74 9f       	mul	r23, r20
 ace:	33 27       	eor	r19, r19
 ad0:	a0 0d       	add	r26, r0
 ad2:	61 1d       	adc	r22, r1
 ad4:	23 1f       	adc	r18, r19
 ad6:	84 9f       	mul	r24, r20
 ad8:	60 0d       	add	r22, r0
 ada:	21 1d       	adc	r18, r1
 adc:	82 2f       	mov	r24, r18
 ade:	76 2f       	mov	r23, r22
 ae0:	6a 2f       	mov	r22, r26
 ae2:	11 24       	eor	r1, r1
 ae4:	9f 57       	subi	r25, 0x7F	; 127
 ae6:	50 40       	sbci	r21, 0x00	; 0
 ae8:	8a f0       	brmi	.+34     	; 0xb0c <__mulsf3_pse+0x84>
 aea:	e1 f0       	breq	.+56     	; 0xb24 <__mulsf3_pse+0x9c>
 aec:	88 23       	and	r24, r24
 aee:	4a f0       	brmi	.+18     	; 0xb02 <__mulsf3_pse+0x7a>
 af0:	ee 0f       	add	r30, r30
 af2:	ff 1f       	adc	r31, r31
 af4:	bb 1f       	adc	r27, r27
 af6:	66 1f       	adc	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	91 50       	subi	r25, 0x01	; 1
 afe:	50 40       	sbci	r21, 0x00	; 0
 b00:	a9 f7       	brne	.-22     	; 0xaec <__mulsf3_pse+0x64>
 b02:	9e 3f       	cpi	r25, 0xFE	; 254
 b04:	51 05       	cpc	r21, r1
 b06:	70 f0       	brcs	.+28     	; 0xb24 <__mulsf3_pse+0x9c>
 b08:	5c cf       	rjmp	.-328    	; 0x9c2 <__fp_inf>
 b0a:	a6 cf       	rjmp	.-180    	; 0xa58 <__fp_szero>
 b0c:	5f 3f       	cpi	r21, 0xFF	; 255
 b0e:	ec f3       	brlt	.-6      	; 0xb0a <__mulsf3_pse+0x82>
 b10:	98 3e       	cpi	r25, 0xE8	; 232
 b12:	dc f3       	brlt	.-10     	; 0xb0a <__mulsf3_pse+0x82>
 b14:	86 95       	lsr	r24
 b16:	77 95       	ror	r23
 b18:	67 95       	ror	r22
 b1a:	b7 95       	ror	r27
 b1c:	f7 95       	ror	r31
 b1e:	e7 95       	ror	r30
 b20:	9f 5f       	subi	r25, 0xFF	; 255
 b22:	c1 f7       	brne	.-16     	; 0xb14 <__mulsf3_pse+0x8c>
 b24:	fe 2b       	or	r31, r30
 b26:	88 0f       	add	r24, r24
 b28:	91 1d       	adc	r25, r1
 b2a:	96 95       	lsr	r25
 b2c:	87 95       	ror	r24
 b2e:	97 f9       	bld	r25, 7
 b30:	08 95       	ret

00000b32 <_exit>:
 b32:	f8 94       	cli

00000b34 <__stop_program>:
 b34:	ff cf       	rjmp	.-2      	; 0xb34 <__stop_program>
