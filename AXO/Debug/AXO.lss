
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001876  0000190a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800162  00800162  0000196c  2**0
                  ALLOC
  3 .debug_aranges 00000178  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002c4  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001435  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  000031dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001585  00000000  00000000  00003793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00004d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040f  00000000  00000000  00004fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba2  00000000  00000000  000053b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00005f59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    //TODO: запретить прерывание INT1
    //TODO: включить непрерывное преобразование АЦП
    //TODO: разрешить прерывание по переполнению таймера 2
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
}
void LCDhome(void)			//LCD cursor home
{
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c1       	rjmp	.+796    	; 0x326 <__vector_2>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	fc c0       	rjmp	.+504    	; 0x21e <__vector_9>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c1       	rjmp	.+614    	; 0x2a0 <__vector_14>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	33 c1       	rjmp	.+614    	; 0x2b4 <__vector_19>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__vector_20>
      52:	00 00       	nop
      54:	46 c0       	rjmp	.+140    	; 0xe2 <__vector_21>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
	...

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d4 e0       	ldi	r29, 0x04	; 4
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e6 e7       	ldi	r30, 0x76	; 118
      bc:	f8 e1       	ldi	r31, 0x18	; 24
      be:	02 c0       	rjmp	.+4      	; 0xc4 <.do_copy_data_start>

000000c0 <.do_copy_data_loop>:
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0

000000c4 <.do_copy_data_start>:
      c4:	a2 36       	cpi	r26, 0x62	; 98
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <.do_copy_data_loop>

000000ca <__do_clear_bss>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a2 e6       	ldi	r26, 0x62	; 98
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a5 37       	cpi	r26, 0x75	; 117
      d6:	b1 07       	cpc	r27, r17
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	48 d4       	rcall	.+2192   	; 0x96c <main>
      dc:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){
      e2:	1f 92       	push	r1
      e4:	0f 92       	push	r0
      e6:	0f b6       	in	r0, 0x3f	; 63
      e8:	0f 92       	push	r0
      ea:	11 24       	eor	r1, r1
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	2f 93       	push	r18
      f6:	3f 93       	push	r19
      f8:	4f 93       	push	r20
      fa:	5f 93       	push	r21
      fc:	6f 93       	push	r22
      fe:	7f 93       	push	r23
     100:	8f 93       	push	r24
     102:	9f 93       	push	r25
     104:	af 93       	push	r26
     106:	bf 93       	push	r27
     108:	ef 93       	push	r30
     10a:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
     10c:	60 91 79 00 	lds	r22, 0x0079
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	66 0f       	add	r22, r22
     114:	77 1f       	adc	r23, r23
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	88 27       	eor	r24, r24
     11c:	77 fd       	sbrc	r23, 7
     11e:	80 95       	com	r24
     120:	98 2f       	mov	r25, r24
     122:	ca d7       	rcall	.+3988   	; 0x10b8 <__floatsisf>
     124:	2c e5       	ldi	r18, 0x5C	; 92
     126:	3f e8       	ldi	r19, 0x8F	; 143
     128:	42 e4       	ldi	r20, 0x42	; 66
     12a:	5e e3       	ldi	r21, 0x3E	; 62
     12c:	0e 94 10 09 	call	0x1220	; 0x1220 <__mulsf3>
     130:	60 93 67 01 	sts	0x0167, r22
     134:	70 93 68 01 	sts	0x0168, r23
     138:	80 93 69 01 	sts	0x0169, r24
     13c:	90 93 6a 01 	sts	0x016A, r25
    if (temperatureValue >= (targetTemp + Tolerance))
     140:	60 91 1d 01 	lds	r22, 0x011D
     144:	70 91 1e 01 	lds	r23, 0x011E
     148:	80 91 1f 01 	lds	r24, 0x011F
     14c:	90 91 20 01 	lds	r25, 0x0120
     150:	20 91 62 01 	lds	r18, 0x0162
     154:	30 91 63 01 	lds	r19, 0x0163
     158:	40 91 64 01 	lds	r20, 0x0164
     15c:	50 91 65 01 	lds	r21, 0x0165
     160:	e0 90 67 01 	lds	r14, 0x0167
     164:	f0 90 68 01 	lds	r15, 0x0168
     168:	00 91 69 01 	lds	r16, 0x0169
     16c:	10 91 6a 01 	lds	r17, 0x016A
     170:	a0 d6       	rcall	.+3392   	; 0xeb2 <__addsf3>
     172:	a8 01       	movw	r20, r16
     174:	97 01       	movw	r18, r14
     176:	01 d7       	rcall	.+3586   	; 0xf7a <__cmpsf2>
     178:	18 16       	cp	r1, r24
     17a:	ac f0       	brlt	.+42     	; 0x1a6 <__vector_21+0xc4>
    BIT_clear(progFlags, FAN_ON);
}

inline static void turnOnCooler() 
{
    if(!BIT_read(progFlags, COOLING))
     17c:	90 91 1c 01 	lds	r25, 0x011C
     180:	89 2f       	mov	r24, r25
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	86 95       	lsr	r24
     188:	80 fd       	sbrc	r24, 0
     18a:	34 c0       	rjmp	.+104    	; 0x1f4 <__vector_21+0x112>
    }
}

inline static void turnOnFan() 
{
	BIT_write(CONTROL_PORT, FAN, 1);
     18c:	eb e2       	ldi	r30, 0x2B	; 43
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	81 60       	ori	r24, 0x01	; 1
     194:	80 83       	st	Z, r24
inline static void turnOnCooler() 
{
    if(!BIT_read(progFlags, COOLING))
    {   
        turnOnFan();
	    BIT_write(CONTROL_PORT, LOAD, 1);
     196:	80 81       	ld	r24, Z
     198:	80 64       	ori	r24, 0x40	; 64
     19a:	80 83       	st	Z, r24
        BIT_write(progFlags, COOLING, 1);
     19c:	89 2f       	mov	r24, r25
     19e:	88 62       	ori	r24, 0x28	; 40
     1a0:	80 93 1c 01 	sts	0x011C, r24
     1a4:	27 c0       	rjmp	.+78     	; 0x1f4 <__vector_21+0x112>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
     1a6:	60 91 67 01 	lds	r22, 0x0167
     1aa:	70 91 68 01 	lds	r23, 0x0168
     1ae:	80 91 69 01 	lds	r24, 0x0169
     1b2:	90 91 6a 01 	lds	r25, 0x016A
     1b6:	20 91 1d 01 	lds	r18, 0x011D
     1ba:	30 91 1e 01 	lds	r19, 0x011E
     1be:	40 91 1f 01 	lds	r20, 0x011F
     1c2:	50 91 20 01 	lds	r21, 0x0120
     1c6:	d9 d6       	rcall	.+3506   	; 0xf7a <__cmpsf2>
     1c8:	18 16       	cp	r1, r24
     1ca:	a4 f0       	brlt	.+40     	; 0x1f4 <__vector_21+0x112>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_read(progFlags, COOLING))
     1cc:	90 91 1c 01 	lds	r25, 0x011C
     1d0:	89 2f       	mov	r24, r25
     1d2:	86 95       	lsr	r24
     1d4:	86 95       	lsr	r24
     1d6:	86 95       	lsr	r24
     1d8:	80 ff       	sbrs	r24, 0
     1da:	0c c0       	rjmp	.+24     	; 0x1f4 <__vector_21+0x112>
	BIT_write(progFlags, FAN_ON, 1);
}

inline static void turnOffFan()
{
    BIT_clear(CONTROL_PORT, FAN);
     1dc:	eb e2       	ldi	r30, 0x2B	; 43
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	8e 7f       	andi	r24, 0xFE	; 254
     1e4:	80 83       	st	Z, r24
inline static void turnOffCooler() 
{
    if(BIT_read(progFlags, COOLING))
    {
        turnOffFan();
	    BIT_clear(CONTROL_PORT, LOAD);
     1e6:	80 81       	ld	r24, Z
     1e8:	8f 7b       	andi	r24, 0xBF	; 191
     1ea:	80 83       	st	Z, r24
        BIT_clear(progFlags, COOLING);
     1ec:	89 2f       	mov	r24, r25
     1ee:	87 7d       	andi	r24, 0xD7	; 215
     1f0:	80 93 1c 01 	sts	0x011C, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	bf 91       	pop	r27
     1fa:	af 91       	pop	r26
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	7f 91       	pop	r23
     202:	6f 91       	pop	r22
     204:	5f 91       	pop	r21
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	ff 90       	pop	r15
     212:	ef 90       	pop	r14
     214:	0f 90       	pop	r0
     216:	0f be       	out	0x3f, r0	; 63
     218:	0f 90       	pop	r0
     21a:	1f 90       	pop	r1
     21c:	18 95       	reti

0000021e <__vector_9>:



ISR(TIMER2_OVF_vect){
     21e:	1f 92       	push	r1
     220:	0f 92       	push	r0
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	0f 92       	push	r0
     226:	11 24       	eor	r1, r1
     228:	8f 93       	push	r24
     22a:	9f 93       	push	r25
     22c:	af 93       	push	r26
     22e:	bf 93       	push	r27
     230:	ef 93       	push	r30
     232:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
     234:	80 91 67 01 	lds	r24, 0x0167
     238:	90 91 68 01 	lds	r25, 0x0168
     23c:	a0 91 69 01 	lds	r26, 0x0169
     240:	b0 91 6a 01 	lds	r27, 0x016A

inline static void sendData( volatile double a) 
{
    //BIN8toASCII3(USART_buffer[0], USART_buffer[1], USART_buffer[2],a); //TODO: доопределить
    //memcpy(&USART_buffer,&a, 8);
    USART_buffer[7]= '\n';
     244:	e4 e7       	ldi	r30, 0x74	; 116
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	8a e0       	ldi	r24, 0x0A	; 10
     24a:	80 83       	st	Z, r24
    #ifdef MEGA_16
    UDR= *USART_buffer;
    USART_index= 1;
    BIT_write(UCSRB, UDRIE, 1);
    #elif defined MEGA_168
    UDR0= *USART_buffer;
     24c:	37 97       	sbiw	r30, 0x07	; 7
     24e:	80 81       	ld	r24, Z
     250:	80 93 c6 00 	sts	0x00C6, r24
    USART_index= 1;
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	90 93 6c 01 	sts	0x016C, r25
     25c:	80 93 6b 01 	sts	0x016B, r24
    BIT_write(UCSR0B, UDRIE0, 1);
     260:	e1 ec       	ldi	r30, 0xC1	; 193
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	80 62       	ori	r24, 0x20	; 32
     268:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
    runSeconds++;
     26a:	80 91 66 01 	lds	r24, 0x0166
     26e:	8f 5f       	subi	r24, 0xFF	; 255
     270:	80 93 66 01 	sts	0x0166, r24
    if (runSeconds==timeOut)
     274:	80 91 66 01 	lds	r24, 0x0166
     278:	8a 30       	cpi	r24, 0x0A	; 10
     27a:	39 f4       	brne	.+14     	; 0x28a <__vector_9+0x6c>
    {
        runSeconds= 0; // сбрасывает счетчик секунд
     27c:	10 92 66 01 	sts	0x0166, r1
        BIT_write(progFlags, INACTIVE, 1);
     280:	80 91 1c 01 	lds	r24, 0x011C
     284:	80 61       	ori	r24, 0x10	; 16
     286:	80 93 1c 01 	sts	0x011C, r24
    }
    return;
}
     28a:	ff 91       	pop	r31
     28c:	ef 91       	pop	r30
     28e:	bf 91       	pop	r27
     290:	af 91       	pop	r26
     292:	9f 91       	pop	r25
     294:	8f 91       	pop	r24
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <__vector_14>:

ISR(TIMER0_COMPA_vect){
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
    return;
}
     2aa:	0f 90       	pop	r0
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	0f 90       	pop	r0
     2b0:	1f 90       	pop	r1
     2b2:	18 95       	reti

000002b4 <__vector_19>:
    turnOffSleep();
    BIT_write(progFlags, LCD_ON, 1);
    LCDvisible();
}

ISR(USART_UDRE_vect){
     2b4:	1f 92       	push	r1
     2b6:	0f 92       	push	r0
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	0f 92       	push	r0
     2bc:	11 24       	eor	r1, r1
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	ef 93       	push	r30
     2c4:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : отдавать модулю УСАПП следующий байт сообщения
    //////////////////////////////////////////////////////////////////////////
    UDR0= USART_buffer[USART_index];
     2c6:	e0 91 6b 01 	lds	r30, 0x016B
     2ca:	f0 91 6c 01 	lds	r31, 0x016C
     2ce:	e3 59       	subi	r30, 0x93	; 147
     2d0:	fe 4f       	sbci	r31, 0xFE	; 254
     2d2:	80 81       	ld	r24, Z
     2d4:	80 93 c6 00 	sts	0x00C6, r24
    USART_index++;
     2d8:	80 91 6b 01 	lds	r24, 0x016B
     2dc:	90 91 6c 01 	lds	r25, 0x016C
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	90 93 6c 01 	sts	0x016C, r25
     2e6:	80 93 6b 01 	sts	0x016B, r24
    if(USART_index == 8) {
     2ea:	80 91 6b 01 	lds	r24, 0x016B
     2ee:	90 91 6c 01 	lds	r25, 0x016C
     2f2:	08 97       	sbiw	r24, 0x08	; 8
     2f4:	29 f4       	brne	.+10     	; 0x300 <__vector_19+0x4c>
        BIT_write(UCSR0B, UDRIE0, 0);
     2f6:	e1 ec       	ldi	r30, 0xC1	; 193
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	8f 7d       	andi	r24, 0xDF	; 223
     2fe:	80 83       	st	Z, r24
    }
}
     300:	ff 91       	pop	r31
     302:	ef 91       	pop	r30
     304:	9f 91       	pop	r25
     306:	8f 91       	pop	r24
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_20>:

ISR(USART_TX_vect){
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
    return;
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <__vector_2>:

ISR(TIMER0_COMPA_vect){
    return;
}

ISR(INT1_vect){
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : выходить из сна
    //////////////////////////////////////////////////////////////////////////
    turnOffSleep();
    BIT_write(progFlags, LCD_ON, 1);
     348:	80 91 1c 01 	lds	r24, 0x011C
     34c:	81 60       	ori	r24, 0x01	; 1
     34e:	80 93 1c 01 	sts	0x011C, r24
    LCDvisible();
     352:	a7 d5       	rcall	.+2894   	; 0xea2 <LCDvisible>
}
     354:	ff 91       	pop	r31
     356:	ef 91       	pop	r30
     358:	bf 91       	pop	r27
     35a:	af 91       	pop	r26
     35c:	9f 91       	pop	r25
     35e:	8f 91       	pop	r24
     360:	7f 91       	pop	r23
     362:	6f 91       	pop	r22
     364:	5f 91       	pop	r21
     366:	4f 91       	pop	r20
     368:	3f 91       	pop	r19
     36a:	2f 91       	pop	r18
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <double2char>:
#ifndef D2C_H_
#define D2C_H_


void double2char(char* arr, double value) {
    sprintf(arr, "%2.2f", value);
     376:	2d b7       	in	r18, 0x3d	; 61
     378:	3e b7       	in	r19, 0x3e	; 62
     37a:	28 50       	subi	r18, 0x08	; 8
     37c:	30 40       	sbci	r19, 0x00	; 0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	3e bf       	out	0x3e, r19	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	2d bf       	out	0x3d, r18	; 61
     388:	ed b7       	in	r30, 0x3d	; 61
     38a:	fe b7       	in	r31, 0x3e	; 62
     38c:	31 96       	adiw	r30, 0x01	; 1
     38e:	91 83       	std	Z+1, r25	; 0x01
     390:	80 83       	st	Z, r24
     392:	86 e0       	ldi	r24, 0x06	; 6
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	93 83       	std	Z+3, r25	; 0x03
     398:	82 83       	std	Z+2, r24	; 0x02
     39a:	44 83       	std	Z+4, r20	; 0x04
     39c:	55 83       	std	Z+5, r21	; 0x05
     39e:	66 83       	std	Z+6, r22	; 0x06
     3a0:	77 83       	std	Z+7, r23	; 0x07
     3a2:	a1 d7       	rcall	.+3906   	; 0x12e6 <sprintf>
     3a4:	8d b7       	in	r24, 0x3d	; 61
     3a6:	9e b7       	in	r25, 0x3e	; 62
     3a8:	08 96       	adiw	r24, 0x08	; 8
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	9e bf       	out	0x3e, r25	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	8d bf       	out	0x3d, r24	; 61
}
     3b4:	08 95       	ret

000003b6 <menuRun>:
}

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()
{
     3b6:	2f 92       	push	r2
     3b8:	3f 92       	push	r3
     3ba:	4f 92       	push	r4
     3bc:	5f 92       	push	r5
     3be:	6f 92       	push	r6
     3c0:	7f 92       	push	r7
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	af 92       	push	r10
     3c8:	bf 92       	push	r11
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	cf 54       	subi	r28, 0x4F	; 79
     3e0:	d0 40       	sbci	r29, 0x00	; 0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
     3ec:	de 01       	movw	r26, r28
     3ee:	11 96       	adiw	r26, 0x01	; 1
     3f0:	e2 e2       	ldi	r30, 0x22	; 34
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	80 e4       	ldi	r24, 0x40	; 64
     3f6:	01 90       	ld	r0, Z+
     3f8:	0d 92       	st	X+, r0
     3fa:	81 50       	subi	r24, 0x01	; 1
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
     3fe:	60 91 1d 01 	lds	r22, 0x011D
     402:	70 91 1e 01 	lds	r23, 0x011E
     406:	80 91 1f 01 	lds	r24, 0x011F
     40a:	90 91 20 01 	lds	r25, 0x0120
     40e:	c0 90 62 01 	lds	r12, 0x0162
     412:	d0 90 63 01 	lds	r13, 0x0163
     416:	e0 90 64 01 	lds	r14, 0x0164
     41a:	f0 90 65 01 	lds	r15, 0x0165
     41e:	b0 90 21 01 	lds	r11, 0x0121
     422:	00 91 1c 01 	lds	r16, 0x011C
     426:	06 95       	lsr	r16
     428:	06 95       	lsr	r16
     42a:	10 e0       	ldi	r17, 0x00	; 0
     42c:	01 70       	andi	r16, 0x01	; 1
     42e:	10 70       	andi	r17, 0x00	; 0
     430:	10 d6       	rcall	.+3104   	; 0x1052 <__fixsfsi>
     432:	fe 01       	movw	r30, r28
     434:	ef 5b       	subi	r30, 0xBF	; 191
     436:	ff 4f       	sbci	r31, 0xFF	; 255
     438:	71 83       	std	Z+1, r23	; 0x01
     43a:	60 83       	st	Z, r22
     43c:	c7 01       	movw	r24, r14
     43e:	b6 01       	movw	r22, r12
     440:	08 d6       	rcall	.+3088   	; 0x1052 <__fixsfsi>
     442:	fe 01       	movw	r30, r28
     444:	ed 5b       	subi	r30, 0xBD	; 189
     446:	ff 4f       	sbci	r31, 0xFF	; 255
     448:	71 83       	std	Z+1, r23	; 0x01
     44a:	60 83       	st	Z, r22
     44c:	fe 01       	movw	r30, r28
     44e:	eb 5b       	subi	r30, 0xBB	; 187
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	b0 82       	st	Z, r11
     454:	11 82       	std	Z+1, r1	; 0x01
     456:	fe 01       	movw	r30, r28
     458:	e9 5b       	subi	r30, 0xB9	; 185
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	11 83       	std	Z+1, r17	; 0x01
     45e:	00 83       	st	Z, r16
    LCDclr();
     460:	78 d4       	rcall	.+2288   	; 0xd52 <LCDclr>
     462:	cc 24       	eor	r12, r12
     464:	dd 24       	eor	r13, r13
    while (!(BIT_read(progFlags, INACTIVE)||(!BIT_read(CONTROL_PORT, BUTTON_BACK)))){
     466:	0f 2e       	mov	r0, r31
     468:	fb e2       	ldi	r31, 0x2B	; 43
     46a:	8f 2e       	mov	r8, r31
     46c:	99 24       	eor	r9, r9
     46e:	f0 2d       	mov	r31, r0
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
            BIT_clear(progFlags, INACTIVE);
            runSeconds= 0;
            int value= values[pos];
     470:	0f 2e       	mov	r0, r31
     472:	f1 e4       	ldi	r31, 0x41	; 65
     474:	4f 2e       	mov	r4, r31
     476:	55 24       	eor	r5, r5
     478:	f0 2d       	mov	r31, r0
     47a:	4c 0e       	add	r4, r28
     47c:	5d 1e       	adc	r5, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	2f 96       	adiw	r28, 0x0f	; 15
     484:	8f af       	std	Y+63, r24	; 0x3f
     486:	2f 97       	sbiw	r28, 0x0f	; 15
     488:	60 96       	adiw	r28, 0x10	; 16
     48a:	9f af       	std	Y+63, r25	; 0x3f
     48c:	60 97       	sbiw	r28, 0x10	; 16
     48e:	eb c1       	rjmp	.+982    	; 0x866 <__stack+0x367>
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
    LCDclr();
    while (!(BIT_read(progFlags, INACTIVE)||(!BIT_read(CONTROL_PORT, BUTTON_BACK)))){
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
     490:	f4 01       	movw	r30, r8
     492:	80 81       	ld	r24, Z
     494:	83 fd       	sbrc	r24, 3
     496:	8f c1       	rjmp	.+798    	; 0x7b6 <__stack+0x2b7>
            BIT_clear(progFlags, INACTIVE);
     498:	29 2f       	mov	r18, r25
     49a:	2f 7e       	andi	r18, 0xEF	; 239
     49c:	20 93 1c 01 	sts	0x011C, r18
            runSeconds= 0;
     4a0:	10 92 66 01 	sts	0x0166, r1
            int value= values[pos];
     4a4:	c6 01       	movw	r24, r12
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	f2 01       	movw	r30, r4
     4ac:	e8 0f       	add	r30, r24
     4ae:	f9 1f       	adc	r31, r25
     4b0:	20 80       	ld	r2, Z
     4b2:	31 80       	ldd	r3, Z+1	; 0x01
            while(!(BIT_read(progFlags, INACTIVE)||(!BIT_read(CONTROL_PORT, BUTTON_BACK)))){
     4b4:	f4 01       	movw	r30, r8
     4b6:	80 81       	ld	r24, Z
     4b8:	82 ff       	sbrs	r24, 2
     4ba:	7d c1       	rjmp	.+762    	; 0x7b6 <__stack+0x2b7>
                        break;
                    }          
                }
                LCDclr();
                LCDGotoXY(0, 0);
                LCDstring(menu[pos],16);
     4bc:	c6 01       	movw	r24, r12
     4be:	82 95       	swap	r24
     4c0:	92 95       	swap	r25
     4c2:	90 7f       	andi	r25, 0xF0	; 240
     4c4:	98 27       	eor	r25, r24
     4c6:	80 7f       	andi	r24, 0xF0	; 240
     4c8:	98 27       	eor	r25, r24
     4ca:	66 24       	eor	r6, r6
     4cc:	77 24       	eor	r7, r7
     4ce:	63 94       	inc	r6
     4d0:	6c 0e       	add	r6, r28
     4d2:	7d 1e       	adc	r7, r29
     4d4:	68 0e       	add	r6, r24
     4d6:	79 1e       	adc	r7, r25
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
                {
                    BIT_clear(progFlags, INACTIVE);
                    runSeconds= 0;
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     4d8:	c6 01       	movw	r24, r12
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	52 01       	movw	r10, r4
     4e0:	a8 0e       	add	r10, r24
     4e2:	b9 1e       	adc	r11, r25
            BIT_clear(progFlags, INACTIVE);
            runSeconds= 0;
            int value= values[pos];
            while(!(BIT_read(progFlags, INACTIVE)||(!BIT_read(CONTROL_PORT, BUTTON_BACK)))){
                //LCD_Write(values[pos],1,0);
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
     4e4:	f4 01       	movw	r30, r8
     4e6:	80 81       	ld	r24, Z
     4e8:	85 fd       	sbrc	r24, 5
     4ea:	92 c0       	rjmp	.+292    	; 0x610 <__stack+0x111>
                {
                    BIT_clear(progFlags, INACTIVE);
     4ec:	82 2f       	mov	r24, r18
     4ee:	8f 7e       	andi	r24, 0xEF	; 239
     4f0:	80 93 1c 01 	sts	0x011C, r24
                    runSeconds= 0;
     4f4:	10 92 66 01 	sts	0x0166, r1
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     4f8:	f5 01       	movw	r30, r10
     4fa:	80 81       	ld	r24, Z
     4fc:	91 81       	ldd	r25, Z+1	; 0x01
     4fe:	9c 01       	movw	r18, r24
     500:	2f 5f       	subi	r18, 0xFF	; 255
     502:	3f 4f       	sbci	r19, 0xFF	; 255
}


inline int inRange(int pos, int value)
{
    switch (pos)
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	cf 16       	cp	r12, r31
     508:	d1 04       	cpc	r13, r1
     50a:	c1 f1       	breq	.+112    	; 0x57c <__stack+0x7d>
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	c8 16       	cp	r12, r24
     510:	d1 04       	cpc	r13, r1
     512:	34 f4       	brge	.+12     	; 0x520 <__stack+0x21>
     514:	e1 e0       	ldi	r30, 0x01	; 1
     516:	ce 16       	cp	r12, r30
     518:	d1 04       	cpc	r13, r1
     51a:	09 f0       	breq	.+2      	; 0x51e <__stack+0x1f>
     51c:	6e c0       	rjmp	.+220    	; 0x5fa <__stack+0xfb>
     51e:	0b c0       	rjmp	.+22     	; 0x536 <__stack+0x37>
     520:	f3 e0       	ldi	r31, 0x03	; 3
     522:	cf 16       	cp	r12, r31
     524:	d1 04       	cpc	r13, r1
     526:	09 f4       	brne	.+2      	; 0x52a <__stack+0x2b>
     528:	49 c0       	rjmp	.+146    	; 0x5bc <__stack+0xbd>
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	c8 16       	cp	r12, r24
     52e:	d1 04       	cpc	r13, r1
     530:	09 f0       	breq	.+2      	; 0x534 <__stack+0x35>
     532:	63 c0       	rjmp	.+198    	; 0x5fa <__stack+0xfb>
     534:	4d c0       	rjmp	.+154    	; 0x5d0 <__stack+0xd1>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     536:	b9 01       	movw	r22, r18
     538:	88 27       	eor	r24, r24
     53a:	77 fd       	sbrc	r23, 7
     53c:	80 95       	com	r24
     53e:	98 2f       	mov	r25, r24
     540:	bb d5       	rcall	.+2934   	; 0x10b8 <__floatsisf>
     542:	7b 01       	movw	r14, r22
     544:	8c 01       	movw	r16, r24
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e7       	ldi	r20, 0x70	; 112
     54c:	51 e4       	ldi	r21, 0x41	; 65
     54e:	15 d5       	rcall	.+2602   	; 0xf7a <__cmpsf2>
     550:	88 23       	and	r24, r24
     552:	1c f4       	brge	.+6      	; 0x55a <__stack+0x5b>
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	58 c0       	rjmp	.+176    	; 0x60a <__stack+0x10b>
     55a:	c8 01       	movw	r24, r16
     55c:	b7 01       	movw	r22, r14
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 ea       	ldi	r20, 0xA0	; 160
     564:	51 e4       	ldi	r21, 0x41	; 65
     566:	58 d6       	rcall	.+3248   	; 0x1218 <__gesf2>
     568:	18 16       	cp	r1, r24
     56a:	1c f4       	brge	.+6      	; 0x572 <__stack+0x73>
     56c:	84 e1       	ldi	r24, 0x14	; 20
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	4c c0       	rjmp	.+152    	; 0x60a <__stack+0x10b>
     572:	c8 01       	movw	r24, r16
     574:	b7 01       	movw	r22, r14
     576:	6d d5       	rcall	.+2778   	; 0x1052 <__fixsfsi>
     578:	cb 01       	movw	r24, r22
     57a:	47 c0       	rjmp	.+142    	; 0x60a <__stack+0x10b>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     57c:	b9 01       	movw	r22, r18
     57e:	88 27       	eor	r24, r24
     580:	77 fd       	sbrc	r23, 7
     582:	80 95       	com	r24
     584:	98 2f       	mov	r25, r24
     586:	98 d5       	rcall	.+2864   	; 0x10b8 <__floatsisf>
     588:	7b 01       	movw	r14, r22
     58a:	8c 01       	movw	r16, r24
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	f2 d4       	rcall	.+2532   	; 0xf7a <__cmpsf2>
     596:	88 23       	and	r24, r24
     598:	94 f1       	brlt	.+100    	; 0x5fe <__stack+0xff>
     59a:	c8 01       	movw	r24, r16
     59c:	b7 01       	movw	r22, r14
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e8       	ldi	r20, 0x80	; 128
     5a4:	5f e3       	ldi	r21, 0x3F	; 63
     5a6:	38 d6       	rcall	.+3184   	; 0x1218 <__gesf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	1c f4       	brge	.+6      	; 0x5b2 <__stack+0xb3>
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	2c c0       	rjmp	.+88     	; 0x60a <__stack+0x10b>
     5b2:	c8 01       	movw	r24, r16
     5b4:	b7 01       	movw	r22, r14
     5b6:	4d d5       	rcall	.+2714   	; 0x1052 <__fixsfsi>
     5b8:	cb 01       	movw	r24, r22
     5ba:	27 c0       	rjmp	.+78     	; 0x60a <__stack+0x10b>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     5bc:	33 23       	and	r19, r19
     5be:	1c f4       	brge	.+6      	; 0x5c6 <__stack+0xc7>
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	22 c0       	rjmp	.+68     	; 0x60a <__stack+0x10b>
     5c6:	e4 e0       	ldi	r30, 0x04	; 4
     5c8:	20 30       	cpi	r18, 0x00	; 0
     5ca:	3e 07       	cpc	r19, r30
     5cc:	b4 f0       	brlt	.+44     	; 0x5fa <__stack+0xfb>
     5ce:	17 c0       	rjmp	.+46     	; 0x5fe <__stack+0xff>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     5d0:	c9 01       	movw	r24, r18
     5d2:	52 2f       	mov	r21, r18
     5d4:	49 2f       	mov	r20, r25
     5d6:	12 16       	cp	r1, r18
     5d8:	13 06       	cpc	r1, r19
     5da:	24 f4       	brge	.+8      	; 0x5e4 <__stack+0xe5>
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	58 2f       	mov	r21, r24
     5e2:	49 2f       	mov	r20, r25
     5e4:	85 2f       	mov	r24, r21
     5e6:	94 2f       	mov	r25, r20
     5e8:	99 23       	and	r25, r25
     5ea:	7c f4       	brge	.+30     	; 0x60a <__stack+0x10b>
     5ec:	2f 96       	adiw	r28, 0x0f	; 15
     5ee:	8f ad       	ldd	r24, Y+63	; 0x3f
     5f0:	2f 97       	sbiw	r28, 0x0f	; 15
     5f2:	60 96       	adiw	r28, 0x10	; 16
     5f4:	9f ad       	ldd	r25, Y+63	; 0x3f
     5f6:	60 97       	sbiw	r28, 0x10	; 16
     5f8:	08 c0       	rjmp	.+16     	; 0x60a <__stack+0x10b>
     5fa:	c9 01       	movw	r24, r18
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <__stack+0x10b>
     5fe:	2f 96       	adiw	r28, 0x0f	; 15
     600:	8f ad       	ldd	r24, Y+63	; 0x3f
     602:	2f 97       	sbiw	r28, 0x0f	; 15
     604:	60 96       	adiw	r28, 0x10	; 16
     606:	9f ad       	ldd	r25, Y+63	; 0x3f
     608:	60 97       	sbiw	r28, 0x10	; 16
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
                {
                    BIT_clear(progFlags, INACTIVE);
                    runSeconds= 0;
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     60a:	f5 01       	movw	r30, r10
     60c:	91 83       	std	Z+1, r25	; 0x01
     60e:	80 83       	st	Z, r24
                }
                if (!BIT_read(CONTROL_PORT, BUTTON_M))
     610:	f4 01       	movw	r30, r8
     612:	80 81       	ld	r24, Z
     614:	84 fd       	sbrc	r24, 4
     616:	93 c0       	rjmp	.+294    	; 0x73e <__stack+0x23f>
                {
                    BIT_clear(progFlags, INACTIVE);
     618:	80 91 1c 01 	lds	r24, 0x011C
     61c:	8f 7e       	andi	r24, 0xEF	; 239
     61e:	80 93 1c 01 	sts	0x011C, r24
                    runSeconds= 0;
     622:	10 92 66 01 	sts	0x0166, r1
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     626:	f5 01       	movw	r30, r10
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	9c 01       	movw	r18, r24
     62e:	21 50       	subi	r18, 0x01	; 1
     630:	30 40       	sbci	r19, 0x00	; 0
}


inline int inRange(int pos, int value)
{
    switch (pos)
     632:	f2 e0       	ldi	r31, 0x02	; 2
     634:	cf 16       	cp	r12, r31
     636:	d1 04       	cpc	r13, r1
     638:	c1 f1       	breq	.+112    	; 0x6aa <__stack+0x1ab>
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	c8 16       	cp	r12, r24
     63e:	d1 04       	cpc	r13, r1
     640:	34 f4       	brge	.+12     	; 0x64e <__stack+0x14f>
     642:	e1 e0       	ldi	r30, 0x01	; 1
     644:	ce 16       	cp	r12, r30
     646:	d1 04       	cpc	r13, r1
     648:	09 f0       	breq	.+2      	; 0x64c <__stack+0x14d>
     64a:	6e c0       	rjmp	.+220    	; 0x728 <__stack+0x229>
     64c:	0b c0       	rjmp	.+22     	; 0x664 <__stack+0x165>
     64e:	f3 e0       	ldi	r31, 0x03	; 3
     650:	cf 16       	cp	r12, r31
     652:	d1 04       	cpc	r13, r1
     654:	09 f4       	brne	.+2      	; 0x658 <__stack+0x159>
     656:	49 c0       	rjmp	.+146    	; 0x6ea <__stack+0x1eb>
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	c8 16       	cp	r12, r24
     65c:	d1 04       	cpc	r13, r1
     65e:	09 f0       	breq	.+2      	; 0x662 <__stack+0x163>
     660:	63 c0       	rjmp	.+198    	; 0x728 <__stack+0x229>
     662:	4d c0       	rjmp	.+154    	; 0x6fe <__stack+0x1ff>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     664:	b9 01       	movw	r22, r18
     666:	88 27       	eor	r24, r24
     668:	77 fd       	sbrc	r23, 7
     66a:	80 95       	com	r24
     66c:	98 2f       	mov	r25, r24
     66e:	24 d5       	rcall	.+2632   	; 0x10b8 <__floatsisf>
     670:	7b 01       	movw	r14, r22
     672:	8c 01       	movw	r16, r24
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e7       	ldi	r20, 0x70	; 112
     67a:	51 e4       	ldi	r21, 0x41	; 65
     67c:	7e d4       	rcall	.+2300   	; 0xf7a <__cmpsf2>
     67e:	88 23       	and	r24, r24
     680:	1c f4       	brge	.+6      	; 0x688 <__stack+0x189>
     682:	8f e0       	ldi	r24, 0x0F	; 15
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	58 c0       	rjmp	.+176    	; 0x738 <__stack+0x239>
     688:	c8 01       	movw	r24, r16
     68a:	b7 01       	movw	r22, r14
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 ea       	ldi	r20, 0xA0	; 160
     692:	51 e4       	ldi	r21, 0x41	; 65
     694:	c1 d5       	rcall	.+2946   	; 0x1218 <__gesf2>
     696:	18 16       	cp	r1, r24
     698:	1c f4       	brge	.+6      	; 0x6a0 <__stack+0x1a1>
     69a:	84 e1       	ldi	r24, 0x14	; 20
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	4c c0       	rjmp	.+152    	; 0x738 <__stack+0x239>
     6a0:	c8 01       	movw	r24, r16
     6a2:	b7 01       	movw	r22, r14
     6a4:	d6 d4       	rcall	.+2476   	; 0x1052 <__fixsfsi>
     6a6:	cb 01       	movw	r24, r22
     6a8:	47 c0       	rjmp	.+142    	; 0x738 <__stack+0x239>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     6aa:	b9 01       	movw	r22, r18
     6ac:	88 27       	eor	r24, r24
     6ae:	77 fd       	sbrc	r23, 7
     6b0:	80 95       	com	r24
     6b2:	98 2f       	mov	r25, r24
     6b4:	01 d5       	rcall	.+2562   	; 0x10b8 <__floatsisf>
     6b6:	7b 01       	movw	r14, r22
     6b8:	8c 01       	movw	r16, r24
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	5b d4       	rcall	.+2230   	; 0xf7a <__cmpsf2>
     6c4:	88 23       	and	r24, r24
     6c6:	94 f1       	brlt	.+100    	; 0x72c <__stack+0x22d>
     6c8:	c8 01       	movw	r24, r16
     6ca:	b7 01       	movw	r22, r14
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e8       	ldi	r20, 0x80	; 128
     6d2:	5f e3       	ldi	r21, 0x3F	; 63
     6d4:	a1 d5       	rcall	.+2882   	; 0x1218 <__gesf2>
     6d6:	18 16       	cp	r1, r24
     6d8:	1c f4       	brge	.+6      	; 0x6e0 <__stack+0x1e1>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	2c c0       	rjmp	.+88     	; 0x738 <__stack+0x239>
     6e0:	c8 01       	movw	r24, r16
     6e2:	b7 01       	movw	r22, r14
     6e4:	b6 d4       	rcall	.+2412   	; 0x1052 <__fixsfsi>
     6e6:	cb 01       	movw	r24, r22
     6e8:	27 c0       	rjmp	.+78     	; 0x738 <__stack+0x239>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     6ea:	33 23       	and	r19, r19
     6ec:	1c f4       	brge	.+6      	; 0x6f4 <__stack+0x1f5>
     6ee:	8f ef       	ldi	r24, 0xFF	; 255
     6f0:	93 e0       	ldi	r25, 0x03	; 3
     6f2:	22 c0       	rjmp	.+68     	; 0x738 <__stack+0x239>
     6f4:	e4 e0       	ldi	r30, 0x04	; 4
     6f6:	20 30       	cpi	r18, 0x00	; 0
     6f8:	3e 07       	cpc	r19, r30
     6fa:	b4 f0       	brlt	.+44     	; 0x728 <__stack+0x229>
     6fc:	17 c0       	rjmp	.+46     	; 0x72c <__stack+0x22d>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     6fe:	c9 01       	movw	r24, r18
     700:	52 2f       	mov	r21, r18
     702:	49 2f       	mov	r20, r25
     704:	12 16       	cp	r1, r18
     706:	13 06       	cpc	r1, r19
     708:	24 f4       	brge	.+8      	; 0x712 <__stack+0x213>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	58 2f       	mov	r21, r24
     710:	49 2f       	mov	r20, r25
     712:	85 2f       	mov	r24, r21
     714:	94 2f       	mov	r25, r20
     716:	99 23       	and	r25, r25
     718:	7c f4       	brge	.+30     	; 0x738 <__stack+0x239>
     71a:	2f 96       	adiw	r28, 0x0f	; 15
     71c:	8f ad       	ldd	r24, Y+63	; 0x3f
     71e:	2f 97       	sbiw	r28, 0x0f	; 15
     720:	60 96       	adiw	r28, 0x10	; 16
     722:	9f ad       	ldd	r25, Y+63	; 0x3f
     724:	60 97       	sbiw	r28, 0x10	; 16
     726:	08 c0       	rjmp	.+16     	; 0x738 <__stack+0x239>
     728:	c9 01       	movw	r24, r18
     72a:	06 c0       	rjmp	.+12     	; 0x738 <__stack+0x239>
     72c:	2f 96       	adiw	r28, 0x0f	; 15
     72e:	8f ad       	ldd	r24, Y+63	; 0x3f
     730:	2f 97       	sbiw	r28, 0x0f	; 15
     732:	60 96       	adiw	r28, 0x10	; 16
     734:	9f ad       	ldd	r25, Y+63	; 0x3f
     736:	60 97       	sbiw	r28, 0x10	; 16
                if (!BIT_read(CONTROL_PORT, BUTTON_M))
                {
                    BIT_clear(progFlags, INACTIVE);
                    runSeconds= 0;
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     738:	f5 01       	movw	r30, r10
     73a:	91 83       	std	Z+1, r25	; 0x01
     73c:	80 83       	st	Z, r24

                }
                if (!BIT_read(CONTROL_PORT, BUTTON_OK)) {
     73e:	f4 01       	movw	r30, r8
     740:	80 81       	ld	r24, Z
     742:	83 fd       	sbrc	r24, 3
     744:	21 c0       	rjmp	.+66     	; 0x788 <__stack+0x289>
                    if(pos!=3){
     746:	f3 e0       	ldi	r31, 0x03	; 3
     748:	cf 16       	cp	r12, r31
     74a:	d1 04       	cpc	r13, r1
     74c:	49 f0       	breq	.+18     	; 0x760 <__stack+0x261>
                        values[pos]= (uint8_t)value;
     74e:	c6 01       	movw	r24, r12
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	f2 01       	movw	r30, r4
     756:	e8 0f       	add	r30, r24
     758:	f9 1f       	adc	r31, r25
     75a:	20 82       	st	Z, r2
     75c:	11 82       	std	Z+1, r1	; 0x01
     75e:	2b c0       	rjmp	.+86     	; 0x7b6 <__stack+0x2b7>
                        break;
                    }
                    else{
                        BIT_write(progFlags, ECONOMY, value);
     760:	21 14       	cp	r2, r1
     762:	31 04       	cpc	r3, r1
     764:	59 f0       	breq	.+22     	; 0x77c <__stack+0x27d>
     766:	91 01       	movw	r18, r2
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	22 0f       	add	r18, r18
     76e:	33 1f       	adc	r19, r19
     770:	80 91 1c 01 	lds	r24, 0x011C
     774:	82 2b       	or	r24, r18
     776:	80 93 1c 01 	sts	0x011C, r24
     77a:	1d c0       	rjmp	.+58     	; 0x7b6 <__stack+0x2b7>
     77c:	80 91 1c 01 	lds	r24, 0x011C
     780:	8b 7f       	andi	r24, 0xFB	; 251
     782:	80 93 1c 01 	sts	0x011C, r24
     786:	17 c0       	rjmp	.+46     	; 0x7b6 <__stack+0x2b7>
                        break;
                    }          
                }
                LCDclr();
     788:	e4 d2       	rcall	.+1480   	; 0xd52 <LCDclr>
                LCDGotoXY(0, 0);
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	fb d2       	rcall	.+1526   	; 0xd86 <LCDGotoXY>
                LCDstring(menu[pos],16);
     790:	c3 01       	movw	r24, r6
     792:	60 e1       	ldi	r22, 0x10	; 16
     794:	e0 d2       	rcall	.+1472   	; 0xd56 <LCDstring>
                LCDGotoXY(0, 1);
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	f5 d2       	rcall	.+1514   	; 0xd86 <LCDGotoXY>
                LCDstring(values[pos],1);               
     79c:	f5 01       	movw	r30, r10
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	d8 d2       	rcall	.+1456   	; 0xd56 <LCDstring>
    while (!(BIT_read(progFlags, INACTIVE)||(!BIT_read(CONTROL_PORT, BUTTON_BACK)))){
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
            BIT_clear(progFlags, INACTIVE);
            runSeconds= 0;
            int value= values[pos];
            while(!(BIT_read(progFlags, INACTIVE)||(!BIT_read(CONTROL_PORT, BUTTON_BACK)))){
     7a6:	20 91 1c 01 	lds	r18, 0x011C
     7aa:	24 fd       	sbrc	r18, 4
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__stack+0x2b7>
     7ae:	f4 01       	movw	r30, r8
     7b0:	80 81       	ld	r24, Z
     7b2:	82 fd       	sbrc	r24, 2
     7b4:	97 ce       	rjmp	.-722    	; 0x4e4 <menuRun+0x12e>
                LCDstring(menu[pos],16);
                LCDGotoXY(0, 1);
                LCDstring(values[pos],1);               
            }
        }
        LCDclr();
     7b6:	cd d2       	rcall	.+1434   	; 0xd52 <LCDclr>
        LCDGotoXY(0, 0);
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	e4 d2       	rcall	.+1480   	; 0xd86 <LCDGotoXY>
        LCDstring(menu[pos],16);
     7be:	c6 01       	movw	r24, r12
     7c0:	82 95       	swap	r24
     7c2:	92 95       	swap	r25
     7c4:	90 7f       	andi	r25, 0xF0	; 240
     7c6:	98 27       	eor	r25, r24
     7c8:	80 7f       	andi	r24, 0xF0	; 240
     7ca:	98 27       	eor	r25, r24
     7cc:	21 e0       	ldi	r18, 0x01	; 1
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	2c 0f       	add	r18, r28
     7d2:	3d 1f       	adc	r19, r29
     7d4:	82 0f       	add	r24, r18
     7d6:	93 1f       	adc	r25, r19
     7d8:	60 e1       	ldi	r22, 0x10	; 16
     7da:	bd d2       	rcall	.+1402   	; 0xd56 <LCDstring>
        LCDGotoXY(0, 1);
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	d2 d2       	rcall	.+1444   	; 0xd86 <LCDGotoXY>
        LCDstring(values[pos],1);
     7e2:	c6 01       	movw	r24, r12
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	f2 01       	movw	r30, r4
     7ea:	e8 0f       	add	r30, r24
     7ec:	f9 1f       	adc	r31, r25
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	b0 d2       	rcall	.+1376   	; 0xd56 <LCDstring>
        if (!BIT_read(CONTROL_PORT, BUTTON_P))
     7f6:	f4 01       	movw	r30, r8
     7f8:	80 81       	ld	r24, Z
     7fa:	85 fd       	sbrc	r24, 5
     7fc:	18 c0       	rjmp	.+48     	; 0x82e <__stack+0x32f>
        {
            BIT_clear(progFlags, INACTIVE);
     7fe:	80 91 1c 01 	lds	r24, 0x011C
     802:	8f 7e       	andi	r24, 0xEF	; 239
     804:	80 93 1c 01 	sts	0x011C, r24
            runSeconds= 0;
     808:	10 92 66 01 	sts	0x0166, r1
            pos++;
     80c:	08 94       	sec
     80e:	c1 1c       	adc	r12, r1
     810:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     812:	dd 20       	and	r13, r13
     814:	34 f4       	brge	.+12     	; 0x822 <__stack+0x323>
     816:	0f 2e       	mov	r0, r31
     818:	f3 e0       	ldi	r31, 0x03	; 3
     81a:	cf 2e       	mov	r12, r31
     81c:	dd 24       	eor	r13, r13
     81e:	f0 2d       	mov	r31, r0
     820:	06 c0       	rjmp	.+12     	; 0x82e <__stack+0x32f>
     822:	f4 e0       	ldi	r31, 0x04	; 4
     824:	cf 16       	cp	r12, r31
     826:	d1 04       	cpc	r13, r1
     828:	14 f0       	brlt	.+4      	; 0x82e <__stack+0x32f>
     82a:	cc 24       	eor	r12, r12
     82c:	dd 24       	eor	r13, r13
        }
        if (!BIT_read(CONTROL_PORT, BUTTON_M))
     82e:	f4 01       	movw	r30, r8
     830:	80 81       	ld	r24, Z
     832:	84 fd       	sbrc	r24, 4
     834:	18 c0       	rjmp	.+48     	; 0x866 <__stack+0x367>
        {
            BIT_clear(progFlags, INACTIVE);
     836:	80 91 1c 01 	lds	r24, 0x011C
     83a:	8f 7e       	andi	r24, 0xEF	; 239
     83c:	80 93 1c 01 	sts	0x011C, r24
            runSeconds= 0;
     840:	10 92 66 01 	sts	0x0166, r1
            pos--;
     844:	08 94       	sec
     846:	c1 08       	sbc	r12, r1
     848:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     84a:	dd 20       	and	r13, r13
     84c:	34 f4       	brge	.+12     	; 0x85a <__stack+0x35b>
     84e:	0f 2e       	mov	r0, r31
     850:	f3 e0       	ldi	r31, 0x03	; 3
     852:	cf 2e       	mov	r12, r31
     854:	dd 24       	eor	r13, r13
     856:	f0 2d       	mov	r31, r0
     858:	06 c0       	rjmp	.+12     	; 0x866 <__stack+0x367>
     85a:	f4 e0       	ldi	r31, 0x04	; 4
     85c:	cf 16       	cp	r12, r31
     85e:	d1 04       	cpc	r13, r1
     860:	14 f0       	brlt	.+4      	; 0x866 <__stack+0x367>
     862:	cc 24       	eor	r12, r12
     864:	dd 24       	eor	r13, r13
{
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
    LCDclr();
    while (!(BIT_read(progFlags, INACTIVE)||(!BIT_read(CONTROL_PORT, BUTTON_BACK)))){
     866:	90 91 1c 01 	lds	r25, 0x011C
     86a:	94 fd       	sbrc	r25, 4
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x377>
     86e:	f4 01       	movw	r30, r8
     870:	80 81       	ld	r24, Z
     872:	82 fd       	sbrc	r24, 2
     874:	0d ce       	rjmp	.-998    	; 0x490 <menuRun+0xda>
            pos--;
            pos= CIRCLE(pos, 0, 3);
        }
    }
    BIT_clear(progFlags, MENU_ON);
    BIT_clear(progFlags, INACTIVE);
     876:	89 2f       	mov	r24, r25
     878:	8d 7e       	andi	r24, 0xED	; 237
     87a:	80 93 1c 01 	sts	0x011C, r24
    runSeconds= 0;
     87e:	10 92 66 01 	sts	0x0166, r1
}


inline void LCD_DisplayInfo()
{   
    LCDclr();
     882:	67 d2       	rcall	.+1230   	; 0xd52 <LCDclr>
    LCDGotoXY(0, 0);
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	7e d2       	rcall	.+1276   	; 0xd86 <LCDGotoXY>
    LCDstring("TEMP: ", 6);
     88a:	8c e0       	ldi	r24, 0x0C	; 12
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	66 e0       	ldi	r22, 0x06	; 6
     890:	62 d2       	rcall	.+1220   	; 0xd56 <LCDstring>
    char arr[5];
    LCDGotoXY(6, 0);
     892:	86 e0       	ldi	r24, 0x06	; 6
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	77 d2       	rcall	.+1262   	; 0xd86 <LCDGotoXY>
    double2char(arr, temperatureValue);
     898:	40 91 67 01 	lds	r20, 0x0167
     89c:	50 91 68 01 	lds	r21, 0x0168
     8a0:	60 91 69 01 	lds	r22, 0x0169
     8a4:	70 91 6a 01 	lds	r23, 0x016A
     8a8:	8e 01       	movw	r16, r28
     8aa:	07 5b       	subi	r16, 0xB7	; 183
     8ac:	1f 4f       	sbci	r17, 0xFF	; 255
     8ae:	c8 01       	movw	r24, r16
     8b0:	62 dd       	rcall	.-1340   	; 0x376 <double2char>
    LCDstring(arr, 8);
     8b2:	c8 01       	movw	r24, r16
     8b4:	68 e0       	ldi	r22, 0x08	; 8
     8b6:	4f d2       	rcall	.+1182   	; 0xd56 <LCDstring>
    if (BIT_read(progFlags, COOLING))
     8b8:	80 91 1c 01 	lds	r24, 0x011C
     8bc:	86 95       	lsr	r24
     8be:	86 95       	lsr	r24
     8c0:	86 95       	lsr	r24
     8c2:	80 ff       	sbrs	r24, 0
     8c4:	39 c0       	rjmp	.+114    	; 0x938 <__stack+0x439>
    {
        LCDGotoXY(0, 1);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	5d d2       	rcall	.+1210   	; 0xd86 <LCDGotoXY>
        LCDstring("COOLING ", 8);
     8cc:	83 e1       	ldi	r24, 0x13	; 19
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	68 e0       	ldi	r22, 0x08	; 8
     8d2:	41 d2       	rcall	.+1154   	; 0xd56 <LCDstring>
        LCDGotoXY(8, 1);
     8d4:	88 e0       	ldi	r24, 0x08	; 8
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	56 d2       	rcall	.+1196   	; 0xd86 <LCDGotoXY>
        double2char(arr, ((temperatureValue - targetTemp)/Tolerance)*100);
     8da:	60 91 67 01 	lds	r22, 0x0167
     8de:	70 91 68 01 	lds	r23, 0x0168
     8e2:	80 91 69 01 	lds	r24, 0x0169
     8e6:	90 91 6a 01 	lds	r25, 0x016A
     8ea:	20 91 1d 01 	lds	r18, 0x011D
     8ee:	30 91 1e 01 	lds	r19, 0x011E
     8f2:	40 91 1f 01 	lds	r20, 0x011F
     8f6:	50 91 20 01 	lds	r21, 0x0120
     8fa:	e0 90 62 01 	lds	r14, 0x0162
     8fe:	f0 90 63 01 	lds	r15, 0x0163
     902:	00 91 64 01 	lds	r16, 0x0164
     906:	10 91 65 01 	lds	r17, 0x0165
     90a:	0f 2e       	mov	r0, r31
     90c:	f9 e4       	ldi	r31, 0x49	; 73
     90e:	cf 2e       	mov	r12, r31
     910:	dd 24       	eor	r13, r13
     912:	f0 2d       	mov	r31, r0
     914:	cc 0e       	add	r12, r28
     916:	dd 1e       	adc	r13, r29
     918:	cb d2       	rcall	.+1430   	; 0xeb0 <__subsf3>
     91a:	a8 01       	movw	r20, r16
     91c:	97 01       	movw	r18, r14
     91e:	31 d3       	rcall	.+1634   	; 0xf82 <__divsf3>
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	48 ec       	ldi	r20, 0xC8	; 200
     926:	52 e4       	ldi	r21, 0x42	; 66
     928:	7b d4       	rcall	.+2294   	; 0x1220 <__mulsf3>
     92a:	ab 01       	movw	r20, r22
     92c:	bc 01       	movw	r22, r24
     92e:	c6 01       	movw	r24, r12
     930:	22 dd       	rcall	.-1468   	; 0x376 <double2char>
        LCDstring(arr, 8);
     932:	c6 01       	movw	r24, r12
     934:	68 e0       	ldi	r22, 0x08	; 8
     936:	0f d2       	rcall	.+1054   	; 0xd56 <LCDstring>
    }
    BIT_clear(progFlags, MENU_ON);
    BIT_clear(progFlags, INACTIVE);
    runSeconds= 0;
    LCD_DisplayInfo();
}
     938:	c1 5b       	subi	r28, 0xB1	; 177
     93a:	df 4f       	sbci	r29, 0xFF	; 255
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	cf 91       	pop	r28
     948:	df 91       	pop	r29
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	bf 90       	pop	r11
     958:	af 90       	pop	r10
     95a:	9f 90       	pop	r9
     95c:	8f 90       	pop	r8
     95e:	7f 90       	pop	r7
     960:	6f 90       	pop	r6
     962:	5f 90       	pop	r5
     964:	4f 90       	pop	r4
     966:	3f 90       	pop	r3
     968:	2f 90       	pop	r2
     96a:	08 95       	ret

0000096c <main>:

int main(void)
{
     96c:	6f 92       	push	r6
     96e:	7f 92       	push	r7
     970:	8f 92       	push	r8
     972:	9f 92       	push	r9
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	df 93       	push	r29
     986:	cf 93       	push	r28
     988:	00 d0       	rcall	.+0      	; 0x98a <main+0x1e>
     98a:	00 d0       	rcall	.+0      	; 0x98c <main+0x20>
     98c:	0f 92       	push	r0
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
    BIT_write(UCSRB, RXCIE, 0); // прерывание приема запрещено
    BIT_write(UCSRB, TXCIE, 1); // прерывание конца передачи разрешено
    BIT_write(UCSRB, UDRIE, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
    //////////////////////////////////////////////////////////////////////////
    #elif defined MEGA_168
    UBRR0= ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
     992:	83 e3       	ldi	r24, 0x33	; 51
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 c5 00 	sts	0x00C5, r25
     99a:	80 93 c4 00 	sts	0x00C4, r24
    BIT_write(UCSR0C, UPM01, 0);  // проверка четности отключена
     99e:	e2 ec       	ldi	r30, 0xC2	; 194
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	8f 7d       	andi	r24, 0xDF	; 223
     9a6:	80 83       	st	Z, r24
    BIT_write(UCSR0C, UPM00, 0);  // ----||----
     9a8:	80 81       	ld	r24, Z
     9aa:	8f 7e       	andi	r24, 0xEF	; 239
     9ac:	80 83       	st	Z, r24
    BIT_write(UCSR0B, UCSZ02, 0);    // 8 битов данных
     9ae:	a1 ec       	ldi	r26, 0xC1	; 193
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	8c 91       	ld	r24, X
     9b4:	8b 7f       	andi	r24, 0xFB	; 251
     9b6:	8c 93       	st	X, r24
    BIT_write(UCSR0C, UCSZ01, 1);    // ----||----
     9b8:	80 81       	ld	r24, Z
     9ba:	84 60       	ori	r24, 0x04	; 4
     9bc:	80 83       	st	Z, r24
    BIT_write(UCSR0C, UCSZ00, 1);    // ----||----
     9be:	80 81       	ld	r24, Z
     9c0:	82 60       	ori	r24, 0x02	; 2
     9c2:	80 83       	st	Z, r24
    BIT_write(UCSR0C, USBS0, 0);  // 1 стоповый бит
     9c4:	80 81       	ld	r24, Z
     9c6:	87 7f       	andi	r24, 0xF7	; 247
     9c8:	80 83       	st	Z, r24
    BIT_write(UCSR0B, TXEN0, 1);  // передача разрешена
     9ca:	8c 91       	ld	r24, X
     9cc:	88 60       	ori	r24, 0x08	; 8
     9ce:	8c 93       	st	X, r24
    BIT_write(UCSR0B, RXEN0, 0);  // прием запрещен
     9d0:	8c 91       	ld	r24, X
     9d2:	8f 7e       	andi	r24, 0xEF	; 239
     9d4:	8c 93       	st	X, r24
    BIT_write(UCSR0B, RXCIE0, 0); // прерывание приема запрещено
     9d6:	8c 91       	ld	r24, X
     9d8:	8f 77       	andi	r24, 0x7F	; 127
     9da:	8c 93       	st	X, r24
    BIT_write(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
     9dc:	8c 91       	ld	r24, X
     9de:	80 64       	ori	r24, 0x40	; 64
     9e0:	8c 93       	st	X, r24
    BIT_write(UCSR0B, UDRIE0, 0);
     9e2:	8c 91       	ld	r24, X
     9e4:	8f 7d       	andi	r24, 0xDF	; 223
     9e6:	8c 93       	st	X, r24
    #endif
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
     9e8:	e7 e2       	ldi	r30, 0x27	; 39
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD)|(1<<FAN); // управление подсветкой экрана, нагрузкой и вентилятором на выход
     9f2:	ea e2       	ldi	r30, 0x2A	; 42
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	81 ec       	ldi	r24, 0xC1	; 193
     9f8:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
     9fa:	80 81       	ld	r24, Z
     9fc:	83 7c       	andi	r24, 0xC3	; 195
     9fe:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
     a00:	8c e3       	ldi	r24, 0x3C	; 60
     a02:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
     a04:	ec e7       	ldi	r30, 0x7C	; 124
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	80 64       	ori	r24, 0x40	; 64
     a0c:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
     a0e:	ab e7       	ldi	r26, 0x7B	; 123
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	8c 91       	ld	r24, X
     a14:	83 60       	ori	r24, 0x03	; 3
     a16:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
     a18:	80 81       	ld	r24, Z
     a1a:	80 62       	ori	r24, 0x20	; 32
     a1c:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
     a1e:	0a e7       	ldi	r16, 0x7A	; 122
     a20:	10 e0       	ldi	r17, 0x00	; 0
     a22:	f8 01       	movw	r30, r16
     a24:	80 81       	ld	r24, Z
     a26:	80 62       	ori	r24, 0x20	; 32
     a28:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
     a2a:	80 81       	ld	r24, Z
     a2c:	88 60       	ori	r24, 0x08	; 8
     a2e:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
     a30:	80 81       	ld	r24, Z
     a32:	80 68       	ori	r24, 0x80	; 128
     a34:	80 83       	st	Z, r24
    DIDR0 |= 1 << ADC0D; // отключить буффер цифрового входа ADC0D
     a36:	ee e7       	ldi	r30, 0x7E	; 126
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	81 60       	ori	r24, 0x01	; 1
     a3e:	80 83       	st	Z, r24
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
     a40:	e4 e4       	ldi	r30, 0x44	; 68
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	82 60       	ori	r24, 0x02	; 2
     a48:	80 83       	st	Z, r24
    OCR0A= measureRate;
     a4a:	80 91 21 01 	lds	r24, 0x0121
     a4e:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
     a50:	e5 e4       	ldi	r30, 0x45	; 69
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	84 60       	ori	r24, 0x04	; 4
     a58:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
     a5a:	ee e6       	ldi	r30, 0x6E	; 110
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	82 60       	ori	r24, 0x02	; 2
     a62:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
     a64:	85 e0       	ldi	r24, 0x05	; 5
     a66:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
     a6a:	e6 eb       	ldi	r30, 0xB6	; 182
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	80 62       	ori	r24, 0x20	; 32
     a72:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
     a74:	e0 e7       	ldi	r30, 0x70	; 112
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCDinit();
     a7e:	b2 d1       	rcall	.+868    	; 0xde4 <LCDinit>

    BIT_write(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
     a80:	e4 e6       	ldi	r30, 0x64	; 100
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	80 68       	ori	r24, 0x80	; 128
     a88:	80 83       	st	Z, r24
    BIT_write(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
     a8a:	80 81       	ld	r24, Z
     a8c:	88 60       	ori	r24, 0x08	; 8
     a8e:	80 83       	st	Z, r24
    BIT_write(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
     a90:	80 81       	ld	r24, Z
     a92:	84 60       	ori	r24, 0x04	; 4
     a94:	80 83       	st	Z, r24
    BIT_write(ACSR, ACD, 1); // отключить аналоговый компаратор
     a96:	e0 e5       	ldi	r30, 0x50	; 80
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	80 68       	ori	r24, 0x80	; 128
     a9e:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
     aa0:	f8 01       	movw	r30, r16
     aa2:	80 81       	ld	r24, Z
     aa4:	80 64       	ori	r24, 0x40	; 64
     aa6:	80 83       	st	Z, r24

    sei();
     aa8:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_read(PIND, BUTTON_M))||(!BIT_read(PIND, BUTTON_P))||(!BIT_read(PIND, BUTTON_BACK))) // если нажата любая кнопка
     aaa:	0f 2e       	mov	r0, r31
     aac:	f9 e2       	ldi	r31, 0x29	; 41
     aae:	cf 2e       	mov	r12, r31
     ab0:	dd 24       	eor	r13, r13
     ab2:	f0 2d       	mov	r31, r0

inline void LCD_DisplayInfo()
{   
    LCDclr();
    LCDGotoXY(0, 0);
    LCDstring("TEMP: ", 6);
     ab4:	0f 2e       	mov	r0, r31
     ab6:	fc e0       	ldi	r31, 0x0C	; 12
     ab8:	8f 2e       	mov	r8, r31
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	9f 2e       	mov	r9, r31
     abe:	f0 2d       	mov	r31, r0
    char arr[5];
    LCDGotoXY(6, 0);
    double2char(arr, temperatureValue);
     ac0:	5e 01       	movw	r10, r28
     ac2:	08 94       	sec
     ac4:	a1 1c       	adc	r10, r1
     ac6:	b1 1c       	adc	r11, r1
    LCDstring(arr, 8);
    if (BIT_read(progFlags, COOLING))
    {
        LCDGotoXY(0, 1);
        LCDstring("COOLING ", 8);
     ac8:	0f 2e       	mov	r0, r31
     aca:	f3 e1       	ldi	r31, 0x13	; 19
     acc:	6f 2e       	mov	r6, r31
     ace:	f1 e0       	ldi	r31, 0x01	; 1
     ad0:	7f 2e       	mov	r7, r31
     ad2:	f0 2d       	mov	r31, r0
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_read(PIND, BUTTON_M))||(!BIT_read(PIND, BUTTON_P))||(!BIT_read(PIND, BUTTON_BACK))) // если нажата любая кнопка
     ad4:	f6 01       	movw	r30, r12
     ad6:	80 81       	ld	r24, Z
     ad8:	84 ff       	sbrs	r24, 4
     ada:	06 c0       	rjmp	.+12     	; 0xae8 <main+0x17c>
     adc:	80 81       	ld	r24, Z
     ade:	85 ff       	sbrs	r24, 5
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <main+0x17c>
     ae2:	80 81       	ld	r24, Z
     ae4:	82 fd       	sbrc	r24, 2
     ae6:	09 c0       	rjmp	.+18     	; 0xafa <main+0x18e>
        {
            BIT_clear(progFlags, INACTIVE); // выйти из режима неактивности
     ae8:	80 91 1c 01 	lds	r24, 0x011C
     aec:	8f 7e       	andi	r24, 0xEF	; 239
            runSeconds= 0;
     aee:	10 92 66 01 	sts	0x0166, r1
            BIT_write(progFlags, LCD_ON, 1);
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	80 93 1c 01 	sts	0x011C, r24
            LCDvisible();
     af8:	d4 d1       	rcall	.+936    	; 0xea2 <LCDvisible>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_read(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
     afa:	f6 01       	movw	r30, r12
     afc:	80 81       	ld	r24, Z
     afe:	83 fd       	sbrc	r24, 3
     b00:	13 c0       	rjmp	.+38     	; 0xb28 <main+0x1bc>
        {
            BIT_clear(progFlags, INACTIVE); // выйти из режима неактивности
     b02:	80 91 1c 01 	lds	r24, 0x011C
     b06:	8f 7e       	andi	r24, 0xEF	; 239
     b08:	80 93 1c 01 	sts	0x011C, r24
            runSeconds= 0;
     b0c:	10 92 66 01 	sts	0x0166, r1
            if (!BIT_read(progFlags, LCD_ON))
     b10:	80 fd       	sbrc	r24, 0
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <main+0x1b0>
            {
                BIT_write(progFlags, LCD_ON, 1); // включить подсветку дисплея7
     b14:	81 60       	ori	r24, 0x01	; 1
     b16:	80 93 1c 01 	sts	0x011C, r24
                LCDvisible();
     b1a:	c3 d1       	rcall	.+902    	; 0xea2 <LCDvisible>
            }
            BIT_write(progFlags, MENU_ON, 1); // включить меню
     b1c:	80 91 1c 01 	lds	r24, 0x011C
     b20:	82 60       	ori	r24, 0x02	; 2
     b22:	80 93 1c 01 	sts	0x011C, r24
            menuRun(); // обработка команд меню
     b26:	47 dc       	rcall	.-1906   	; 0x3b6 <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : отображать данные если подсветка включена или включено охлаждение
        //////////////////////////////////////////////////////////////////////////
        if ((BIT_read(progFlags, COOLING)&&(!BIT_read(progFlags, ECONOMY))))
     b28:	90 91 1c 01 	lds	r25, 0x011C
     b2c:	89 2f       	mov	r24, r25
     b2e:	86 95       	lsr	r24
     b30:	86 95       	lsr	r24
     b32:	86 95       	lsr	r24
     b34:	80 ff       	sbrs	r24, 0
     b36:	56 c0       	rjmp	.+172    	; 0xbe4 <main+0x278>
     b38:	92 fd       	sbrc	r25, 2
     b3a:	54 c0       	rjmp	.+168    	; 0xbe4 <main+0x278>
        {
            runSeconds= 0;
     b3c:	10 92 66 01 	sts	0x0166, r1
            BIT_clear(progFlags, INACTIVE);
     b40:	89 2f       	mov	r24, r25
     b42:	8f 7e       	andi	r24, 0xEF	; 239
     b44:	80 93 1c 01 	sts	0x011C, r24
            LCDvisible();
     b48:	ac d1       	rcall	.+856    	; 0xea2 <LCDvisible>
}


inline void LCD_DisplayInfo()
{   
    LCDclr();
     b4a:	03 d1       	rcall	.+518    	; 0xd52 <LCDclr>
    LCDGotoXY(0, 0);
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	1a d1       	rcall	.+564    	; 0xd86 <LCDGotoXY>
    LCDstring("TEMP: ", 6);
     b52:	c4 01       	movw	r24, r8
     b54:	66 e0       	ldi	r22, 0x06	; 6
     b56:	ff d0       	rcall	.+510    	; 0xd56 <LCDstring>
    char arr[5];
    LCDGotoXY(6, 0);
     b58:	86 e0       	ldi	r24, 0x06	; 6
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	14 d1       	rcall	.+552    	; 0xd86 <LCDGotoXY>
    double2char(arr, temperatureValue);
     b5e:	40 91 67 01 	lds	r20, 0x0167
     b62:	50 91 68 01 	lds	r21, 0x0168
     b66:	60 91 69 01 	lds	r22, 0x0169
     b6a:	70 91 6a 01 	lds	r23, 0x016A
     b6e:	c5 01       	movw	r24, r10
     b70:	02 dc       	rcall	.-2044   	; 0x376 <double2char>
    LCDstring(arr, 8);
     b72:	c5 01       	movw	r24, r10
     b74:	68 e0       	ldi	r22, 0x08	; 8
     b76:	ef d0       	rcall	.+478    	; 0xd56 <LCDstring>
    if (BIT_read(progFlags, COOLING))
     b78:	80 91 1c 01 	lds	r24, 0x011C
     b7c:	83 ff       	sbrs	r24, 3
     b7e:	80 c0       	rjmp	.+256    	; 0xc80 <main+0x314>
    {
        LCDGotoXY(0, 1);
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	00 d1       	rcall	.+512    	; 0xd86 <LCDGotoXY>
        LCDstring("COOLING ", 8);
     b86:	c3 01       	movw	r24, r6
     b88:	68 e0       	ldi	r22, 0x08	; 8
     b8a:	e5 d0       	rcall	.+458    	; 0xd56 <LCDstring>
        LCDGotoXY(8, 1);
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	fa d0       	rcall	.+500    	; 0xd86 <LCDGotoXY>
        double2char(arr, ((temperatureValue - targetTemp)/Tolerance)*100);
     b92:	60 91 67 01 	lds	r22, 0x0167
     b96:	70 91 68 01 	lds	r23, 0x0168
     b9a:	80 91 69 01 	lds	r24, 0x0169
     b9e:	90 91 6a 01 	lds	r25, 0x016A
     ba2:	20 91 1d 01 	lds	r18, 0x011D
     ba6:	30 91 1e 01 	lds	r19, 0x011E
     baa:	40 91 1f 01 	lds	r20, 0x011F
     bae:	50 91 20 01 	lds	r21, 0x0120
     bb2:	e0 90 62 01 	lds	r14, 0x0162
     bb6:	f0 90 63 01 	lds	r15, 0x0163
     bba:	00 91 64 01 	lds	r16, 0x0164
     bbe:	10 91 65 01 	lds	r17, 0x0165
     bc2:	76 d1       	rcall	.+748    	; 0xeb0 <__subsf3>
     bc4:	a8 01       	movw	r20, r16
     bc6:	97 01       	movw	r18, r14
     bc8:	dc d1       	rcall	.+952    	; 0xf82 <__divsf3>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	48 ec       	ldi	r20, 0xC8	; 200
     bd0:	52 e4       	ldi	r21, 0x42	; 66
     bd2:	26 d3       	rcall	.+1612   	; 0x1220 <__mulsf3>
     bd4:	ab 01       	movw	r20, r22
     bd6:	bc 01       	movw	r22, r24
     bd8:	c5 01       	movw	r24, r10
     bda:	cd db       	rcall	.-2150   	; 0x376 <double2char>
        LCDstring(arr, 8);
     bdc:	c5 01       	movw	r24, r10
     bde:	68 e0       	ldi	r22, 0x08	; 8
     be0:	ba d0       	rcall	.+372    	; 0xd56 <LCDstring>
     be2:	4e c0       	rjmp	.+156    	; 0xc80 <main+0x314>
            runSeconds= 0;
            BIT_clear(progFlags, INACTIVE);
            LCDvisible();
            LCD_DisplayInfo();
        }
        else if (BIT_read(progFlags, LCD_ON))
     be4:	90 ff       	sbrs	r25, 0
     be6:	4c c0       	rjmp	.+152    	; 0xc80 <main+0x314>
}


inline void LCD_DisplayInfo()
{   
    LCDclr();
     be8:	b4 d0       	rcall	.+360    	; 0xd52 <LCDclr>
    LCDGotoXY(0, 0);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	cb d0       	rcall	.+406    	; 0xd86 <LCDGotoXY>
    LCDstring("TEMP: ", 6);
     bf0:	c4 01       	movw	r24, r8
     bf2:	66 e0       	ldi	r22, 0x06	; 6
     bf4:	b0 d0       	rcall	.+352    	; 0xd56 <LCDstring>
    char arr[5];
    LCDGotoXY(6, 0);
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	c5 d0       	rcall	.+394    	; 0xd86 <LCDGotoXY>
    double2char(arr, temperatureValue);
     bfc:	40 91 67 01 	lds	r20, 0x0167
     c00:	50 91 68 01 	lds	r21, 0x0168
     c04:	60 91 69 01 	lds	r22, 0x0169
     c08:	70 91 6a 01 	lds	r23, 0x016A
     c0c:	c5 01       	movw	r24, r10
     c0e:	b3 db       	rcall	.-2202   	; 0x376 <double2char>
    LCDstring(arr, 8);
     c10:	c5 01       	movw	r24, r10
     c12:	68 e0       	ldi	r22, 0x08	; 8
     c14:	a0 d0       	rcall	.+320    	; 0xd56 <LCDstring>
    if (BIT_read(progFlags, COOLING))
     c16:	80 91 1c 01 	lds	r24, 0x011C
     c1a:	83 ff       	sbrs	r24, 3
     c1c:	31 c0       	rjmp	.+98     	; 0xc80 <main+0x314>
    {
        LCDGotoXY(0, 1);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	b1 d0       	rcall	.+354    	; 0xd86 <LCDGotoXY>
        LCDstring("COOLING ", 8);
     c24:	c3 01       	movw	r24, r6
     c26:	68 e0       	ldi	r22, 0x08	; 8
     c28:	96 d0       	rcall	.+300    	; 0xd56 <LCDstring>
        LCDGotoXY(8, 1);
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	ab d0       	rcall	.+342    	; 0xd86 <LCDGotoXY>
        double2char(arr, ((temperatureValue - targetTemp)/Tolerance)*100);
     c30:	60 91 67 01 	lds	r22, 0x0167
     c34:	70 91 68 01 	lds	r23, 0x0168
     c38:	80 91 69 01 	lds	r24, 0x0169
     c3c:	90 91 6a 01 	lds	r25, 0x016A
     c40:	20 91 1d 01 	lds	r18, 0x011D
     c44:	30 91 1e 01 	lds	r19, 0x011E
     c48:	40 91 1f 01 	lds	r20, 0x011F
     c4c:	50 91 20 01 	lds	r21, 0x0120
     c50:	e0 90 62 01 	lds	r14, 0x0162
     c54:	f0 90 63 01 	lds	r15, 0x0163
     c58:	00 91 64 01 	lds	r16, 0x0164
     c5c:	10 91 65 01 	lds	r17, 0x0165
     c60:	27 d1       	rcall	.+590    	; 0xeb0 <__subsf3>
     c62:	a8 01       	movw	r20, r16
     c64:	97 01       	movw	r18, r14
     c66:	8d d1       	rcall	.+794    	; 0xf82 <__divsf3>
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	48 ec       	ldi	r20, 0xC8	; 200
     c6e:	52 e4       	ldi	r21, 0x42	; 66
     c70:	d7 d2       	rcall	.+1454   	; 0x1220 <__mulsf3>
     c72:	ab 01       	movw	r20, r22
     c74:	bc 01       	movw	r22, r24
     c76:	c5 01       	movw	r24, r10
     c78:	7e db       	rcall	.-2308   	; 0x376 <double2char>
        LCDstring(arr, 8);
     c7a:	c5 01       	movw	r24, r10
     c7c:	68 e0       	ldi	r22, 0x08	; 8
     c7e:	6b d0       	rcall	.+214    	; 0xd56 <LCDstring>
            LCD_DisplayInfo();
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_read(progFlags, INACTIVE))
     c80:	80 91 1c 01 	lds	r24, 0x011C
     c84:	84 ff       	sbrs	r24, 4
     c86:	26 cf       	rjmp	.-436    	; 0xad4 <main+0x168>
        {
            if(BIT_read(progFlags, LCD_ON))
     c88:	80 ff       	sbrs	r24, 0
     c8a:	24 cf       	rjmp	.-440    	; 0xad4 <main+0x168>
            {
                BIT_clear(progFlags, LCD_ON);
     c8c:	8e 7f       	andi	r24, 0xFE	; 254
     c8e:	80 93 1c 01 	sts	0x011C, r24
                LCDblank();
     c92:	00 d1       	rcall	.+512    	; 0xe94 <LCDblank>
     c94:	1f cf       	rjmp	.-450    	; 0xad4 <main+0x168>

00000c96 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29

#ifdef LCD_4bit
	//4 bit part
	LDP=((ch&0b11110000)>>4);
     c9a:	98 2f       	mov	r25, r24
     c9c:	92 95       	swap	r25
     c9e:	9f 70       	andi	r25, 0x0F	; 15
     ca0:	a5 e2       	ldi	r26, 0x25	; 37
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	9c 93       	st	X, r25
	LCP|=1<<LCD_RS;
     ca6:	e8 e2       	ldi	r30, 0x28	; 40
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	90 81       	ld	r25, Z
     cac:	92 60       	ori	r25, 0x02	; 2
     cae:	90 83       	st	Z, r25
	LCP|=1<<LCD_E;		
     cb0:	90 81       	ld	r25, Z
     cb2:	98 60       	ori	r25, 0x08	; 8
     cb4:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb6:	2a ef       	ldi	r18, 0xFA	; 250
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	e9 01       	movw	r28, r18
     cbc:	21 97       	sbiw	r28, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <LCDsendChar+0x26>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     cc0:	90 81       	ld	r25, Z
     cc2:	97 7f       	andi	r25, 0xF7	; 247
     cc4:	90 83       	st	Z, r25
	LCP&=~(1<<LCD_RS);
     cc6:	90 81       	ld	r25, Z
     cc8:	9d 7f       	andi	r25, 0xFD	; 253
     cca:	90 83       	st	Z, r25
     ccc:	e9 01       	movw	r28, r18
     cce:	21 97       	sbiw	r28, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <LCDsendChar+0x38>
	_delay_ms(1);
	LDP=(ch&0b00001111);
     cd2:	8f 70       	andi	r24, 0x0F	; 15
     cd4:	8c 93       	st	X, r24
	LCP|=1<<LCD_RS;
     cd6:	80 81       	ld	r24, Z
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     cdc:	80 81       	ld	r24, Z
     cde:	88 60       	ori	r24, 0x08	; 8
     ce0:	80 83       	st	Z, r24
     ce2:	c9 01       	movw	r24, r18
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <LCDsendChar+0x4e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     ce8:	80 81       	ld	r24, Z
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	80 83       	st	Z, r24
	LCP&=~(1<<LCD_RS);
     cee:	80 81       	ld	r24, Z
     cf0:	8d 7f       	andi	r24, 0xFD	; 253
     cf2:	80 83       	st	Z, r24
     cf4:	c9 01       	movw	r24, r18
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <LCDsendChar+0x60>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
#ifdef LCD_4bit	
	//4 bit part
	LDP=((cmd&0b11110000)>>4);
     d04:	98 2f       	mov	r25, r24
     d06:	92 95       	swap	r25
     d08:	9f 70       	andi	r25, 0x0F	; 15
     d0a:	a5 e2       	ldi	r26, 0x25	; 37
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	9c 93       	st	X, r25
	LCP|=1<<LCD_E;		
     d10:	e8 e2       	ldi	r30, 0x28	; 40
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	90 81       	ld	r25, Z
     d16:	98 60       	ori	r25, 0x08	; 8
     d18:	90 83       	st	Z, r25
     d1a:	2a ef       	ldi	r18, 0xFA	; 250
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	e9 01       	movw	r28, r18
     d20:	21 97       	sbiw	r28, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <LCDsendCommand+0x20>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d24:	90 81       	ld	r25, Z
     d26:	97 7f       	andi	r25, 0xF7	; 247
     d28:	90 83       	st	Z, r25
     d2a:	e9 01       	movw	r28, r18
     d2c:	21 97       	sbiw	r28, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <LCDsendCommand+0x2c>
	_delay_ms(1);
	LDP=(cmd&0b00001111);	
     d30:	8f 70       	andi	r24, 0x0F	; 15
     d32:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	80 83       	st	Z, r24
     d3a:	c9 01       	movw	r24, r18
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <LCDsendCommand+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     d40:	80 81       	ld	r24, Z
     d42:	87 7f       	andi	r24, 0xF7	; 247
     d44:	80 83       	st	Z, r24
     d46:	c9 01       	movw	r24, r18
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <LCDsendCommand+0x48>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     d52:	81 e0       	ldi	r24, 0x01	; 1
}
     d54:	d5 cf       	rjmp	.-86     	; 0xd00 <LCDsendCommand>

00000d56 <LCDstring>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	9c 01       	movw	r18, r24
     d60:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	59 f0       	breq	.+22     	; 0xd7c <LCDstring+0x26>

	// print data
	for(i=0; i<nBytes; i++)
     d66:	66 23       	and	r22, r22
     d68:	49 f0       	breq	.+18     	; 0xd7c <LCDstring+0x26>
     d6a:	18 2f       	mov	r17, r24
     d6c:	28 2f       	mov	r18, r24
     d6e:	e9 01       	movw	r28, r18
	{
		LCDsendChar(data[i]);
     d70:	89 91       	ld	r24, Y+
     d72:	91 df       	rcall	.-222    	; 0xc96 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     d74:	9e 01       	movw	r18, r28
     d76:	21 1b       	sub	r18, r17
     d78:	20 17       	cp	r18, r16
     d7a:	d0 f3       	brcs	.-12     	; 0xd70 <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	08 95       	ret

00000d86 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     d86:	62 30       	cpi	r22, 0x02	; 2
     d88:	31 f0       	breq	.+12     	; 0xd96 <LCDGotoXY+0x10>
     d8a:	63 30       	cpi	r22, 0x03	; 3
     d8c:	31 f0       	breq	.+12     	; 0xd9a <LCDGotoXY+0x14>
     d8e:	61 30       	cpi	r22, 0x01	; 1
     d90:	29 f4       	brne	.+10     	; 0xd9c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     d92:	80 5c       	subi	r24, 0xC0	; 192
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     d96:	8c 5e       	subi	r24, 0xEC	; 236
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     d9a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     d9c:	80 68       	ori	r24, 0x80	; 128
	
}
     d9e:	b0 cf       	rjmp	.-160    	; 0xd00 <LCDsendCommand>

00000da0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     dae:	66 0f       	add	r22, r22
     db0:	66 0f       	add	r22, r22
     db2:	66 0f       	add	r22, r22
     db4:	06 2f       	mov	r16, r22
     db6:	00 64       	ori	r16, 0x40	; 64
     db8:	c0 e0       	ldi	r28, 0x00	; 0
     dba:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     dbc:	f7 01       	movw	r30, r14
     dbe:	ec 0f       	add	r30, r28
     dc0:	fd 1f       	adc	r31, r29
     dc2:	14 91       	lpm	r17, Z+
		LCDsendCommand(a++);
     dc4:	80 2f       	mov	r24, r16
     dc6:	8c 0f       	add	r24, r28
     dc8:	9b df       	rcall	.-202    	; 0xd00 <LCDsendCommand>
		LCDsendChar(pcc);
     dca:	81 2f       	mov	r24, r17
     dcc:	64 df       	rcall	.-312    	; 0xc96 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     dce:	21 96       	adiw	r28, 0x01	; 1
     dd0:	c8 30       	cpi	r28, 0x08	; 8
     dd2:	d1 05       	cpc	r29, r1
     dd4:	99 f7       	brne	.-26     	; 0xdbc <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	86 ea       	ldi	r24, 0xA6	; 166
     dec:	9e e0       	ldi	r25, 0x0E	; 14
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     df2:	45 e2       	ldi	r20, 0x25	; 37
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	fa 01       	movw	r30, r20
     df8:	10 82       	st	Z, r1
	LCP=0x00;
     dfa:	a8 e2       	ldi	r26, 0x28	; 40
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	1c 92       	st	X, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     e00:	e4 e2       	ldi	r30, 0x24	; 36
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 60       	ori	r24, 0x0F	; 15
     e08:	80 83       	st	Z, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     e0a:	e7 e2       	ldi	r30, 0x27	; 39
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8e 60       	ori	r24, 0x0E	; 14
     e12:	80 83       	st	Z, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	fa 01       	movw	r30, r20
     e18:	90 83       	st	Z, r25
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e1a:	8c 91       	ld	r24, X
     e1c:	88 60       	ori	r24, 0x08	; 8
     e1e:	8c 93       	st	X, r24
     e20:	2a ef       	ldi	r18, 0xFA	; 250
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	f9 01       	movw	r30, r18
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <LCDinit+0x42>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e2a:	8c 91       	ld	r24, X
     e2c:	87 7f       	andi	r24, 0xF7	; 247
     e2e:	8c 93       	st	X, r24
     e30:	f9 01       	movw	r30, r18
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCDinit+0x4e>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e36:	fa 01       	movw	r30, r20
     e38:	90 83       	st	Z, r25
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e3a:	8c 91       	ld	r24, X
     e3c:	88 60       	ori	r24, 0x08	; 8
     e3e:	8c 93       	st	X, r24
     e40:	c9 01       	movw	r24, r18
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	f1 f7       	brne	.-4      	; 0xe42 <LCDinit+0x5e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e46:	8c 91       	ld	r24, X
     e48:	87 7f       	andi	r24, 0xF7	; 247
     e4a:	8c 93       	st	X, r24
     e4c:	c9 01       	movw	r24, r18
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <LCDinit+0x6a>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e56:	8c 91       	ld	r24, X
     e58:	88 60       	ori	r24, 0x08	; 8
     e5a:	8c 93       	st	X, r24
     e5c:	c9 01       	movw	r24, r18
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <LCDinit+0x7a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e62:	8c 91       	ld	r24, X
     e64:	87 7f       	andi	r24, 0xF7	; 247
     e66:	8c 93       	st	X, r24
     e68:	c9 01       	movw	r24, r18
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <LCDinit+0x86>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     e6e:	88 e2       	ldi	r24, 0x28	; 40
     e70:	47 df       	rcall	.-370    	; 0xd00 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     e72:	8c e0       	ldi	r24, 0x0C	; 12
     e74:	45 df       	rcall	.-374    	; 0xd00 <LCDsendCommand>
     e76:	c8 e6       	ldi	r28, 0x68	; 104
     e78:	d0 e0       	ldi	r29, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     e7c:	16 2f       	mov	r17, r22
     e7e:	1f 5f       	subi	r17, 0xFF	; 255
     e80:	ce 01       	movw	r24, r28
     e82:	8e df       	rcall	.-228    	; 0xda0 <LCDdefinechar>
     e84:	28 96       	adiw	r28, 0x08	; 8
     e86:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     e88:	18 30       	cpi	r17, 0x08	; 8
     e8a:	c1 f7       	brne	.-16     	; 0xe7c <LCDinit+0x98>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	08 95       	ret

00000e94 <LCDblank>:
{
	LCDsendCommand(0x0C);
}
void LCDblank(void)		//blanks LCD
{   
    BIT_write(CONTROL_PORT, LCD_LED, 0);
     e94:	eb e2       	ldi	r30, 0x2B	; 43
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 77       	andi	r24, 0x7F	; 127
     e9c:	80 83       	st	Z, r24
	LCDsendCommand(0x08);
     e9e:	88 e0       	ldi	r24, 0x08	; 8
}
     ea0:	2f cf       	rjmp	.-418    	; 0xd00 <LCDsendCommand>

00000ea2 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    BIT_write(CONTROL_PORT, LCD_LED, 1);
     ea2:	eb e2       	ldi	r30, 0x2B	; 43
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 68       	ori	r24, 0x80	; 128
     eaa:	80 83       	st	Z, r24
	LCDsendCommand(0x0C);
     eac:	8c e0       	ldi	r24, 0x0C	; 12
}
     eae:	28 cf       	rjmp	.-432    	; 0xd00 <LCDsendCommand>

00000eb0 <__subsf3>:
     eb0:	50 58       	subi	r21, 0x80	; 128

00000eb2 <__addsf3>:
     eb2:	bb 27       	eor	r27, r27
     eb4:	aa 27       	eor	r26, r26
     eb6:	0e d0       	rcall	.+28     	; 0xed4 <__addsf3x>
     eb8:	75 c1       	rjmp	.+746    	; 0x11a4 <__fp_round>
     eba:	66 d1       	rcall	.+716    	; 0x1188 <__fp_pscA>
     ebc:	30 f0       	brcs	.+12     	; 0xeca <__addsf3+0x18>
     ebe:	6b d1       	rcall	.+726    	; 0x1196 <__fp_pscB>
     ec0:	20 f0       	brcs	.+8      	; 0xeca <__addsf3+0x18>
     ec2:	31 f4       	brne	.+12     	; 0xed0 <__addsf3+0x1e>
     ec4:	9f 3f       	cpi	r25, 0xFF	; 255
     ec6:	11 f4       	brne	.+4      	; 0xecc <__addsf3+0x1a>
     ec8:	1e f4       	brtc	.+6      	; 0xed0 <__addsf3+0x1e>
     eca:	5b c1       	rjmp	.+694    	; 0x1182 <__fp_nan>
     ecc:	0e f4       	brtc	.+2      	; 0xed0 <__addsf3+0x1e>
     ece:	e0 95       	com	r30
     ed0:	e7 fb       	bst	r30, 7
     ed2:	51 c1       	rjmp	.+674    	; 0x1176 <__fp_inf>

00000ed4 <__addsf3x>:
     ed4:	e9 2f       	mov	r30, r25
     ed6:	77 d1       	rcall	.+750    	; 0x11c6 <__fp_split3>
     ed8:	80 f3       	brcs	.-32     	; 0xeba <__addsf3+0x8>
     eda:	ba 17       	cp	r27, r26
     edc:	62 07       	cpc	r22, r18
     ede:	73 07       	cpc	r23, r19
     ee0:	84 07       	cpc	r24, r20
     ee2:	95 07       	cpc	r25, r21
     ee4:	18 f0       	brcs	.+6      	; 0xeec <__addsf3x+0x18>
     ee6:	71 f4       	brne	.+28     	; 0xf04 <__addsf3x+0x30>
     ee8:	9e f5       	brtc	.+102    	; 0xf50 <__addsf3x+0x7c>
     eea:	8f c1       	rjmp	.+798    	; 0x120a <__fp_zero>
     eec:	0e f4       	brtc	.+2      	; 0xef0 <__addsf3x+0x1c>
     eee:	e0 95       	com	r30
     ef0:	0b 2e       	mov	r0, r27
     ef2:	ba 2f       	mov	r27, r26
     ef4:	a0 2d       	mov	r26, r0
     ef6:	0b 01       	movw	r0, r22
     ef8:	b9 01       	movw	r22, r18
     efa:	90 01       	movw	r18, r0
     efc:	0c 01       	movw	r0, r24
     efe:	ca 01       	movw	r24, r20
     f00:	a0 01       	movw	r20, r0
     f02:	11 24       	eor	r1, r1
     f04:	ff 27       	eor	r31, r31
     f06:	59 1b       	sub	r21, r25
     f08:	99 f0       	breq	.+38     	; 0xf30 <__addsf3x+0x5c>
     f0a:	59 3f       	cpi	r21, 0xF9	; 249
     f0c:	50 f4       	brcc	.+20     	; 0xf22 <__addsf3x+0x4e>
     f0e:	50 3e       	cpi	r21, 0xE0	; 224
     f10:	68 f1       	brcs	.+90     	; 0xf6c <__addsf3x+0x98>
     f12:	1a 16       	cp	r1, r26
     f14:	f0 40       	sbci	r31, 0x00	; 0
     f16:	a2 2f       	mov	r26, r18
     f18:	23 2f       	mov	r18, r19
     f1a:	34 2f       	mov	r19, r20
     f1c:	44 27       	eor	r20, r20
     f1e:	58 5f       	subi	r21, 0xF8	; 248
     f20:	f3 cf       	rjmp	.-26     	; 0xf08 <__addsf3x+0x34>
     f22:	46 95       	lsr	r20
     f24:	37 95       	ror	r19
     f26:	27 95       	ror	r18
     f28:	a7 95       	ror	r26
     f2a:	f0 40       	sbci	r31, 0x00	; 0
     f2c:	53 95       	inc	r21
     f2e:	c9 f7       	brne	.-14     	; 0xf22 <__addsf3x+0x4e>
     f30:	7e f4       	brtc	.+30     	; 0xf50 <__addsf3x+0x7c>
     f32:	1f 16       	cp	r1, r31
     f34:	ba 0b       	sbc	r27, r26
     f36:	62 0b       	sbc	r22, r18
     f38:	73 0b       	sbc	r23, r19
     f3a:	84 0b       	sbc	r24, r20
     f3c:	ba f0       	brmi	.+46     	; 0xf6c <__addsf3x+0x98>
     f3e:	91 50       	subi	r25, 0x01	; 1
     f40:	a1 f0       	breq	.+40     	; 0xf6a <__addsf3x+0x96>
     f42:	ff 0f       	add	r31, r31
     f44:	bb 1f       	adc	r27, r27
     f46:	66 1f       	adc	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	c2 f7       	brpl	.-16     	; 0xf3e <__addsf3x+0x6a>
     f4e:	0e c0       	rjmp	.+28     	; 0xf6c <__addsf3x+0x98>
     f50:	ba 0f       	add	r27, r26
     f52:	62 1f       	adc	r22, r18
     f54:	73 1f       	adc	r23, r19
     f56:	84 1f       	adc	r24, r20
     f58:	48 f4       	brcc	.+18     	; 0xf6c <__addsf3x+0x98>
     f5a:	87 95       	ror	r24
     f5c:	77 95       	ror	r23
     f5e:	67 95       	ror	r22
     f60:	b7 95       	ror	r27
     f62:	f7 95       	ror	r31
     f64:	9e 3f       	cpi	r25, 0xFE	; 254
     f66:	08 f0       	brcs	.+2      	; 0xf6a <__addsf3x+0x96>
     f68:	b3 cf       	rjmp	.-154    	; 0xed0 <__addsf3+0x1e>
     f6a:	93 95       	inc	r25
     f6c:	88 0f       	add	r24, r24
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <__addsf3x+0x9e>
     f70:	99 27       	eor	r25, r25
     f72:	ee 0f       	add	r30, r30
     f74:	97 95       	ror	r25
     f76:	87 95       	ror	r24
     f78:	08 95       	ret

00000f7a <__cmpsf2>:
     f7a:	d9 d0       	rcall	.+434    	; 0x112e <__fp_cmp>
     f7c:	08 f4       	brcc	.+2      	; 0xf80 <__cmpsf2+0x6>
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	08 95       	ret

00000f82 <__divsf3>:
     f82:	0c d0       	rcall	.+24     	; 0xf9c <__divsf3x>
     f84:	0f c1       	rjmp	.+542    	; 0x11a4 <__fp_round>
     f86:	07 d1       	rcall	.+526    	; 0x1196 <__fp_pscB>
     f88:	40 f0       	brcs	.+16     	; 0xf9a <__divsf3+0x18>
     f8a:	fe d0       	rcall	.+508    	; 0x1188 <__fp_pscA>
     f8c:	30 f0       	brcs	.+12     	; 0xf9a <__divsf3+0x18>
     f8e:	21 f4       	brne	.+8      	; 0xf98 <__divsf3+0x16>
     f90:	5f 3f       	cpi	r21, 0xFF	; 255
     f92:	19 f0       	breq	.+6      	; 0xf9a <__divsf3+0x18>
     f94:	f0 c0       	rjmp	.+480    	; 0x1176 <__fp_inf>
     f96:	51 11       	cpse	r21, r1
     f98:	39 c1       	rjmp	.+626    	; 0x120c <__fp_szero>
     f9a:	f3 c0       	rjmp	.+486    	; 0x1182 <__fp_nan>

00000f9c <__divsf3x>:
     f9c:	14 d1       	rcall	.+552    	; 0x11c6 <__fp_split3>
     f9e:	98 f3       	brcs	.-26     	; 0xf86 <__divsf3+0x4>

00000fa0 <__divsf3_pse>:
     fa0:	99 23       	and	r25, r25
     fa2:	c9 f3       	breq	.-14     	; 0xf96 <__divsf3+0x14>
     fa4:	55 23       	and	r21, r21
     fa6:	b1 f3       	breq	.-20     	; 0xf94 <__divsf3+0x12>
     fa8:	95 1b       	sub	r25, r21
     faa:	55 0b       	sbc	r21, r21
     fac:	bb 27       	eor	r27, r27
     fae:	aa 27       	eor	r26, r26
     fb0:	62 17       	cp	r22, r18
     fb2:	73 07       	cpc	r23, r19
     fb4:	84 07       	cpc	r24, r20
     fb6:	38 f0       	brcs	.+14     	; 0xfc6 <__divsf3_pse+0x26>
     fb8:	9f 5f       	subi	r25, 0xFF	; 255
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	22 0f       	add	r18, r18
     fbe:	33 1f       	adc	r19, r19
     fc0:	44 1f       	adc	r20, r20
     fc2:	aa 1f       	adc	r26, r26
     fc4:	a9 f3       	breq	.-22     	; 0xfb0 <__divsf3_pse+0x10>
     fc6:	33 d0       	rcall	.+102    	; 0x102e <__divsf3_pse+0x8e>
     fc8:	0e 2e       	mov	r0, r30
     fca:	3a f0       	brmi	.+14     	; 0xfda <__divsf3_pse+0x3a>
     fcc:	e0 e8       	ldi	r30, 0x80	; 128
     fce:	30 d0       	rcall	.+96     	; 0x1030 <__divsf3_pse+0x90>
     fd0:	91 50       	subi	r25, 0x01	; 1
     fd2:	50 40       	sbci	r21, 0x00	; 0
     fd4:	e6 95       	lsr	r30
     fd6:	00 1c       	adc	r0, r0
     fd8:	ca f7       	brpl	.-14     	; 0xfcc <__divsf3_pse+0x2c>
     fda:	29 d0       	rcall	.+82     	; 0x102e <__divsf3_pse+0x8e>
     fdc:	fe 2f       	mov	r31, r30
     fde:	27 d0       	rcall	.+78     	; 0x102e <__divsf3_pse+0x8e>
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	bb 1f       	adc	r27, r27
     fe8:	26 17       	cp	r18, r22
     fea:	37 07       	cpc	r19, r23
     fec:	48 07       	cpc	r20, r24
     fee:	ab 07       	cpc	r26, r27
     ff0:	b0 e8       	ldi	r27, 0x80	; 128
     ff2:	09 f0       	breq	.+2      	; 0xff6 <__divsf3_pse+0x56>
     ff4:	bb 0b       	sbc	r27, r27
     ff6:	80 2d       	mov	r24, r0
     ff8:	bf 01       	movw	r22, r30
     ffa:	ff 27       	eor	r31, r31
     ffc:	93 58       	subi	r25, 0x83	; 131
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    1000:	2a f0       	brmi	.+10     	; 0x100c <__divsf3_pse+0x6c>
    1002:	9e 3f       	cpi	r25, 0xFE	; 254
    1004:	51 05       	cpc	r21, r1
    1006:	68 f0       	brcs	.+26     	; 0x1022 <__divsf3_pse+0x82>
    1008:	b6 c0       	rjmp	.+364    	; 0x1176 <__fp_inf>
    100a:	00 c1       	rjmp	.+512    	; 0x120c <__fp_szero>
    100c:	5f 3f       	cpi	r21, 0xFF	; 255
    100e:	ec f3       	brlt	.-6      	; 0x100a <__divsf3_pse+0x6a>
    1010:	98 3e       	cpi	r25, 0xE8	; 232
    1012:	dc f3       	brlt	.-10     	; 0x100a <__divsf3_pse+0x6a>
    1014:	86 95       	lsr	r24
    1016:	77 95       	ror	r23
    1018:	67 95       	ror	r22
    101a:	b7 95       	ror	r27
    101c:	f7 95       	ror	r31
    101e:	9f 5f       	subi	r25, 0xFF	; 255
    1020:	c9 f7       	brne	.-14     	; 0x1014 <__divsf3_pse+0x74>
    1022:	88 0f       	add	r24, r24
    1024:	91 1d       	adc	r25, r1
    1026:	96 95       	lsr	r25
    1028:	87 95       	ror	r24
    102a:	97 f9       	bld	r25, 7
    102c:	08 95       	ret
    102e:	e1 e0       	ldi	r30, 0x01	; 1
    1030:	66 0f       	add	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	88 1f       	adc	r24, r24
    1036:	bb 1f       	adc	r27, r27
    1038:	62 17       	cp	r22, r18
    103a:	73 07       	cpc	r23, r19
    103c:	84 07       	cpc	r24, r20
    103e:	ba 07       	cpc	r27, r26
    1040:	20 f0       	brcs	.+8      	; 0x104a <__divsf3_pse+0xaa>
    1042:	62 1b       	sub	r22, r18
    1044:	73 0b       	sbc	r23, r19
    1046:	84 0b       	sbc	r24, r20
    1048:	ba 0b       	sbc	r27, r26
    104a:	ee 1f       	adc	r30, r30
    104c:	88 f7       	brcc	.-30     	; 0x1030 <__divsf3_pse+0x90>
    104e:	e0 95       	com	r30
    1050:	08 95       	ret

00001052 <__fixsfsi>:
    1052:	04 d0       	rcall	.+8      	; 0x105c <__fixunssfsi>
    1054:	68 94       	set
    1056:	b1 11       	cpse	r27, r1
    1058:	d9 c0       	rjmp	.+434    	; 0x120c <__fp_szero>
    105a:	08 95       	ret

0000105c <__fixunssfsi>:
    105c:	bc d0       	rcall	.+376    	; 0x11d6 <__fp_splitA>
    105e:	88 f0       	brcs	.+34     	; 0x1082 <__fixunssfsi+0x26>
    1060:	9f 57       	subi	r25, 0x7F	; 127
    1062:	90 f0       	brcs	.+36     	; 0x1088 <__fixunssfsi+0x2c>
    1064:	b9 2f       	mov	r27, r25
    1066:	99 27       	eor	r25, r25
    1068:	b7 51       	subi	r27, 0x17	; 23
    106a:	a0 f0       	brcs	.+40     	; 0x1094 <__fixunssfsi+0x38>
    106c:	d1 f0       	breq	.+52     	; 0x10a2 <__fixunssfsi+0x46>
    106e:	66 0f       	add	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	88 1f       	adc	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	1a f0       	brmi	.+6      	; 0x107e <__fixunssfsi+0x22>
    1078:	ba 95       	dec	r27
    107a:	c9 f7       	brne	.-14     	; 0x106e <__fixunssfsi+0x12>
    107c:	12 c0       	rjmp	.+36     	; 0x10a2 <__fixunssfsi+0x46>
    107e:	b1 30       	cpi	r27, 0x01	; 1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <__fixunssfsi+0x46>
    1082:	c3 d0       	rcall	.+390    	; 0x120a <__fp_zero>
    1084:	b1 e0       	ldi	r27, 0x01	; 1
    1086:	08 95       	ret
    1088:	c0 c0       	rjmp	.+384    	; 0x120a <__fp_zero>
    108a:	67 2f       	mov	r22, r23
    108c:	78 2f       	mov	r23, r24
    108e:	88 27       	eor	r24, r24
    1090:	b8 5f       	subi	r27, 0xF8	; 248
    1092:	39 f0       	breq	.+14     	; 0x10a2 <__fixunssfsi+0x46>
    1094:	b9 3f       	cpi	r27, 0xF9	; 249
    1096:	cc f3       	brlt	.-14     	; 0x108a <__fixunssfsi+0x2e>
    1098:	86 95       	lsr	r24
    109a:	77 95       	ror	r23
    109c:	67 95       	ror	r22
    109e:	b3 95       	inc	r27
    10a0:	d9 f7       	brne	.-10     	; 0x1098 <__fixunssfsi+0x3c>
    10a2:	3e f4       	brtc	.+14     	; 0x10b2 <__fixunssfsi+0x56>
    10a4:	90 95       	com	r25
    10a6:	80 95       	com	r24
    10a8:	70 95       	com	r23
    10aa:	61 95       	neg	r22
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	8f 4f       	sbci	r24, 0xFF	; 255
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	08 95       	ret

000010b4 <__floatunsisf>:
    10b4:	e8 94       	clt
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <__floatsisf+0x12>

000010b8 <__floatsisf>:
    10b8:	97 fb       	bst	r25, 7
    10ba:	3e f4       	brtc	.+14     	; 0x10ca <__floatsisf+0x12>
    10bc:	90 95       	com	r25
    10be:	80 95       	com	r24
    10c0:	70 95       	com	r23
    10c2:	61 95       	neg	r22
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	8f 4f       	sbci	r24, 0xFF	; 255
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	99 23       	and	r25, r25
    10cc:	a9 f0       	breq	.+42     	; 0x10f8 <__floatsisf+0x40>
    10ce:	f9 2f       	mov	r31, r25
    10d0:	96 e9       	ldi	r25, 0x96	; 150
    10d2:	bb 27       	eor	r27, r27
    10d4:	93 95       	inc	r25
    10d6:	f6 95       	lsr	r31
    10d8:	87 95       	ror	r24
    10da:	77 95       	ror	r23
    10dc:	67 95       	ror	r22
    10de:	b7 95       	ror	r27
    10e0:	f1 11       	cpse	r31, r1
    10e2:	f8 cf       	rjmp	.-16     	; 0x10d4 <__floatsisf+0x1c>
    10e4:	fa f4       	brpl	.+62     	; 0x1124 <__floatsisf+0x6c>
    10e6:	bb 0f       	add	r27, r27
    10e8:	11 f4       	brne	.+4      	; 0x10ee <__floatsisf+0x36>
    10ea:	60 ff       	sbrs	r22, 0
    10ec:	1b c0       	rjmp	.+54     	; 0x1124 <__floatsisf+0x6c>
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8f 4f       	sbci	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	16 c0       	rjmp	.+44     	; 0x1124 <__floatsisf+0x6c>
    10f8:	88 23       	and	r24, r24
    10fa:	11 f0       	breq	.+4      	; 0x1100 <__floatsisf+0x48>
    10fc:	96 e9       	ldi	r25, 0x96	; 150
    10fe:	11 c0       	rjmp	.+34     	; 0x1122 <__floatsisf+0x6a>
    1100:	77 23       	and	r23, r23
    1102:	21 f0       	breq	.+8      	; 0x110c <__floatsisf+0x54>
    1104:	9e e8       	ldi	r25, 0x8E	; 142
    1106:	87 2f       	mov	r24, r23
    1108:	76 2f       	mov	r23, r22
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <__floatsisf+0x5e>
    110c:	66 23       	and	r22, r22
    110e:	71 f0       	breq	.+28     	; 0x112c <__floatsisf+0x74>
    1110:	96 e8       	ldi	r25, 0x86	; 134
    1112:	86 2f       	mov	r24, r22
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	2a f0       	brmi	.+10     	; 0x1124 <__floatsisf+0x6c>
    111a:	9a 95       	dec	r25
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	da f7       	brpl	.-10     	; 0x111a <__floatsisf+0x62>
    1124:	88 0f       	add	r24, r24
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	97 f9       	bld	r25, 7
    112c:	08 95       	ret

0000112e <__fp_cmp>:
    112e:	99 0f       	add	r25, r25
    1130:	00 08       	sbc	r0, r0
    1132:	55 0f       	add	r21, r21
    1134:	aa 0b       	sbc	r26, r26
    1136:	e0 e8       	ldi	r30, 0x80	; 128
    1138:	fe ef       	ldi	r31, 0xFE	; 254
    113a:	16 16       	cp	r1, r22
    113c:	17 06       	cpc	r1, r23
    113e:	e8 07       	cpc	r30, r24
    1140:	f9 07       	cpc	r31, r25
    1142:	c0 f0       	brcs	.+48     	; 0x1174 <__fp_cmp+0x46>
    1144:	12 16       	cp	r1, r18
    1146:	13 06       	cpc	r1, r19
    1148:	e4 07       	cpc	r30, r20
    114a:	f5 07       	cpc	r31, r21
    114c:	98 f0       	brcs	.+38     	; 0x1174 <__fp_cmp+0x46>
    114e:	62 1b       	sub	r22, r18
    1150:	73 0b       	sbc	r23, r19
    1152:	84 0b       	sbc	r24, r20
    1154:	95 0b       	sbc	r25, r21
    1156:	39 f4       	brne	.+14     	; 0x1166 <__fp_cmp+0x38>
    1158:	0a 26       	eor	r0, r26
    115a:	61 f0       	breq	.+24     	; 0x1174 <__fp_cmp+0x46>
    115c:	23 2b       	or	r18, r19
    115e:	24 2b       	or	r18, r20
    1160:	25 2b       	or	r18, r21
    1162:	21 f4       	brne	.+8      	; 0x116c <__fp_cmp+0x3e>
    1164:	08 95       	ret
    1166:	0a 26       	eor	r0, r26
    1168:	09 f4       	brne	.+2      	; 0x116c <__fp_cmp+0x3e>
    116a:	a1 40       	sbci	r26, 0x01	; 1
    116c:	a6 95       	lsr	r26
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	81 1d       	adc	r24, r1
    1172:	81 1d       	adc	r24, r1
    1174:	08 95       	ret

00001176 <__fp_inf>:
    1176:	97 f9       	bld	r25, 7
    1178:	9f 67       	ori	r25, 0x7F	; 127
    117a:	80 e8       	ldi	r24, 0x80	; 128
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	08 95       	ret

00001182 <__fp_nan>:
    1182:	9f ef       	ldi	r25, 0xFF	; 255
    1184:	80 ec       	ldi	r24, 0xC0	; 192
    1186:	08 95       	ret

00001188 <__fp_pscA>:
    1188:	00 24       	eor	r0, r0
    118a:	0a 94       	dec	r0
    118c:	16 16       	cp	r1, r22
    118e:	17 06       	cpc	r1, r23
    1190:	18 06       	cpc	r1, r24
    1192:	09 06       	cpc	r0, r25
    1194:	08 95       	ret

00001196 <__fp_pscB>:
    1196:	00 24       	eor	r0, r0
    1198:	0a 94       	dec	r0
    119a:	12 16       	cp	r1, r18
    119c:	13 06       	cpc	r1, r19
    119e:	14 06       	cpc	r1, r20
    11a0:	05 06       	cpc	r0, r21
    11a2:	08 95       	ret

000011a4 <__fp_round>:
    11a4:	09 2e       	mov	r0, r25
    11a6:	03 94       	inc	r0
    11a8:	00 0c       	add	r0, r0
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <__fp_round+0xc>
    11ac:	88 23       	and	r24, r24
    11ae:	52 f0       	brmi	.+20     	; 0x11c4 <__fp_round+0x20>
    11b0:	bb 0f       	add	r27, r27
    11b2:	40 f4       	brcc	.+16     	; 0x11c4 <__fp_round+0x20>
    11b4:	bf 2b       	or	r27, r31
    11b6:	11 f4       	brne	.+4      	; 0x11bc <__fp_round+0x18>
    11b8:	60 ff       	sbrs	r22, 0
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <__fp_round+0x20>
    11bc:	6f 5f       	subi	r22, 0xFF	; 255
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	8f 4f       	sbci	r24, 0xFF	; 255
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	08 95       	ret

000011c6 <__fp_split3>:
    11c6:	57 fd       	sbrc	r21, 7
    11c8:	90 58       	subi	r25, 0x80	; 128
    11ca:	44 0f       	add	r20, r20
    11cc:	55 1f       	adc	r21, r21
    11ce:	59 f0       	breq	.+22     	; 0x11e6 <__fp_splitA+0x10>
    11d0:	5f 3f       	cpi	r21, 0xFF	; 255
    11d2:	71 f0       	breq	.+28     	; 0x11f0 <__fp_splitA+0x1a>
    11d4:	47 95       	ror	r20

000011d6 <__fp_splitA>:
    11d6:	88 0f       	add	r24, r24
    11d8:	97 fb       	bst	r25, 7
    11da:	99 1f       	adc	r25, r25
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <__fp_splitA+0x20>
    11de:	9f 3f       	cpi	r25, 0xFF	; 255
    11e0:	79 f0       	breq	.+30     	; 0x1200 <__fp_splitA+0x2a>
    11e2:	87 95       	ror	r24
    11e4:	08 95       	ret
    11e6:	12 16       	cp	r1, r18
    11e8:	13 06       	cpc	r1, r19
    11ea:	14 06       	cpc	r1, r20
    11ec:	55 1f       	adc	r21, r21
    11ee:	f2 cf       	rjmp	.-28     	; 0x11d4 <__fp_split3+0xe>
    11f0:	46 95       	lsr	r20
    11f2:	f1 df       	rcall	.-30     	; 0x11d6 <__fp_splitA>
    11f4:	08 c0       	rjmp	.+16     	; 0x1206 <__fp_splitA+0x30>
    11f6:	16 16       	cp	r1, r22
    11f8:	17 06       	cpc	r1, r23
    11fa:	18 06       	cpc	r1, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	f1 cf       	rjmp	.-30     	; 0x11e2 <__fp_splitA+0xc>
    1200:	86 95       	lsr	r24
    1202:	71 05       	cpc	r23, r1
    1204:	61 05       	cpc	r22, r1
    1206:	08 94       	sec
    1208:	08 95       	ret

0000120a <__fp_zero>:
    120a:	e8 94       	clt

0000120c <__fp_szero>:
    120c:	bb 27       	eor	r27, r27
    120e:	66 27       	eor	r22, r22
    1210:	77 27       	eor	r23, r23
    1212:	cb 01       	movw	r24, r22
    1214:	97 f9       	bld	r25, 7
    1216:	08 95       	ret

00001218 <__gesf2>:
    1218:	8a df       	rcall	.-236    	; 0x112e <__fp_cmp>
    121a:	08 f4       	brcc	.+2      	; 0x121e <__gesf2+0x6>
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	08 95       	ret

00001220 <__mulsf3>:
    1220:	0b d0       	rcall	.+22     	; 0x1238 <__mulsf3x>
    1222:	c0 cf       	rjmp	.-128    	; 0x11a4 <__fp_round>
    1224:	b1 df       	rcall	.-158    	; 0x1188 <__fp_pscA>
    1226:	28 f0       	brcs	.+10     	; 0x1232 <__mulsf3+0x12>
    1228:	b6 df       	rcall	.-148    	; 0x1196 <__fp_pscB>
    122a:	18 f0       	brcs	.+6      	; 0x1232 <__mulsf3+0x12>
    122c:	95 23       	and	r25, r21
    122e:	09 f0       	breq	.+2      	; 0x1232 <__mulsf3+0x12>
    1230:	a2 cf       	rjmp	.-188    	; 0x1176 <__fp_inf>
    1232:	a7 cf       	rjmp	.-178    	; 0x1182 <__fp_nan>
    1234:	11 24       	eor	r1, r1
    1236:	ea cf       	rjmp	.-44     	; 0x120c <__fp_szero>

00001238 <__mulsf3x>:
    1238:	c6 df       	rcall	.-116    	; 0x11c6 <__fp_split3>
    123a:	a0 f3       	brcs	.-24     	; 0x1224 <__mulsf3+0x4>

0000123c <__mulsf3_pse>:
    123c:	95 9f       	mul	r25, r21
    123e:	d1 f3       	breq	.-12     	; 0x1234 <__mulsf3+0x14>
    1240:	95 0f       	add	r25, r21
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	55 1f       	adc	r21, r21
    1246:	62 9f       	mul	r22, r18
    1248:	f0 01       	movw	r30, r0
    124a:	72 9f       	mul	r23, r18
    124c:	bb 27       	eor	r27, r27
    124e:	f0 0d       	add	r31, r0
    1250:	b1 1d       	adc	r27, r1
    1252:	63 9f       	mul	r22, r19
    1254:	aa 27       	eor	r26, r26
    1256:	f0 0d       	add	r31, r0
    1258:	b1 1d       	adc	r27, r1
    125a:	aa 1f       	adc	r26, r26
    125c:	64 9f       	mul	r22, r20
    125e:	66 27       	eor	r22, r22
    1260:	b0 0d       	add	r27, r0
    1262:	a1 1d       	adc	r26, r1
    1264:	66 1f       	adc	r22, r22
    1266:	82 9f       	mul	r24, r18
    1268:	22 27       	eor	r18, r18
    126a:	b0 0d       	add	r27, r0
    126c:	a1 1d       	adc	r26, r1
    126e:	62 1f       	adc	r22, r18
    1270:	73 9f       	mul	r23, r19
    1272:	b0 0d       	add	r27, r0
    1274:	a1 1d       	adc	r26, r1
    1276:	62 1f       	adc	r22, r18
    1278:	83 9f       	mul	r24, r19
    127a:	a0 0d       	add	r26, r0
    127c:	61 1d       	adc	r22, r1
    127e:	22 1f       	adc	r18, r18
    1280:	74 9f       	mul	r23, r20
    1282:	33 27       	eor	r19, r19
    1284:	a0 0d       	add	r26, r0
    1286:	61 1d       	adc	r22, r1
    1288:	23 1f       	adc	r18, r19
    128a:	84 9f       	mul	r24, r20
    128c:	60 0d       	add	r22, r0
    128e:	21 1d       	adc	r18, r1
    1290:	82 2f       	mov	r24, r18
    1292:	76 2f       	mov	r23, r22
    1294:	6a 2f       	mov	r22, r26
    1296:	11 24       	eor	r1, r1
    1298:	9f 57       	subi	r25, 0x7F	; 127
    129a:	50 40       	sbci	r21, 0x00	; 0
    129c:	8a f0       	brmi	.+34     	; 0x12c0 <__mulsf3_pse+0x84>
    129e:	e1 f0       	breq	.+56     	; 0x12d8 <__mulsf3_pse+0x9c>
    12a0:	88 23       	and	r24, r24
    12a2:	4a f0       	brmi	.+18     	; 0x12b6 <__mulsf3_pse+0x7a>
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	bb 1f       	adc	r27, r27
    12aa:	66 1f       	adc	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	91 50       	subi	r25, 0x01	; 1
    12b2:	50 40       	sbci	r21, 0x00	; 0
    12b4:	a9 f7       	brne	.-22     	; 0x12a0 <__mulsf3_pse+0x64>
    12b6:	9e 3f       	cpi	r25, 0xFE	; 254
    12b8:	51 05       	cpc	r21, r1
    12ba:	70 f0       	brcs	.+28     	; 0x12d8 <__mulsf3_pse+0x9c>
    12bc:	5c cf       	rjmp	.-328    	; 0x1176 <__fp_inf>
    12be:	a6 cf       	rjmp	.-180    	; 0x120c <__fp_szero>
    12c0:	5f 3f       	cpi	r21, 0xFF	; 255
    12c2:	ec f3       	brlt	.-6      	; 0x12be <__mulsf3_pse+0x82>
    12c4:	98 3e       	cpi	r25, 0xE8	; 232
    12c6:	dc f3       	brlt	.-10     	; 0x12be <__mulsf3_pse+0x82>
    12c8:	86 95       	lsr	r24
    12ca:	77 95       	ror	r23
    12cc:	67 95       	ror	r22
    12ce:	b7 95       	ror	r27
    12d0:	f7 95       	ror	r31
    12d2:	e7 95       	ror	r30
    12d4:	9f 5f       	subi	r25, 0xFF	; 255
    12d6:	c1 f7       	brne	.-16     	; 0x12c8 <__mulsf3_pse+0x8c>
    12d8:	fe 2b       	or	r31, r30
    12da:	88 0f       	add	r24, r24
    12dc:	91 1d       	adc	r25, r1
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	97 f9       	bld	r25, 7
    12e4:	08 95       	ret

000012e6 <sprintf>:
    12e6:	ae e0       	ldi	r26, 0x0E	; 14
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e8 e7       	ldi	r30, 0x78	; 120
    12ec:	f9 e0       	ldi	r31, 0x09	; 9
    12ee:	98 c2       	rjmp	.+1328   	; 0x1820 <__prologue_saves__+0x1c>
    12f0:	0d 89       	ldd	r16, Y+21	; 0x15
    12f2:	1e 89       	ldd	r17, Y+22	; 0x16
    12f4:	86 e0       	ldi	r24, 0x06	; 6
    12f6:	8c 83       	std	Y+4, r24	; 0x04
    12f8:	1a 83       	std	Y+2, r17	; 0x02
    12fa:	09 83       	std	Y+1, r16	; 0x01
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	9f e7       	ldi	r25, 0x7F	; 127
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	9e 01       	movw	r18, r28
    1306:	27 5e       	subi	r18, 0xE7	; 231
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	6f 89       	ldd	r22, Y+23	; 0x17
    1310:	78 8d       	ldd	r23, Y+24	; 0x18
    1312:	a9 01       	movw	r20, r18
    1314:	09 d0       	rcall	.+18     	; 0x1328 <vfprintf>
    1316:	2f 81       	ldd	r18, Y+7	; 0x07
    1318:	38 85       	ldd	r19, Y+8	; 0x08
    131a:	02 0f       	add	r16, r18
    131c:	13 1f       	adc	r17, r19
    131e:	f8 01       	movw	r30, r16
    1320:	10 82       	st	Z, r1
    1322:	2e 96       	adiw	r28, 0x0e	; 14
    1324:	e4 e0       	ldi	r30, 0x04	; 4
    1326:	98 c2       	rjmp	.+1328   	; 0x1858 <__epilogue_restores__+0x1c>

00001328 <vfprintf>:
    1328:	ab e0       	ldi	r26, 0x0B	; 11
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e9 e9       	ldi	r30, 0x99	; 153
    132e:	f9 e0       	ldi	r31, 0x09	; 9
    1330:	69 c2       	rjmp	.+1234   	; 0x1804 <__prologue_saves__>
    1332:	3c 01       	movw	r6, r24
    1334:	2b 01       	movw	r4, r22
    1336:	5a 01       	movw	r10, r20
    1338:	fc 01       	movw	r30, r24
    133a:	17 82       	std	Z+7, r1	; 0x07
    133c:	16 82       	std	Z+6, r1	; 0x06
    133e:	83 81       	ldd	r24, Z+3	; 0x03
    1340:	81 fd       	sbrc	r24, 1
    1342:	03 c0       	rjmp	.+6      	; 0x134a <vfprintf+0x22>
    1344:	6f ef       	ldi	r22, 0xFF	; 255
    1346:	7f ef       	ldi	r23, 0xFF	; 255
    1348:	b9 c1       	rjmp	.+882    	; 0x16bc <vfprintf+0x394>
    134a:	9a e0       	ldi	r25, 0x0A	; 10
    134c:	89 2e       	mov	r8, r25
    134e:	1e 01       	movw	r2, r28
    1350:	08 94       	sec
    1352:	21 1c       	adc	r2, r1
    1354:	31 1c       	adc	r3, r1
    1356:	f3 01       	movw	r30, r6
    1358:	23 81       	ldd	r18, Z+3	; 0x03
    135a:	f2 01       	movw	r30, r4
    135c:	23 fd       	sbrc	r18, 3
    135e:	85 91       	lpm	r24, Z+
    1360:	23 ff       	sbrs	r18, 3
    1362:	81 91       	ld	r24, Z+
    1364:	2f 01       	movw	r4, r30
    1366:	88 23       	and	r24, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <vfprintf+0x44>
    136a:	a5 c1       	rjmp	.+842    	; 0x16b6 <vfprintf+0x38e>
    136c:	85 32       	cpi	r24, 0x25	; 37
    136e:	39 f4       	brne	.+14     	; 0x137e <vfprintf+0x56>
    1370:	23 fd       	sbrc	r18, 3
    1372:	85 91       	lpm	r24, Z+
    1374:	23 ff       	sbrs	r18, 3
    1376:	81 91       	ld	r24, Z+
    1378:	2f 01       	movw	r4, r30
    137a:	85 32       	cpi	r24, 0x25	; 37
    137c:	21 f4       	brne	.+8      	; 0x1386 <vfprintf+0x5e>
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	b3 01       	movw	r22, r6
    1382:	b6 d1       	rcall	.+876    	; 0x16f0 <fputc>
    1384:	e8 cf       	rjmp	.-48     	; 0x1356 <vfprintf+0x2e>
    1386:	98 2f       	mov	r25, r24
    1388:	ff 24       	eor	r15, r15
    138a:	ee 24       	eor	r14, r14
    138c:	99 24       	eor	r9, r9
    138e:	ff e1       	ldi	r31, 0x1F	; 31
    1390:	ff 15       	cp	r31, r15
    1392:	d0 f0       	brcs	.+52     	; 0x13c8 <vfprintf+0xa0>
    1394:	9b 32       	cpi	r25, 0x2B	; 43
    1396:	69 f0       	breq	.+26     	; 0x13b2 <vfprintf+0x8a>
    1398:	9c 32       	cpi	r25, 0x2C	; 44
    139a:	28 f4       	brcc	.+10     	; 0x13a6 <vfprintf+0x7e>
    139c:	90 32       	cpi	r25, 0x20	; 32
    139e:	59 f0       	breq	.+22     	; 0x13b6 <vfprintf+0x8e>
    13a0:	93 32       	cpi	r25, 0x23	; 35
    13a2:	91 f4       	brne	.+36     	; 0x13c8 <vfprintf+0xa0>
    13a4:	0e c0       	rjmp	.+28     	; 0x13c2 <vfprintf+0x9a>
    13a6:	9d 32       	cpi	r25, 0x2D	; 45
    13a8:	49 f0       	breq	.+18     	; 0x13bc <vfprintf+0x94>
    13aa:	90 33       	cpi	r25, 0x30	; 48
    13ac:	69 f4       	brne	.+26     	; 0x13c8 <vfprintf+0xa0>
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	24 c0       	rjmp	.+72     	; 0x13fa <vfprintf+0xd2>
    13b2:	52 e0       	ldi	r21, 0x02	; 2
    13b4:	f5 2a       	or	r15, r21
    13b6:	84 e0       	ldi	r24, 0x04	; 4
    13b8:	f8 2a       	or	r15, r24
    13ba:	28 c0       	rjmp	.+80     	; 0x140c <vfprintf+0xe4>
    13bc:	98 e0       	ldi	r25, 0x08	; 8
    13be:	f9 2a       	or	r15, r25
    13c0:	25 c0       	rjmp	.+74     	; 0x140c <vfprintf+0xe4>
    13c2:	e0 e1       	ldi	r30, 0x10	; 16
    13c4:	fe 2a       	or	r15, r30
    13c6:	22 c0       	rjmp	.+68     	; 0x140c <vfprintf+0xe4>
    13c8:	f7 fc       	sbrc	r15, 7
    13ca:	29 c0       	rjmp	.+82     	; 0x141e <vfprintf+0xf6>
    13cc:	89 2f       	mov	r24, r25
    13ce:	80 53       	subi	r24, 0x30	; 48
    13d0:	8a 30       	cpi	r24, 0x0A	; 10
    13d2:	70 f4       	brcc	.+28     	; 0x13f0 <vfprintf+0xc8>
    13d4:	f6 fe       	sbrs	r15, 6
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <vfprintf+0xba>
    13d8:	98 9c       	mul	r9, r8
    13da:	90 2c       	mov	r9, r0
    13dc:	11 24       	eor	r1, r1
    13de:	98 0e       	add	r9, r24
    13e0:	15 c0       	rjmp	.+42     	; 0x140c <vfprintf+0xe4>
    13e2:	e8 9c       	mul	r14, r8
    13e4:	e0 2c       	mov	r14, r0
    13e6:	11 24       	eor	r1, r1
    13e8:	e8 0e       	add	r14, r24
    13ea:	f0 e2       	ldi	r31, 0x20	; 32
    13ec:	ff 2a       	or	r15, r31
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <vfprintf+0xe4>
    13f0:	9e 32       	cpi	r25, 0x2E	; 46
    13f2:	29 f4       	brne	.+10     	; 0x13fe <vfprintf+0xd6>
    13f4:	f6 fc       	sbrc	r15, 6
    13f6:	5f c1       	rjmp	.+702    	; 0x16b6 <vfprintf+0x38e>
    13f8:	40 e4       	ldi	r20, 0x40	; 64
    13fa:	f4 2a       	or	r15, r20
    13fc:	07 c0       	rjmp	.+14     	; 0x140c <vfprintf+0xe4>
    13fe:	9c 36       	cpi	r25, 0x6C	; 108
    1400:	19 f4       	brne	.+6      	; 0x1408 <vfprintf+0xe0>
    1402:	50 e8       	ldi	r21, 0x80	; 128
    1404:	f5 2a       	or	r15, r21
    1406:	02 c0       	rjmp	.+4      	; 0x140c <vfprintf+0xe4>
    1408:	98 36       	cpi	r25, 0x68	; 104
    140a:	49 f4       	brne	.+18     	; 0x141e <vfprintf+0xf6>
    140c:	f2 01       	movw	r30, r4
    140e:	23 fd       	sbrc	r18, 3
    1410:	95 91       	lpm	r25, Z+
    1412:	23 ff       	sbrs	r18, 3
    1414:	91 91       	ld	r25, Z+
    1416:	2f 01       	movw	r4, r30
    1418:	99 23       	and	r25, r25
    141a:	09 f0       	breq	.+2      	; 0x141e <vfprintf+0xf6>
    141c:	b8 cf       	rjmp	.-144    	; 0x138e <vfprintf+0x66>
    141e:	89 2f       	mov	r24, r25
    1420:	85 54       	subi	r24, 0x45	; 69
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	18 f0       	brcs	.+6      	; 0x142c <vfprintf+0x104>
    1426:	80 52       	subi	r24, 0x20	; 32
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	38 f4       	brcc	.+14     	; 0x143a <vfprintf+0x112>
    142c:	44 e0       	ldi	r20, 0x04	; 4
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	a4 0e       	add	r10, r20
    1432:	b5 1e       	adc	r11, r21
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	59 83       	std	Y+1, r21	; 0x01
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <vfprintf+0x130>
    143a:	93 36       	cpi	r25, 0x63	; 99
    143c:	31 f0       	breq	.+12     	; 0x144a <vfprintf+0x122>
    143e:	93 37       	cpi	r25, 0x73	; 115
    1440:	79 f0       	breq	.+30     	; 0x1460 <vfprintf+0x138>
    1442:	93 35       	cpi	r25, 0x53	; 83
    1444:	09 f0       	breq	.+2      	; 0x1448 <vfprintf+0x120>
    1446:	52 c0       	rjmp	.+164    	; 0x14ec <vfprintf+0x1c4>
    1448:	1f c0       	rjmp	.+62     	; 0x1488 <vfprintf+0x160>
    144a:	f5 01       	movw	r30, r10
    144c:	80 81       	ld	r24, Z
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	42 e0       	ldi	r20, 0x02	; 2
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	a4 0e       	add	r10, r20
    1456:	b5 1e       	adc	r11, r21
    1458:	61 01       	movw	r12, r2
    145a:	01 e0       	ldi	r16, 0x01	; 1
    145c:	10 e0       	ldi	r17, 0x00	; 0
    145e:	11 c0       	rjmp	.+34     	; 0x1482 <vfprintf+0x15a>
    1460:	f5 01       	movw	r30, r10
    1462:	c0 80       	ld	r12, Z
    1464:	d1 80       	ldd	r13, Z+1	; 0x01
    1466:	f6 fc       	sbrc	r15, 6
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <vfprintf+0x148>
    146a:	6f ef       	ldi	r22, 0xFF	; 255
    146c:	7f ef       	ldi	r23, 0xFF	; 255
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <vfprintf+0x14c>
    1470:	69 2d       	mov	r22, r9
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	42 e0       	ldi	r20, 0x02	; 2
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	a4 0e       	add	r10, r20
    147a:	b5 1e       	adc	r11, r21
    147c:	c6 01       	movw	r24, r12
    147e:	2d d1       	rcall	.+602    	; 0x16da <strnlen>
    1480:	8c 01       	movw	r16, r24
    1482:	5f e7       	ldi	r21, 0x7F	; 127
    1484:	f5 22       	and	r15, r21
    1486:	13 c0       	rjmp	.+38     	; 0x14ae <vfprintf+0x186>
    1488:	f5 01       	movw	r30, r10
    148a:	c0 80       	ld	r12, Z
    148c:	d1 80       	ldd	r13, Z+1	; 0x01
    148e:	f6 fc       	sbrc	r15, 6
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <vfprintf+0x170>
    1492:	6f ef       	ldi	r22, 0xFF	; 255
    1494:	7f ef       	ldi	r23, 0xFF	; 255
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x174>
    1498:	69 2d       	mov	r22, r9
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	42 e0       	ldi	r20, 0x02	; 2
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	a4 0e       	add	r10, r20
    14a2:	b5 1e       	adc	r11, r21
    14a4:	c6 01       	movw	r24, r12
    14a6:	0e d1       	rcall	.+540    	; 0x16c4 <strnlen_P>
    14a8:	8c 01       	movw	r16, r24
    14aa:	50 e8       	ldi	r21, 0x80	; 128
    14ac:	f5 2a       	or	r15, r21
    14ae:	f3 fe       	sbrs	r15, 3
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <vfprintf+0x196>
    14b2:	18 c0       	rjmp	.+48     	; 0x14e4 <vfprintf+0x1bc>
    14b4:	80 e2       	ldi	r24, 0x20	; 32
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	b3 01       	movw	r22, r6
    14ba:	1a d1       	rcall	.+564    	; 0x16f0 <fputc>
    14bc:	ea 94       	dec	r14
    14be:	8e 2d       	mov	r24, r14
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	08 17       	cp	r16, r24
    14c4:	19 07       	cpc	r17, r25
    14c6:	b0 f3       	brcs	.-20     	; 0x14b4 <vfprintf+0x18c>
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <vfprintf+0x1bc>
    14ca:	f6 01       	movw	r30, r12
    14cc:	f7 fc       	sbrc	r15, 7
    14ce:	85 91       	lpm	r24, Z+
    14d0:	f7 fe       	sbrs	r15, 7
    14d2:	81 91       	ld	r24, Z+
    14d4:	6f 01       	movw	r12, r30
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	b3 01       	movw	r22, r6
    14da:	0a d1       	rcall	.+532    	; 0x16f0 <fputc>
    14dc:	e1 10       	cpse	r14, r1
    14de:	ea 94       	dec	r14
    14e0:	01 50       	subi	r16, 0x01	; 1
    14e2:	10 40       	sbci	r17, 0x00	; 0
    14e4:	01 15       	cp	r16, r1
    14e6:	11 05       	cpc	r17, r1
    14e8:	81 f7       	brne	.-32     	; 0x14ca <vfprintf+0x1a2>
    14ea:	e2 c0       	rjmp	.+452    	; 0x16b0 <vfprintf+0x388>
    14ec:	94 36       	cpi	r25, 0x64	; 100
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <vfprintf+0x1cc>
    14f0:	99 36       	cpi	r25, 0x69	; 105
    14f2:	61 f5       	brne	.+88     	; 0x154c <vfprintf+0x224>
    14f4:	f7 fe       	sbrs	r15, 7
    14f6:	08 c0       	rjmp	.+16     	; 0x1508 <vfprintf+0x1e0>
    14f8:	f5 01       	movw	r30, r10
    14fa:	20 81       	ld	r18, Z
    14fc:	31 81       	ldd	r19, Z+1	; 0x01
    14fe:	42 81       	ldd	r20, Z+2	; 0x02
    1500:	53 81       	ldd	r21, Z+3	; 0x03
    1502:	84 e0       	ldi	r24, 0x04	; 4
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0a c0       	rjmp	.+20     	; 0x151c <vfprintf+0x1f4>
    1508:	f5 01       	movw	r30, r10
    150a:	80 81       	ld	r24, Z
    150c:	91 81       	ldd	r25, Z+1	; 0x01
    150e:	9c 01       	movw	r18, r24
    1510:	44 27       	eor	r20, r20
    1512:	37 fd       	sbrc	r19, 7
    1514:	40 95       	com	r20
    1516:	54 2f       	mov	r21, r20
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a8 0e       	add	r10, r24
    151e:	b9 1e       	adc	r11, r25
    1520:	9f e6       	ldi	r25, 0x6F	; 111
    1522:	f9 22       	and	r15, r25
    1524:	57 ff       	sbrs	r21, 7
    1526:	09 c0       	rjmp	.+18     	; 0x153a <vfprintf+0x212>
    1528:	50 95       	com	r21
    152a:	40 95       	com	r20
    152c:	30 95       	com	r19
    152e:	21 95       	neg	r18
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	4f 4f       	sbci	r20, 0xFF	; 255
    1534:	5f 4f       	sbci	r21, 0xFF	; 255
    1536:	e0 e8       	ldi	r30, 0x80	; 128
    1538:	fe 2a       	or	r15, r30
    153a:	ca 01       	movw	r24, r20
    153c:	b9 01       	movw	r22, r18
    153e:	a1 01       	movw	r20, r2
    1540:	2a e0       	ldi	r18, 0x0A	; 10
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	01 d1       	rcall	.+514    	; 0x1748 <__ultoa_invert>
    1546:	d8 2e       	mov	r13, r24
    1548:	d2 18       	sub	r13, r2
    154a:	3f c0       	rjmp	.+126    	; 0x15ca <vfprintf+0x2a2>
    154c:	95 37       	cpi	r25, 0x75	; 117
    154e:	29 f4       	brne	.+10     	; 0x155a <vfprintf+0x232>
    1550:	1f 2d       	mov	r17, r15
    1552:	1f 7e       	andi	r17, 0xEF	; 239
    1554:	2a e0       	ldi	r18, 0x0A	; 10
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	1d c0       	rjmp	.+58     	; 0x1594 <vfprintf+0x26c>
    155a:	1f 2d       	mov	r17, r15
    155c:	19 7f       	andi	r17, 0xF9	; 249
    155e:	9f 36       	cpi	r25, 0x6F	; 111
    1560:	61 f0       	breq	.+24     	; 0x157a <vfprintf+0x252>
    1562:	90 37       	cpi	r25, 0x70	; 112
    1564:	20 f4       	brcc	.+8      	; 0x156e <vfprintf+0x246>
    1566:	98 35       	cpi	r25, 0x58	; 88
    1568:	09 f0       	breq	.+2      	; 0x156c <vfprintf+0x244>
    156a:	a5 c0       	rjmp	.+330    	; 0x16b6 <vfprintf+0x38e>
    156c:	0f c0       	rjmp	.+30     	; 0x158c <vfprintf+0x264>
    156e:	90 37       	cpi	r25, 0x70	; 112
    1570:	39 f0       	breq	.+14     	; 0x1580 <vfprintf+0x258>
    1572:	98 37       	cpi	r25, 0x78	; 120
    1574:	09 f0       	breq	.+2      	; 0x1578 <vfprintf+0x250>
    1576:	9f c0       	rjmp	.+318    	; 0x16b6 <vfprintf+0x38e>
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <vfprintf+0x25a>
    157a:	28 e0       	ldi	r18, 0x08	; 8
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	0a c0       	rjmp	.+20     	; 0x1594 <vfprintf+0x26c>
    1580:	10 61       	ori	r17, 0x10	; 16
    1582:	14 fd       	sbrc	r17, 4
    1584:	14 60       	ori	r17, 0x04	; 4
    1586:	20 e1       	ldi	r18, 0x10	; 16
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <vfprintf+0x26c>
    158c:	14 fd       	sbrc	r17, 4
    158e:	16 60       	ori	r17, 0x06	; 6
    1590:	20 e1       	ldi	r18, 0x10	; 16
    1592:	32 e0       	ldi	r19, 0x02	; 2
    1594:	17 ff       	sbrs	r17, 7
    1596:	08 c0       	rjmp	.+16     	; 0x15a8 <vfprintf+0x280>
    1598:	f5 01       	movw	r30, r10
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	44 e0       	ldi	r20, 0x04	; 4
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	08 c0       	rjmp	.+16     	; 0x15b8 <vfprintf+0x290>
    15a8:	f5 01       	movw	r30, r10
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	bc 01       	movw	r22, r24
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	42 e0       	ldi	r20, 0x02	; 2
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	a4 0e       	add	r10, r20
    15ba:	b5 1e       	adc	r11, r21
    15bc:	a1 01       	movw	r20, r2
    15be:	c4 d0       	rcall	.+392    	; 0x1748 <__ultoa_invert>
    15c0:	d8 2e       	mov	r13, r24
    15c2:	d2 18       	sub	r13, r2
    15c4:	8f e7       	ldi	r24, 0x7F	; 127
    15c6:	f8 2e       	mov	r15, r24
    15c8:	f1 22       	and	r15, r17
    15ca:	f6 fe       	sbrs	r15, 6
    15cc:	0b c0       	rjmp	.+22     	; 0x15e4 <vfprintf+0x2bc>
    15ce:	5e ef       	ldi	r21, 0xFE	; 254
    15d0:	f5 22       	and	r15, r21
    15d2:	d9 14       	cp	r13, r9
    15d4:	38 f4       	brcc	.+14     	; 0x15e4 <vfprintf+0x2bc>
    15d6:	f4 fe       	sbrs	r15, 4
    15d8:	07 c0       	rjmp	.+14     	; 0x15e8 <vfprintf+0x2c0>
    15da:	f2 fc       	sbrc	r15, 2
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <vfprintf+0x2c0>
    15de:	8f ee       	ldi	r24, 0xEF	; 239
    15e0:	f8 22       	and	r15, r24
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <vfprintf+0x2c0>
    15e4:	1d 2d       	mov	r17, r13
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <vfprintf+0x2c2>
    15e8:	19 2d       	mov	r17, r9
    15ea:	f4 fe       	sbrs	r15, 4
    15ec:	0d c0       	rjmp	.+26     	; 0x1608 <vfprintf+0x2e0>
    15ee:	fe 01       	movw	r30, r28
    15f0:	ed 0d       	add	r30, r13
    15f2:	f1 1d       	adc	r31, r1
    15f4:	80 81       	ld	r24, Z
    15f6:	80 33       	cpi	r24, 0x30	; 48
    15f8:	19 f4       	brne	.+6      	; 0x1600 <vfprintf+0x2d8>
    15fa:	99 ee       	ldi	r25, 0xE9	; 233
    15fc:	f9 22       	and	r15, r25
    15fe:	08 c0       	rjmp	.+16     	; 0x1610 <vfprintf+0x2e8>
    1600:	1f 5f       	subi	r17, 0xFF	; 255
    1602:	f2 fe       	sbrs	r15, 2
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <vfprintf+0x2e8>
    1606:	03 c0       	rjmp	.+6      	; 0x160e <vfprintf+0x2e6>
    1608:	8f 2d       	mov	r24, r15
    160a:	86 78       	andi	r24, 0x86	; 134
    160c:	09 f0       	breq	.+2      	; 0x1610 <vfprintf+0x2e8>
    160e:	1f 5f       	subi	r17, 0xFF	; 255
    1610:	0f 2d       	mov	r16, r15
    1612:	f3 fc       	sbrc	r15, 3
    1614:	13 c0       	rjmp	.+38     	; 0x163c <vfprintf+0x314>
    1616:	f0 fe       	sbrs	r15, 0
    1618:	0e c0       	rjmp	.+28     	; 0x1636 <vfprintf+0x30e>
    161a:	1e 15       	cp	r17, r14
    161c:	10 f0       	brcs	.+4      	; 0x1622 <vfprintf+0x2fa>
    161e:	9d 2c       	mov	r9, r13
    1620:	0a c0       	rjmp	.+20     	; 0x1636 <vfprintf+0x30e>
    1622:	9d 2c       	mov	r9, r13
    1624:	9e 0c       	add	r9, r14
    1626:	91 1a       	sub	r9, r17
    1628:	1e 2d       	mov	r17, r14
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <vfprintf+0x30e>
    162c:	80 e2       	ldi	r24, 0x20	; 32
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	b3 01       	movw	r22, r6
    1632:	5e d0       	rcall	.+188    	; 0x16f0 <fputc>
    1634:	1f 5f       	subi	r17, 0xFF	; 255
    1636:	1e 15       	cp	r17, r14
    1638:	c8 f3       	brcs	.-14     	; 0x162c <vfprintf+0x304>
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <vfprintf+0x31c>
    163c:	1e 15       	cp	r17, r14
    163e:	10 f4       	brcc	.+4      	; 0x1644 <vfprintf+0x31c>
    1640:	e1 1a       	sub	r14, r17
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <vfprintf+0x31e>
    1644:	ee 24       	eor	r14, r14
    1646:	04 ff       	sbrs	r16, 4
    1648:	0e c0       	rjmp	.+28     	; 0x1666 <vfprintf+0x33e>
    164a:	80 e3       	ldi	r24, 0x30	; 48
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	b3 01       	movw	r22, r6
    1650:	4f d0       	rcall	.+158    	; 0x16f0 <fputc>
    1652:	02 ff       	sbrs	r16, 2
    1654:	1b c0       	rjmp	.+54     	; 0x168c <vfprintf+0x364>
    1656:	01 fd       	sbrc	r16, 1
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <vfprintf+0x338>
    165a:	88 e7       	ldi	r24, 0x78	; 120
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e c0       	rjmp	.+28     	; 0x167c <vfprintf+0x354>
    1660:	88 e5       	ldi	r24, 0x58	; 88
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0b c0       	rjmp	.+22     	; 0x167c <vfprintf+0x354>
    1666:	80 2f       	mov	r24, r16
    1668:	86 78       	andi	r24, 0x86	; 134
    166a:	81 f0       	breq	.+32     	; 0x168c <vfprintf+0x364>
    166c:	01 ff       	sbrs	r16, 1
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0x34c>
    1670:	8b e2       	ldi	r24, 0x2B	; 43
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <vfprintf+0x34e>
    1674:	80 e2       	ldi	r24, 0x20	; 32
    1676:	f7 fc       	sbrc	r15, 7
    1678:	8d e2       	ldi	r24, 0x2D	; 45
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	b3 01       	movw	r22, r6
    167e:	38 d0       	rcall	.+112    	; 0x16f0 <fputc>
    1680:	05 c0       	rjmp	.+10     	; 0x168c <vfprintf+0x364>
    1682:	80 e3       	ldi	r24, 0x30	; 48
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	b3 01       	movw	r22, r6
    1688:	33 d0       	rcall	.+102    	; 0x16f0 <fputc>
    168a:	9a 94       	dec	r9
    168c:	d9 14       	cp	r13, r9
    168e:	c8 f3       	brcs	.-14     	; 0x1682 <vfprintf+0x35a>
    1690:	da 94       	dec	r13
    1692:	f1 01       	movw	r30, r2
    1694:	ed 0d       	add	r30, r13
    1696:	f1 1d       	adc	r31, r1
    1698:	80 81       	ld	r24, Z
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	b3 01       	movw	r22, r6
    169e:	28 d0       	rcall	.+80     	; 0x16f0 <fputc>
    16a0:	dd 20       	and	r13, r13
    16a2:	b1 f7       	brne	.-20     	; 0x1690 <vfprintf+0x368>
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <vfprintf+0x388>
    16a6:	80 e2       	ldi	r24, 0x20	; 32
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	b3 01       	movw	r22, r6
    16ac:	21 d0       	rcall	.+66     	; 0x16f0 <fputc>
    16ae:	ea 94       	dec	r14
    16b0:	ee 20       	and	r14, r14
    16b2:	c9 f7       	brne	.-14     	; 0x16a6 <vfprintf+0x37e>
    16b4:	50 ce       	rjmp	.-864    	; 0x1356 <vfprintf+0x2e>
    16b6:	f3 01       	movw	r30, r6
    16b8:	66 81       	ldd	r22, Z+6	; 0x06
    16ba:	77 81       	ldd	r23, Z+7	; 0x07
    16bc:	cb 01       	movw	r24, r22
    16be:	2b 96       	adiw	r28, 0x0b	; 11
    16c0:	e2 e1       	ldi	r30, 0x12	; 18
    16c2:	bc c0       	rjmp	.+376    	; 0x183c <__epilogue_restores__>

000016c4 <strnlen_P>:
    16c4:	fc 01       	movw	r30, r24
    16c6:	05 90       	lpm	r0, Z+
    16c8:	61 50       	subi	r22, 0x01	; 1
    16ca:	70 40       	sbci	r23, 0x00	; 0
    16cc:	01 10       	cpse	r0, r1
    16ce:	d8 f7       	brcc	.-10     	; 0x16c6 <strnlen_P+0x2>
    16d0:	80 95       	com	r24
    16d2:	90 95       	com	r25
    16d4:	8e 0f       	add	r24, r30
    16d6:	9f 1f       	adc	r25, r31
    16d8:	08 95       	ret

000016da <strnlen>:
    16da:	fc 01       	movw	r30, r24
    16dc:	61 50       	subi	r22, 0x01	; 1
    16de:	70 40       	sbci	r23, 0x00	; 0
    16e0:	01 90       	ld	r0, Z+
    16e2:	01 10       	cpse	r0, r1
    16e4:	d8 f7       	brcc	.-10     	; 0x16dc <strnlen+0x2>
    16e6:	80 95       	com	r24
    16e8:	90 95       	com	r25
    16ea:	8e 0f       	add	r24, r30
    16ec:	9f 1f       	adc	r25, r31
    16ee:	08 95       	ret

000016f0 <fputc>:
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	8c 01       	movw	r16, r24
    16fa:	eb 01       	movw	r28, r22
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	81 ff       	sbrs	r24, 1
    1700:	1b c0       	rjmp	.+54     	; 0x1738 <fputc+0x48>
    1702:	82 ff       	sbrs	r24, 2
    1704:	0d c0       	rjmp	.+26     	; 0x1720 <fputc+0x30>
    1706:	2e 81       	ldd	r18, Y+6	; 0x06
    1708:	3f 81       	ldd	r19, Y+7	; 0x07
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	28 17       	cp	r18, r24
    1710:	39 07       	cpc	r19, r25
    1712:	64 f4       	brge	.+24     	; 0x172c <fputc+0x3c>
    1714:	e8 81       	ld	r30, Y
    1716:	f9 81       	ldd	r31, Y+1	; 0x01
    1718:	01 93       	st	Z+, r16
    171a:	f9 83       	std	Y+1, r31	; 0x01
    171c:	e8 83       	st	Y, r30
    171e:	06 c0       	rjmp	.+12     	; 0x172c <fputc+0x3c>
    1720:	e8 85       	ldd	r30, Y+8	; 0x08
    1722:	f9 85       	ldd	r31, Y+9	; 0x09
    1724:	80 2f       	mov	r24, r16
    1726:	09 95       	icall
    1728:	89 2b       	or	r24, r25
    172a:	31 f4       	brne	.+12     	; 0x1738 <fputc+0x48>
    172c:	8e 81       	ldd	r24, Y+6	; 0x06
    172e:	9f 81       	ldd	r25, Y+7	; 0x07
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	9f 83       	std	Y+7, r25	; 0x07
    1734:	8e 83       	std	Y+6, r24	; 0x06
    1736:	02 c0       	rjmp	.+4      	; 0x173c <fputc+0x4c>
    1738:	0f ef       	ldi	r16, 0xFF	; 255
    173a:	1f ef       	ldi	r17, 0xFF	; 255
    173c:	c8 01       	movw	r24, r16
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	08 95       	ret

00001748 <__ultoa_invert>:
    1748:	fa 01       	movw	r30, r20
    174a:	aa 27       	eor	r26, r26
    174c:	28 30       	cpi	r18, 0x08	; 8
    174e:	51 f1       	breq	.+84     	; 0x17a4 <__ultoa_invert+0x5c>
    1750:	20 31       	cpi	r18, 0x10	; 16
    1752:	81 f1       	breq	.+96     	; 0x17b4 <__ultoa_invert+0x6c>
    1754:	e8 94       	clt
    1756:	6f 93       	push	r22
    1758:	6e 7f       	andi	r22, 0xFE	; 254
    175a:	6e 5f       	subi	r22, 0xFE	; 254
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	8f 4f       	sbci	r24, 0xFF	; 255
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	af 4f       	sbci	r26, 0xFF	; 255
    1764:	b1 e0       	ldi	r27, 0x01	; 1
    1766:	3e d0       	rcall	.+124    	; 0x17e4 <__ultoa_invert+0x9c>
    1768:	b4 e0       	ldi	r27, 0x04	; 4
    176a:	3c d0       	rcall	.+120    	; 0x17e4 <__ultoa_invert+0x9c>
    176c:	67 0f       	add	r22, r23
    176e:	78 1f       	adc	r23, r24
    1770:	89 1f       	adc	r24, r25
    1772:	9a 1f       	adc	r25, r26
    1774:	a1 1d       	adc	r26, r1
    1776:	68 0f       	add	r22, r24
    1778:	79 1f       	adc	r23, r25
    177a:	8a 1f       	adc	r24, r26
    177c:	91 1d       	adc	r25, r1
    177e:	a1 1d       	adc	r26, r1
    1780:	6a 0f       	add	r22, r26
    1782:	71 1d       	adc	r23, r1
    1784:	81 1d       	adc	r24, r1
    1786:	91 1d       	adc	r25, r1
    1788:	a1 1d       	adc	r26, r1
    178a:	20 d0       	rcall	.+64     	; 0x17cc <__ultoa_invert+0x84>
    178c:	09 f4       	brne	.+2      	; 0x1790 <__ultoa_invert+0x48>
    178e:	68 94       	set
    1790:	3f 91       	pop	r19
    1792:	2a e0       	ldi	r18, 0x0A	; 10
    1794:	26 9f       	mul	r18, r22
    1796:	11 24       	eor	r1, r1
    1798:	30 19       	sub	r19, r0
    179a:	30 5d       	subi	r19, 0xD0	; 208
    179c:	31 93       	st	Z+, r19
    179e:	de f6       	brtc	.-74     	; 0x1756 <__ultoa_invert+0xe>
    17a0:	cf 01       	movw	r24, r30
    17a2:	08 95       	ret
    17a4:	46 2f       	mov	r20, r22
    17a6:	47 70       	andi	r20, 0x07	; 7
    17a8:	40 5d       	subi	r20, 0xD0	; 208
    17aa:	41 93       	st	Z+, r20
    17ac:	b3 e0       	ldi	r27, 0x03	; 3
    17ae:	0f d0       	rcall	.+30     	; 0x17ce <__ultoa_invert+0x86>
    17b0:	c9 f7       	brne	.-14     	; 0x17a4 <__ultoa_invert+0x5c>
    17b2:	f6 cf       	rjmp	.-20     	; 0x17a0 <__ultoa_invert+0x58>
    17b4:	46 2f       	mov	r20, r22
    17b6:	4f 70       	andi	r20, 0x0F	; 15
    17b8:	40 5d       	subi	r20, 0xD0	; 208
    17ba:	4a 33       	cpi	r20, 0x3A	; 58
    17bc:	18 f0       	brcs	.+6      	; 0x17c4 <__ultoa_invert+0x7c>
    17be:	49 5d       	subi	r20, 0xD9	; 217
    17c0:	31 fd       	sbrc	r19, 1
    17c2:	40 52       	subi	r20, 0x20	; 32
    17c4:	41 93       	st	Z+, r20
    17c6:	02 d0       	rcall	.+4      	; 0x17cc <__ultoa_invert+0x84>
    17c8:	a9 f7       	brne	.-22     	; 0x17b4 <__ultoa_invert+0x6c>
    17ca:	ea cf       	rjmp	.-44     	; 0x17a0 <__ultoa_invert+0x58>
    17cc:	b4 e0       	ldi	r27, 0x04	; 4
    17ce:	a6 95       	lsr	r26
    17d0:	97 95       	ror	r25
    17d2:	87 95       	ror	r24
    17d4:	77 95       	ror	r23
    17d6:	67 95       	ror	r22
    17d8:	ba 95       	dec	r27
    17da:	c9 f7       	brne	.-14     	; 0x17ce <__ultoa_invert+0x86>
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	61 05       	cpc	r22, r1
    17e0:	71 05       	cpc	r23, r1
    17e2:	08 95       	ret
    17e4:	9b 01       	movw	r18, r22
    17e6:	ac 01       	movw	r20, r24
    17e8:	0a 2e       	mov	r0, r26
    17ea:	06 94       	lsr	r0
    17ec:	57 95       	ror	r21
    17ee:	47 95       	ror	r20
    17f0:	37 95       	ror	r19
    17f2:	27 95       	ror	r18
    17f4:	ba 95       	dec	r27
    17f6:	c9 f7       	brne	.-14     	; 0x17ea <__ultoa_invert+0xa2>
    17f8:	62 0f       	add	r22, r18
    17fa:	73 1f       	adc	r23, r19
    17fc:	84 1f       	adc	r24, r20
    17fe:	95 1f       	adc	r25, r21
    1800:	a0 1d       	adc	r26, r0
    1802:	08 95       	ret

00001804 <__prologue_saves__>:
    1804:	2f 92       	push	r2
    1806:	3f 92       	push	r3
    1808:	4f 92       	push	r4
    180a:	5f 92       	push	r5
    180c:	6f 92       	push	r6
    180e:	7f 92       	push	r7
    1810:	8f 92       	push	r8
    1812:	9f 92       	push	r9
    1814:	af 92       	push	r10
    1816:	bf 92       	push	r11
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	ca 1b       	sub	r28, r26
    182e:	db 0b       	sbc	r29, r27
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	09 94       	ijmp

0000183c <__epilogue_restores__>:
    183c:	2a 88       	ldd	r2, Y+18	; 0x12
    183e:	39 88       	ldd	r3, Y+17	; 0x11
    1840:	48 88       	ldd	r4, Y+16	; 0x10
    1842:	5f 84       	ldd	r5, Y+15	; 0x0f
    1844:	6e 84       	ldd	r6, Y+14	; 0x0e
    1846:	7d 84       	ldd	r7, Y+13	; 0x0d
    1848:	8c 84       	ldd	r8, Y+12	; 0x0c
    184a:	9b 84       	ldd	r9, Y+11	; 0x0b
    184c:	aa 84       	ldd	r10, Y+10	; 0x0a
    184e:	b9 84       	ldd	r11, Y+9	; 0x09
    1850:	c8 84       	ldd	r12, Y+8	; 0x08
    1852:	df 80       	ldd	r13, Y+7	; 0x07
    1854:	ee 80       	ldd	r14, Y+6	; 0x06
    1856:	fd 80       	ldd	r15, Y+5	; 0x05
    1858:	0c 81       	ldd	r16, Y+4	; 0x04
    185a:	1b 81       	ldd	r17, Y+3	; 0x03
    185c:	aa 81       	ldd	r26, Y+2	; 0x02
    185e:	b9 81       	ldd	r27, Y+1	; 0x01
    1860:	ce 0f       	add	r28, r30
    1862:	d1 1d       	adc	r29, r1
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	ed 01       	movw	r28, r26
    1870:	08 95       	ret

00001872 <_exit>:
    1872:	f8 94       	cli

00001874 <__stop_program>:
    1874:	ff cf       	rjmp	.-2      	; 0x1874 <__stop_program>
