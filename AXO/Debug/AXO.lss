
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  0000123a  000012ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000123a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800156  00800156  00001324  2**0
                  ALLOC
  3 .debug_aranges 000000b0  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000012c  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000058a  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f2  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b28  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020a  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c5  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00003093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    //TODO: запретить прерывание INT1
    //TODO: включить непрерывное преобразование АЦП
    //TODO: 
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
       6:	00 00       	nop
       8:	0a c1       	rjmp	.+532    	; 0x21e <__vector_2>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c0       	rjmp	.+428    	; 0x1d2 <__vector_9>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	e8 c0       	rjmp	.+464    	; 0x20a <__vector_14>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__vector_21>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e3       	ldi	r30, 0x3A	; 58
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 35       	cpi	r26, 0x56	; 86
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a6 e5       	ldi	r26, 0x56	; 86
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 35       	cpi	r26, 0x5F	; 95
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	76 d3       	rcall	.+1772   	; 0x788 <main>
      9c:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){                                                      //TODO: должен будить процессор в режиме P-save
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	ef 92       	push	r14
      ae:	ff 92       	push	r15
      b0:	0f 93       	push	r16
      b2:	1f 93       	push	r17
      b4:	2f 93       	push	r18
      b6:	3f 93       	push	r19
      b8:	4f 93       	push	r20
      ba:	5f 93       	push	r21
      bc:	6f 93       	push	r22
      be:	7f 93       	push	r23
      c0:	8f 93       	push	r24
      c2:	9f 93       	push	r25
      c4:	af 93       	push	r26
      c6:	bf 93       	push	r27
      c8:	ef 93       	push	r30
      ca:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
      cc:	60 91 79 00 	lds	r22, 0x0079
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	66 0f       	add	r22, r22
      d4:	77 1f       	adc	r23, r23
      d6:	66 0f       	add	r22, r22
      d8:	77 1f       	adc	r23, r23
      da:	88 27       	eor	r24, r24
      dc:	77 fd       	sbrc	r23, 7
      de:	80 95       	com	r24
      e0:	98 2f       	mov	r25, r24
      e2:	92 d7       	rcall	.+3876   	; 0x1008 <__floatsisf>
      e4:	2c e5       	ldi	r18, 0x5C	; 92
      e6:	3f e8       	ldi	r19, 0x8F	; 143
      e8:	42 e4       	ldi	r20, 0x42	; 66
      ea:	5e e3       	ldi	r21, 0x3E	; 62
      ec:	0e 94 b8 08 	call	0x1170	; 0x1170 <__mulsf3>
      f0:	60 93 5b 01 	sts	0x015B, r22
      f4:	70 93 5c 01 	sts	0x015C, r23
      f8:	80 93 5d 01 	sts	0x015D, r24
      fc:	90 93 5e 01 	sts	0x015E, r25
    if (temperatureValue >= (targetTemp + Tolerance))
     100:	60 91 11 01 	lds	r22, 0x0111
     104:	70 91 12 01 	lds	r23, 0x0112
     108:	80 91 13 01 	lds	r24, 0x0113
     10c:	90 91 14 01 	lds	r25, 0x0114
     110:	20 91 56 01 	lds	r18, 0x0156
     114:	30 91 57 01 	lds	r19, 0x0157
     118:	40 91 58 01 	lds	r20, 0x0158
     11c:	50 91 59 01 	lds	r21, 0x0159
     120:	e0 90 5b 01 	lds	r14, 0x015B
     124:	f0 90 5c 01 	lds	r15, 0x015C
     128:	00 91 5d 01 	lds	r16, 0x015D
     12c:	10 91 5e 01 	lds	r17, 0x015E
     130:	68 d6       	rcall	.+3280   	; 0xe02 <__addsf3>
     132:	a8 01       	movw	r20, r16
     134:	97 01       	movw	r18, r14
     136:	c9 d6       	rcall	.+3474   	; 0xeca <__cmpsf2>
     138:	18 16       	cp	r1, r24
     13a:	94 f0       	brlt	.+36     	; 0x160 <__vector_21+0xbe>
volatile static uint8_t measureRate= 0x80; // поумолчанию - частота замера (F_CPU/1024)/2
uint8_t progFlags= 0b00000100;

inline static void turnOnCooler() 
{
    if(!BIT_READ(progFlags, COOLING))
     13c:	90 91 10 01 	lds	r25, 0x0110
     140:	89 2f       	mov	r24, r25
     142:	86 95       	lsr	r24
     144:	86 95       	lsr	r24
     146:	86 95       	lsr	r24
     148:	80 fd       	sbrc	r24, 0
     14a:	2e c0       	rjmp	.+92     	; 0x1a8 <__vector_21+0x106>
    {
	    BIT_ON(CONTROL_PORT, LOAD);
     14c:	eb e2       	ldi	r30, 0x2B	; 43
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 64       	ori	r24, 0x40	; 64
     154:	80 83       	st	Z, r24
        BIT_ON(progFlags, COOLING);
     156:	89 2f       	mov	r24, r25
     158:	88 60       	ori	r24, 0x08	; 8
     15a:	80 93 10 01 	sts	0x0110, r24
     15e:	24 c0       	rjmp	.+72     	; 0x1a8 <__vector_21+0x106>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));                           //TODO: убрать вычисление из обработчика
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
     160:	60 91 5b 01 	lds	r22, 0x015B
     164:	70 91 5c 01 	lds	r23, 0x015C
     168:	80 91 5d 01 	lds	r24, 0x015D
     16c:	90 91 5e 01 	lds	r25, 0x015E
     170:	20 91 11 01 	lds	r18, 0x0111
     174:	30 91 12 01 	lds	r19, 0x0112
     178:	40 91 13 01 	lds	r20, 0x0113
     17c:	50 91 14 01 	lds	r21, 0x0114
     180:	a4 d6       	rcall	.+3400   	; 0xeca <__cmpsf2>
     182:	18 16       	cp	r1, r24
     184:	8c f0       	brlt	.+34     	; 0x1a8 <__vector_21+0x106>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_READ(progFlags, COOLING))
     186:	90 91 10 01 	lds	r25, 0x0110
     18a:	89 2f       	mov	r24, r25
     18c:	86 95       	lsr	r24
     18e:	86 95       	lsr	r24
     190:	86 95       	lsr	r24
     192:	80 ff       	sbrs	r24, 0
     194:	09 c0       	rjmp	.+18     	; 0x1a8 <__vector_21+0x106>
    {
	    BIT_OFF(CONTROL_PORT, LOAD);
     196:	eb e2       	ldi	r30, 0x2B	; 43
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	8f 7b       	andi	r24, 0xBF	; 191
     19e:	80 83       	st	Z, r24
        BIT_OFF(progFlags, COOLING);
     1a0:	89 2f       	mov	r24, r25
     1a2:	87 7f       	andi	r24, 0xF7	; 247
     1a4:	80 93 10 01 	sts	0x0110, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
     1a8:	ff 91       	pop	r31
     1aa:	ef 91       	pop	r30
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	0f 90       	pop	r0
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	0f 90       	pop	r0
     1ce:	1f 90       	pop	r1
     1d0:	18 95       	reti

000001d2 <__vector_9>:

ISR(TIMER2_OVF_vect){                                               //TODO: должен будить процессор в режиме P-save
     1d2:	1f 92       	push	r1
     1d4:	0f 92       	push	r0
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	0f 92       	push	r0
     1da:	11 24       	eor	r1, r1
     1dc:	8f 93       	push	r24
    runSeconds++;
     1de:	80 91 5a 01 	lds	r24, 0x015A
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	80 93 5a 01 	sts	0x015A, r24
    if (runSeconds==timeOut)
     1e8:	80 91 5a 01 	lds	r24, 0x015A
     1ec:	8a 30       	cpi	r24, 0x0A	; 10
     1ee:	39 f4       	brne	.+14     	; 0x1fe <__vector_9+0x2c>
    {
        runSeconds= 0; // сбрасываем счетчик секунд
     1f0:	10 92 5a 01 	sts	0x015A, r1
        BIT_ON(progFlags, INACTIVE);
     1f4:	80 91 10 01 	lds	r24, 0x0110
     1f8:	80 61       	ori	r24, 0x10	; 16
     1fa:	80 93 10 01 	sts	0x0110, r24
    }
    return;
}
     1fe:	8f 91       	pop	r24
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <__vector_14>:

ISR(TIMER0_COMPA_vect){                                             //TODO: должен будить процессор в режиме P-save
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
    
    return;
}
     214:	0f 90       	pop	r0
     216:	0f be       	out	0x3f, r0	; 63
     218:	0f 90       	pop	r0
     21a:	1f 90       	pop	r1
     21c:	18 95       	reti

0000021e <__vector_2>:

ISR(INT1_vect){                                                     //TODO: должен будить процессор в режиме P-save
     21e:	1f 92       	push	r1
     220:	0f 92       	push	r0
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	0f 92       	push	r0
     226:	11 24       	eor	r1, r1
     228:	2f 93       	push	r18
     22a:	3f 93       	push	r19
     22c:	4f 93       	push	r20
     22e:	5f 93       	push	r21
     230:	6f 93       	push	r22
     232:	7f 93       	push	r23
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	af 93       	push	r26
     23a:	bf 93       	push	r27
     23c:	ef 93       	push	r30
     23e:	ff 93       	push	r31
    turnOffSleep();
    BIT_ON(progFlags, LCD_ON);
     240:	80 91 10 01 	lds	r24, 0x0110
     244:	81 60       	ori	r24, 0x01	; 1
     246:	80 93 10 01 	sts	0x0110, r24
    LCD_turnOn();
     24a:	6a d5       	rcall	.+2772   	; 0xd20 <LCD_turnOn>
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	7f 91       	pop	r23
     25a:	6f 91       	pop	r22
     25c:	5f 91       	pop	r21
     25e:	4f 91       	pop	r20
     260:	3f 91       	pop	r19
     262:	2f 91       	pop	r18
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <LCD_DisplayAll>:
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}

void LCD_DisplayAll()
{   
     26e:	ef 92       	push	r14
     270:	ff 92       	push	r15
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
	LCD_Write("TEMP :", 6, 0, 0);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	66 e0       	ldi	r22, 0x06	; 6
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	ab d4       	rcall	.+2390   	; 0xbd8 <LCD_Write>
    LCD_Write((char)temperatureValue, 1, 0, 8);
     282:	60 91 5b 01 	lds	r22, 0x015B
     286:	70 91 5c 01 	lds	r23, 0x015C
     28a:	80 91 5d 01 	lds	r24, 0x015D
     28e:	90 91 5e 01 	lds	r25, 0x015E
     292:	8c d6       	rcall	.+3352   	; 0xfac <__fixunssfsi>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	61 e0       	ldi	r22, 0x01	; 1
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	28 e0       	ldi	r18, 0x08	; 8
     2a0:	9b d4       	rcall	.+2358   	; 0xbd8 <LCD_Write>
    if (BIT_READ(progFlags, COOLING))
     2a2:	80 91 10 01 	lds	r24, 0x0110
     2a6:	86 95       	lsr	r24
     2a8:	86 95       	lsr	r24
     2aa:	86 95       	lsr	r24
     2ac:	80 ff       	sbrs	r24, 0
     2ae:	2d c0       	rjmp	.+90     	; 0x30a <LCD_DisplayAll+0x9c>
    {
        LCD_Write("COOLING ", 8, 1, 0);
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	68 e0       	ldi	r22, 0x08	; 8
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	8e d4       	rcall	.+2332   	; 0xbd8 <LCD_Write>
        LCD_Write((char)((temperatureValue - targetTemp)/Tolerance)*100, 1, 1, 8);
     2bc:	60 91 5b 01 	lds	r22, 0x015B
     2c0:	70 91 5c 01 	lds	r23, 0x015C
     2c4:	80 91 5d 01 	lds	r24, 0x015D
     2c8:	90 91 5e 01 	lds	r25, 0x015E
     2cc:	20 91 11 01 	lds	r18, 0x0111
     2d0:	30 91 12 01 	lds	r19, 0x0112
     2d4:	40 91 13 01 	lds	r20, 0x0113
     2d8:	50 91 14 01 	lds	r21, 0x0114
     2dc:	e0 90 56 01 	lds	r14, 0x0156
     2e0:	f0 90 57 01 	lds	r15, 0x0157
     2e4:	00 91 58 01 	lds	r16, 0x0158
     2e8:	10 91 59 01 	lds	r17, 0x0159
     2ec:	89 d5       	rcall	.+2834   	; 0xe00 <__subsf3>
     2ee:	a8 01       	movw	r20, r16
     2f0:	97 01       	movw	r18, r14
     2f2:	ef d5       	rcall	.+3038   	; 0xed2 <__divsf3>
     2f4:	5b d6       	rcall	.+3254   	; 0xfac <__fixunssfsi>
     2f6:	9b 01       	movw	r18, r22
     2f8:	ac 01       	movw	r20, r24
     2fa:	84 e6       	ldi	r24, 0x64	; 100
     2fc:	28 9f       	mul	r18, r24
     2fe:	c0 01       	movw	r24, r0
     300:	11 24       	eor	r1, r1
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	41 e0       	ldi	r20, 0x01	; 1
     306:	28 e0       	ldi	r18, 0x08	; 8
     308:	67 d4       	rcall	.+2254   	; 0xbd8 <LCD_Write>
    }
}
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	08 95       	ret

00000314 <menuRun>:

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()

{
     314:	2f 92       	push	r2
     316:	3f 92       	push	r3
     318:	4f 92       	push	r4
     31a:	5f 92       	push	r5
     31c:	6f 92       	push	r6
     31e:	7f 92       	push	r7
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	c9 54       	subi	r28, 0x49	; 73
     33e:	d0 40       	sbci	r29, 0x00	; 0
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
     34a:	de 01       	movw	r26, r28
     34c:	11 96       	adiw	r26, 0x01	; 1
     34e:	e6 e1       	ldi	r30, 0x16	; 22
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	80 e4       	ldi	r24, 0x40	; 64
     354:	01 90       	ld	r0, Z+
     356:	0d 92       	st	X+, r0
     358:	81 50       	subi	r24, 0x01	; 1
     35a:	e1 f7       	brne	.-8      	; 0x354 <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
     35c:	60 91 11 01 	lds	r22, 0x0111
     360:	70 91 12 01 	lds	r23, 0x0112
     364:	80 91 13 01 	lds	r24, 0x0113
     368:	90 91 14 01 	lds	r25, 0x0114
     36c:	c0 90 56 01 	lds	r12, 0x0156
     370:	d0 90 57 01 	lds	r13, 0x0157
     374:	e0 90 58 01 	lds	r14, 0x0158
     378:	f0 90 59 01 	lds	r15, 0x0159
     37c:	b0 90 15 01 	lds	r11, 0x0115
     380:	00 91 10 01 	lds	r16, 0x0110
     384:	06 95       	lsr	r16
     386:	06 95       	lsr	r16
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	01 70       	andi	r16, 0x01	; 1
     38c:	10 70       	andi	r17, 0x00	; 0
     38e:	09 d6       	rcall	.+3090   	; 0xfa2 <__fixsfsi>
     390:	fe 01       	movw	r30, r28
     392:	ef 5b       	subi	r30, 0xBF	; 191
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	71 83       	std	Z+1, r23	; 0x01
     398:	60 83       	st	Z, r22
     39a:	c7 01       	movw	r24, r14
     39c:	b6 01       	movw	r22, r12
     39e:	01 d6       	rcall	.+3074   	; 0xfa2 <__fixsfsi>
     3a0:	fe 01       	movw	r30, r28
     3a2:	ed 5b       	subi	r30, 0xBD	; 189
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	71 83       	std	Z+1, r23	; 0x01
     3a8:	60 83       	st	Z, r22
     3aa:	fe 01       	movw	r30, r28
     3ac:	eb 5b       	subi	r30, 0xBB	; 187
     3ae:	ff 4f       	sbci	r31, 0xFF	; 255
     3b0:	b0 82       	st	Z, r11
     3b2:	11 82       	std	Z+1, r1	; 0x01
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5b       	subi	r30, 0xB9	; 185
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	11 83       	std	Z+1, r17	; 0x01
     3bc:	00 83       	st	Z, r16
    LCD_Clear();
     3be:	d5 d2       	rcall	.+1450   	; 0x96a <LCD_Clear>
     3c0:	cc 24       	eor	r12, r12
     3c2:	dd 24       	eor	r13, r13
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     3c4:	0f 2e       	mov	r0, r31
     3c6:	fb e2       	ldi	r31, 0x2B	; 43
     3c8:	af 2e       	mov	r10, r31
     3ca:	bb 24       	eor	r11, r11
     3cc:	f0 2d       	mov	r31, r0
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
     3ce:	0f 2e       	mov	r0, r31
     3d0:	f1 e4       	ldi	r31, 0x41	; 65
     3d2:	4f 2e       	mov	r4, r31
     3d4:	55 24       	eor	r5, r5
     3d6:	f0 2d       	mov	r31, r0
     3d8:	4c 0e       	add	r4, r28
     3da:	5d 1e       	adc	r5, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	68 2e       	mov	r6, r24
     3e2:	2a 96       	adiw	r28, 0x0a	; 10
     3e4:	9f af       	std	Y+63, r25	; 0x3f
     3e6:	2a 97       	sbiw	r28, 0x0a	; 10
     3e8:	a7 c1       	rjmp	.+846    	; 0x738 <__stack+0x239>
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
     3ea:	f5 01       	movw	r30, r10
     3ec:	80 81       	ld	r24, Z
     3ee:	83 fd       	sbrc	r24, 3
     3f0:	52 c1       	rjmp	.+676    	; 0x696 <__stack+0x197>
            BIT_OFF(progFlags, INACTIVE);
     3f2:	0f 2e       	mov	r0, r31
     3f4:	ff ee       	ldi	r31, 0xEF	; 239
     3f6:	7f 2e       	mov	r7, r31
     3f8:	f0 2d       	mov	r31, r0
     3fa:	79 22       	and	r7, r25
     3fc:	70 92 10 01 	sts	0x0110, r7
            int value= values[pos];
     400:	c6 01       	movw	r24, r12
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	f2 01       	movw	r30, r4
     408:	e8 0f       	add	r30, r24
     40a:	f9 1f       	adc	r31, r25
     40c:	20 80       	ld	r2, Z
     40e:	31 80       	ldd	r3, Z+1	; 0x01
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     410:	4f 01       	movw	r8, r30
     412:	3b c1       	rjmp	.+630    	; 0x68a <__stack+0x18b>
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     414:	f5 01       	movw	r30, r10
     416:	80 81       	ld	r24, Z
     418:	85 fd       	sbrc	r24, 5
     41a:	8a c0       	rjmp	.+276    	; 0x530 <__stack+0x31>
                {
                    BIT_OFF(progFlags, INACTIVE);
     41c:	ff ee       	ldi	r31, 0xEF	; 239
     41e:	7f 22       	and	r7, r31
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     420:	f4 01       	movw	r30, r8
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	9c 01       	movw	r18, r24
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     42c:	f2 e0       	ldi	r31, 0x02	; 2
     42e:	cf 16       	cp	r12, r31
     430:	d1 04       	cpc	r13, r1
     432:	c1 f1       	breq	.+112    	; 0x4a4 <menuRun+0x190>
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	c8 16       	cp	r12, r24
     438:	d1 04       	cpc	r13, r1
     43a:	34 f4       	brge	.+12     	; 0x448 <menuRun+0x134>
     43c:	e1 e0       	ldi	r30, 0x01	; 1
     43e:	ce 16       	cp	r12, r30
     440:	d1 04       	cpc	r13, r1
     442:	09 f0       	breq	.+2      	; 0x446 <menuRun+0x132>
     444:	6c c0       	rjmp	.+216    	; 0x51e <__stack+0x1f>
     446:	0b c0       	rjmp	.+22     	; 0x45e <menuRun+0x14a>
     448:	f3 e0       	ldi	r31, 0x03	; 3
     44a:	cf 16       	cp	r12, r31
     44c:	d1 04       	cpc	r13, r1
     44e:	09 f4       	brne	.+2      	; 0x452 <menuRun+0x13e>
     450:	49 c0       	rjmp	.+146    	; 0x4e4 <menuRun+0x1d0>
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	c8 16       	cp	r12, r24
     456:	d1 04       	cpc	r13, r1
     458:	09 f0       	breq	.+2      	; 0x45c <menuRun+0x148>
     45a:	61 c0       	rjmp	.+194    	; 0x51e <__stack+0x1f>
     45c:	4d c0       	rjmp	.+154    	; 0x4f8 <menuRun+0x1e4>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     45e:	b9 01       	movw	r22, r18
     460:	88 27       	eor	r24, r24
     462:	77 fd       	sbrc	r23, 7
     464:	80 95       	com	r24
     466:	98 2f       	mov	r25, r24
     468:	cf d5       	rcall	.+2974   	; 0x1008 <__floatsisf>
     46a:	7b 01       	movw	r14, r22
     46c:	8c 01       	movw	r16, r24
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e7       	ldi	r20, 0x70	; 112
     474:	51 e4       	ldi	r21, 0x41	; 65
     476:	29 d5       	rcall	.+2642   	; 0xeca <__cmpsf2>
     478:	88 23       	and	r24, r24
     47a:	1c f4       	brge	.+6      	; 0x482 <menuRun+0x16e>
     47c:	8f e0       	ldi	r24, 0x0F	; 15
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	54 c0       	rjmp	.+168    	; 0x52a <__stack+0x2b>
     482:	c8 01       	movw	r24, r16
     484:	b7 01       	movw	r22, r14
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 ea       	ldi	r20, 0xA0	; 160
     48c:	51 e4       	ldi	r21, 0x41	; 65
     48e:	6c d6       	rcall	.+3288   	; 0x1168 <__gesf2>
     490:	18 16       	cp	r1, r24
     492:	1c f4       	brge	.+6      	; 0x49a <menuRun+0x186>
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	48 c0       	rjmp	.+144    	; 0x52a <__stack+0x2b>
     49a:	c8 01       	movw	r24, r16
     49c:	b7 01       	movw	r22, r14
     49e:	81 d5       	rcall	.+2818   	; 0xfa2 <__fixsfsi>
     4a0:	cb 01       	movw	r24, r22
     4a2:	43 c0       	rjmp	.+134    	; 0x52a <__stack+0x2b>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     4a4:	b9 01       	movw	r22, r18
     4a6:	88 27       	eor	r24, r24
     4a8:	77 fd       	sbrc	r23, 7
     4aa:	80 95       	com	r24
     4ac:	98 2f       	mov	r25, r24
     4ae:	ac d5       	rcall	.+2904   	; 0x1008 <__floatsisf>
     4b0:	7b 01       	movw	r14, r22
     4b2:	8c 01       	movw	r16, r24
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	06 d5       	rcall	.+2572   	; 0xeca <__cmpsf2>
     4be:	88 23       	and	r24, r24
     4c0:	84 f1       	brlt	.+96     	; 0x522 <__stack+0x23>
     4c2:	c8 01       	movw	r24, r16
     4c4:	b7 01       	movw	r22, r14
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e8       	ldi	r20, 0x80	; 128
     4cc:	5f e3       	ldi	r21, 0x3F	; 63
     4ce:	4c d6       	rcall	.+3224   	; 0x1168 <__gesf2>
     4d0:	18 16       	cp	r1, r24
     4d2:	1c f4       	brge	.+6      	; 0x4da <menuRun+0x1c6>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	28 c0       	rjmp	.+80     	; 0x52a <__stack+0x2b>
     4da:	c8 01       	movw	r24, r16
     4dc:	b7 01       	movw	r22, r14
     4de:	61 d5       	rcall	.+2754   	; 0xfa2 <__fixsfsi>
     4e0:	cb 01       	movw	r24, r22
     4e2:	23 c0       	rjmp	.+70     	; 0x52a <__stack+0x2b>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     4e4:	33 23       	and	r19, r19
     4e6:	1c f4       	brge	.+6      	; 0x4ee <menuRun+0x1da>
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	1e c0       	rjmp	.+60     	; 0x52a <__stack+0x2b>
     4ee:	e4 e0       	ldi	r30, 0x04	; 4
     4f0:	20 30       	cpi	r18, 0x00	; 0
     4f2:	3e 07       	cpc	r19, r30
     4f4:	a4 f0       	brlt	.+40     	; 0x51e <__stack+0x1f>
     4f6:	15 c0       	rjmp	.+42     	; 0x522 <__stack+0x23>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     4f8:	c9 01       	movw	r24, r18
     4fa:	52 2f       	mov	r21, r18
     4fc:	49 2f       	mov	r20, r25
     4fe:	12 16       	cp	r1, r18
     500:	13 06       	cpc	r1, r19
     502:	24 f4       	brge	.+8      	; 0x50c <__stack+0xd>
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	58 2f       	mov	r21, r24
     50a:	49 2f       	mov	r20, r25
     50c:	85 2f       	mov	r24, r21
     50e:	94 2f       	mov	r25, r20
     510:	99 23       	and	r25, r25
     512:	5c f4       	brge	.+22     	; 0x52a <__stack+0x2b>
     514:	86 2d       	mov	r24, r6
     516:	2a 96       	adiw	r28, 0x0a	; 10
     518:	9f ad       	ldd	r25, Y+63	; 0x3f
     51a:	2a 97       	sbiw	r28, 0x0a	; 10
     51c:	06 c0       	rjmp	.+12     	; 0x52a <__stack+0x2b>
     51e:	c9 01       	movw	r24, r18
     520:	04 c0       	rjmp	.+8      	; 0x52a <__stack+0x2b>
     522:	86 2d       	mov	r24, r6
     524:	2a 96       	adiw	r28, 0x0a	; 10
     526:	9f ad       	ldd	r25, Y+63	; 0x3f
     528:	2a 97       	sbiw	r28, 0x0a	; 10
                //LCD_Write(values[pos],1,0);
                if (!BIT_READ(CONTROL_PORT, BUTTON_P))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     52a:	f4 01       	movw	r30, r8
     52c:	91 83       	std	Z+1, r25	; 0x01
     52e:	80 83       	st	Z, r24
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     530:	f5 01       	movw	r30, r10
     532:	80 81       	ld	r24, Z
     534:	84 fd       	sbrc	r24, 4
     536:	8a c0       	rjmp	.+276    	; 0x64c <__stack+0x14d>
                {
                    BIT_OFF(progFlags, INACTIVE);
     538:	ff ee       	ldi	r31, 0xEF	; 239
     53a:	7f 22       	and	r7, r31
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     53c:	f4 01       	movw	r30, r8
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	9c 01       	movw	r18, r24
     544:	21 50       	subi	r18, 0x01	; 1
     546:	30 40       	sbci	r19, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     548:	f2 e0       	ldi	r31, 0x02	; 2
     54a:	cf 16       	cp	r12, r31
     54c:	d1 04       	cpc	r13, r1
     54e:	c1 f1       	breq	.+112    	; 0x5c0 <__stack+0xc1>
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	c8 16       	cp	r12, r24
     554:	d1 04       	cpc	r13, r1
     556:	34 f4       	brge	.+12     	; 0x564 <__stack+0x65>
     558:	e1 e0       	ldi	r30, 0x01	; 1
     55a:	ce 16       	cp	r12, r30
     55c:	d1 04       	cpc	r13, r1
     55e:	09 f0       	breq	.+2      	; 0x562 <__stack+0x63>
     560:	6c c0       	rjmp	.+216    	; 0x63a <__stack+0x13b>
     562:	0b c0       	rjmp	.+22     	; 0x57a <__stack+0x7b>
     564:	f3 e0       	ldi	r31, 0x03	; 3
     566:	cf 16       	cp	r12, r31
     568:	d1 04       	cpc	r13, r1
     56a:	09 f4       	brne	.+2      	; 0x56e <__stack+0x6f>
     56c:	49 c0       	rjmp	.+146    	; 0x600 <__stack+0x101>
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	c8 16       	cp	r12, r24
     572:	d1 04       	cpc	r13, r1
     574:	09 f0       	breq	.+2      	; 0x578 <__stack+0x79>
     576:	61 c0       	rjmp	.+194    	; 0x63a <__stack+0x13b>
     578:	4d c0       	rjmp	.+154    	; 0x614 <__stack+0x115>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     57a:	b9 01       	movw	r22, r18
     57c:	88 27       	eor	r24, r24
     57e:	77 fd       	sbrc	r23, 7
     580:	80 95       	com	r24
     582:	98 2f       	mov	r25, r24
     584:	41 d5       	rcall	.+2690   	; 0x1008 <__floatsisf>
     586:	7b 01       	movw	r14, r22
     588:	8c 01       	movw	r16, r24
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e7       	ldi	r20, 0x70	; 112
     590:	51 e4       	ldi	r21, 0x41	; 65
     592:	9b d4       	rcall	.+2358   	; 0xeca <__cmpsf2>
     594:	88 23       	and	r24, r24
     596:	1c f4       	brge	.+6      	; 0x59e <__stack+0x9f>
     598:	8f e0       	ldi	r24, 0x0F	; 15
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	54 c0       	rjmp	.+168    	; 0x646 <__stack+0x147>
     59e:	c8 01       	movw	r24, r16
     5a0:	b7 01       	movw	r22, r14
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	40 ea       	ldi	r20, 0xA0	; 160
     5a8:	51 e4       	ldi	r21, 0x41	; 65
     5aa:	de d5       	rcall	.+3004   	; 0x1168 <__gesf2>
     5ac:	18 16       	cp	r1, r24
     5ae:	1c f4       	brge	.+6      	; 0x5b6 <__stack+0xb7>
     5b0:	84 e1       	ldi	r24, 0x14	; 20
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	48 c0       	rjmp	.+144    	; 0x646 <__stack+0x147>
     5b6:	c8 01       	movw	r24, r16
     5b8:	b7 01       	movw	r22, r14
     5ba:	f3 d4       	rcall	.+2534   	; 0xfa2 <__fixsfsi>
     5bc:	cb 01       	movw	r24, r22
     5be:	43 c0       	rjmp	.+134    	; 0x646 <__stack+0x147>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     5c0:	b9 01       	movw	r22, r18
     5c2:	88 27       	eor	r24, r24
     5c4:	77 fd       	sbrc	r23, 7
     5c6:	80 95       	com	r24
     5c8:	98 2f       	mov	r25, r24
     5ca:	1e d5       	rcall	.+2620   	; 0x1008 <__floatsisf>
     5cc:	7b 01       	movw	r14, r22
     5ce:	8c 01       	movw	r16, r24
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	78 d4       	rcall	.+2288   	; 0xeca <__cmpsf2>
     5da:	88 23       	and	r24, r24
     5dc:	84 f1       	brlt	.+96     	; 0x63e <__stack+0x13f>
     5de:	c8 01       	movw	r24, r16
     5e0:	b7 01       	movw	r22, r14
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e8       	ldi	r20, 0x80	; 128
     5e8:	5f e3       	ldi	r21, 0x3F	; 63
     5ea:	be d5       	rcall	.+2940   	; 0x1168 <__gesf2>
     5ec:	18 16       	cp	r1, r24
     5ee:	1c f4       	brge	.+6      	; 0x5f6 <__stack+0xf7>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	28 c0       	rjmp	.+80     	; 0x646 <__stack+0x147>
     5f6:	c8 01       	movw	r24, r16
     5f8:	b7 01       	movw	r22, r14
     5fa:	d3 d4       	rcall	.+2470   	; 0xfa2 <__fixsfsi>
     5fc:	cb 01       	movw	r24, r22
     5fe:	23 c0       	rjmp	.+70     	; 0x646 <__stack+0x147>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     600:	33 23       	and	r19, r19
     602:	1c f4       	brge	.+6      	; 0x60a <__stack+0x10b>
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	1e c0       	rjmp	.+60     	; 0x646 <__stack+0x147>
     60a:	e4 e0       	ldi	r30, 0x04	; 4
     60c:	20 30       	cpi	r18, 0x00	; 0
     60e:	3e 07       	cpc	r19, r30
     610:	a4 f0       	brlt	.+40     	; 0x63a <__stack+0x13b>
     612:	15 c0       	rjmp	.+42     	; 0x63e <__stack+0x13f>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     614:	c9 01       	movw	r24, r18
     616:	52 2f       	mov	r21, r18
     618:	49 2f       	mov	r20, r25
     61a:	12 16       	cp	r1, r18
     61c:	13 06       	cpc	r1, r19
     61e:	24 f4       	brge	.+8      	; 0x628 <__stack+0x129>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	58 2f       	mov	r21, r24
     626:	49 2f       	mov	r20, r25
     628:	85 2f       	mov	r24, r21
     62a:	94 2f       	mov	r25, r20
     62c:	99 23       	and	r25, r25
     62e:	5c f4       	brge	.+22     	; 0x646 <__stack+0x147>
     630:	86 2d       	mov	r24, r6
     632:	2a 96       	adiw	r28, 0x0a	; 10
     634:	9f ad       	ldd	r25, Y+63	; 0x3f
     636:	2a 97       	sbiw	r28, 0x0a	; 10
     638:	06 c0       	rjmp	.+12     	; 0x646 <__stack+0x147>
     63a:	c9 01       	movw	r24, r18
     63c:	04 c0       	rjmp	.+8      	; 0x646 <__stack+0x147>
     63e:	86 2d       	mov	r24, r6
     640:	2a 96       	adiw	r28, 0x0a	; 10
     642:	9f ad       	ldd	r25, Y+63	; 0x3f
     644:	2a 97       	sbiw	r28, 0x0a	; 10
                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_M))
                {
                    BIT_OFF(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     646:	f4 01       	movw	r30, r8
     648:	91 83       	std	Z+1, r25	; 0x01
     64a:	80 83       	st	Z, r24

                }
                if (!BIT_READ(CONTROL_PORT, BUTTON_OK)) {
     64c:	f5 01       	movw	r30, r10
     64e:	80 81       	ld	r24, Z
     650:	83 fd       	sbrc	r24, 3
     652:	1b c0       	rjmp	.+54     	; 0x68a <__stack+0x18b>
     654:	70 92 10 01 	sts	0x0110, r7
                    if(pos!=3){
     658:	f3 e0       	ldi	r31, 0x03	; 3
     65a:	cf 16       	cp	r12, r31
     65c:	d1 04       	cpc	r13, r1
     65e:	49 f0       	breq	.+18     	; 0x672 <__stack+0x173>
                        values[pos]= (uint8_t)value;
     660:	c6 01       	movw	r24, r12
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	f2 01       	movw	r30, r4
     668:	e8 0f       	add	r30, r24
     66a:	f9 1f       	adc	r31, r25
     66c:	20 82       	st	Z, r2
     66e:	11 82       	std	Z+1, r1	; 0x01
     670:	12 c0       	rjmp	.+36     	; 0x696 <__stack+0x197>
                        break;
                    }
                    else{
                        BIT_WRITE(progFlags, ECONOMY, value);
     672:	23 28       	or	r2, r3
     674:	29 f0       	breq	.+10     	; 0x680 <__stack+0x181>
     676:	87 2d       	mov	r24, r7
     678:	84 60       	ori	r24, 0x04	; 4
     67a:	80 93 10 01 	sts	0x0110, r24
     67e:	0b c0       	rjmp	.+22     	; 0x696 <__stack+0x197>
     680:	87 2d       	mov	r24, r7
     682:	8b 7f       	andi	r24, 0xFB	; 251
     684:	80 93 10 01 	sts	0x0110, r24
     688:	06 c0       	rjmp	.+12     	; 0x696 <__stack+0x197>
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_READ(CONTROL_PORT, BUTTON_OK)){
            BIT_OFF(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     68a:	f5 01       	movw	r30, r10
     68c:	80 81       	ld	r24, Z
     68e:	82 ff       	sbrs	r24, 2
     690:	c1 ce       	rjmp	.-638    	; 0x414 <menuRun+0x100>
     692:	70 92 10 01 	sts	0x0110, r7
                        break;
                    }          
                }                  
            }
        }
        LCD_Write(menu[pos],16,0,0);
     696:	c6 01       	movw	r24, r12
     698:	82 95       	swap	r24
     69a:	92 95       	swap	r25
     69c:	90 7f       	andi	r25, 0xF0	; 240
     69e:	98 27       	eor	r25, r24
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	98 27       	eor	r25, r24
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	2c 0f       	add	r18, r28
     6aa:	3d 1f       	adc	r19, r29
     6ac:	82 0f       	add	r24, r18
     6ae:	93 1f       	adc	r25, r19
     6b0:	60 e1       	ldi	r22, 0x10	; 16
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	90 d2       	rcall	.+1312   	; 0xbd8 <LCD_Write>
        LCD_Write(values[pos],1,1,0);
     6b8:	c6 01       	movw	r24, r12
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	f2 01       	movw	r30, r4
     6c0:	e8 0f       	add	r30, r24
     6c2:	f9 1f       	adc	r31, r25
     6c4:	80 81       	ld	r24, Z
     6c6:	91 81       	ldd	r25, Z+1	; 0x01
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	84 d2       	rcall	.+1288   	; 0xbd8 <LCD_Write>
        if (!BIT_READ(CONTROL_PORT, BUTTON_P))
     6d0:	f5 01       	movw	r30, r10
     6d2:	80 81       	ld	r24, Z
     6d4:	85 fd       	sbrc	r24, 5
     6d6:	16 c0       	rjmp	.+44     	; 0x704 <__stack+0x205>
        {
            BIT_OFF(progFlags, INACTIVE);
     6d8:	80 91 10 01 	lds	r24, 0x0110
     6dc:	8f 7e       	andi	r24, 0xEF	; 239
     6de:	80 93 10 01 	sts	0x0110, r24
            pos++;
     6e2:	08 94       	sec
     6e4:	c1 1c       	adc	r12, r1
     6e6:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     6e8:	dd 20       	and	r13, r13
     6ea:	34 f4       	brge	.+12     	; 0x6f8 <__stack+0x1f9>
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f3 e0       	ldi	r31, 0x03	; 3
     6f0:	cf 2e       	mov	r12, r31
     6f2:	dd 24       	eor	r13, r13
     6f4:	f0 2d       	mov	r31, r0
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <__stack+0x205>
     6f8:	f4 e0       	ldi	r31, 0x04	; 4
     6fa:	cf 16       	cp	r12, r31
     6fc:	d1 04       	cpc	r13, r1
     6fe:	14 f0       	brlt	.+4      	; 0x704 <__stack+0x205>
     700:	cc 24       	eor	r12, r12
     702:	dd 24       	eor	r13, r13
        }
        if (!BIT_READ(CONTROL_PORT, BUTTON_M))
     704:	f5 01       	movw	r30, r10
     706:	80 81       	ld	r24, Z
     708:	84 fd       	sbrc	r24, 4
     70a:	16 c0       	rjmp	.+44     	; 0x738 <__stack+0x239>
        {
            BIT_OFF(progFlags, INACTIVE);
     70c:	80 91 10 01 	lds	r24, 0x0110
     710:	8f 7e       	andi	r24, 0xEF	; 239
     712:	80 93 10 01 	sts	0x0110, r24
            pos--;
     716:	08 94       	sec
     718:	c1 08       	sbc	r12, r1
     71a:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     71c:	dd 20       	and	r13, r13
     71e:	34 f4       	brge	.+12     	; 0x72c <__stack+0x22d>
     720:	0f 2e       	mov	r0, r31
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	cf 2e       	mov	r12, r31
     726:	dd 24       	eor	r13, r13
     728:	f0 2d       	mov	r31, r0
     72a:	06 c0       	rjmp	.+12     	; 0x738 <__stack+0x239>
     72c:	f4 e0       	ldi	r31, 0x04	; 4
     72e:	cf 16       	cp	r12, r31
     730:	d1 04       	cpc	r13, r1
     732:	14 f0       	brlt	.+4      	; 0x738 <__stack+0x239>
     734:	cc 24       	eor	r12, r12
     736:	dd 24       	eor	r13, r13
{
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_READ(progFlags, ECONOMY))};
    LCD_Clear();
    while ((BIT_READ(progFlags, INACTIVE))||(!BIT_READ(CONTROL_PORT, BUTTON_BACK))){
     738:	90 91 10 01 	lds	r25, 0x0110
     73c:	94 fd       	sbrc	r25, 4
     73e:	55 ce       	rjmp	.-854    	; 0x3ea <menuRun+0xd6>
     740:	f5 01       	movw	r30, r10
     742:	80 81       	ld	r24, Z
     744:	82 ff       	sbrs	r24, 2
     746:	51 ce       	rjmp	.-862    	; 0x3ea <menuRun+0xd6>
            pos--;
            pos= CIRCLE(pos, 0, 3);
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
     748:	89 2f       	mov	r24, r25
     74a:	8d 7e       	andi	r24, 0xED	; 237
     74c:	80 93 10 01 	sts	0x0110, r24
    }
}

inline void menuStop()
{
    LCD_Clear();
     750:	0c d1       	rcall	.+536    	; 0x96a <LCD_Clear>
    LCD_DisplayAll();
     752:	8d dd       	rcall	.-1254   	; 0x26e <LCD_DisplayAll>
        }
    }
    BIT_OFF(progFlags, MENU_ON);
    BIT_OFF(progFlags, INACTIVE);
    menuStop();
}
     754:	c7 5b       	subi	r28, 0xB7	; 183
     756:	df 4f       	sbci	r29, 0xFF	; 255
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	3f 90       	pop	r3
     784:	2f 90       	pop	r2
     786:	08 95       	ret

00000788 <main>:

int main(void)
{   
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
    ///инициализация УСАПП///
    UBRR0 = ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
     790:	87 e0       	ldi	r24, 0x07	; 7
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 c5 00 	sts	0x00C5, r25
     798:	80 93 c4 00 	sts	0x00C4, r24
    BIT_WRITE(UCSR0C, UPM01, 0);  // проверка четности отключена
     79c:	e2 ec       	ldi	r30, 0xC2	; 194
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	8f 7d       	andi	r24, 0xDF	; 223
     7a4:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UPM00, 0);  // ----||----
     7a6:	80 81       	ld	r24, Z
     7a8:	8f 7e       	andi	r24, 0xEF	; 239
     7aa:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, UCSZ02, 0);    // 8 битов данных
     7ac:	a1 ec       	ldi	r26, 0xC1	; 193
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	8c 91       	ld	r24, X
     7b2:	8b 7f       	andi	r24, 0xFB	; 251
     7b4:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0C, UCSZ01, 1);    // ----||----
     7b6:	80 81       	ld	r24, Z
     7b8:	84 60       	ori	r24, 0x04	; 4
     7ba:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, UCSZ00, 1);    // ----||----
     7bc:	80 81       	ld	r24, Z
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0C, USBS0, 0);  // 1 стоповый бит
     7c2:	80 81       	ld	r24, Z
     7c4:	87 7f       	andi	r24, 0xF7	; 247
     7c6:	80 83       	st	Z, r24
    BIT_WRITE(UCSR0B, TXEN0, 1);  // передача разрешена
     7c8:	8c 91       	ld	r24, X
     7ca:	88 60       	ori	r24, 0x08	; 8
     7cc:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXEN0, 1);  // прием разрешен
     7ce:	8c 91       	ld	r24, X
     7d0:	80 61       	ori	r24, 0x10	; 16
     7d2:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, RXCIE0, 1); // прерывание приема разрешено
     7d4:	8c 91       	ld	r24, X
     7d6:	80 68       	ori	r24, 0x80	; 128
     7d8:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
     7da:	8c 91       	ld	r24, X
     7dc:	80 64       	ori	r24, 0x40	; 64
     7de:	8c 93       	st	X, r24
    BIT_WRITE(UCSR0B, UDRIE0, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
     7e0:	8c 91       	ld	r24, X
     7e2:	8f 7d       	andi	r24, 0xDF	; 223
     7e4:	8c 93       	st	X, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
     7e6:	e7 e2       	ldi	r30, 0x27	; 39
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	8e 7f       	andi	r24, 0xFE	; 254
     7ee:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD); // управление подсветкой экрана и нагрузкой на выход
     7f0:	ea e2       	ldi	r30, 0x2A	; 42
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 ec       	ldi	r24, 0xC0	; 192
     7f6:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
     7f8:	80 81       	ld	r24, Z
     7fa:	83 7c       	andi	r24, 0xC3	; 195
     7fc:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
     7fe:	8c e3       	ldi	r24, 0x3C	; 60
     800:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
     802:	ec e7       	ldi	r30, 0x7C	; 124
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	80 64       	ori	r24, 0x40	; 64
     80a:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
     80c:	ab e7       	ldi	r26, 0x7B	; 123
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	8c 91       	ld	r24, X
     812:	83 60       	ori	r24, 0x03	; 3
     814:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
     816:	80 81       	ld	r24, Z
     818:	80 62       	ori	r24, 0x20	; 32
     81a:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
     81c:	0a e7       	ldi	r16, 0x7A	; 122
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	f8 01       	movw	r30, r16
     822:	80 81       	ld	r24, Z
     824:	80 62       	ori	r24, 0x20	; 32
     826:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
     828:	80 81       	ld	r24, Z
     82a:	88 60       	ori	r24, 0x08	; 8
     82c:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
     82e:	80 81       	ld	r24, Z
     830:	80 68       	ori	r24, 0x80	; 128
     832:	80 83       	st	Z, r24
    DIDR0 |= 1 << ADC0D; // отключить буффер цифрового входа ADC0D
     834:	ee e7       	ldi	r30, 0x7E	; 126
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	81 60       	ori	r24, 0x01	; 1
     83c:	80 83       	st	Z, r24
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
     83e:	e4 e4       	ldi	r30, 0x44	; 68
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	82 60       	ori	r24, 0x02	; 2
     846:	80 83       	st	Z, r24
    OCR0A= measureRate;
     848:	80 91 15 01 	lds	r24, 0x0115
     84c:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
     84e:	e5 e4       	ldi	r30, 0x45	; 69
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	84 60       	ori	r24, 0x04	; 4
     856:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
     858:	ee e6       	ldi	r30, 0x6E	; 110
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	82 60       	ori	r24, 0x02	; 2
     860:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
     862:	85 e0       	ldi	r24, 0x05	; 5
     864:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
     868:	e6 eb       	ldi	r30, 0xB6	; 182
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	80 62       	ori	r24, 0x20	; 32
     870:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
     872:	e0 e7       	ldi	r30, 0x70	; 112
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	81 60       	ori	r24, 0x01	; 1
     87a:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCD_Init();
     87c:	a8 d0       	rcall	.+336    	; 0x9ce <LCD_Init>

    BIT_WRITE(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
     87e:	e4 e6       	ldi	r30, 0x64	; 100
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	80 68       	ori	r24, 0x80	; 128
     886:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
     888:	80 81       	ld	r24, Z
     88a:	88 60       	ori	r24, 0x08	; 8
     88c:	80 83       	st	Z, r24
    BIT_WRITE(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
     88e:	80 81       	ld	r24, Z
     890:	84 60       	ori	r24, 0x04	; 4
     892:	80 83       	st	Z, r24
    BIT_WRITE(ACSR, ACD, 1); // отключить аналоговый компаратор
     894:	e0 e5       	ldi	r30, 0x50	; 80
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	80 68       	ori	r24, 0x80	; 128
     89c:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
     89e:	f8 01       	movw	r30, r16
     8a0:	80 81       	ld	r24, Z
     8a2:	80 64       	ori	r24, 0x40	; 64
     8a4:	80 83       	st	Z, r24

    sei();
     8a6:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_READ(PIND, BUTTON_M))||(!BIT_READ(PIND, BUTTON_P))||(!BIT_READ(PIND, BUTTON_BACK))) // если нажата любая кнопка
     8a8:	c9 e2       	ldi	r28, 0x29	; 41
     8aa:	d0 e0       	ldi	r29, 0x00	; 0
     8ac:	88 81       	ld	r24, Y
     8ae:	84 ff       	sbrs	r24, 4
     8b0:	06 c0       	rjmp	.+12     	; 0x8be <main+0x136>
     8b2:	88 81       	ld	r24, Y
     8b4:	85 ff       	sbrs	r24, 5
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <main+0x136>
     8b8:	88 81       	ld	r24, Y
     8ba:	82 fd       	sbrc	r24, 2
     8bc:	07 c0       	rjmp	.+14     	; 0x8cc <main+0x144>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_ON(progFlags, LCD_ON);
     8be:	80 91 10 01 	lds	r24, 0x0110
     8c2:	8f 7e       	andi	r24, 0xEF	; 239
     8c4:	81 60       	ori	r24, 0x01	; 1
     8c6:	80 93 10 01 	sts	0x0110, r24
            LCD_turnOn();
     8ca:	2a d2       	rcall	.+1108   	; 0xd20 <LCD_turnOn>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_READ(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
     8cc:	88 81       	ld	r24, Y
     8ce:	83 fd       	sbrc	r24, 3
     8d0:	11 c0       	rjmp	.+34     	; 0x8f4 <main+0x16c>
        {
            BIT_OFF(progFlags, INACTIVE); // выйти из режима неактивности
     8d2:	80 91 10 01 	lds	r24, 0x0110
     8d6:	8f 7e       	andi	r24, 0xEF	; 239
     8d8:	80 93 10 01 	sts	0x0110, r24
            if (!BIT_READ(progFlags, LCD_ON))
     8dc:	80 fd       	sbrc	r24, 0
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <main+0x160>
            {
                BIT_ON(progFlags, LCD_ON); // включить подсветку дисплея
     8e0:	81 60       	ori	r24, 0x01	; 1
     8e2:	80 93 10 01 	sts	0x0110, r24
                LCD_turnOn();
     8e6:	1c d2       	rcall	.+1080   	; 0xd20 <LCD_turnOn>
            }
            BIT_ON(progFlags, MENU_ON); // включить меню
     8e8:	80 91 10 01 	lds	r24, 0x0110
     8ec:	82 60       	ori	r24, 0x02	; 2
     8ee:	80 93 10 01 	sts	0x0110, r24
            menuRun(); // обработка команд меню
     8f2:	10 dd       	rcall	.-1504   	; 0x314 <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_READ(progFlags, INACTIVE))
     8f4:	80 91 10 01 	lds	r24, 0x0110
     8f8:	84 ff       	sbrs	r24, 4
     8fa:	06 c0       	rjmp	.+12     	; 0x908 <main+0x180>
        {
            if(BIT_READ(progFlags, LCD_ON))
     8fc:	80 ff       	sbrs	r24, 0
     8fe:	d6 cf       	rjmp	.-84     	; 0x8ac <main+0x124>
            {
                BIT_OFF(progFlags, LCD_ON);
     900:	8e 7f       	andi	r24, 0xFE	; 254
     902:	80 93 10 01 	sts	0x0110, r24
                LCD_turnOff();
     906:	45 d2       	rcall	.+1162   	; 0xd92 <LCD_turnOff>
            }
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : отобажать данные если подсветка включена
        //////////////////////////////////////////////////////////////////////////
        if (BIT_READ(progFlags, LCD_ON))
     908:	80 91 10 01 	lds	r24, 0x0110
     90c:	80 ff       	sbrs	r24, 0
     90e:	ce cf       	rjmp	.-100    	; 0x8ac <main+0x124>
        {
            LCD_DisplayAll();
     910:	ae dc       	rcall	.-1700   	; 0x26e <LCD_DisplayAll>
     912:	cc cf       	rjmp	.-104    	; 0x8ac <main+0x124>

00000914 <LCD_Busy>:
 #include "LCD.h"

int LCD_Busy()
{
    uint8_t input= 0;
    readlcd;
     914:	e8 e2       	ldi	r30, 0x28	; 40
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	84 60       	ori	r24, 0x04	; 4
     91c:	80 83       	st	Z, r24
    LCD_DREG&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3); // переключить пины на выход
     91e:	a4 e2       	ldi	r26, 0x24	; 36
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	8c 91       	ld	r24, X
     924:	80 7f       	andi	r24, 0xF0	; 240
     926:	8c 93       	st	X, r24
    LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3); // очистить выход
     928:	a5 e2       	ldi	r26, 0x25	; 37
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	8c 91       	ld	r24, X
     92e:	80 7f       	andi	r24, 0xF0	; 240
     930:	8c 93       	st	X, r24
    enable;
     932:	80 81       	ld	r24, Z
     934:	88 60       	ori	r24, 0x08	; 8
     936:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     938:	94 e1       	ldi	r25, 0x14	; 20
     93a:	89 2f       	mov	r24, r25
     93c:	8a 95       	dec	r24
     93e:	f1 f7       	brne	.-4      	; 0x93c <LCD_Busy+0x28>
    _delay_loop_1(20);
    disable;
     940:	80 81       	ld	r24, Z
     942:	87 7f       	andi	r24, 0xF7	; 247
     944:	80 83       	st	Z, r24
    input= LCD_IN << 4;
     946:	a3 e2       	ldi	r26, 0x23	; 35
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	8c 91       	ld	r24, X
    enable;
     94c:	80 81       	ld	r24, Z
     94e:	88 60       	ori	r24, 0x08	; 8
     950:	80 83       	st	Z, r24
     952:	9a 95       	dec	r25
     954:	f1 f7       	brne	.-4      	; 0x952 <LCD_Busy+0x3e>
    _delay_loop_1(20);
    disable;
     956:	80 81       	ld	r24, Z
     958:	87 7f       	andi	r24, 0xF7	; 247
     95a:	80 83       	st	Z, r24
    input|= LCD_IN;
     95c:	ac 91       	ld	r26, X
//         writelcd;
//         return 1;
//     }
//     LCD_DPORT&= ~(1 << LCD_D0)&~(1 << LCD_D1)&~(1 << LCD_D2)&~(1 << LCD_D3);
//     LCD_DREG|= (1 << LCD_D0)|(1 << LCD_D1)|(1 << LCD_D2)|(1 << LCD_D3);
     writelcd;
     95e:	80 81       	ld	r24, Z
     960:	8b 7f       	andi	r24, 0xFB	; 251
     962:	80 83       	st	Z, r24
    return 0;
}
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	08 95       	ret

0000096a <LCD_Clear>:

 void LCD_Clear()
 {
    while(LCD_Busy());
     96a:	d4 df       	rcall	.-88     	; 0x914 <LCD_Busy>
     96c:	89 2b       	or	r24, r25
     96e:	e9 f7       	brne	.-6      	; 0x96a <LCD_Clear>
    control;
     970:	a8 e2       	ldi	r26, 0x28	; 40
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	8c 91       	ld	r24, X
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	8c 93       	st	X, r24
    enable;
     97a:	8c 91       	ld	r24, X
     97c:	88 60       	ori	r24, 0x08	; 8
     97e:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     980:	e5 e2       	ldi	r30, 0x25	; 37
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	87 7f       	andi	r24, 0xF7	; 247
     988:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     98a:	80 81       	ld	r24, Z
     98c:	8b 7f       	andi	r24, 0xFB	; 251
     98e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     990:	80 81       	ld	r24, Z
     992:	8d 7f       	andi	r24, 0xFD	; 253
     994:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     996:	80 81       	ld	r24, Z
     998:	8e 7f       	andi	r24, 0xFE	; 254
     99a:	80 83       	st	Z, r24
    disable;
     99c:	8c 91       	ld	r24, X
     99e:	87 7f       	andi	r24, 0xF7	; 247
     9a0:	8c 93       	st	X, r24
     9a2:	8a e0       	ldi	r24, 0x0A	; 10
     9a4:	8a 95       	dec	r24
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <LCD_Clear+0x3a>
    _delay_loop_1(10);
    enable;
     9a8:	8c 91       	ld	r24, X
     9aa:	88 60       	ori	r24, 0x08	; 8
     9ac:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     9ae:	80 81       	ld	r24, Z
     9b0:	87 7f       	andi	r24, 0xF7	; 247
     9b2:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     9b4:	80 81       	ld	r24, Z
     9b6:	8b 7f       	andi	r24, 0xFB	; 251
     9b8:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     9ba:	80 81       	ld	r24, Z
     9bc:	8d 7f       	andi	r24, 0xFD	; 253
     9be:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 1);
     9c0:	80 81       	ld	r24, Z
     9c2:	81 60       	ori	r24, 0x01	; 1
     9c4:	80 83       	st	Z, r24
    disable;
     9c6:	8c 91       	ld	r24, X
     9c8:	87 7f       	andi	r24, 0xF7	; 247
     9ca:	8c 93       	st	X, r24
 }
     9cc:	08 95       	ret

000009ce <LCD_Init>:

 void LCD_Init()
 {
    LCD_CREG= (1 << LCD_EN)|(1 << LCD_RS)|(1 << LCD_RW); // управляющие на выход
     9ce:	8e e0       	ldi	r24, 0x0E	; 14
     9d0:	87 b9       	out	0x07, r24	; 7
    while(LCD_Busy());
     9d2:	a0 df       	rcall	.-192    	; 0x914 <LCD_Busy>
     9d4:	89 2b       	or	r24, r25
     9d6:	e9 f7       	brne	.-6      	; 0x9d2 <LCD_Init+0x4>
    control; // шина 4 бита, 2 строки, символ 5x8 точек
     9d8:	a8 e2       	ldi	r26, 0x28	; 40
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	8c 91       	ld	r24, X
     9de:	8d 7f       	andi	r24, 0xFD	; 253
     9e0:	8c 93       	st	X, r24
    enable;
     9e2:	8c 91       	ld	r24, X
     9e4:	88 60       	ori	r24, 0x08	; 8
     9e6:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     9e8:	e5 e2       	ldi	r30, 0x25	; 37
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	87 7f       	andi	r24, 0xF7	; 247
     9f0:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     9f2:	80 81       	ld	r24, Z
     9f4:	8b 7f       	andi	r24, 0xFB	; 251
     9f6:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     9f8:	80 81       	ld	r24, Z
     9fa:	82 60       	ori	r24, 0x02	; 2
     9fc:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     9fe:	80 81       	ld	r24, Z
     a00:	8e 7f       	andi	r24, 0xFE	; 254
     a02:	80 83       	st	Z, r24
    disable;
     a04:	8c 91       	ld	r24, X
     a06:	87 7f       	andi	r24, 0xF7	; 247
     a08:	8c 93       	st	X, r24
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	8a 95       	dec	r24
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <LCD_Init+0x3e>
    _delay_loop_1(10);
    enable;
     a10:	8c 91       	ld	r24, X
     a12:	88 60       	ori	r24, 0x08	; 8
     a14:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     a16:	80 81       	ld	r24, Z
     a18:	88 60       	ori	r24, 0x08	; 8
     a1a:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     a1c:	80 81       	ld	r24, Z
     a1e:	8b 7f       	andi	r24, 0xFB	; 251
     a20:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     a22:	80 81       	ld	r24, Z
     a24:	8d 7f       	andi	r24, 0xFD	; 253
     a26:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a28:	80 81       	ld	r24, Z
     a2a:	8e 7f       	andi	r24, 0xFE	; 254
     a2c:	80 83       	st	Z, r24
    disable;
     a2e:	8c 91       	ld	r24, X
     a30:	87 7f       	andi	r24, 0xF7	; 247
     a32:	8c 93       	st	X, r24
    while(LCD_Busy());
     a34:	6f df       	rcall	.-290    	; 0x914 <LCD_Busy>
     a36:	89 2b       	or	r24, r25
     a38:	e9 f7       	brne	.-6      	; 0xa34 <LCD_Init+0x66>
    enable; // инкремент счетчика, сдвига экрана нет
     a3a:	a8 e2       	ldi	r26, 0x28	; 40
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	8c 91       	ld	r24, X
     a40:	88 60       	ori	r24, 0x08	; 8
     a42:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     a44:	e5 e2       	ldi	r30, 0x25	; 37
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	87 7f       	andi	r24, 0xF7	; 247
     a4c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     a4e:	80 81       	ld	r24, Z
     a50:	8b 7f       	andi	r24, 0xFB	; 251
     a52:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     a54:	80 81       	ld	r24, Z
     a56:	8d 7f       	andi	r24, 0xFD	; 253
     a58:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a5a:	80 81       	ld	r24, Z
     a5c:	8e 7f       	andi	r24, 0xFE	; 254
     a5e:	80 83       	st	Z, r24
    disable;
     a60:	8c 91       	ld	r24, X
     a62:	87 7f       	andi	r24, 0xF7	; 247
     a64:	8c 93       	st	X, r24
     a66:	8a e0       	ldi	r24, 0x0A	; 10
     a68:	8a 95       	dec	r24
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <LCD_Init+0x9a>
    _delay_loop_1(10);
    enable;
     a6c:	8c 91       	ld	r24, X
     a6e:	88 60       	ori	r24, 0x08	; 8
     a70:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     a72:	80 81       	ld	r24, Z
     a74:	87 7f       	andi	r24, 0xF7	; 247
     a76:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 1);
     a78:	80 81       	ld	r24, Z
     a7a:	84 60       	ori	r24, 0x04	; 4
     a7c:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     a7e:	80 81       	ld	r24, Z
     a80:	82 60       	ori	r24, 0x02	; 2
     a82:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     a84:	80 81       	ld	r24, Z
     a86:	8e 7f       	andi	r24, 0xFE	; 254
     a88:	80 83       	st	Z, r24
    disable;
     a8a:	8c 91       	ld	r24, X
     a8c:	87 7f       	andi	r24, 0xF7	; 247
     a8e:	8c 93       	st	X, r24
    LCD_Clear();
 }
     a90:	6c cf       	rjmp	.-296    	; 0x96a <LCD_Clear>

00000a92 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
     a92:	1f 93       	push	r17
    uint8_t addr= (row * LCD_LENGTH + col); // конвертация номера строки и столбца в адрес
     a94:	82 95       	swap	r24
     a96:	80 7f       	andi	r24, 0xF0	; 240
     a98:	18 2f       	mov	r17, r24
     a9a:	16 0f       	add	r17, r22
    while(LCD_Busy());
     a9c:	3b df       	rcall	.-394    	; 0x914 <LCD_Busy>
     a9e:	89 2b       	or	r24, r25
     aa0:	e9 f7       	brne	.-6      	; 0xa9c <LCD_SetCursor+0xa>
    control; 
     aa2:	e8 e2       	ldi	r30, 0x28	; 40
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	8d 7f       	andi	r24, 0xFD	; 253
     aaa:	80 83       	st	Z, r24
    enable;                                           
     aac:	80 81       	ld	r24, Z
     aae:	88 60       	ori	r24, 0x08	; 8
     ab0:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     ab2:	e5 e2       	ldi	r30, 0x25	; 37
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	88 60       	ori	r24, 0x08	; 8
     aba:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, (addr >> 6)&0x01);
     abc:	81 2f       	mov	r24, r17
     abe:	82 95       	swap	r24
     ac0:	86 95       	lsr	r24
     ac2:	86 95       	lsr	r24
     ac4:	83 70       	andi	r24, 0x03	; 3
     ac6:	80 ff       	sbrs	r24, 0
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <LCD_SetCursor+0x42>
     aca:	80 81       	ld	r24, Z
     acc:	84 60       	ori	r24, 0x04	; 4
     ace:	80 83       	st	Z, r24
     ad0:	e0 81       	ld	r30, Z
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <LCD_SetCursor+0x4e>
     ad4:	e5 e2       	ldi	r30, 0x25	; 37
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	8b 7f       	andi	r24, 0xFB	; 251
     adc:	80 83       	st	Z, r24
     ade:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D1, (addr >> 5)&0x01);
     ae0:	81 2f       	mov	r24, r17
     ae2:	82 95       	swap	r24
     ae4:	86 95       	lsr	r24
     ae6:	87 70       	andi	r24, 0x07	; 7
     ae8:	80 ff       	sbrs	r24, 0
     aea:	07 c0       	rjmp	.+14     	; 0xafa <LCD_SetCursor+0x68>
     aec:	e5 e2       	ldi	r30, 0x25	; 37
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	82 60       	ori	r24, 0x02	; 2
     af4:	80 83       	st	Z, r24
     af6:	e0 81       	ld	r30, Z
     af8:	06 c0       	rjmp	.+12     	; 0xb06 <LCD_SetCursor+0x74>
     afa:	e5 e2       	ldi	r30, 0x25	; 37
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	8d 7f       	andi	r24, 0xFD	; 253
     b02:	80 83       	st	Z, r24
     b04:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D0, (addr >> 4)&0x01);
     b06:	81 2f       	mov	r24, r17
     b08:	82 95       	swap	r24
     b0a:	8f 70       	andi	r24, 0x0F	; 15
     b0c:	80 ff       	sbrs	r24, 0
     b0e:	07 c0       	rjmp	.+14     	; 0xb1e <LCD_SetCursor+0x8c>
     b10:	e5 e2       	ldi	r30, 0x25	; 37
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	81 60       	ori	r24, 0x01	; 1
     b18:	80 83       	st	Z, r24
     b1a:	e0 81       	ld	r30, Z
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <LCD_SetCursor+0x98>
     b1e:	e5 e2       	ldi	r30, 0x25	; 37
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	8e 7f       	andi	r24, 0xFE	; 254
     b26:	80 83       	st	Z, r24
     b28:	e0 81       	ld	r30, Z
    disable;
     b2a:	e8 e2       	ldi	r30, 0x28	; 40
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	87 7f       	andi	r24, 0xF7	; 247
     b32:	80 83       	st	Z, r24
     b34:	8a e0       	ldi	r24, 0x0A	; 10
     b36:	8a 95       	dec	r24
     b38:	f1 f7       	brne	.-4      	; 0xb36 <LCD_SetCursor+0xa4>
    _delay_loop_1(10);
    enable;
     b3a:	80 81       	ld	r24, Z
     b3c:	88 60       	ori	r24, 0x08	; 8
     b3e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, (addr >> 3)&0x01);
     b40:	81 2f       	mov	r24, r17
     b42:	86 95       	lsr	r24
     b44:	86 95       	lsr	r24
     b46:	86 95       	lsr	r24
     b48:	80 ff       	sbrs	r24, 0
     b4a:	07 c0       	rjmp	.+14     	; 0xb5a <LCD_SetCursor+0xc8>
     b4c:	e5 e2       	ldi	r30, 0x25	; 37
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	88 60       	ori	r24, 0x08	; 8
     b54:	80 83       	st	Z, r24
     b56:	e0 81       	ld	r30, Z
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <LCD_SetCursor+0xd4>
     b5a:	e5 e2       	ldi	r30, 0x25	; 37
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	87 7f       	andi	r24, 0xF7	; 247
     b62:	80 83       	st	Z, r24
     b64:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D2, (addr >> 2)&0x01);
     b66:	81 2f       	mov	r24, r17
     b68:	86 95       	lsr	r24
     b6a:	86 95       	lsr	r24
     b6c:	80 ff       	sbrs	r24, 0
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <LCD_SetCursor+0xec>
     b70:	e5 e2       	ldi	r30, 0x25	; 37
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	84 60       	ori	r24, 0x04	; 4
     b78:	80 83       	st	Z, r24
     b7a:	e0 81       	ld	r30, Z
     b7c:	06 c0       	rjmp	.+12     	; 0xb8a <LCD_SetCursor+0xf8>
     b7e:	e5 e2       	ldi	r30, 0x25	; 37
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	80 83       	st	Z, r24
     b88:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D1, (addr >> 1)&0x01);
     b8a:	81 2f       	mov	r24, r17
     b8c:	86 95       	lsr	r24
     b8e:	80 ff       	sbrs	r24, 0
     b90:	07 c0       	rjmp	.+14     	; 0xba0 <LCD_SetCursor+0x10e>
     b92:	e5 e2       	ldi	r30, 0x25	; 37
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	80 83       	st	Z, r24
     b9c:	e0 81       	ld	r30, Z
     b9e:	06 c0       	rjmp	.+12     	; 0xbac <LCD_SetCursor+0x11a>
     ba0:	e5 e2       	ldi	r30, 0x25	; 37
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8d 7f       	andi	r24, 0xFD	; 253
     ba8:	80 83       	st	Z, r24
     baa:	e0 81       	ld	r30, Z
    BIT_WRITE(LCD_DPORT, LCD_D0, addr&0x01);
     bac:	10 ff       	sbrs	r17, 0
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <LCD_SetCursor+0x12c>
     bb0:	e5 e2       	ldi	r30, 0x25	; 37
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	80 83       	st	Z, r24
     bba:	e0 81       	ld	r30, Z
     bbc:	06 c0       	rjmp	.+12     	; 0xbca <LCD_SetCursor+0x138>
     bbe:	e5 e2       	ldi	r30, 0x25	; 37
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	80 83       	st	Z, r24
     bc8:	e0 81       	ld	r30, Z
    disable;
     bca:	e8 e2       	ldi	r30, 0x28	; 40
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	87 7f       	andi	r24, 0xF7	; 247
     bd2:	80 83       	st	Z, r24
}
     bd4:	1f 91       	pop	r17
     bd6:	08 95       	ret

00000bd8 <LCD_Write>:

void LCD_Write(char * bytes, uint8_t sz, uint8_t posY, uint8_t posX )
{
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	6c 01       	movw	r12, r24
     bec:	16 2f       	mov	r17, r22
     bee:	84 2f       	mov	r24, r20
    LCD_SetCursor(posY, posX);
     bf0:	62 2f       	mov	r22, r18
     bf2:	4f df       	rcall	.-354    	; 0xa92 <LCD_SetCursor>
    
    for (int i = sz; i > 0; i--)
     bf4:	e1 2e       	mov	r14, r17
     bf6:	ff 24       	eor	r15, r15
     bf8:	1e 14       	cp	r1, r14
     bfa:	1f 04       	cpc	r1, r15
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <LCD_Write+0x28>
     bfe:	86 c0       	rjmp	.+268    	; 0xd0c <LCD_Write+0x134>
    {
        while(LCD_Busy());
        cli();
        data;
     c00:	08 e2       	ldi	r16, 0x28	; 40
     c02:	10 e0       	ldi	r17, 0x00	; 0
     c04:	0f 2e       	mov	r0, r31
     c06:	fa e0       	ldi	r31, 0x0A	; 10
     c08:	bf 2e       	mov	r11, r31
     c0a:	f0 2d       	mov	r31, r0
        _delay_loop_1(10);
        enable;
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 3)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 2)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 1)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D0, *bytes&0x01);
     c0c:	c5 e2       	ldi	r28, 0x25	; 37
     c0e:	d0 e0       	ldi	r29, 0x00	; 0
{
    LCD_SetCursor(posY, posX);
    
    for (int i = sz; i > 0; i--)
    {
        while(LCD_Busy());
     c10:	81 de       	rcall	.-766    	; 0x914 <LCD_Busy>
     c12:	89 2b       	or	r24, r25
     c14:	e9 f7       	brne	.-6      	; 0xc10 <LCD_Write+0x38>
        cli();
     c16:	f8 94       	cli
        data;
     c18:	f8 01       	movw	r30, r16
     c1a:	80 81       	ld	r24, Z
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	80 83       	st	Z, r24
        enable;
     c20:	80 81       	ld	r24, Z
     c22:	88 60       	ori	r24, 0x08	; 8
     c24:	80 83       	st	Z, r24
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 7)&0x01);
     c26:	f6 01       	movw	r30, r12
     c28:	90 81       	ld	r25, Z
     c2a:	99 23       	and	r25, r25
     c2c:	2c f4       	brge	.+10     	; 0xc38 <LCD_Write+0x60>
     c2e:	88 81       	ld	r24, Y
     c30:	88 60       	ori	r24, 0x08	; 8
     c32:	88 83       	st	Y, r24
     c34:	88 81       	ld	r24, Y
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <LCD_Write+0x68>
     c38:	88 81       	ld	r24, Y
     c3a:	87 7f       	andi	r24, 0xF7	; 247
     c3c:	88 83       	st	Y, r24
     c3e:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 6)&0x01);
     c40:	96 ff       	sbrs	r25, 6
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <LCD_Write+0x76>
     c44:	88 81       	ld	r24, Y
     c46:	84 60       	ori	r24, 0x04	; 4
     c48:	88 83       	st	Y, r24
     c4a:	88 81       	ld	r24, Y
     c4c:	04 c0       	rjmp	.+8      	; 0xc56 <LCD_Write+0x7e>
     c4e:	88 81       	ld	r24, Y
     c50:	8b 7f       	andi	r24, 0xFB	; 251
     c52:	88 83       	st	Y, r24
     c54:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 5)&0x01);
     c56:	95 ff       	sbrs	r25, 5
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <LCD_Write+0x8c>
     c5a:	88 81       	ld	r24, Y
     c5c:	82 60       	ori	r24, 0x02	; 2
     c5e:	88 83       	st	Y, r24
     c60:	88 81       	ld	r24, Y
     c62:	04 c0       	rjmp	.+8      	; 0xc6c <LCD_Write+0x94>
     c64:	88 81       	ld	r24, Y
     c66:	8d 7f       	andi	r24, 0xFD	; 253
     c68:	88 83       	st	Y, r24
     c6a:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D0, (*bytes >> 4)&0x01);
     c6c:	94 ff       	sbrs	r25, 4
     c6e:	05 c0       	rjmp	.+10     	; 0xc7a <LCD_Write+0xa2>
     c70:	88 81       	ld	r24, Y
     c72:	81 60       	ori	r24, 0x01	; 1
     c74:	88 83       	st	Y, r24
     c76:	88 81       	ld	r24, Y
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <LCD_Write+0xaa>
     c7a:	88 81       	ld	r24, Y
     c7c:	8e 7f       	andi	r24, 0xFE	; 254
     c7e:	88 83       	st	Y, r24
     c80:	88 81       	ld	r24, Y
        disable;
     c82:	f8 01       	movw	r30, r16
     c84:	80 81       	ld	r24, Z
     c86:	87 7f       	andi	r24, 0xF7	; 247
     c88:	80 83       	st	Z, r24
     c8a:	8b 2d       	mov	r24, r11
     c8c:	8a 95       	dec	r24
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <LCD_Write+0xb4>
        _delay_loop_1(10);
        enable;
     c90:	80 81       	ld	r24, Z
     c92:	88 60       	ori	r24, 0x08	; 8
     c94:	80 83       	st	Z, r24
        BIT_WRITE(LCD_DPORT, LCD_D3, (*bytes >> 3)&0x01);
     c96:	93 ff       	sbrs	r25, 3
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <LCD_Write+0xcc>
     c9a:	88 81       	ld	r24, Y
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	88 83       	st	Y, r24
     ca0:	88 81       	ld	r24, Y
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <LCD_Write+0xd4>
     ca4:	88 81       	ld	r24, Y
     ca6:	87 7f       	andi	r24, 0xF7	; 247
     ca8:	88 83       	st	Y, r24
     caa:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 2)&0x01);
     cac:	92 ff       	sbrs	r25, 2
     cae:	05 c0       	rjmp	.+10     	; 0xcba <LCD_Write+0xe2>
     cb0:	88 81       	ld	r24, Y
     cb2:	84 60       	ori	r24, 0x04	; 4
     cb4:	88 83       	st	Y, r24
     cb6:	88 81       	ld	r24, Y
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <LCD_Write+0xea>
     cba:	88 81       	ld	r24, Y
     cbc:	8b 7f       	andi	r24, 0xFB	; 251
     cbe:	88 83       	st	Y, r24
     cc0:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 1)&0x01);
     cc2:	91 ff       	sbrs	r25, 1
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <LCD_Write+0xf8>
     cc6:	88 81       	ld	r24, Y
     cc8:	82 60       	ori	r24, 0x02	; 2
     cca:	88 83       	st	Y, r24
     ccc:	88 81       	ld	r24, Y
     cce:	04 c0       	rjmp	.+8      	; 0xcd8 <LCD_Write+0x100>
     cd0:	88 81       	ld	r24, Y
     cd2:	8d 7f       	andi	r24, 0xFD	; 253
     cd4:	88 83       	st	Y, r24
     cd6:	88 81       	ld	r24, Y
        BIT_WRITE(LCD_DPORT, LCD_D0, *bytes&0x01);
     cd8:	90 ff       	sbrs	r25, 0
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <LCD_Write+0x10e>
     cdc:	88 81       	ld	r24, Y
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	88 83       	st	Y, r24
     ce2:	88 81       	ld	r24, Y
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <LCD_Write+0x116>
     ce6:	88 81       	ld	r24, Y
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	88 83       	st	Y, r24
     cec:	88 81       	ld	r24, Y
        disable;
     cee:	f8 01       	movw	r30, r16
     cf0:	80 81       	ld	r24, Z
     cf2:	87 7f       	andi	r24, 0xF7	; 247
     cf4:	80 83       	st	Z, r24
        sei();
     cf6:	78 94       	sei

void LCD_Write(char * bytes, uint8_t sz, uint8_t posY, uint8_t posX )
{
    LCD_SetCursor(posY, posX);
    
    for (int i = sz; i > 0; i--)
     cf8:	08 94       	sec
     cfa:	e1 08       	sbc	r14, r1
     cfc:	f1 08       	sbc	r15, r1
     cfe:	e1 14       	cp	r14, r1
     d00:	f1 04       	cpc	r15, r1
     d02:	21 f0       	breq	.+8      	; 0xd0c <LCD_Write+0x134>
        BIT_WRITE(LCD_DPORT, LCD_D2, (*bytes >> 2)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D1, (*bytes >> 1)&0x01);
        BIT_WRITE(LCD_DPORT, LCD_D0, *bytes&0x01);
        disable;
        sei();
        bytes++;
     d04:	08 94       	sec
     d06:	c1 1c       	adc	r12, r1
     d08:	d1 1c       	adc	r13, r1
     d0a:	82 cf       	rjmp	.-252    	; 0xc10 <LCD_Write+0x38>
    }
    
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	08 95       	ret

00000d20 <LCD_turnOn>:

void LCD_turnOn()
{
    BIT_ON(CONTROL_PORT, LCD_LED);
     d20:	eb e2       	ldi	r30, 0x2B	; 43
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	80 83       	st	Z, r24
    while(LCD_Busy());
     d2a:	f4 dd       	rcall	.-1048   	; 0x914 <LCD_Busy>
     d2c:	89 2b       	or	r24, r25
     d2e:	e9 f7       	brne	.-6      	; 0xd2a <LCD_turnOn+0xa>
    control; // включить экран, курсора нет
     d30:	a8 e2       	ldi	r26, 0x28	; 40
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	8c 91       	ld	r24, X
     d36:	8d 7f       	andi	r24, 0xFD	; 253
     d38:	8c 93       	st	X, r24
    enable;
     d3a:	8c 91       	ld	r24, X
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     d40:	e5 e2       	ldi	r30, 0x25	; 37
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	87 7f       	andi	r24, 0xF7	; 247
     d48:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     d4a:	80 81       	ld	r24, Z
     d4c:	8b 7f       	andi	r24, 0xFB	; 251
     d4e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     d50:	80 81       	ld	r24, Z
     d52:	8d 7f       	andi	r24, 0xFD	; 253
     d54:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     d56:	80 81       	ld	r24, Z
     d58:	8e 7f       	andi	r24, 0xFE	; 254
     d5a:	80 83       	st	Z, r24
    disable;
     d5c:	8c 91       	ld	r24, X
     d5e:	87 7f       	andi	r24, 0xF7	; 247
     d60:	8c 93       	st	X, r24
     d62:	8a e0       	ldi	r24, 0x0A	; 10
     d64:	8a 95       	dec	r24
     d66:	f1 f7       	brne	.-4      	; 0xd64 <LCD_turnOn+0x44>
    _delay_loop_1(10);
    enable;
     d68:	8c 91       	ld	r24, X
     d6a:	88 60       	ori	r24, 0x08	; 8
     d6c:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     d6e:	80 81       	ld	r24, Z
     d70:	88 60       	ori	r24, 0x08	; 8
     d72:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 1);
     d74:	80 81       	ld	r24, Z
     d76:	84 60       	ori	r24, 0x04	; 4
     d78:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     d7a:	80 81       	ld	r24, Z
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     d80:	80 81       	ld	r24, Z
     d82:	8e 7f       	andi	r24, 0xFE	; 254
     d84:	80 83       	st	Z, r24
    disable;
     d86:	8c 91       	ld	r24, X
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	8c 93       	st	X, r24
    LCD_SetCursor(0, 0);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	60 e0       	ldi	r22, 0x00	; 0
}
     d90:	80 ce       	rjmp	.-768    	; 0xa92 <LCD_SetCursor>

00000d92 <LCD_turnOff>:

void LCD_turnOff()
{
    BIT_OFF(CONTROL_PORT, LCD_LED);
     d92:	eb e2       	ldi	r30, 0x2B	; 43
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 77       	andi	r24, 0x7F	; 127
     d9a:	80 83       	st	Z, r24
    while(LCD_Busy());
     d9c:	bb dd       	rcall	.-1162   	; 0x914 <LCD_Busy>
     d9e:	89 2b       	or	r24, r25
     da0:	e9 f7       	brne	.-6      	; 0xd9c <LCD_turnOff+0xa>
    control; // выключить экран, курсора нет
     da2:	a8 e2       	ldi	r26, 0x28	; 40
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	8c 91       	ld	r24, X
     da8:	8d 7f       	andi	r24, 0xFD	; 253
     daa:	8c 93       	st	X, r24
    enable;
     dac:	8c 91       	ld	r24, X
     dae:	88 60       	ori	r24, 0x08	; 8
     db0:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 0);
     db2:	e5 e2       	ldi	r30, 0x25	; 37
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	87 7f       	andi	r24, 0xF7	; 247
     dba:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     dbc:	80 81       	ld	r24, Z
     dbe:	8b 7f       	andi	r24, 0xFB	; 251
     dc0:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 0);
     dc2:	80 81       	ld	r24, Z
     dc4:	8d 7f       	andi	r24, 0xFD	; 253
     dc6:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     dc8:	80 81       	ld	r24, Z
     dca:	8e 7f       	andi	r24, 0xFE	; 254
     dcc:	80 83       	st	Z, r24
    disable;
     dce:	8c 91       	ld	r24, X
     dd0:	87 7f       	andi	r24, 0xF7	; 247
     dd2:	8c 93       	st	X, r24
     dd4:	8a e0       	ldi	r24, 0x0A	; 10
     dd6:	8a 95       	dec	r24
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <LCD_turnOff+0x44>
    _delay_loop_1(10);
    enable;
     dda:	8c 91       	ld	r24, X
     ddc:	88 60       	ori	r24, 0x08	; 8
     dde:	8c 93       	st	X, r24
    BIT_WRITE(LCD_DPORT, LCD_D3, 1);
     de0:	80 81       	ld	r24, Z
     de2:	88 60       	ori	r24, 0x08	; 8
     de4:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D2, 0);
     de6:	80 81       	ld	r24, Z
     de8:	8b 7f       	andi	r24, 0xFB	; 251
     dea:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D1, 1);
     dec:	80 81       	ld	r24, Z
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	80 83       	st	Z, r24
    BIT_WRITE(LCD_DPORT, LCD_D0, 0);
     df2:	80 81       	ld	r24, Z
     df4:	8e 7f       	andi	r24, 0xFE	; 254
     df6:	80 83       	st	Z, r24
    disable;
     df8:	8c 91       	ld	r24, X
     dfa:	87 7f       	andi	r24, 0xF7	; 247
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret

00000e00 <__subsf3>:
     e00:	50 58       	subi	r21, 0x80	; 128

00000e02 <__addsf3>:
     e02:	bb 27       	eor	r27, r27
     e04:	aa 27       	eor	r26, r26
     e06:	0e d0       	rcall	.+28     	; 0xe24 <__addsf3x>
     e08:	75 c1       	rjmp	.+746    	; 0x10f4 <__fp_round>
     e0a:	66 d1       	rcall	.+716    	; 0x10d8 <__fp_pscA>
     e0c:	30 f0       	brcs	.+12     	; 0xe1a <__addsf3+0x18>
     e0e:	6b d1       	rcall	.+726    	; 0x10e6 <__fp_pscB>
     e10:	20 f0       	brcs	.+8      	; 0xe1a <__addsf3+0x18>
     e12:	31 f4       	brne	.+12     	; 0xe20 <__addsf3+0x1e>
     e14:	9f 3f       	cpi	r25, 0xFF	; 255
     e16:	11 f4       	brne	.+4      	; 0xe1c <__addsf3+0x1a>
     e18:	1e f4       	brtc	.+6      	; 0xe20 <__addsf3+0x1e>
     e1a:	5b c1       	rjmp	.+694    	; 0x10d2 <__fp_nan>
     e1c:	0e f4       	brtc	.+2      	; 0xe20 <__addsf3+0x1e>
     e1e:	e0 95       	com	r30
     e20:	e7 fb       	bst	r30, 7
     e22:	51 c1       	rjmp	.+674    	; 0x10c6 <__fp_inf>

00000e24 <__addsf3x>:
     e24:	e9 2f       	mov	r30, r25
     e26:	77 d1       	rcall	.+750    	; 0x1116 <__fp_split3>
     e28:	80 f3       	brcs	.-32     	; 0xe0a <__addsf3+0x8>
     e2a:	ba 17       	cp	r27, r26
     e2c:	62 07       	cpc	r22, r18
     e2e:	73 07       	cpc	r23, r19
     e30:	84 07       	cpc	r24, r20
     e32:	95 07       	cpc	r25, r21
     e34:	18 f0       	brcs	.+6      	; 0xe3c <__addsf3x+0x18>
     e36:	71 f4       	brne	.+28     	; 0xe54 <__addsf3x+0x30>
     e38:	9e f5       	brtc	.+102    	; 0xea0 <__addsf3x+0x7c>
     e3a:	8f c1       	rjmp	.+798    	; 0x115a <__fp_zero>
     e3c:	0e f4       	brtc	.+2      	; 0xe40 <__addsf3x+0x1c>
     e3e:	e0 95       	com	r30
     e40:	0b 2e       	mov	r0, r27
     e42:	ba 2f       	mov	r27, r26
     e44:	a0 2d       	mov	r26, r0
     e46:	0b 01       	movw	r0, r22
     e48:	b9 01       	movw	r22, r18
     e4a:	90 01       	movw	r18, r0
     e4c:	0c 01       	movw	r0, r24
     e4e:	ca 01       	movw	r24, r20
     e50:	a0 01       	movw	r20, r0
     e52:	11 24       	eor	r1, r1
     e54:	ff 27       	eor	r31, r31
     e56:	59 1b       	sub	r21, r25
     e58:	99 f0       	breq	.+38     	; 0xe80 <__addsf3x+0x5c>
     e5a:	59 3f       	cpi	r21, 0xF9	; 249
     e5c:	50 f4       	brcc	.+20     	; 0xe72 <__addsf3x+0x4e>
     e5e:	50 3e       	cpi	r21, 0xE0	; 224
     e60:	68 f1       	brcs	.+90     	; 0xebc <__addsf3x+0x98>
     e62:	1a 16       	cp	r1, r26
     e64:	f0 40       	sbci	r31, 0x00	; 0
     e66:	a2 2f       	mov	r26, r18
     e68:	23 2f       	mov	r18, r19
     e6a:	34 2f       	mov	r19, r20
     e6c:	44 27       	eor	r20, r20
     e6e:	58 5f       	subi	r21, 0xF8	; 248
     e70:	f3 cf       	rjmp	.-26     	; 0xe58 <__addsf3x+0x34>
     e72:	46 95       	lsr	r20
     e74:	37 95       	ror	r19
     e76:	27 95       	ror	r18
     e78:	a7 95       	ror	r26
     e7a:	f0 40       	sbci	r31, 0x00	; 0
     e7c:	53 95       	inc	r21
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__addsf3x+0x4e>
     e80:	7e f4       	brtc	.+30     	; 0xea0 <__addsf3x+0x7c>
     e82:	1f 16       	cp	r1, r31
     e84:	ba 0b       	sbc	r27, r26
     e86:	62 0b       	sbc	r22, r18
     e88:	73 0b       	sbc	r23, r19
     e8a:	84 0b       	sbc	r24, r20
     e8c:	ba f0       	brmi	.+46     	; 0xebc <__addsf3x+0x98>
     e8e:	91 50       	subi	r25, 0x01	; 1
     e90:	a1 f0       	breq	.+40     	; 0xeba <__addsf3x+0x96>
     e92:	ff 0f       	add	r31, r31
     e94:	bb 1f       	adc	r27, r27
     e96:	66 1f       	adc	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	c2 f7       	brpl	.-16     	; 0xe8e <__addsf3x+0x6a>
     e9e:	0e c0       	rjmp	.+28     	; 0xebc <__addsf3x+0x98>
     ea0:	ba 0f       	add	r27, r26
     ea2:	62 1f       	adc	r22, r18
     ea4:	73 1f       	adc	r23, r19
     ea6:	84 1f       	adc	r24, r20
     ea8:	48 f4       	brcc	.+18     	; 0xebc <__addsf3x+0x98>
     eaa:	87 95       	ror	r24
     eac:	77 95       	ror	r23
     eae:	67 95       	ror	r22
     eb0:	b7 95       	ror	r27
     eb2:	f7 95       	ror	r31
     eb4:	9e 3f       	cpi	r25, 0xFE	; 254
     eb6:	08 f0       	brcs	.+2      	; 0xeba <__addsf3x+0x96>
     eb8:	b3 cf       	rjmp	.-154    	; 0xe20 <__addsf3+0x1e>
     eba:	93 95       	inc	r25
     ebc:	88 0f       	add	r24, r24
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <__addsf3x+0x9e>
     ec0:	99 27       	eor	r25, r25
     ec2:	ee 0f       	add	r30, r30
     ec4:	97 95       	ror	r25
     ec6:	87 95       	ror	r24
     ec8:	08 95       	ret

00000eca <__cmpsf2>:
     eca:	d9 d0       	rcall	.+434    	; 0x107e <__fp_cmp>
     ecc:	08 f4       	brcc	.+2      	; 0xed0 <__cmpsf2+0x6>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	08 95       	ret

00000ed2 <__divsf3>:
     ed2:	0c d0       	rcall	.+24     	; 0xeec <__divsf3x>
     ed4:	0f c1       	rjmp	.+542    	; 0x10f4 <__fp_round>
     ed6:	07 d1       	rcall	.+526    	; 0x10e6 <__fp_pscB>
     ed8:	40 f0       	brcs	.+16     	; 0xeea <__divsf3+0x18>
     eda:	fe d0       	rcall	.+508    	; 0x10d8 <__fp_pscA>
     edc:	30 f0       	brcs	.+12     	; 0xeea <__divsf3+0x18>
     ede:	21 f4       	brne	.+8      	; 0xee8 <__divsf3+0x16>
     ee0:	5f 3f       	cpi	r21, 0xFF	; 255
     ee2:	19 f0       	breq	.+6      	; 0xeea <__divsf3+0x18>
     ee4:	f0 c0       	rjmp	.+480    	; 0x10c6 <__fp_inf>
     ee6:	51 11       	cpse	r21, r1
     ee8:	39 c1       	rjmp	.+626    	; 0x115c <__fp_szero>
     eea:	f3 c0       	rjmp	.+486    	; 0x10d2 <__fp_nan>

00000eec <__divsf3x>:
     eec:	14 d1       	rcall	.+552    	; 0x1116 <__fp_split3>
     eee:	98 f3       	brcs	.-26     	; 0xed6 <__divsf3+0x4>

00000ef0 <__divsf3_pse>:
     ef0:	99 23       	and	r25, r25
     ef2:	c9 f3       	breq	.-14     	; 0xee6 <__divsf3+0x14>
     ef4:	55 23       	and	r21, r21
     ef6:	b1 f3       	breq	.-20     	; 0xee4 <__divsf3+0x12>
     ef8:	95 1b       	sub	r25, r21
     efa:	55 0b       	sbc	r21, r21
     efc:	bb 27       	eor	r27, r27
     efe:	aa 27       	eor	r26, r26
     f00:	62 17       	cp	r22, r18
     f02:	73 07       	cpc	r23, r19
     f04:	84 07       	cpc	r24, r20
     f06:	38 f0       	brcs	.+14     	; 0xf16 <__divsf3_pse+0x26>
     f08:	9f 5f       	subi	r25, 0xFF	; 255
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	44 1f       	adc	r20, r20
     f12:	aa 1f       	adc	r26, r26
     f14:	a9 f3       	breq	.-22     	; 0xf00 <__divsf3_pse+0x10>
     f16:	33 d0       	rcall	.+102    	; 0xf7e <__divsf3_pse+0x8e>
     f18:	0e 2e       	mov	r0, r30
     f1a:	3a f0       	brmi	.+14     	; 0xf2a <__divsf3_pse+0x3a>
     f1c:	e0 e8       	ldi	r30, 0x80	; 128
     f1e:	30 d0       	rcall	.+96     	; 0xf80 <__divsf3_pse+0x90>
     f20:	91 50       	subi	r25, 0x01	; 1
     f22:	50 40       	sbci	r21, 0x00	; 0
     f24:	e6 95       	lsr	r30
     f26:	00 1c       	adc	r0, r0
     f28:	ca f7       	brpl	.-14     	; 0xf1c <__divsf3_pse+0x2c>
     f2a:	29 d0       	rcall	.+82     	; 0xf7e <__divsf3_pse+0x8e>
     f2c:	fe 2f       	mov	r31, r30
     f2e:	27 d0       	rcall	.+78     	; 0xf7e <__divsf3_pse+0x8e>
     f30:	66 0f       	add	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	88 1f       	adc	r24, r24
     f36:	bb 1f       	adc	r27, r27
     f38:	26 17       	cp	r18, r22
     f3a:	37 07       	cpc	r19, r23
     f3c:	48 07       	cpc	r20, r24
     f3e:	ab 07       	cpc	r26, r27
     f40:	b0 e8       	ldi	r27, 0x80	; 128
     f42:	09 f0       	breq	.+2      	; 0xf46 <__divsf3_pse+0x56>
     f44:	bb 0b       	sbc	r27, r27
     f46:	80 2d       	mov	r24, r0
     f48:	bf 01       	movw	r22, r30
     f4a:	ff 27       	eor	r31, r31
     f4c:	93 58       	subi	r25, 0x83	; 131
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	2a f0       	brmi	.+10     	; 0xf5c <__divsf3_pse+0x6c>
     f52:	9e 3f       	cpi	r25, 0xFE	; 254
     f54:	51 05       	cpc	r21, r1
     f56:	68 f0       	brcs	.+26     	; 0xf72 <__divsf3_pse+0x82>
     f58:	b6 c0       	rjmp	.+364    	; 0x10c6 <__fp_inf>
     f5a:	00 c1       	rjmp	.+512    	; 0x115c <__fp_szero>
     f5c:	5f 3f       	cpi	r21, 0xFF	; 255
     f5e:	ec f3       	brlt	.-6      	; 0xf5a <__divsf3_pse+0x6a>
     f60:	98 3e       	cpi	r25, 0xE8	; 232
     f62:	dc f3       	brlt	.-10     	; 0xf5a <__divsf3_pse+0x6a>
     f64:	86 95       	lsr	r24
     f66:	77 95       	ror	r23
     f68:	67 95       	ror	r22
     f6a:	b7 95       	ror	r27
     f6c:	f7 95       	ror	r31
     f6e:	9f 5f       	subi	r25, 0xFF	; 255
     f70:	c9 f7       	brne	.-14     	; 0xf64 <__divsf3_pse+0x74>
     f72:	88 0f       	add	r24, r24
     f74:	91 1d       	adc	r25, r1
     f76:	96 95       	lsr	r25
     f78:	87 95       	ror	r24
     f7a:	97 f9       	bld	r25, 7
     f7c:	08 95       	ret
     f7e:	e1 e0       	ldi	r30, 0x01	; 1
     f80:	66 0f       	add	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	bb 1f       	adc	r27, r27
     f88:	62 17       	cp	r22, r18
     f8a:	73 07       	cpc	r23, r19
     f8c:	84 07       	cpc	r24, r20
     f8e:	ba 07       	cpc	r27, r26
     f90:	20 f0       	brcs	.+8      	; 0xf9a <__divsf3_pse+0xaa>
     f92:	62 1b       	sub	r22, r18
     f94:	73 0b       	sbc	r23, r19
     f96:	84 0b       	sbc	r24, r20
     f98:	ba 0b       	sbc	r27, r26
     f9a:	ee 1f       	adc	r30, r30
     f9c:	88 f7       	brcc	.-30     	; 0xf80 <__divsf3_pse+0x90>
     f9e:	e0 95       	com	r30
     fa0:	08 95       	ret

00000fa2 <__fixsfsi>:
     fa2:	04 d0       	rcall	.+8      	; 0xfac <__fixunssfsi>
     fa4:	68 94       	set
     fa6:	b1 11       	cpse	r27, r1
     fa8:	d9 c0       	rjmp	.+434    	; 0x115c <__fp_szero>
     faa:	08 95       	ret

00000fac <__fixunssfsi>:
     fac:	bc d0       	rcall	.+376    	; 0x1126 <__fp_splitA>
     fae:	88 f0       	brcs	.+34     	; 0xfd2 <__fixunssfsi+0x26>
     fb0:	9f 57       	subi	r25, 0x7F	; 127
     fb2:	90 f0       	brcs	.+36     	; 0xfd8 <__fixunssfsi+0x2c>
     fb4:	b9 2f       	mov	r27, r25
     fb6:	99 27       	eor	r25, r25
     fb8:	b7 51       	subi	r27, 0x17	; 23
     fba:	a0 f0       	brcs	.+40     	; 0xfe4 <__fixunssfsi+0x38>
     fbc:	d1 f0       	breq	.+52     	; 0xff2 <__fixunssfsi+0x46>
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	1a f0       	brmi	.+6      	; 0xfce <__fixunssfsi+0x22>
     fc8:	ba 95       	dec	r27
     fca:	c9 f7       	brne	.-14     	; 0xfbe <__fixunssfsi+0x12>
     fcc:	12 c0       	rjmp	.+36     	; 0xff2 <__fixunssfsi+0x46>
     fce:	b1 30       	cpi	r27, 0x01	; 1
     fd0:	81 f0       	breq	.+32     	; 0xff2 <__fixunssfsi+0x46>
     fd2:	c3 d0       	rcall	.+390    	; 0x115a <__fp_zero>
     fd4:	b1 e0       	ldi	r27, 0x01	; 1
     fd6:	08 95       	ret
     fd8:	c0 c0       	rjmp	.+384    	; 0x115a <__fp_zero>
     fda:	67 2f       	mov	r22, r23
     fdc:	78 2f       	mov	r23, r24
     fde:	88 27       	eor	r24, r24
     fe0:	b8 5f       	subi	r27, 0xF8	; 248
     fe2:	39 f0       	breq	.+14     	; 0xff2 <__fixunssfsi+0x46>
     fe4:	b9 3f       	cpi	r27, 0xF9	; 249
     fe6:	cc f3       	brlt	.-14     	; 0xfda <__fixunssfsi+0x2e>
     fe8:	86 95       	lsr	r24
     fea:	77 95       	ror	r23
     fec:	67 95       	ror	r22
     fee:	b3 95       	inc	r27
     ff0:	d9 f7       	brne	.-10     	; 0xfe8 <__fixunssfsi+0x3c>
     ff2:	3e f4       	brtc	.+14     	; 0x1002 <__fixunssfsi+0x56>
     ff4:	90 95       	com	r25
     ff6:	80 95       	com	r24
     ff8:	70 95       	com	r23
     ffa:	61 95       	neg	r22
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	08 95       	ret

00001004 <__floatunsisf>:
    1004:	e8 94       	clt
    1006:	09 c0       	rjmp	.+18     	; 0x101a <__floatsisf+0x12>

00001008 <__floatsisf>:
    1008:	97 fb       	bst	r25, 7
    100a:	3e f4       	brtc	.+14     	; 0x101a <__floatsisf+0x12>
    100c:	90 95       	com	r25
    100e:	80 95       	com	r24
    1010:	70 95       	com	r23
    1012:	61 95       	neg	r22
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	8f 4f       	sbci	r24, 0xFF	; 255
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	99 23       	and	r25, r25
    101c:	a9 f0       	breq	.+42     	; 0x1048 <__floatsisf+0x40>
    101e:	f9 2f       	mov	r31, r25
    1020:	96 e9       	ldi	r25, 0x96	; 150
    1022:	bb 27       	eor	r27, r27
    1024:	93 95       	inc	r25
    1026:	f6 95       	lsr	r31
    1028:	87 95       	ror	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	b7 95       	ror	r27
    1030:	f1 11       	cpse	r31, r1
    1032:	f8 cf       	rjmp	.-16     	; 0x1024 <__floatsisf+0x1c>
    1034:	fa f4       	brpl	.+62     	; 0x1074 <__floatsisf+0x6c>
    1036:	bb 0f       	add	r27, r27
    1038:	11 f4       	brne	.+4      	; 0x103e <__floatsisf+0x36>
    103a:	60 ff       	sbrs	r22, 0
    103c:	1b c0       	rjmp	.+54     	; 0x1074 <__floatsisf+0x6c>
    103e:	6f 5f       	subi	r22, 0xFF	; 255
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
    1042:	8f 4f       	sbci	r24, 0xFF	; 255
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	16 c0       	rjmp	.+44     	; 0x1074 <__floatsisf+0x6c>
    1048:	88 23       	and	r24, r24
    104a:	11 f0       	breq	.+4      	; 0x1050 <__floatsisf+0x48>
    104c:	96 e9       	ldi	r25, 0x96	; 150
    104e:	11 c0       	rjmp	.+34     	; 0x1072 <__floatsisf+0x6a>
    1050:	77 23       	and	r23, r23
    1052:	21 f0       	breq	.+8      	; 0x105c <__floatsisf+0x54>
    1054:	9e e8       	ldi	r25, 0x8E	; 142
    1056:	87 2f       	mov	r24, r23
    1058:	76 2f       	mov	r23, r22
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <__floatsisf+0x5e>
    105c:	66 23       	and	r22, r22
    105e:	71 f0       	breq	.+28     	; 0x107c <__floatsisf+0x74>
    1060:	96 e8       	ldi	r25, 0x86	; 134
    1062:	86 2f       	mov	r24, r22
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	2a f0       	brmi	.+10     	; 0x1074 <__floatsisf+0x6c>
    106a:	9a 95       	dec	r25
    106c:	66 0f       	add	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	da f7       	brpl	.-10     	; 0x106a <__floatsisf+0x62>
    1074:	88 0f       	add	r24, r24
    1076:	96 95       	lsr	r25
    1078:	87 95       	ror	r24
    107a:	97 f9       	bld	r25, 7
    107c:	08 95       	ret

0000107e <__fp_cmp>:
    107e:	99 0f       	add	r25, r25
    1080:	00 08       	sbc	r0, r0
    1082:	55 0f       	add	r21, r21
    1084:	aa 0b       	sbc	r26, r26
    1086:	e0 e8       	ldi	r30, 0x80	; 128
    1088:	fe ef       	ldi	r31, 0xFE	; 254
    108a:	16 16       	cp	r1, r22
    108c:	17 06       	cpc	r1, r23
    108e:	e8 07       	cpc	r30, r24
    1090:	f9 07       	cpc	r31, r25
    1092:	c0 f0       	brcs	.+48     	; 0x10c4 <__fp_cmp+0x46>
    1094:	12 16       	cp	r1, r18
    1096:	13 06       	cpc	r1, r19
    1098:	e4 07       	cpc	r30, r20
    109a:	f5 07       	cpc	r31, r21
    109c:	98 f0       	brcs	.+38     	; 0x10c4 <__fp_cmp+0x46>
    109e:	62 1b       	sub	r22, r18
    10a0:	73 0b       	sbc	r23, r19
    10a2:	84 0b       	sbc	r24, r20
    10a4:	95 0b       	sbc	r25, r21
    10a6:	39 f4       	brne	.+14     	; 0x10b6 <__fp_cmp+0x38>
    10a8:	0a 26       	eor	r0, r26
    10aa:	61 f0       	breq	.+24     	; 0x10c4 <__fp_cmp+0x46>
    10ac:	23 2b       	or	r18, r19
    10ae:	24 2b       	or	r18, r20
    10b0:	25 2b       	or	r18, r21
    10b2:	21 f4       	brne	.+8      	; 0x10bc <__fp_cmp+0x3e>
    10b4:	08 95       	ret
    10b6:	0a 26       	eor	r0, r26
    10b8:	09 f4       	brne	.+2      	; 0x10bc <__fp_cmp+0x3e>
    10ba:	a1 40       	sbci	r26, 0x01	; 1
    10bc:	a6 95       	lsr	r26
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	81 1d       	adc	r24, r1
    10c2:	81 1d       	adc	r24, r1
    10c4:	08 95       	ret

000010c6 <__fp_inf>:
    10c6:	97 f9       	bld	r25, 7
    10c8:	9f 67       	ori	r25, 0x7F	; 127
    10ca:	80 e8       	ldi	r24, 0x80	; 128
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	08 95       	ret

000010d2 <__fp_nan>:
    10d2:	9f ef       	ldi	r25, 0xFF	; 255
    10d4:	80 ec       	ldi	r24, 0xC0	; 192
    10d6:	08 95       	ret

000010d8 <__fp_pscA>:
    10d8:	00 24       	eor	r0, r0
    10da:	0a 94       	dec	r0
    10dc:	16 16       	cp	r1, r22
    10de:	17 06       	cpc	r1, r23
    10e0:	18 06       	cpc	r1, r24
    10e2:	09 06       	cpc	r0, r25
    10e4:	08 95       	ret

000010e6 <__fp_pscB>:
    10e6:	00 24       	eor	r0, r0
    10e8:	0a 94       	dec	r0
    10ea:	12 16       	cp	r1, r18
    10ec:	13 06       	cpc	r1, r19
    10ee:	14 06       	cpc	r1, r20
    10f0:	05 06       	cpc	r0, r21
    10f2:	08 95       	ret

000010f4 <__fp_round>:
    10f4:	09 2e       	mov	r0, r25
    10f6:	03 94       	inc	r0
    10f8:	00 0c       	add	r0, r0
    10fa:	11 f4       	brne	.+4      	; 0x1100 <__fp_round+0xc>
    10fc:	88 23       	and	r24, r24
    10fe:	52 f0       	brmi	.+20     	; 0x1114 <__fp_round+0x20>
    1100:	bb 0f       	add	r27, r27
    1102:	40 f4       	brcc	.+16     	; 0x1114 <__fp_round+0x20>
    1104:	bf 2b       	or	r27, r31
    1106:	11 f4       	brne	.+4      	; 0x110c <__fp_round+0x18>
    1108:	60 ff       	sbrs	r22, 0
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <__fp_round+0x20>
    110c:	6f 5f       	subi	r22, 0xFF	; 255
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	08 95       	ret

00001116 <__fp_split3>:
    1116:	57 fd       	sbrc	r21, 7
    1118:	90 58       	subi	r25, 0x80	; 128
    111a:	44 0f       	add	r20, r20
    111c:	55 1f       	adc	r21, r21
    111e:	59 f0       	breq	.+22     	; 0x1136 <__fp_splitA+0x10>
    1120:	5f 3f       	cpi	r21, 0xFF	; 255
    1122:	71 f0       	breq	.+28     	; 0x1140 <__fp_splitA+0x1a>
    1124:	47 95       	ror	r20

00001126 <__fp_splitA>:
    1126:	88 0f       	add	r24, r24
    1128:	97 fb       	bst	r25, 7
    112a:	99 1f       	adc	r25, r25
    112c:	61 f0       	breq	.+24     	; 0x1146 <__fp_splitA+0x20>
    112e:	9f 3f       	cpi	r25, 0xFF	; 255
    1130:	79 f0       	breq	.+30     	; 0x1150 <__fp_splitA+0x2a>
    1132:	87 95       	ror	r24
    1134:	08 95       	ret
    1136:	12 16       	cp	r1, r18
    1138:	13 06       	cpc	r1, r19
    113a:	14 06       	cpc	r1, r20
    113c:	55 1f       	adc	r21, r21
    113e:	f2 cf       	rjmp	.-28     	; 0x1124 <__fp_split3+0xe>
    1140:	46 95       	lsr	r20
    1142:	f1 df       	rcall	.-30     	; 0x1126 <__fp_splitA>
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <__fp_splitA+0x30>
    1146:	16 16       	cp	r1, r22
    1148:	17 06       	cpc	r1, r23
    114a:	18 06       	cpc	r1, r24
    114c:	99 1f       	adc	r25, r25
    114e:	f1 cf       	rjmp	.-30     	; 0x1132 <__fp_splitA+0xc>
    1150:	86 95       	lsr	r24
    1152:	71 05       	cpc	r23, r1
    1154:	61 05       	cpc	r22, r1
    1156:	08 94       	sec
    1158:	08 95       	ret

0000115a <__fp_zero>:
    115a:	e8 94       	clt

0000115c <__fp_szero>:
    115c:	bb 27       	eor	r27, r27
    115e:	66 27       	eor	r22, r22
    1160:	77 27       	eor	r23, r23
    1162:	cb 01       	movw	r24, r22
    1164:	97 f9       	bld	r25, 7
    1166:	08 95       	ret

00001168 <__gesf2>:
    1168:	8a df       	rcall	.-236    	; 0x107e <__fp_cmp>
    116a:	08 f4       	brcc	.+2      	; 0x116e <__gesf2+0x6>
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	08 95       	ret

00001170 <__mulsf3>:
    1170:	0b d0       	rcall	.+22     	; 0x1188 <__mulsf3x>
    1172:	c0 cf       	rjmp	.-128    	; 0x10f4 <__fp_round>
    1174:	b1 df       	rcall	.-158    	; 0x10d8 <__fp_pscA>
    1176:	28 f0       	brcs	.+10     	; 0x1182 <__mulsf3+0x12>
    1178:	b6 df       	rcall	.-148    	; 0x10e6 <__fp_pscB>
    117a:	18 f0       	brcs	.+6      	; 0x1182 <__mulsf3+0x12>
    117c:	95 23       	and	r25, r21
    117e:	09 f0       	breq	.+2      	; 0x1182 <__mulsf3+0x12>
    1180:	a2 cf       	rjmp	.-188    	; 0x10c6 <__fp_inf>
    1182:	a7 cf       	rjmp	.-178    	; 0x10d2 <__fp_nan>
    1184:	11 24       	eor	r1, r1
    1186:	ea cf       	rjmp	.-44     	; 0x115c <__fp_szero>

00001188 <__mulsf3x>:
    1188:	c6 df       	rcall	.-116    	; 0x1116 <__fp_split3>
    118a:	a0 f3       	brcs	.-24     	; 0x1174 <__mulsf3+0x4>

0000118c <__mulsf3_pse>:
    118c:	95 9f       	mul	r25, r21
    118e:	d1 f3       	breq	.-12     	; 0x1184 <__mulsf3+0x14>
    1190:	95 0f       	add	r25, r21
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	55 1f       	adc	r21, r21
    1196:	62 9f       	mul	r22, r18
    1198:	f0 01       	movw	r30, r0
    119a:	72 9f       	mul	r23, r18
    119c:	bb 27       	eor	r27, r27
    119e:	f0 0d       	add	r31, r0
    11a0:	b1 1d       	adc	r27, r1
    11a2:	63 9f       	mul	r22, r19
    11a4:	aa 27       	eor	r26, r26
    11a6:	f0 0d       	add	r31, r0
    11a8:	b1 1d       	adc	r27, r1
    11aa:	aa 1f       	adc	r26, r26
    11ac:	64 9f       	mul	r22, r20
    11ae:	66 27       	eor	r22, r22
    11b0:	b0 0d       	add	r27, r0
    11b2:	a1 1d       	adc	r26, r1
    11b4:	66 1f       	adc	r22, r22
    11b6:	82 9f       	mul	r24, r18
    11b8:	22 27       	eor	r18, r18
    11ba:	b0 0d       	add	r27, r0
    11bc:	a1 1d       	adc	r26, r1
    11be:	62 1f       	adc	r22, r18
    11c0:	73 9f       	mul	r23, r19
    11c2:	b0 0d       	add	r27, r0
    11c4:	a1 1d       	adc	r26, r1
    11c6:	62 1f       	adc	r22, r18
    11c8:	83 9f       	mul	r24, r19
    11ca:	a0 0d       	add	r26, r0
    11cc:	61 1d       	adc	r22, r1
    11ce:	22 1f       	adc	r18, r18
    11d0:	74 9f       	mul	r23, r20
    11d2:	33 27       	eor	r19, r19
    11d4:	a0 0d       	add	r26, r0
    11d6:	61 1d       	adc	r22, r1
    11d8:	23 1f       	adc	r18, r19
    11da:	84 9f       	mul	r24, r20
    11dc:	60 0d       	add	r22, r0
    11de:	21 1d       	adc	r18, r1
    11e0:	82 2f       	mov	r24, r18
    11e2:	76 2f       	mov	r23, r22
    11e4:	6a 2f       	mov	r22, r26
    11e6:	11 24       	eor	r1, r1
    11e8:	9f 57       	subi	r25, 0x7F	; 127
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	8a f0       	brmi	.+34     	; 0x1210 <__mulsf3_pse+0x84>
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <__mulsf3_pse+0x9c>
    11f0:	88 23       	and	r24, r24
    11f2:	4a f0       	brmi	.+18     	; 0x1206 <__mulsf3_pse+0x7a>
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	bb 1f       	adc	r27, r27
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	91 50       	subi	r25, 0x01	; 1
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__mulsf3_pse+0x64>
    1206:	9e 3f       	cpi	r25, 0xFE	; 254
    1208:	51 05       	cpc	r21, r1
    120a:	70 f0       	brcs	.+28     	; 0x1228 <__mulsf3_pse+0x9c>
    120c:	5c cf       	rjmp	.-328    	; 0x10c6 <__fp_inf>
    120e:	a6 cf       	rjmp	.-180    	; 0x115c <__fp_szero>
    1210:	5f 3f       	cpi	r21, 0xFF	; 255
    1212:	ec f3       	brlt	.-6      	; 0x120e <__mulsf3_pse+0x82>
    1214:	98 3e       	cpi	r25, 0xE8	; 232
    1216:	dc f3       	brlt	.-10     	; 0x120e <__mulsf3_pse+0x82>
    1218:	86 95       	lsr	r24
    121a:	77 95       	ror	r23
    121c:	67 95       	ror	r22
    121e:	b7 95       	ror	r27
    1220:	f7 95       	ror	r31
    1222:	e7 95       	ror	r30
    1224:	9f 5f       	subi	r25, 0xFF	; 255
    1226:	c1 f7       	brne	.-16     	; 0x1218 <__mulsf3_pse+0x8c>
    1228:	fe 2b       	or	r31, r30
    122a:	88 0f       	add	r24, r24
    122c:	91 1d       	adc	r25, r1
    122e:	96 95       	lsr	r25
    1230:	87 95       	ror	r24
    1232:	97 f9       	bld	r25, 7
    1234:	08 95       	ret

00001236 <_exit>:
    1236:	f8 94       	cli

00001238 <__stop_program>:
    1238:	ff cf       	rjmp	.-2      	; 0x1238 <__stop_program>
