
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001662  000016f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800162  00800162  00001758  2**0
                  ALLOC
  3 .debug_aranges 00000188  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e7  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000144b  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  00003012  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000140e  00000000  00000000  0000358f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  000049a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00004c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c38  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    //TODO: запретить прерывание INT1
    //TODO: включить непрерывное преобразование АЦП
    //TODO: разрешить прерывание по переполнению таймера 2
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
}
void LCDhome(void)			//LCD cursor home
{
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c1       	rjmp	.+784    	; 0x31a <__vector_2>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	fb c0       	rjmp	.+502    	; 0x21c <__vector_9>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c1       	rjmp	.+572    	; 0x276 <__vector_14>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c1       	rjmp	.+572    	; 0x28a <__vector_19>
      4e:	00 00       	nop
      50:	4b c1       	rjmp	.+662    	; 0x2e8 <__vector_20>
      52:	00 00       	nop
      54:	46 c0       	rjmp	.+140    	; 0xe2 <__vector_21>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
	...

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d4 e0       	ldi	r29, 0x04	; 4
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e2 e6       	ldi	r30, 0x62	; 98
      bc:	f6 e1       	ldi	r31, 0x16	; 22
      be:	02 c0       	rjmp	.+4      	; 0xc4 <.do_copy_data_start>

000000c0 <.do_copy_data_loop>:
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0

000000c4 <.do_copy_data_start>:
      c4:	a2 36       	cpi	r26, 0x62	; 98
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <.do_copy_data_loop>

000000ca <__do_clear_bss>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a2 e6       	ldi	r26, 0x62	; 98
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a5 37       	cpi	r26, 0x75	; 117
      d6:	b1 07       	cpc	r27, r17
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	1e d4       	rcall	.+2108   	; 0x918 <main>
      dc:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){
      e2:	1f 92       	push	r1
      e4:	0f 92       	push	r0
      e6:	0f b6       	in	r0, 0x3f	; 63
      e8:	0f 92       	push	r0
      ea:	11 24       	eor	r1, r1
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	2f 93       	push	r18
      f6:	3f 93       	push	r19
      f8:	4f 93       	push	r20
      fa:	5f 93       	push	r21
      fc:	6f 93       	push	r22
      fe:	7f 93       	push	r23
     100:	8f 93       	push	r24
     102:	9f 93       	push	r25
     104:	af 93       	push	r26
     106:	bf 93       	push	r27
     108:	ef 93       	push	r30
     10a:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
     10c:	60 91 79 00 	lds	r22, 0x0079
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	66 0f       	add	r22, r22
     114:	77 1f       	adc	r23, r23
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	88 27       	eor	r24, r24
     11c:	77 fd       	sbrc	r23, 7
     11e:	80 95       	com	r24
     120:	98 2f       	mov	r25, r24
     122:	c0 d6       	rcall	.+3456   	; 0xea4 <__floatsisf>
     124:	2c e5       	ldi	r18, 0x5C	; 92
     126:	3f e8       	ldi	r19, 0x8F	; 143
     128:	42 e4       	ldi	r20, 0x42	; 66
     12a:	5e e3       	ldi	r21, 0x3E	; 62
     12c:	6f d7       	rcall	.+3806   	; 0x100c <__mulsf3>
     12e:	60 93 67 01 	sts	0x0167, r22
     132:	70 93 68 01 	sts	0x0168, r23
     136:	80 93 69 01 	sts	0x0169, r24
     13a:	90 93 6a 01 	sts	0x016A, r25
    if (temperatureValue >= (targetTemp + Tolerance))
     13e:	60 91 1c 01 	lds	r22, 0x011C
     142:	70 91 1d 01 	lds	r23, 0x011D
     146:	80 91 1e 01 	lds	r24, 0x011E
     14a:	90 91 1f 01 	lds	r25, 0x011F
     14e:	20 91 62 01 	lds	r18, 0x0162
     152:	30 91 63 01 	lds	r19, 0x0163
     156:	40 91 64 01 	lds	r20, 0x0164
     15a:	50 91 65 01 	lds	r21, 0x0165
     15e:	e0 90 67 01 	lds	r14, 0x0167
     162:	f0 90 68 01 	lds	r15, 0x0168
     166:	00 91 69 01 	lds	r16, 0x0169
     16a:	10 91 6a 01 	lds	r17, 0x016A
     16e:	97 d5       	rcall	.+2862   	; 0xc9e <__addsf3>
     170:	a8 01       	movw	r20, r16
     172:	97 01       	movw	r18, r14
     174:	f8 d5       	rcall	.+3056   	; 0xd66 <__cmpsf2>
     176:	18 16       	cp	r1, r24
     178:	ac f0       	brlt	.+42     	; 0x1a4 <__vector_21+0xc2>
    BIT_clear(progFlags, FAN_ON);
}

inline static void turnOnCooler() 
{
    if(!BIT_read(progFlags, COOLING))
     17a:	90 91 1b 01 	lds	r25, 0x011B
     17e:	89 2f       	mov	r24, r25
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	80 fd       	sbrc	r24, 0
     188:	34 c0       	rjmp	.+104    	; 0x1f2 <__vector_21+0x110>
    }
}

inline static void turnOnFan() 
{
	BIT_write(CONTROL_PORT, FAN, 1);
     18a:	eb e2       	ldi	r30, 0x2B	; 43
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	81 60       	ori	r24, 0x01	; 1
     192:	80 83       	st	Z, r24
inline static void turnOnCooler() 
{
    if(!BIT_read(progFlags, COOLING))
    {   
        turnOnFan();
	    BIT_write(CONTROL_PORT, LOAD, 1);
     194:	80 81       	ld	r24, Z
     196:	80 64       	ori	r24, 0x40	; 64
     198:	80 83       	st	Z, r24
        BIT_write(progFlags, COOLING, 1);
     19a:	89 2f       	mov	r24, r25
     19c:	88 62       	ori	r24, 0x28	; 40
     19e:	80 93 1b 01 	sts	0x011B, r24
     1a2:	27 c0       	rjmp	.+78     	; 0x1f2 <__vector_21+0x110>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
     1a4:	60 91 67 01 	lds	r22, 0x0167
     1a8:	70 91 68 01 	lds	r23, 0x0168
     1ac:	80 91 69 01 	lds	r24, 0x0169
     1b0:	90 91 6a 01 	lds	r25, 0x016A
     1b4:	20 91 1c 01 	lds	r18, 0x011C
     1b8:	30 91 1d 01 	lds	r19, 0x011D
     1bc:	40 91 1e 01 	lds	r20, 0x011E
     1c0:	50 91 1f 01 	lds	r21, 0x011F
     1c4:	d0 d5       	rcall	.+2976   	; 0xd66 <__cmpsf2>
     1c6:	18 16       	cp	r1, r24
     1c8:	a4 f0       	brlt	.+40     	; 0x1f2 <__vector_21+0x110>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_read(progFlags, COOLING))
     1ca:	90 91 1b 01 	lds	r25, 0x011B
     1ce:	89 2f       	mov	r24, r25
     1d0:	86 95       	lsr	r24
     1d2:	86 95       	lsr	r24
     1d4:	86 95       	lsr	r24
     1d6:	80 ff       	sbrs	r24, 0
     1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <__vector_21+0x110>
	BIT_write(progFlags, FAN_ON, 1);
}

inline static void turnOffFan()
{
    BIT_clear(CONTROL_PORT, FAN);
     1da:	eb e2       	ldi	r30, 0x2B	; 43
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	8e 7f       	andi	r24, 0xFE	; 254
     1e2:	80 83       	st	Z, r24
inline static void turnOffCooler() 
{
    if(BIT_read(progFlags, COOLING))
    {
        turnOffFan();
	    BIT_clear(CONTROL_PORT, LOAD);
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7b       	andi	r24, 0xBF	; 191
     1e8:	80 83       	st	Z, r24
        BIT_clear(progFlags, COOLING);
     1ea:	89 2f       	mov	r24, r25
     1ec:	87 7d       	andi	r24, 0xD7	; 215
     1ee:	80 93 1b 01 	sts	0x011B, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
     1f2:	ff 91       	pop	r31
     1f4:	ef 91       	pop	r30
     1f6:	bf 91       	pop	r27
     1f8:	af 91       	pop	r26
     1fa:	9f 91       	pop	r25
     1fc:	8f 91       	pop	r24
     1fe:	7f 91       	pop	r23
     200:	6f 91       	pop	r22
     202:	5f 91       	pop	r21
     204:	4f 91       	pop	r20
     206:	3f 91       	pop	r19
     208:	2f 91       	pop	r18
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	ff 90       	pop	r15
     210:	ef 90       	pop	r14
     212:	0f 90       	pop	r0
     214:	0f be       	out	0x3f, r0	; 63
     216:	0f 90       	pop	r0
     218:	1f 90       	pop	r1
     21a:	18 95       	reti

0000021c <__vector_9>:



ISR(TIMER2_OVF_vect){
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	8f 93       	push	r24
     228:	9f 93       	push	r25
     22a:	af 93       	push	r26
     22c:	bf 93       	push	r27
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
     22e:	80 91 67 01 	lds	r24, 0x0167
     232:	90 91 68 01 	lds	r25, 0x0168
     236:	a0 91 69 01 	lds	r26, 0x0169
     23a:	b0 91 6a 01 	lds	r27, 0x016A

inline static void sendData( volatile double a) 
{
    //BIN8toASCII3(USART_buffer[0], USART_buffer[1], USART_buffer[2],a); //TODO: доопределить
    //memcpy(&USART_buffer,&a, 8);
    USART_buffer[7]= '\n';
     23e:	8a e0       	ldi	r24, 0x0A	; 10
     240:	80 93 74 01 	sts	0x0174, r24
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
    runSeconds++;
     244:	80 91 66 01 	lds	r24, 0x0166
     248:	8f 5f       	subi	r24, 0xFF	; 255
     24a:	80 93 66 01 	sts	0x0166, r24
    if (runSeconds==timeOut)
     24e:	80 91 66 01 	lds	r24, 0x0166
     252:	8a 30       	cpi	r24, 0x0A	; 10
     254:	39 f4       	brne	.+14     	; 0x264 <__vector_9+0x48>
    {
        runSeconds= 0; // сбрасывает счетчик секунд
     256:	10 92 66 01 	sts	0x0166, r1
        BIT_write(progFlags, INACTIVE, 1);
     25a:	80 91 1b 01 	lds	r24, 0x011B
     25e:	80 61       	ori	r24, 0x10	; 16
     260:	80 93 1b 01 	sts	0x011B, r24
    }
    return;
}
     264:	bf 91       	pop	r27
     266:	af 91       	pop	r26
     268:	9f 91       	pop	r25
     26a:	8f 91       	pop	r24
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_14>:

ISR(TIMER0_COMPA_vect){
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
    return;
}
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <__vector_19>:
    BIT_write(progFlags, LCD_ON, 1);
    LCD_prepare("TEMP:", 5, 0, 0);
    LCDvisible();
}

ISR(USART_UDRE_vect){
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	8f 93       	push	r24
     296:	9f 93       	push	r25
     298:	ef 93       	push	r30
     29a:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : отдавать модулю УСАПП следующий байт сообщения
    //////////////////////////////////////////////////////////////////////////
    UDR0= USART_buffer[USART_index];
     29c:	e0 91 6b 01 	lds	r30, 0x016B
     2a0:	f0 91 6c 01 	lds	r31, 0x016C
     2a4:	e3 59       	subi	r30, 0x93	; 147
     2a6:	fe 4f       	sbci	r31, 0xFE	; 254
     2a8:	80 81       	ld	r24, Z
     2aa:	80 93 c6 00 	sts	0x00C6, r24
    USART_index++;
     2ae:	80 91 6b 01 	lds	r24, 0x016B
     2b2:	90 91 6c 01 	lds	r25, 0x016C
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	90 93 6c 01 	sts	0x016C, r25
     2bc:	80 93 6b 01 	sts	0x016B, r24
    if(USART_index == 8) {
     2c0:	80 91 6b 01 	lds	r24, 0x016B
     2c4:	90 91 6c 01 	lds	r25, 0x016C
     2c8:	08 97       	sbiw	r24, 0x08	; 8
     2ca:	29 f4       	brne	.+10     	; 0x2d6 <__vector_19+0x4c>
        BIT_write(UCSR0B, UDRIE0, 0);
     2cc:	e1 ec       	ldi	r30, 0xC1	; 193
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	8f 7d       	andi	r24, 0xDF	; 223
     2d4:	80 83       	st	Z, r24
    }
}
     2d6:	ff 91       	pop	r31
     2d8:	ef 91       	pop	r30
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <__vector_20>:

ISR(USART_TX_vect){
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
    return;
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <LCD_prepare>:
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}

void LCD_prepare(unsigned char* str, uint8_t size, int x, int y)
{
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	8c 01       	movw	r16, r24
     304:	f6 2e       	mov	r15, r22
     306:	84 2f       	mov	r24, r20
    LCDGotoXY(x, y);
     308:	62 2f       	mov	r22, r18
     30a:	33 d4       	rcall	.+2150   	; 0xb72 <LCDGotoXY>
    LCDstring(str, size);
     30c:	c8 01       	movw	r24, r16
     30e:	6f 2d       	mov	r22, r15
     310:	18 d4       	rcall	.+2096   	; 0xb42 <LCDstring>
}
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	08 95       	ret

0000031a <__vector_2>:

ISR(TIMER0_COMPA_vect){
    return;
}

ISR(INT1_vect){
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	2f 93       	push	r18
     326:	3f 93       	push	r19
     328:	4f 93       	push	r20
     32a:	5f 93       	push	r21
     32c:	6f 93       	push	r22
     32e:	7f 93       	push	r23
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
     334:	af 93       	push	r26
     336:	bf 93       	push	r27
     338:	ef 93       	push	r30
     33a:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : выходить из сна
    //////////////////////////////////////////////////////////////////////////
    turnOffSleep();
    BIT_write(progFlags, LCD_ON, 1);
     33c:	80 91 1b 01 	lds	r24, 0x011B
     340:	81 60       	ori	r24, 0x01	; 1
     342:	80 93 1b 01 	sts	0x011B, r24
    LCD_prepare("TEMP:", 5, 0, 0);
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	65 e0       	ldi	r22, 0x05	; 5
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	d3 df       	rcall	.-90     	; 0x2fc <LCD_prepare>
    LCDvisible();
     356:	9b d4       	rcall	.+2358   	; 0xc8e <LCDvisible>
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <double2char>:
#ifndef D2C_H_
#define D2C_H_


void double2char(char* arr, double value) {
    sprintf(arr, "%2.2f", value);
     37a:	2d b7       	in	r18, 0x3d	; 61
     37c:	3e b7       	in	r19, 0x3e	; 62
     37e:	28 50       	subi	r18, 0x08	; 8
     380:	30 40       	sbci	r19, 0x00	; 0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	3e bf       	out	0x3e, r19	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	2d bf       	out	0x3d, r18	; 61
     38c:	ed b7       	in	r30, 0x3d	; 61
     38e:	fe b7       	in	r31, 0x3e	; 62
     390:	31 96       	adiw	r30, 0x01	; 1
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	80 83       	st	Z, r24
     396:	8c e0       	ldi	r24, 0x0C	; 12
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	93 83       	std	Z+3, r25	; 0x03
     39c:	82 83       	std	Z+2, r24	; 0x02
     39e:	44 83       	std	Z+4, r20	; 0x04
     3a0:	55 83       	std	Z+5, r21	; 0x05
     3a2:	66 83       	std	Z+6, r22	; 0x06
     3a4:	77 83       	std	Z+7, r23	; 0x07
     3a6:	95 d6       	rcall	.+3370   	; 0x10d2 <sprintf>
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	08 96       	adiw	r24, 0x08	; 8
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	9e bf       	out	0x3e, r25	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	8d bf       	out	0x3d, r24	; 61
}
     3b8:	08 95       	ret

000003ba <LCD_DisplayAll>:
    LCDGotoXY(x, y);
    LCDstring(str, size);
}

void LCD_DisplayAll()
{   
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <LCD_DisplayAll+0xe>
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <LCD_DisplayAll+0x10>
     3ca:	0f 92       	push	r0
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
    char arr[5];
    LCDGotoXY(6, 0);
     3d0:	86 e0       	ldi	r24, 0x06	; 6
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	ce d3       	rcall	.+1948   	; 0xb72 <LCDGotoXY>
    double2char(arr, temperatureValue);
     3d6:	40 91 67 01 	lds	r20, 0x0167
     3da:	50 91 68 01 	lds	r21, 0x0168
     3de:	60 91 69 01 	lds	r22, 0x0169
     3e2:	70 91 6a 01 	lds	r23, 0x016A
     3e6:	8e 01       	movw	r16, r28
     3e8:	0f 5f       	subi	r16, 0xFF	; 255
     3ea:	1f 4f       	sbci	r17, 0xFF	; 255
     3ec:	c8 01       	movw	r24, r16
     3ee:	c5 df       	rcall	.-118    	; 0x37a <double2char>
    LCDstring(arr, 8);
     3f0:	c8 01       	movw	r24, r16
     3f2:	68 e0       	ldi	r22, 0x08	; 8
     3f4:	a6 d3       	rcall	.+1868   	; 0xb42 <LCDstring>
    if (BIT_read(progFlags, COOLING))
     3f6:	80 91 1b 01 	lds	r24, 0x011B
     3fa:	86 95       	lsr	r24
     3fc:	86 95       	lsr	r24
     3fe:	86 95       	lsr	r24
     400:	80 ff       	sbrs	r24, 0
     402:	35 c0       	rjmp	.+106    	; 0x46e <LCD_DisplayAll+0xb4>
    {
        LCDGotoXY(0, 1);
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	b4 d3       	rcall	.+1896   	; 0xb72 <LCDGotoXY>
        LCDstring("COOLING ", 8);
     40a:	82 e1       	ldi	r24, 0x12	; 18
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	68 e0       	ldi	r22, 0x08	; 8
     410:	98 d3       	rcall	.+1840   	; 0xb42 <LCDstring>
        LCDGotoXY(8, 1);
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	ad d3       	rcall	.+1882   	; 0xb72 <LCDGotoXY>
        double2char(arr, ((temperatureValue - targetTemp)/Tolerance)*100);
     418:	60 91 67 01 	lds	r22, 0x0167
     41c:	70 91 68 01 	lds	r23, 0x0168
     420:	80 91 69 01 	lds	r24, 0x0169
     424:	90 91 6a 01 	lds	r25, 0x016A
     428:	20 91 1c 01 	lds	r18, 0x011C
     42c:	30 91 1d 01 	lds	r19, 0x011D
     430:	40 91 1e 01 	lds	r20, 0x011E
     434:	50 91 1f 01 	lds	r21, 0x011F
     438:	e0 90 62 01 	lds	r14, 0x0162
     43c:	f0 90 63 01 	lds	r15, 0x0163
     440:	00 91 64 01 	lds	r16, 0x0164
     444:	10 91 65 01 	lds	r17, 0x0165
     448:	29 d4       	rcall	.+2130   	; 0xc9c <__subsf3>
     44a:	a8 01       	movw	r20, r16
     44c:	97 01       	movw	r18, r14
     44e:	8f d4       	rcall	.+2334   	; 0xd6e <__divsf3>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	48 ec       	ldi	r20, 0xC8	; 200
     456:	52 e4       	ldi	r21, 0x42	; 66
     458:	d9 d5       	rcall	.+2994   	; 0x100c <__mulsf3>
     45a:	ab 01       	movw	r20, r22
     45c:	bc 01       	movw	r22, r24
     45e:	8e 01       	movw	r16, r28
     460:	0f 5f       	subi	r16, 0xFF	; 255
     462:	1f 4f       	sbci	r17, 0xFF	; 255
     464:	c8 01       	movw	r24, r16
     466:	89 df       	rcall	.-238    	; 0x37a <double2char>
        LCDstring(arr, 8);
     468:	c8 01       	movw	r24, r16
     46a:	68 e0       	ldi	r22, 0x08	; 8
     46c:	6a d3       	rcall	.+1748   	; 0xb42 <LCDstring>
    }
}
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	08 95       	ret

00000486 <menuRun>:
}

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()
{
     486:	2f 92       	push	r2
     488:	3f 92       	push	r3
     48a:	4f 92       	push	r4
     48c:	5f 92       	push	r5
     48e:	6f 92       	push	r6
     490:	7f 92       	push	r7
     492:	8f 92       	push	r8
     494:	9f 92       	push	r9
     496:	af 92       	push	r10
     498:	bf 92       	push	r11
     49a:	cf 92       	push	r12
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	df 93       	push	r29
     4a8:	cf 93       	push	r28
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	c9 54       	subi	r28, 0x49	; 73
     4b0:	d0 40       	sbci	r29, 0x00	; 0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
     4bc:	de 01       	movw	r26, r28
     4be:	11 96       	adiw	r26, 0x01	; 1
     4c0:	e1 e2       	ldi	r30, 0x21	; 33
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	80 e4       	ldi	r24, 0x40	; 64
     4c6:	01 90       	ld	r0, Z+
     4c8:	0d 92       	st	X+, r0
     4ca:	81 50       	subi	r24, 0x01	; 1
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
     4ce:	60 91 1c 01 	lds	r22, 0x011C
     4d2:	70 91 1d 01 	lds	r23, 0x011D
     4d6:	80 91 1e 01 	lds	r24, 0x011E
     4da:	90 91 1f 01 	lds	r25, 0x011F
     4de:	c0 90 62 01 	lds	r12, 0x0162
     4e2:	d0 90 63 01 	lds	r13, 0x0163
     4e6:	e0 90 64 01 	lds	r14, 0x0164
     4ea:	f0 90 65 01 	lds	r15, 0x0165
     4ee:	b0 90 20 01 	lds	r11, 0x0120
     4f2:	00 91 1b 01 	lds	r16, 0x011B
     4f6:	06 95       	lsr	r16
     4f8:	06 95       	lsr	r16
     4fa:	10 e0       	ldi	r17, 0x00	; 0
     4fc:	01 70       	andi	r16, 0x01	; 1
     4fe:	10 70       	andi	r17, 0x00	; 0
     500:	9e d4       	rcall	.+2364   	; 0xe3e <__fixsfsi>
     502:	fe 01       	movw	r30, r28
     504:	ef 5b       	subi	r30, 0xBF	; 191
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	71 83       	std	Z+1, r23	; 0x01
     50a:	60 83       	st	Z, r22
     50c:	c7 01       	movw	r24, r14
     50e:	b6 01       	movw	r22, r12
     510:	96 d4       	rcall	.+2348   	; 0xe3e <__fixsfsi>
     512:	fe 01       	movw	r30, r28
     514:	ed 5b       	subi	r30, 0xBD	; 189
     516:	ff 4f       	sbci	r31, 0xFF	; 255
     518:	71 83       	std	Z+1, r23	; 0x01
     51a:	60 83       	st	Z, r22
     51c:	fe 01       	movw	r30, r28
     51e:	eb 5b       	subi	r30, 0xBB	; 187
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	b0 82       	st	Z, r11
     524:	11 82       	std	Z+1, r1	; 0x01
     526:	fe 01       	movw	r30, r28
     528:	e9 5b       	subi	r30, 0xB9	; 185
     52a:	ff 4f       	sbci	r31, 0xFF	; 255
     52c:	11 83       	std	Z+1, r17	; 0x01
     52e:	00 83       	st	Z, r16
    LCDclr();
     530:	06 d3       	rcall	.+1548   	; 0xb3e <LCDclr>
     532:	cc 24       	eor	r12, r12
     534:	dd 24       	eor	r13, r13
    while ((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
     536:	0f 2e       	mov	r0, r31
     538:	fb e2       	ldi	r31, 0x2B	; 43
     53a:	af 2e       	mov	r10, r31
     53c:	bb 24       	eor	r11, r11
     53e:	f0 2d       	mov	r31, r0
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
            BIT_clear(progFlags, INACTIVE);
            int value= values[pos];
     540:	0f 2e       	mov	r0, r31
     542:	f1 e4       	ldi	r31, 0x41	; 65
     544:	2f 2e       	mov	r2, r31
     546:	33 24       	eor	r3, r3
     548:	f0 2d       	mov	r31, r0
     54a:	2c 0e       	add	r2, r28
     54c:	3d 1e       	adc	r3, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	68 2e       	mov	r6, r24
     554:	2a 96       	adiw	r28, 0x0a	; 10
     556:	9f af       	std	Y+63, r25	; 0x3f
     558:	2a 97       	sbiw	r28, 0x0a	; 10
     55a:	ae c1       	rjmp	.+860    	; 0x8b8 <__stack+0x3b9>
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
    LCDclr();
    while ((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
     55c:	f5 01       	movw	r30, r10
     55e:	80 81       	ld	r24, Z
     560:	83 fd       	sbrc	r24, 3
     562:	57 c1       	rjmp	.+686    	; 0x812 <__stack+0x313>
            BIT_clear(progFlags, INACTIVE);
     564:	0f 2e       	mov	r0, r31
     566:	ff ee       	ldi	r31, 0xEF	; 239
     568:	7f 2e       	mov	r7, r31
     56a:	f0 2d       	mov	r31, r0
     56c:	79 22       	and	r7, r25
     56e:	70 92 1b 01 	sts	0x011B, r7
            int value= values[pos];
     572:	c6 01       	movw	r24, r12
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	f1 01       	movw	r30, r2
     57a:	e8 0f       	add	r30, r24
     57c:	f9 1f       	adc	r31, r25
     57e:	40 80       	ld	r4, Z
     580:	51 80       	ldd	r5, Z+1	; 0x01
                //LCD_Write(values[pos],1,0);
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
                {
                    BIT_clear(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     582:	4f 01       	movw	r8, r30
     584:	40 c1       	rjmp	.+640    	; 0x806 <__stack+0x307>
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
            BIT_clear(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
                //LCD_Write(values[pos],1,0);
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
     586:	f5 01       	movw	r30, r10
     588:	80 81       	ld	r24, Z
     58a:	85 fd       	sbrc	r24, 5
     58c:	8a c0       	rjmp	.+276    	; 0x6a2 <__stack+0x1a3>
                {
                    BIT_clear(progFlags, INACTIVE);
     58e:	ff ee       	ldi	r31, 0xEF	; 239
     590:	7f 22       	and	r7, r31
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     592:	f4 01       	movw	r30, r8
     594:	80 81       	ld	r24, Z
     596:	91 81       	ldd	r25, Z+1	; 0x01
     598:	9c 01       	movw	r18, r24
     59a:	2f 5f       	subi	r18, 0xFF	; 255
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     59e:	f2 e0       	ldi	r31, 0x02	; 2
     5a0:	cf 16       	cp	r12, r31
     5a2:	d1 04       	cpc	r13, r1
     5a4:	c1 f1       	breq	.+112    	; 0x616 <__stack+0x117>
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	c8 16       	cp	r12, r24
     5aa:	d1 04       	cpc	r13, r1
     5ac:	34 f4       	brge	.+12     	; 0x5ba <__stack+0xbb>
     5ae:	e1 e0       	ldi	r30, 0x01	; 1
     5b0:	ce 16       	cp	r12, r30
     5b2:	d1 04       	cpc	r13, r1
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <__stack+0xb9>
     5b6:	6c c0       	rjmp	.+216    	; 0x690 <__stack+0x191>
     5b8:	0b c0       	rjmp	.+22     	; 0x5d0 <__stack+0xd1>
     5ba:	f3 e0       	ldi	r31, 0x03	; 3
     5bc:	cf 16       	cp	r12, r31
     5be:	d1 04       	cpc	r13, r1
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <__stack+0xc5>
     5c2:	49 c0       	rjmp	.+146    	; 0x656 <__stack+0x157>
     5c4:	84 e0       	ldi	r24, 0x04	; 4
     5c6:	c8 16       	cp	r12, r24
     5c8:	d1 04       	cpc	r13, r1
     5ca:	09 f0       	breq	.+2      	; 0x5ce <__stack+0xcf>
     5cc:	61 c0       	rjmp	.+194    	; 0x690 <__stack+0x191>
     5ce:	4d c0       	rjmp	.+154    	; 0x66a <__stack+0x16b>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     5d0:	b9 01       	movw	r22, r18
     5d2:	88 27       	eor	r24, r24
     5d4:	77 fd       	sbrc	r23, 7
     5d6:	80 95       	com	r24
     5d8:	98 2f       	mov	r25, r24
     5da:	64 d4       	rcall	.+2248   	; 0xea4 <__floatsisf>
     5dc:	7b 01       	movw	r14, r22
     5de:	8c 01       	movw	r16, r24
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e7       	ldi	r20, 0x70	; 112
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	be d3       	rcall	.+1916   	; 0xd66 <__cmpsf2>
     5ea:	88 23       	and	r24, r24
     5ec:	1c f4       	brge	.+6      	; 0x5f4 <__stack+0xf5>
     5ee:	8f e0       	ldi	r24, 0x0F	; 15
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	54 c0       	rjmp	.+168    	; 0x69c <__stack+0x19d>
     5f4:	c8 01       	movw	r24, r16
     5f6:	b7 01       	movw	r22, r14
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 ea       	ldi	r20, 0xA0	; 160
     5fe:	51 e4       	ldi	r21, 0x41	; 65
     600:	01 d5       	rcall	.+2562   	; 0x1004 <__gesf2>
     602:	18 16       	cp	r1, r24
     604:	1c f4       	brge	.+6      	; 0x60c <__stack+0x10d>
     606:	84 e1       	ldi	r24, 0x14	; 20
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	48 c0       	rjmp	.+144    	; 0x69c <__stack+0x19d>
     60c:	c8 01       	movw	r24, r16
     60e:	b7 01       	movw	r22, r14
     610:	16 d4       	rcall	.+2092   	; 0xe3e <__fixsfsi>
     612:	cb 01       	movw	r24, r22
     614:	43 c0       	rjmp	.+134    	; 0x69c <__stack+0x19d>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     616:	b9 01       	movw	r22, r18
     618:	88 27       	eor	r24, r24
     61a:	77 fd       	sbrc	r23, 7
     61c:	80 95       	com	r24
     61e:	98 2f       	mov	r25, r24
     620:	41 d4       	rcall	.+2178   	; 0xea4 <__floatsisf>
     622:	7b 01       	movw	r14, r22
     624:	8c 01       	movw	r16, r24
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	9b d3       	rcall	.+1846   	; 0xd66 <__cmpsf2>
     630:	88 23       	and	r24, r24
     632:	84 f1       	brlt	.+96     	; 0x694 <__stack+0x195>
     634:	c8 01       	movw	r24, r16
     636:	b7 01       	movw	r22, r14
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	e1 d4       	rcall	.+2498   	; 0x1004 <__gesf2>
     642:	18 16       	cp	r1, r24
     644:	1c f4       	brge	.+6      	; 0x64c <__stack+0x14d>
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	28 c0       	rjmp	.+80     	; 0x69c <__stack+0x19d>
     64c:	c8 01       	movw	r24, r16
     64e:	b7 01       	movw	r22, r14
     650:	f6 d3       	rcall	.+2028   	; 0xe3e <__fixsfsi>
     652:	cb 01       	movw	r24, r22
     654:	23 c0       	rjmp	.+70     	; 0x69c <__stack+0x19d>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     656:	33 23       	and	r19, r19
     658:	1c f4       	brge	.+6      	; 0x660 <__stack+0x161>
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	1e c0       	rjmp	.+60     	; 0x69c <__stack+0x19d>
     660:	e4 e0       	ldi	r30, 0x04	; 4
     662:	20 30       	cpi	r18, 0x00	; 0
     664:	3e 07       	cpc	r19, r30
     666:	a4 f0       	brlt	.+40     	; 0x690 <__stack+0x191>
     668:	15 c0       	rjmp	.+42     	; 0x694 <__stack+0x195>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     66a:	c9 01       	movw	r24, r18
     66c:	52 2f       	mov	r21, r18
     66e:	49 2f       	mov	r20, r25
     670:	12 16       	cp	r1, r18
     672:	13 06       	cpc	r1, r19
     674:	24 f4       	brge	.+8      	; 0x67e <__stack+0x17f>
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	58 2f       	mov	r21, r24
     67c:	49 2f       	mov	r20, r25
     67e:	85 2f       	mov	r24, r21
     680:	94 2f       	mov	r25, r20
     682:	99 23       	and	r25, r25
     684:	5c f4       	brge	.+22     	; 0x69c <__stack+0x19d>
     686:	86 2d       	mov	r24, r6
     688:	2a 96       	adiw	r28, 0x0a	; 10
     68a:	9f ad       	ldd	r25, Y+63	; 0x3f
     68c:	2a 97       	sbiw	r28, 0x0a	; 10
     68e:	06 c0       	rjmp	.+12     	; 0x69c <__stack+0x19d>
     690:	c9 01       	movw	r24, r18
     692:	04 c0       	rjmp	.+8      	; 0x69c <__stack+0x19d>
     694:	86 2d       	mov	r24, r6
     696:	2a 96       	adiw	r28, 0x0a	; 10
     698:	9f ad       	ldd	r25, Y+63	; 0x3f
     69a:	2a 97       	sbiw	r28, 0x0a	; 10
                //LCD_Write(values[pos],1,0);
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
                {
                    BIT_clear(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     69c:	f4 01       	movw	r30, r8
     69e:	91 83       	std	Z+1, r25	; 0x01
     6a0:	80 83       	st	Z, r24
                }
                if (!BIT_read(CONTROL_PORT, BUTTON_M))
     6a2:	f5 01       	movw	r30, r10
     6a4:	80 81       	ld	r24, Z
     6a6:	84 fd       	sbrc	r24, 4
     6a8:	8a c0       	rjmp	.+276    	; 0x7be <__stack+0x2bf>
                {
                    BIT_clear(progFlags, INACTIVE);
     6aa:	ff ee       	ldi	r31, 0xEF	; 239
     6ac:	7f 22       	and	r7, r31
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     6ae:	f4 01       	movw	r30, r8
     6b0:	80 81       	ld	r24, Z
     6b2:	91 81       	ldd	r25, Z+1	; 0x01
     6b4:	9c 01       	movw	r18, r24
     6b6:	21 50       	subi	r18, 0x01	; 1
     6b8:	30 40       	sbci	r19, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     6ba:	f2 e0       	ldi	r31, 0x02	; 2
     6bc:	cf 16       	cp	r12, r31
     6be:	d1 04       	cpc	r13, r1
     6c0:	c1 f1       	breq	.+112    	; 0x732 <__stack+0x233>
     6c2:	83 e0       	ldi	r24, 0x03	; 3
     6c4:	c8 16       	cp	r12, r24
     6c6:	d1 04       	cpc	r13, r1
     6c8:	34 f4       	brge	.+12     	; 0x6d6 <__stack+0x1d7>
     6ca:	e1 e0       	ldi	r30, 0x01	; 1
     6cc:	ce 16       	cp	r12, r30
     6ce:	d1 04       	cpc	r13, r1
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <__stack+0x1d5>
     6d2:	6c c0       	rjmp	.+216    	; 0x7ac <__stack+0x2ad>
     6d4:	0b c0       	rjmp	.+22     	; 0x6ec <__stack+0x1ed>
     6d6:	f3 e0       	ldi	r31, 0x03	; 3
     6d8:	cf 16       	cp	r12, r31
     6da:	d1 04       	cpc	r13, r1
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <__stack+0x1e1>
     6de:	49 c0       	rjmp	.+146    	; 0x772 <__stack+0x273>
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	c8 16       	cp	r12, r24
     6e4:	d1 04       	cpc	r13, r1
     6e6:	09 f0       	breq	.+2      	; 0x6ea <__stack+0x1eb>
     6e8:	61 c0       	rjmp	.+194    	; 0x7ac <__stack+0x2ad>
     6ea:	4d c0       	rjmp	.+154    	; 0x786 <__stack+0x287>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     6ec:	b9 01       	movw	r22, r18
     6ee:	88 27       	eor	r24, r24
     6f0:	77 fd       	sbrc	r23, 7
     6f2:	80 95       	com	r24
     6f4:	98 2f       	mov	r25, r24
     6f6:	d6 d3       	rcall	.+1964   	; 0xea4 <__floatsisf>
     6f8:	7b 01       	movw	r14, r22
     6fa:	8c 01       	movw	r16, r24
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e7       	ldi	r20, 0x70	; 112
     702:	51 e4       	ldi	r21, 0x41	; 65
     704:	30 d3       	rcall	.+1632   	; 0xd66 <__cmpsf2>
     706:	88 23       	and	r24, r24
     708:	1c f4       	brge	.+6      	; 0x710 <__stack+0x211>
     70a:	8f e0       	ldi	r24, 0x0F	; 15
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	54 c0       	rjmp	.+168    	; 0x7b8 <__stack+0x2b9>
     710:	c8 01       	movw	r24, r16
     712:	b7 01       	movw	r22, r14
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 ea       	ldi	r20, 0xA0	; 160
     71a:	51 e4       	ldi	r21, 0x41	; 65
     71c:	73 d4       	rcall	.+2278   	; 0x1004 <__gesf2>
     71e:	18 16       	cp	r1, r24
     720:	1c f4       	brge	.+6      	; 0x728 <__stack+0x229>
     722:	84 e1       	ldi	r24, 0x14	; 20
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	48 c0       	rjmp	.+144    	; 0x7b8 <__stack+0x2b9>
     728:	c8 01       	movw	r24, r16
     72a:	b7 01       	movw	r22, r14
     72c:	88 d3       	rcall	.+1808   	; 0xe3e <__fixsfsi>
     72e:	cb 01       	movw	r24, r22
     730:	43 c0       	rjmp	.+134    	; 0x7b8 <__stack+0x2b9>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     732:	b9 01       	movw	r22, r18
     734:	88 27       	eor	r24, r24
     736:	77 fd       	sbrc	r23, 7
     738:	80 95       	com	r24
     73a:	98 2f       	mov	r25, r24
     73c:	b3 d3       	rcall	.+1894   	; 0xea4 <__floatsisf>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	0d d3       	rcall	.+1562   	; 0xd66 <__cmpsf2>
     74c:	88 23       	and	r24, r24
     74e:	84 f1       	brlt	.+96     	; 0x7b0 <__stack+0x2b1>
     750:	c8 01       	movw	r24, r16
     752:	b7 01       	movw	r22, r14
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e8       	ldi	r20, 0x80	; 128
     75a:	5f e3       	ldi	r21, 0x3F	; 63
     75c:	53 d4       	rcall	.+2214   	; 0x1004 <__gesf2>
     75e:	18 16       	cp	r1, r24
     760:	1c f4       	brge	.+6      	; 0x768 <__stack+0x269>
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	28 c0       	rjmp	.+80     	; 0x7b8 <__stack+0x2b9>
     768:	c8 01       	movw	r24, r16
     76a:	b7 01       	movw	r22, r14
     76c:	68 d3       	rcall	.+1744   	; 0xe3e <__fixsfsi>
     76e:	cb 01       	movw	r24, r22
     770:	23 c0       	rjmp	.+70     	; 0x7b8 <__stack+0x2b9>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     772:	33 23       	and	r19, r19
     774:	1c f4       	brge	.+6      	; 0x77c <__stack+0x27d>
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	93 e0       	ldi	r25, 0x03	; 3
     77a:	1e c0       	rjmp	.+60     	; 0x7b8 <__stack+0x2b9>
     77c:	e4 e0       	ldi	r30, 0x04	; 4
     77e:	20 30       	cpi	r18, 0x00	; 0
     780:	3e 07       	cpc	r19, r30
     782:	a4 f0       	brlt	.+40     	; 0x7ac <__stack+0x2ad>
     784:	15 c0       	rjmp	.+42     	; 0x7b0 <__stack+0x2b1>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     786:	c9 01       	movw	r24, r18
     788:	52 2f       	mov	r21, r18
     78a:	49 2f       	mov	r20, r25
     78c:	12 16       	cp	r1, r18
     78e:	13 06       	cpc	r1, r19
     790:	24 f4       	brge	.+8      	; 0x79a <__stack+0x29b>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	58 2f       	mov	r21, r24
     798:	49 2f       	mov	r20, r25
     79a:	85 2f       	mov	r24, r21
     79c:	94 2f       	mov	r25, r20
     79e:	99 23       	and	r25, r25
     7a0:	5c f4       	brge	.+22     	; 0x7b8 <__stack+0x2b9>
     7a2:	86 2d       	mov	r24, r6
     7a4:	2a 96       	adiw	r28, 0x0a	; 10
     7a6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7a8:	2a 97       	sbiw	r28, 0x0a	; 10
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <__stack+0x2b9>
     7ac:	c9 01       	movw	r24, r18
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__stack+0x2b9>
     7b0:	86 2d       	mov	r24, r6
     7b2:	2a 96       	adiw	r28, 0x0a	; 10
     7b4:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b6:	2a 97       	sbiw	r28, 0x0a	; 10
                }
                if (!BIT_read(CONTROL_PORT, BUTTON_M))
                {
                    BIT_clear(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     7b8:	f4 01       	movw	r30, r8
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	80 83       	st	Z, r24

                }
                if (!BIT_read(CONTROL_PORT, BUTTON_OK)) {
     7be:	f5 01       	movw	r30, r10
     7c0:	80 81       	ld	r24, Z
     7c2:	83 fd       	sbrc	r24, 3
     7c4:	20 c0       	rjmp	.+64     	; 0x806 <__stack+0x307>
     7c6:	70 92 1b 01 	sts	0x011B, r7
                    if(pos!=3){
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	cf 16       	cp	r12, r31
     7ce:	d1 04       	cpc	r13, r1
     7d0:	49 f0       	breq	.+18     	; 0x7e4 <__stack+0x2e5>
                        values[pos]= (uint8_t)value;
     7d2:	c6 01       	movw	r24, r12
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	f1 01       	movw	r30, r2
     7da:	e8 0f       	add	r30, r24
     7dc:	f9 1f       	adc	r31, r25
     7de:	40 82       	st	Z, r4
     7e0:	11 82       	std	Z+1, r1	; 0x01
     7e2:	17 c0       	rjmp	.+46     	; 0x812 <__stack+0x313>
                        break;
                    }
                    else{
                        BIT_write(progFlags, ECONOMY, value);
     7e4:	41 14       	cp	r4, r1
     7e6:	51 04       	cpc	r5, r1
     7e8:	49 f0       	breq	.+18     	; 0x7fc <__stack+0x2fd>
     7ea:	c2 01       	movw	r24, r4
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	87 29       	or	r24, r7
     7f6:	80 93 1b 01 	sts	0x011B, r24
     7fa:	0b c0       	rjmp	.+22     	; 0x812 <__stack+0x313>
     7fc:	87 2d       	mov	r24, r7
     7fe:	8b 7f       	andi	r24, 0xFB	; 251
     800:	80 93 1b 01 	sts	0x011B, r24
     804:	06 c0       	rjmp	.+12     	; 0x812 <__stack+0x313>
    LCDclr();
    while ((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
            BIT_clear(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
     806:	f5 01       	movw	r30, r10
     808:	80 81       	ld	r24, Z
     80a:	82 ff       	sbrs	r24, 2
     80c:	bc ce       	rjmp	.-648    	; 0x586 <__stack+0x87>
     80e:	70 92 1b 01 	sts	0x011B, r7
                        break;
                    }          
                }                  
            }
        }
        LCDGotoXY(0, 0);
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	ad d1       	rcall	.+858    	; 0xb72 <LCDGotoXY>
        LCDstring(menu[pos],16);
     818:	c6 01       	movw	r24, r12
     81a:	82 95       	swap	r24
     81c:	92 95       	swap	r25
     81e:	90 7f       	andi	r25, 0xF0	; 240
     820:	98 27       	eor	r25, r24
     822:	80 7f       	andi	r24, 0xF0	; 240
     824:	98 27       	eor	r25, r24
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	2c 0f       	add	r18, r28
     82c:	3d 1f       	adc	r19, r29
     82e:	82 0f       	add	r24, r18
     830:	93 1f       	adc	r25, r19
     832:	60 e1       	ldi	r22, 0x10	; 16
     834:	86 d1       	rcall	.+780    	; 0xb42 <LCDstring>
        LCDGotoXY(0, 1);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	9b d1       	rcall	.+822    	; 0xb72 <LCDGotoXY>
        LCDstring(values[pos],1);
     83c:	c6 01       	movw	r24, r12
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	f1 01       	movw	r30, r2
     844:	e8 0f       	add	r30, r24
     846:	f9 1f       	adc	r31, r25
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	79 d1       	rcall	.+754    	; 0xb42 <LCDstring>
        if (!BIT_read(CONTROL_PORT, BUTTON_P))
     850:	f5 01       	movw	r30, r10
     852:	80 81       	ld	r24, Z
     854:	85 fd       	sbrc	r24, 5
     856:	16 c0       	rjmp	.+44     	; 0x884 <__stack+0x385>
        {
            BIT_clear(progFlags, INACTIVE);
     858:	80 91 1b 01 	lds	r24, 0x011B
     85c:	8f 7e       	andi	r24, 0xEF	; 239
     85e:	80 93 1b 01 	sts	0x011B, r24
            pos++;
     862:	08 94       	sec
     864:	c1 1c       	adc	r12, r1
     866:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     868:	dd 20       	and	r13, r13
     86a:	34 f4       	brge	.+12     	; 0x878 <__stack+0x379>
     86c:	0f 2e       	mov	r0, r31
     86e:	f3 e0       	ldi	r31, 0x03	; 3
     870:	cf 2e       	mov	r12, r31
     872:	dd 24       	eor	r13, r13
     874:	f0 2d       	mov	r31, r0
     876:	06 c0       	rjmp	.+12     	; 0x884 <__stack+0x385>
     878:	f4 e0       	ldi	r31, 0x04	; 4
     87a:	cf 16       	cp	r12, r31
     87c:	d1 04       	cpc	r13, r1
     87e:	14 f0       	brlt	.+4      	; 0x884 <__stack+0x385>
     880:	cc 24       	eor	r12, r12
     882:	dd 24       	eor	r13, r13
        }
        if (!BIT_read(CONTROL_PORT, BUTTON_M))
     884:	f5 01       	movw	r30, r10
     886:	80 81       	ld	r24, Z
     888:	84 fd       	sbrc	r24, 4
     88a:	16 c0       	rjmp	.+44     	; 0x8b8 <__stack+0x3b9>
        {
            BIT_clear(progFlags, INACTIVE);
     88c:	80 91 1b 01 	lds	r24, 0x011B
     890:	8f 7e       	andi	r24, 0xEF	; 239
     892:	80 93 1b 01 	sts	0x011B, r24
            pos--;
     896:	08 94       	sec
     898:	c1 08       	sbc	r12, r1
     89a:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     89c:	dd 20       	and	r13, r13
     89e:	34 f4       	brge	.+12     	; 0x8ac <__stack+0x3ad>
     8a0:	0f 2e       	mov	r0, r31
     8a2:	f3 e0       	ldi	r31, 0x03	; 3
     8a4:	cf 2e       	mov	r12, r31
     8a6:	dd 24       	eor	r13, r13
     8a8:	f0 2d       	mov	r31, r0
     8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <__stack+0x3b9>
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	cf 16       	cp	r12, r31
     8b0:	d1 04       	cpc	r13, r1
     8b2:	14 f0       	brlt	.+4      	; 0x8b8 <__stack+0x3b9>
     8b4:	cc 24       	eor	r12, r12
     8b6:	dd 24       	eor	r13, r13
{
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
    LCDclr();
    while ((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
     8b8:	90 91 1b 01 	lds	r25, 0x011B
     8bc:	94 fd       	sbrc	r25, 4
     8be:	4e ce       	rjmp	.-868    	; 0x55c <__stack+0x5d>
     8c0:	f5 01       	movw	r30, r10
     8c2:	80 81       	ld	r24, Z
     8c4:	82 ff       	sbrs	r24, 2
     8c6:	4a ce       	rjmp	.-876    	; 0x55c <__stack+0x5d>
            pos--;
            pos= CIRCLE(pos, 0, 3);
        }
    }
    BIT_clear(progFlags, MENU_ON);
    BIT_clear(progFlags, INACTIVE);
     8c8:	89 2f       	mov	r24, r25
     8ca:	8d 7e       	andi	r24, 0xED	; 237
     8cc:	80 93 1b 01 	sts	0x011B, r24
    }
}

inline void menuStop()
{
    LCDclr();
     8d0:	36 d1       	rcall	.+620    	; 0xb3e <LCDclr>
    LCD_prepare("TEMP:", 5, 0, 0);
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	65 e0       	ldi	r22, 0x05	; 5
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	0d dd       	rcall	.-1510   	; 0x2fc <LCD_prepare>
    LCD_DisplayAll();
     8e2:	6b dd       	rcall	.-1322   	; 0x3ba <LCD_DisplayAll>
        }
    }
    BIT_clear(progFlags, MENU_ON);
    BIT_clear(progFlags, INACTIVE);
    menuStop();
}
     8e4:	c7 5b       	subi	r28, 0xB7	; 183
     8e6:	df 4f       	sbci	r29, 0xFF	; 255
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	cf 91       	pop	r28
     8f4:	df 91       	pop	r29
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	3f 90       	pop	r3
     914:	2f 90       	pop	r2
     916:	08 95       	ret

00000918 <main>:

int main(void)
{
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
    BIT_write(UCSRB0, RXCIE0, 0); // прерывание приема запрещено
    BIT_write(UCSRB0, TXCIE0, 1); // прерывание конца передачи разрешено
    BIT_write(UCSRB0, UDRIE0, 0);
    #endif
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
     920:	e7 e2       	ldi	r30, 0x27	; 39
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	8e 7f       	andi	r24, 0xFE	; 254
     928:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD)|(1<<FAN); // управление подсветкой экрана, нагрузкой и вентилятором на выход
     92a:	ea e2       	ldi	r30, 0x2A	; 42
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	81 ec       	ldi	r24, 0xC1	; 193
     930:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
     932:	80 81       	ld	r24, Z
     934:	83 7c       	andi	r24, 0xC3	; 195
     936:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
     938:	8c e3       	ldi	r24, 0x3C	; 60
     93a:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
     93c:	ec e7       	ldi	r30, 0x7C	; 124
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	80 64       	ori	r24, 0x40	; 64
     944:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
     946:	ab e7       	ldi	r26, 0x7B	; 123
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	8c 91       	ld	r24, X
     94c:	83 60       	ori	r24, 0x03	; 3
     94e:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
     950:	80 81       	ld	r24, Z
     952:	80 62       	ori	r24, 0x20	; 32
     954:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
     956:	0a e7       	ldi	r16, 0x7A	; 122
     958:	10 e0       	ldi	r17, 0x00	; 0
     95a:	f8 01       	movw	r30, r16
     95c:	80 81       	ld	r24, Z
     95e:	80 62       	ori	r24, 0x20	; 32
     960:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
     962:	80 81       	ld	r24, Z
     964:	88 60       	ori	r24, 0x08	; 8
     966:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
     968:	80 81       	ld	r24, Z
     96a:	80 68       	ori	r24, 0x80	; 128
     96c:	80 83       	st	Z, r24
    DIDR0 |= 1 << ADC0D; // отключить буффер цифрового входа ADC0D
     96e:	ee e7       	ldi	r30, 0x7E	; 126
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	81 60       	ori	r24, 0x01	; 1
     976:	80 83       	st	Z, r24
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
     978:	e4 e4       	ldi	r30, 0x44	; 68
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	80 83       	st	Z, r24
    OCR0A= measureRate;
     982:	80 91 20 01 	lds	r24, 0x0120
     986:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
     988:	e5 e4       	ldi	r30, 0x45	; 69
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	84 60       	ori	r24, 0x04	; 4
     990:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
     992:	ee e6       	ldi	r30, 0x6E	; 110
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	82 60       	ori	r24, 0x02	; 2
     99a:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
     99c:	85 e0       	ldi	r24, 0x05	; 5
     99e:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
     9a2:	e6 eb       	ldi	r30, 0xB6	; 182
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	80 62       	ori	r24, 0x20	; 32
     9aa:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
     9ac:	e0 e7       	ldi	r30, 0x70	; 112
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCDinit();
     9b6:	0c d1       	rcall	.+536    	; 0xbd0 <LCDinit>

    BIT_write(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
     9b8:	e4 e6       	ldi	r30, 0x64	; 100
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	80 68       	ori	r24, 0x80	; 128
     9c0:	80 83       	st	Z, r24
    BIT_write(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
     9c2:	80 81       	ld	r24, Z
     9c4:	88 60       	ori	r24, 0x08	; 8
     9c6:	80 83       	st	Z, r24
    BIT_write(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
     9c8:	80 81       	ld	r24, Z
     9ca:	84 60       	ori	r24, 0x04	; 4
     9cc:	80 83       	st	Z, r24
    BIT_write(ACSR, ACD, 1); // отключить аналоговый компаратор
     9ce:	e0 e5       	ldi	r30, 0x50	; 80
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	80 68       	ori	r24, 0x80	; 128
     9d6:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
     9d8:	f8 01       	movw	r30, r16
     9da:	80 81       	ld	r24, Z
     9dc:	80 64       	ori	r24, 0x40	; 64
     9de:	80 83       	st	Z, r24

    sei();
     9e0:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_read(PIND, BUTTON_M))||(!BIT_read(PIND, BUTTON_P))||(!BIT_read(PIND, BUTTON_BACK))) // если нажата любая кнопка
     9e2:	c9 e2       	ldi	r28, 0x29	; 41
     9e4:	d0 e0       	ldi	r29, 0x00	; 0
        {
            BIT_clear(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_write(progFlags, LCD_ON, 1);
            LCD_prepare("TEMP:", 5, 0, 0);
     9e6:	00 e0       	ldi	r16, 0x00	; 0
     9e8:	11 e0       	ldi	r17, 0x01	; 1
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_read(PIND, BUTTON_M))||(!BIT_read(PIND, BUTTON_P))||(!BIT_read(PIND, BUTTON_BACK))) // если нажата любая кнопка
     9ea:	88 81       	ld	r24, Y
     9ec:	84 ff       	sbrs	r24, 4
     9ee:	06 c0       	rjmp	.+12     	; 0x9fc <main+0xe4>
     9f0:	88 81       	ld	r24, Y
     9f2:	85 ff       	sbrs	r24, 5
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <main+0xe4>
     9f6:	88 81       	ld	r24, Y
     9f8:	82 fd       	sbrc	r24, 2
     9fa:	0e c0       	rjmp	.+28     	; 0xa18 <main+0x100>
        {
            BIT_clear(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_write(progFlags, LCD_ON, 1);
     9fc:	80 91 1b 01 	lds	r24, 0x011B
     a00:	8f 7e       	andi	r24, 0xEF	; 239
     a02:	81 60       	ori	r24, 0x01	; 1
     a04:	80 93 1b 01 	sts	0x011B, r24
            LCD_prepare("TEMP:", 5, 0, 0);
     a08:	c8 01       	movw	r24, r16
     a0a:	65 e0       	ldi	r22, 0x05	; 5
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	73 dc       	rcall	.-1818   	; 0x2fc <LCD_prepare>
            LCDvisible();
     a16:	3b d1       	rcall	.+630    	; 0xc8e <LCDvisible>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_read(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
     a18:	88 81       	ld	r24, Y
     a1a:	83 fd       	sbrc	r24, 3
     a1c:	18 c0       	rjmp	.+48     	; 0xa4e <main+0x136>
        {
            BIT_clear(progFlags, INACTIVE); // выйти из режима неактивности
     a1e:	80 91 1b 01 	lds	r24, 0x011B
     a22:	8f 7e       	andi	r24, 0xEF	; 239
     a24:	80 93 1b 01 	sts	0x011B, r24
            if (!BIT_read(progFlags, LCD_ON))
     a28:	80 fd       	sbrc	r24, 0
     a2a:	0b c0       	rjmp	.+22     	; 0xa42 <main+0x12a>
            {
                BIT_write(progFlags, LCD_ON, 1); // включить подсветку дисплея
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	80 93 1b 01 	sts	0x011B, r24
                LCD_prepare("TEMP:", 5, 0, 0);
     a32:	c8 01       	movw	r24, r16
     a34:	65 e0       	ldi	r22, 0x05	; 5
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	5e dc       	rcall	.-1860   	; 0x2fc <LCD_prepare>
                LCDvisible();
     a40:	26 d1       	rcall	.+588    	; 0xc8e <LCDvisible>
            }
            BIT_write(progFlags, MENU_ON, 1); // включить меню
     a42:	80 91 1b 01 	lds	r24, 0x011B
     a46:	82 60       	ori	r24, 0x02	; 2
     a48:	80 93 1b 01 	sts	0x011B, r24
            menuRun(); // обработка команд меню
     a4c:	1c dd       	rcall	.-1480   	; 0x486 <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_read(progFlags, INACTIVE))
     a4e:	80 91 1b 01 	lds	r24, 0x011B
     a52:	84 ff       	sbrs	r24, 4
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <main+0x14a>
        {
            if(BIT_read(progFlags, LCD_ON))
     a56:	80 ff       	sbrs	r24, 0
     a58:	0a c0       	rjmp	.+20     	; 0xa6e <main+0x156>
            {
                BIT_clear(progFlags, LCD_ON);
     a5a:	8e 7f       	andi	r24, 0xFE	; 254
     a5c:	80 93 1b 01 	sts	0x011B, r24
                LCDblank();
     a60:	0f d1       	rcall	.+542    	; 0xc80 <LCDblank>
        }
        
        //////////////////////////////////////////////////////////////////////////
        // задача : отображать данные если подсветка включена или включено охлаждение
        //////////////////////////////////////////////////////////////////////////
        if (BIT_read(progFlags, LCD_ON))
     a62:	80 91 1b 01 	lds	r24, 0x011B
     a66:	80 ff       	sbrs	r24, 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <main+0x156>
        {
            LCD_DisplayAll();
     a6a:	a7 dc       	rcall	.-1714   	; 0x3ba <LCD_DisplayAll>
     a6c:	be cf       	rjmp	.-132    	; 0x9ea <main+0xd2>
        }
        else if ((BIT_read(progFlags, COOLING)&&!(BIT_read(progFlags, ECONOMY))))
     a6e:	83 ff       	sbrs	r24, 3
     a70:	bc cf       	rjmp	.-136    	; 0x9ea <main+0xd2>
     a72:	82 fd       	sbrc	r24, 2
     a74:	ba cf       	rjmp	.-140    	; 0x9ea <main+0xd2>
        {
            BIT_clear(progFlags, INACTIVE);
     a76:	8f 7e       	andi	r24, 0xEF	; 239
     a78:	80 93 1b 01 	sts	0x011B, r24
            LCDvisible();
     a7c:	08 d1       	rcall	.+528    	; 0xc8e <LCDvisible>
            LCD_DisplayAll();
     a7e:	9d dc       	rcall	.-1734   	; 0x3ba <LCD_DisplayAll>
     a80:	b4 cf       	rjmp	.-152    	; 0x9ea <main+0xd2>

00000a82 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29

#ifdef LCD_4bit
	//4 bit part
	LDP=((ch&0b11110000)>>4);
     a86:	98 2f       	mov	r25, r24
     a88:	92 95       	swap	r25
     a8a:	9f 70       	andi	r25, 0x0F	; 15
     a8c:	a5 e2       	ldi	r26, 0x25	; 37
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	9c 93       	st	X, r25
	LCP|=1<<LCD_RS;
     a92:	e8 e2       	ldi	r30, 0x28	; 40
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	90 81       	ld	r25, Z
     a98:	92 60       	ori	r25, 0x02	; 2
     a9a:	90 83       	st	Z, r25
	LCP|=1<<LCD_E;		
     a9c:	90 81       	ld	r25, Z
     a9e:	98 60       	ori	r25, 0x08	; 8
     aa0:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     aa2:	2a ef       	ldi	r18, 0xFA	; 250
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	e9 01       	movw	r28, r18
     aa8:	21 97       	sbiw	r28, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <LCDsendChar+0x26>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     aac:	90 81       	ld	r25, Z
     aae:	97 7f       	andi	r25, 0xF7	; 247
     ab0:	90 83       	st	Z, r25
	LCP&=~(1<<LCD_RS);
     ab2:	90 81       	ld	r25, Z
     ab4:	9d 7f       	andi	r25, 0xFD	; 253
     ab6:	90 83       	st	Z, r25
     ab8:	e9 01       	movw	r28, r18
     aba:	21 97       	sbiw	r28, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <LCDsendChar+0x38>
	_delay_ms(1);
	LDP=(ch&0b00001111);
     abe:	8f 70       	andi	r24, 0x0F	; 15
     ac0:	8c 93       	st	X, r24
	LCP|=1<<LCD_RS;
     ac2:	80 81       	ld	r24, Z
     ac4:	82 60       	ori	r24, 0x02	; 2
     ac6:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     ac8:	80 81       	ld	r24, Z
     aca:	88 60       	ori	r24, 0x08	; 8
     acc:	80 83       	st	Z, r24
     ace:	c9 01       	movw	r24, r18
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <LCDsendChar+0x4e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     ad4:	80 81       	ld	r24, Z
     ad6:	87 7f       	andi	r24, 0xF7	; 247
     ad8:	80 83       	st	Z, r24
	LCP&=~(1<<LCD_RS);
     ada:	80 81       	ld	r24, Z
     adc:	8d 7f       	andi	r24, 0xFD	; 253
     ade:	80 83       	st	Z, r24
     ae0:	c9 01       	movw	r24, r18
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <LCDsendChar+0x60>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
#ifdef LCD_4bit	
	//4 bit part
	LDP=((cmd&0b11110000)>>4);
     af0:	98 2f       	mov	r25, r24
     af2:	92 95       	swap	r25
     af4:	9f 70       	andi	r25, 0x0F	; 15
     af6:	a5 e2       	ldi	r26, 0x25	; 37
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	9c 93       	st	X, r25
	LCP|=1<<LCD_E;		
     afc:	e8 e2       	ldi	r30, 0x28	; 40
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	90 81       	ld	r25, Z
     b02:	98 60       	ori	r25, 0x08	; 8
     b04:	90 83       	st	Z, r25
     b06:	2a ef       	ldi	r18, 0xFA	; 250
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	e9 01       	movw	r28, r18
     b0c:	21 97       	sbiw	r28, 0x01	; 1
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <LCDsendCommand+0x20>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     b10:	90 81       	ld	r25, Z
     b12:	97 7f       	andi	r25, 0xF7	; 247
     b14:	90 83       	st	Z, r25
     b16:	e9 01       	movw	r28, r18
     b18:	21 97       	sbiw	r28, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LDP=(cmd&0b00001111);	
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     b20:	80 81       	ld	r24, Z
     b22:	88 60       	ori	r24, 0x08	; 8
     b24:	80 83       	st	Z, r24
     b26:	c9 01       	movw	r24, r18
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <LCDsendCommand+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     b2c:	80 81       	ld	r24, Z
     b2e:	87 7f       	andi	r24, 0xF7	; 247
     b30:	80 83       	st	Z, r24
     b32:	c9 01       	movw	r24, r18
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <LCDsendCommand+0x48>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     b3e:	81 e0       	ldi	r24, 0x01	; 1
}
     b40:	d5 cf       	rjmp	.-86     	; 0xaec <LCDsendCommand>

00000b42 <LCDstring>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	9c 01       	movw	r18, r24
     b4c:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	59 f0       	breq	.+22     	; 0xb68 <LCDstring+0x26>

	// print data
	for(i=0; i<nBytes; i++)
     b52:	66 23       	and	r22, r22
     b54:	49 f0       	breq	.+18     	; 0xb68 <LCDstring+0x26>
     b56:	18 2f       	mov	r17, r24
     b58:	28 2f       	mov	r18, r24
     b5a:	e9 01       	movw	r28, r18
	{
		LCDsendChar(data[i]);
     b5c:	89 91       	ld	r24, Y+
     b5e:	91 df       	rcall	.-222    	; 0xa82 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     b60:	9e 01       	movw	r18, r28
     b62:	21 1b       	sub	r18, r17
     b64:	20 17       	cp	r18, r16
     b66:	d0 f3       	brcs	.-12     	; 0xb5c <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     b72:	62 30       	cpi	r22, 0x02	; 2
     b74:	31 f0       	breq	.+12     	; 0xb82 <LCDGotoXY+0x10>
     b76:	63 30       	cpi	r22, 0x03	; 3
     b78:	31 f0       	breq	.+12     	; 0xb86 <LCDGotoXY+0x14>
     b7a:	61 30       	cpi	r22, 0x01	; 1
     b7c:	29 f4       	brne	.+10     	; 0xb88 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     b7e:	80 5c       	subi	r24, 0xC0	; 192
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     b82:	8c 5e       	subi	r24, 0xEC	; 236
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     b86:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     b88:	80 68       	ori	r24, 0x80	; 128
	
}
     b8a:	b0 cf       	rjmp	.-160    	; 0xaec <LCDsendCommand>

00000b8c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     b9a:	66 0f       	add	r22, r22
     b9c:	66 0f       	add	r22, r22
     b9e:	66 0f       	add	r22, r22
     ba0:	06 2f       	mov	r16, r22
     ba2:	00 64       	ori	r16, 0x40	; 64
     ba4:	c0 e0       	ldi	r28, 0x00	; 0
     ba6:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     ba8:	f7 01       	movw	r30, r14
     baa:	ec 0f       	add	r30, r28
     bac:	fd 1f       	adc	r31, r29
     bae:	14 91       	lpm	r17, Z+
		LCDsendCommand(a++);
     bb0:	80 2f       	mov	r24, r16
     bb2:	8c 0f       	add	r24, r28
     bb4:	9b df       	rcall	.-202    	; 0xaec <LCDsendCommand>
		LCDsendChar(pcc);
     bb6:	81 2f       	mov	r24, r17
     bb8:	64 df       	rcall	.-312    	; 0xa82 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     bba:	21 96       	adiw	r28, 0x01	; 1
     bbc:	c8 30       	cpi	r28, 0x08	; 8
     bbe:	d1 05       	cpc	r29, r1
     bc0:	99 f7       	brne	.-26     	; 0xba8 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	08 95       	ret

00000bd0 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	86 ea       	ldi	r24, 0xA6	; 166
     bd8:	9e e0       	ldi	r25, 0x0E	; 14
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     bde:	45 e2       	ldi	r20, 0x25	; 37
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	fa 01       	movw	r30, r20
     be4:	10 82       	st	Z, r1
	LCP=0x00;
     be6:	a8 e2       	ldi	r26, 0x28	; 40
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	1c 92       	st	X, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     bec:	e4 e2       	ldi	r30, 0x24	; 36
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8f 60       	ori	r24, 0x0F	; 15
     bf4:	80 83       	st	Z, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     bf6:	e7 e2       	ldi	r30, 0x27	; 39
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8e 60       	ori	r24, 0x0E	; 14
     bfe:	80 83       	st	Z, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	fa 01       	movw	r30, r20
     c04:	90 83       	st	Z, r25
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c06:	8c 91       	ld	r24, X
     c08:	88 60       	ori	r24, 0x08	; 8
     c0a:	8c 93       	st	X, r24
     c0c:	2a ef       	ldi	r18, 0xFA	; 250
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	f9 01       	movw	r30, r18
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <LCDinit+0x42>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c16:	8c 91       	ld	r24, X
     c18:	87 7f       	andi	r24, 0xF7	; 247
     c1a:	8c 93       	st	X, r24
     c1c:	f9 01       	movw	r30, r18
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <LCDinit+0x4e>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c22:	fa 01       	movw	r30, r20
     c24:	90 83       	st	Z, r25
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c26:	8c 91       	ld	r24, X
     c28:	88 60       	ori	r24, 0x08	; 8
     c2a:	8c 93       	st	X, r24
     c2c:	c9 01       	movw	r24, r18
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <LCDinit+0x5e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c32:	8c 91       	ld	r24, X
     c34:	87 7f       	andi	r24, 0xF7	; 247
     c36:	8c 93       	st	X, r24
     c38:	c9 01       	movw	r24, r18
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <LCDinit+0x6a>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c42:	8c 91       	ld	r24, X
     c44:	88 60       	ori	r24, 0x08	; 8
     c46:	8c 93       	st	X, r24
     c48:	c9 01       	movw	r24, r18
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <LCDinit+0x7a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c4e:	8c 91       	ld	r24, X
     c50:	87 7f       	andi	r24, 0xF7	; 247
     c52:	8c 93       	st	X, r24
     c54:	c9 01       	movw	r24, r18
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <LCDinit+0x86>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     c5a:	88 e2       	ldi	r24, 0x28	; 40
     c5c:	47 df       	rcall	.-370    	; 0xaec <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     c5e:	8c e0       	ldi	r24, 0x0C	; 12
     c60:	45 df       	rcall	.-374    	; 0xaec <LCDsendCommand>
     c62:	c8 e6       	ldi	r28, 0x68	; 104
     c64:	d0 e0       	ldi	r29, 0x00	; 0
     c66:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     c68:	16 2f       	mov	r17, r22
     c6a:	1f 5f       	subi	r17, 0xFF	; 255
     c6c:	ce 01       	movw	r24, r28
     c6e:	8e df       	rcall	.-228    	; 0xb8c <LCDdefinechar>
     c70:	28 96       	adiw	r28, 0x08	; 8
     c72:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     c74:	18 30       	cpi	r17, 0x08	; 8
     c76:	c1 f7       	brne	.-16     	; 0xc68 <LCDinit+0x98>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	08 95       	ret

00000c80 <LCDblank>:
{
	LCDsendCommand(0x0C);
}
void LCDblank(void)		//blanks LCD
{   
    BIT_write(CONTROL_PORT, LCD_LED, 0);
     c80:	eb e2       	ldi	r30, 0x2B	; 43
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8f 77       	andi	r24, 0x7F	; 127
     c88:	80 83       	st	Z, r24
	LCDsendCommand(0x08);
     c8a:	88 e0       	ldi	r24, 0x08	; 8
}
     c8c:	2f cf       	rjmp	.-418    	; 0xaec <LCDsendCommand>

00000c8e <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    BIT_write(CONTROL_PORT, LCD_LED, 1);
     c8e:	eb e2       	ldi	r30, 0x2B	; 43
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	80 68       	ori	r24, 0x80	; 128
     c96:	80 83       	st	Z, r24
	LCDsendCommand(0x0C);
     c98:	8c e0       	ldi	r24, 0x0C	; 12
}
     c9a:	28 cf       	rjmp	.-432    	; 0xaec <LCDsendCommand>

00000c9c <__subsf3>:
     c9c:	50 58       	subi	r21, 0x80	; 128

00000c9e <__addsf3>:
     c9e:	bb 27       	eor	r27, r27
     ca0:	aa 27       	eor	r26, r26
     ca2:	0e d0       	rcall	.+28     	; 0xcc0 <__addsf3x>
     ca4:	75 c1       	rjmp	.+746    	; 0xf90 <__fp_round>
     ca6:	66 d1       	rcall	.+716    	; 0xf74 <__fp_pscA>
     ca8:	30 f0       	brcs	.+12     	; 0xcb6 <__addsf3+0x18>
     caa:	6b d1       	rcall	.+726    	; 0xf82 <__fp_pscB>
     cac:	20 f0       	brcs	.+8      	; 0xcb6 <__addsf3+0x18>
     cae:	31 f4       	brne	.+12     	; 0xcbc <__addsf3+0x1e>
     cb0:	9f 3f       	cpi	r25, 0xFF	; 255
     cb2:	11 f4       	brne	.+4      	; 0xcb8 <__addsf3+0x1a>
     cb4:	1e f4       	brtc	.+6      	; 0xcbc <__addsf3+0x1e>
     cb6:	5b c1       	rjmp	.+694    	; 0xf6e <__fp_nan>
     cb8:	0e f4       	brtc	.+2      	; 0xcbc <__addsf3+0x1e>
     cba:	e0 95       	com	r30
     cbc:	e7 fb       	bst	r30, 7
     cbe:	51 c1       	rjmp	.+674    	; 0xf62 <__fp_inf>

00000cc0 <__addsf3x>:
     cc0:	e9 2f       	mov	r30, r25
     cc2:	77 d1       	rcall	.+750    	; 0xfb2 <__fp_split3>
     cc4:	80 f3       	brcs	.-32     	; 0xca6 <__addsf3+0x8>
     cc6:	ba 17       	cp	r27, r26
     cc8:	62 07       	cpc	r22, r18
     cca:	73 07       	cpc	r23, r19
     ccc:	84 07       	cpc	r24, r20
     cce:	95 07       	cpc	r25, r21
     cd0:	18 f0       	brcs	.+6      	; 0xcd8 <__addsf3x+0x18>
     cd2:	71 f4       	brne	.+28     	; 0xcf0 <__addsf3x+0x30>
     cd4:	9e f5       	brtc	.+102    	; 0xd3c <__addsf3x+0x7c>
     cd6:	8f c1       	rjmp	.+798    	; 0xff6 <__fp_zero>
     cd8:	0e f4       	brtc	.+2      	; 0xcdc <__addsf3x+0x1c>
     cda:	e0 95       	com	r30
     cdc:	0b 2e       	mov	r0, r27
     cde:	ba 2f       	mov	r27, r26
     ce0:	a0 2d       	mov	r26, r0
     ce2:	0b 01       	movw	r0, r22
     ce4:	b9 01       	movw	r22, r18
     ce6:	90 01       	movw	r18, r0
     ce8:	0c 01       	movw	r0, r24
     cea:	ca 01       	movw	r24, r20
     cec:	a0 01       	movw	r20, r0
     cee:	11 24       	eor	r1, r1
     cf0:	ff 27       	eor	r31, r31
     cf2:	59 1b       	sub	r21, r25
     cf4:	99 f0       	breq	.+38     	; 0xd1c <__addsf3x+0x5c>
     cf6:	59 3f       	cpi	r21, 0xF9	; 249
     cf8:	50 f4       	brcc	.+20     	; 0xd0e <__addsf3x+0x4e>
     cfa:	50 3e       	cpi	r21, 0xE0	; 224
     cfc:	68 f1       	brcs	.+90     	; 0xd58 <__addsf3x+0x98>
     cfe:	1a 16       	cp	r1, r26
     d00:	f0 40       	sbci	r31, 0x00	; 0
     d02:	a2 2f       	mov	r26, r18
     d04:	23 2f       	mov	r18, r19
     d06:	34 2f       	mov	r19, r20
     d08:	44 27       	eor	r20, r20
     d0a:	58 5f       	subi	r21, 0xF8	; 248
     d0c:	f3 cf       	rjmp	.-26     	; 0xcf4 <__addsf3x+0x34>
     d0e:	46 95       	lsr	r20
     d10:	37 95       	ror	r19
     d12:	27 95       	ror	r18
     d14:	a7 95       	ror	r26
     d16:	f0 40       	sbci	r31, 0x00	; 0
     d18:	53 95       	inc	r21
     d1a:	c9 f7       	brne	.-14     	; 0xd0e <__addsf3x+0x4e>
     d1c:	7e f4       	brtc	.+30     	; 0xd3c <__addsf3x+0x7c>
     d1e:	1f 16       	cp	r1, r31
     d20:	ba 0b       	sbc	r27, r26
     d22:	62 0b       	sbc	r22, r18
     d24:	73 0b       	sbc	r23, r19
     d26:	84 0b       	sbc	r24, r20
     d28:	ba f0       	brmi	.+46     	; 0xd58 <__addsf3x+0x98>
     d2a:	91 50       	subi	r25, 0x01	; 1
     d2c:	a1 f0       	breq	.+40     	; 0xd56 <__addsf3x+0x96>
     d2e:	ff 0f       	add	r31, r31
     d30:	bb 1f       	adc	r27, r27
     d32:	66 1f       	adc	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	88 1f       	adc	r24, r24
     d38:	c2 f7       	brpl	.-16     	; 0xd2a <__addsf3x+0x6a>
     d3a:	0e c0       	rjmp	.+28     	; 0xd58 <__addsf3x+0x98>
     d3c:	ba 0f       	add	r27, r26
     d3e:	62 1f       	adc	r22, r18
     d40:	73 1f       	adc	r23, r19
     d42:	84 1f       	adc	r24, r20
     d44:	48 f4       	brcc	.+18     	; 0xd58 <__addsf3x+0x98>
     d46:	87 95       	ror	r24
     d48:	77 95       	ror	r23
     d4a:	67 95       	ror	r22
     d4c:	b7 95       	ror	r27
     d4e:	f7 95       	ror	r31
     d50:	9e 3f       	cpi	r25, 0xFE	; 254
     d52:	08 f0       	brcs	.+2      	; 0xd56 <__addsf3x+0x96>
     d54:	b3 cf       	rjmp	.-154    	; 0xcbc <__addsf3+0x1e>
     d56:	93 95       	inc	r25
     d58:	88 0f       	add	r24, r24
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <__addsf3x+0x9e>
     d5c:	99 27       	eor	r25, r25
     d5e:	ee 0f       	add	r30, r30
     d60:	97 95       	ror	r25
     d62:	87 95       	ror	r24
     d64:	08 95       	ret

00000d66 <__cmpsf2>:
     d66:	d9 d0       	rcall	.+434    	; 0xf1a <__fp_cmp>
     d68:	08 f4       	brcc	.+2      	; 0xd6c <__cmpsf2+0x6>
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	08 95       	ret

00000d6e <__divsf3>:
     d6e:	0c d0       	rcall	.+24     	; 0xd88 <__divsf3x>
     d70:	0f c1       	rjmp	.+542    	; 0xf90 <__fp_round>
     d72:	07 d1       	rcall	.+526    	; 0xf82 <__fp_pscB>
     d74:	40 f0       	brcs	.+16     	; 0xd86 <__divsf3+0x18>
     d76:	fe d0       	rcall	.+508    	; 0xf74 <__fp_pscA>
     d78:	30 f0       	brcs	.+12     	; 0xd86 <__divsf3+0x18>
     d7a:	21 f4       	brne	.+8      	; 0xd84 <__divsf3+0x16>
     d7c:	5f 3f       	cpi	r21, 0xFF	; 255
     d7e:	19 f0       	breq	.+6      	; 0xd86 <__divsf3+0x18>
     d80:	f0 c0       	rjmp	.+480    	; 0xf62 <__fp_inf>
     d82:	51 11       	cpse	r21, r1
     d84:	39 c1       	rjmp	.+626    	; 0xff8 <__fp_szero>
     d86:	f3 c0       	rjmp	.+486    	; 0xf6e <__fp_nan>

00000d88 <__divsf3x>:
     d88:	14 d1       	rcall	.+552    	; 0xfb2 <__fp_split3>
     d8a:	98 f3       	brcs	.-26     	; 0xd72 <__divsf3+0x4>

00000d8c <__divsf3_pse>:
     d8c:	99 23       	and	r25, r25
     d8e:	c9 f3       	breq	.-14     	; 0xd82 <__divsf3+0x14>
     d90:	55 23       	and	r21, r21
     d92:	b1 f3       	breq	.-20     	; 0xd80 <__divsf3+0x12>
     d94:	95 1b       	sub	r25, r21
     d96:	55 0b       	sbc	r21, r21
     d98:	bb 27       	eor	r27, r27
     d9a:	aa 27       	eor	r26, r26
     d9c:	62 17       	cp	r22, r18
     d9e:	73 07       	cpc	r23, r19
     da0:	84 07       	cpc	r24, r20
     da2:	38 f0       	brcs	.+14     	; 0xdb2 <__divsf3_pse+0x26>
     da4:	9f 5f       	subi	r25, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	22 0f       	add	r18, r18
     daa:	33 1f       	adc	r19, r19
     dac:	44 1f       	adc	r20, r20
     dae:	aa 1f       	adc	r26, r26
     db0:	a9 f3       	breq	.-22     	; 0xd9c <__divsf3_pse+0x10>
     db2:	33 d0       	rcall	.+102    	; 0xe1a <__divsf3_pse+0x8e>
     db4:	0e 2e       	mov	r0, r30
     db6:	3a f0       	brmi	.+14     	; 0xdc6 <__divsf3_pse+0x3a>
     db8:	e0 e8       	ldi	r30, 0x80	; 128
     dba:	30 d0       	rcall	.+96     	; 0xe1c <__divsf3_pse+0x90>
     dbc:	91 50       	subi	r25, 0x01	; 1
     dbe:	50 40       	sbci	r21, 0x00	; 0
     dc0:	e6 95       	lsr	r30
     dc2:	00 1c       	adc	r0, r0
     dc4:	ca f7       	brpl	.-14     	; 0xdb8 <__divsf3_pse+0x2c>
     dc6:	29 d0       	rcall	.+82     	; 0xe1a <__divsf3_pse+0x8e>
     dc8:	fe 2f       	mov	r31, r30
     dca:	27 d0       	rcall	.+78     	; 0xe1a <__divsf3_pse+0x8e>
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	bb 1f       	adc	r27, r27
     dd4:	26 17       	cp	r18, r22
     dd6:	37 07       	cpc	r19, r23
     dd8:	48 07       	cpc	r20, r24
     dda:	ab 07       	cpc	r26, r27
     ddc:	b0 e8       	ldi	r27, 0x80	; 128
     dde:	09 f0       	breq	.+2      	; 0xde2 <__divsf3_pse+0x56>
     de0:	bb 0b       	sbc	r27, r27
     de2:	80 2d       	mov	r24, r0
     de4:	bf 01       	movw	r22, r30
     de6:	ff 27       	eor	r31, r31
     de8:	93 58       	subi	r25, 0x83	; 131
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	2a f0       	brmi	.+10     	; 0xdf8 <__divsf3_pse+0x6c>
     dee:	9e 3f       	cpi	r25, 0xFE	; 254
     df0:	51 05       	cpc	r21, r1
     df2:	68 f0       	brcs	.+26     	; 0xe0e <__divsf3_pse+0x82>
     df4:	b6 c0       	rjmp	.+364    	; 0xf62 <__fp_inf>
     df6:	00 c1       	rjmp	.+512    	; 0xff8 <__fp_szero>
     df8:	5f 3f       	cpi	r21, 0xFF	; 255
     dfa:	ec f3       	brlt	.-6      	; 0xdf6 <__divsf3_pse+0x6a>
     dfc:	98 3e       	cpi	r25, 0xE8	; 232
     dfe:	dc f3       	brlt	.-10     	; 0xdf6 <__divsf3_pse+0x6a>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b7 95       	ror	r27
     e08:	f7 95       	ror	r31
     e0a:	9f 5f       	subi	r25, 0xFF	; 255
     e0c:	c9 f7       	brne	.-14     	; 0xe00 <__divsf3_pse+0x74>
     e0e:	88 0f       	add	r24, r24
     e10:	91 1d       	adc	r25, r1
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
     e16:	97 f9       	bld	r25, 7
     e18:	08 95       	ret
     e1a:	e1 e0       	ldi	r30, 0x01	; 1
     e1c:	66 0f       	add	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	88 1f       	adc	r24, r24
     e22:	bb 1f       	adc	r27, r27
     e24:	62 17       	cp	r22, r18
     e26:	73 07       	cpc	r23, r19
     e28:	84 07       	cpc	r24, r20
     e2a:	ba 07       	cpc	r27, r26
     e2c:	20 f0       	brcs	.+8      	; 0xe36 <__divsf3_pse+0xaa>
     e2e:	62 1b       	sub	r22, r18
     e30:	73 0b       	sbc	r23, r19
     e32:	84 0b       	sbc	r24, r20
     e34:	ba 0b       	sbc	r27, r26
     e36:	ee 1f       	adc	r30, r30
     e38:	88 f7       	brcc	.-30     	; 0xe1c <__divsf3_pse+0x90>
     e3a:	e0 95       	com	r30
     e3c:	08 95       	ret

00000e3e <__fixsfsi>:
     e3e:	04 d0       	rcall	.+8      	; 0xe48 <__fixunssfsi>
     e40:	68 94       	set
     e42:	b1 11       	cpse	r27, r1
     e44:	d9 c0       	rjmp	.+434    	; 0xff8 <__fp_szero>
     e46:	08 95       	ret

00000e48 <__fixunssfsi>:
     e48:	bc d0       	rcall	.+376    	; 0xfc2 <__fp_splitA>
     e4a:	88 f0       	brcs	.+34     	; 0xe6e <__fixunssfsi+0x26>
     e4c:	9f 57       	subi	r25, 0x7F	; 127
     e4e:	90 f0       	brcs	.+36     	; 0xe74 <__fixunssfsi+0x2c>
     e50:	b9 2f       	mov	r27, r25
     e52:	99 27       	eor	r25, r25
     e54:	b7 51       	subi	r27, 0x17	; 23
     e56:	a0 f0       	brcs	.+40     	; 0xe80 <__fixunssfsi+0x38>
     e58:	d1 f0       	breq	.+52     	; 0xe8e <__fixunssfsi+0x46>
     e5a:	66 0f       	add	r22, r22
     e5c:	77 1f       	adc	r23, r23
     e5e:	88 1f       	adc	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	1a f0       	brmi	.+6      	; 0xe6a <__fixunssfsi+0x22>
     e64:	ba 95       	dec	r27
     e66:	c9 f7       	brne	.-14     	; 0xe5a <__fixunssfsi+0x12>
     e68:	12 c0       	rjmp	.+36     	; 0xe8e <__fixunssfsi+0x46>
     e6a:	b1 30       	cpi	r27, 0x01	; 1
     e6c:	81 f0       	breq	.+32     	; 0xe8e <__fixunssfsi+0x46>
     e6e:	c3 d0       	rcall	.+390    	; 0xff6 <__fp_zero>
     e70:	b1 e0       	ldi	r27, 0x01	; 1
     e72:	08 95       	ret
     e74:	c0 c0       	rjmp	.+384    	; 0xff6 <__fp_zero>
     e76:	67 2f       	mov	r22, r23
     e78:	78 2f       	mov	r23, r24
     e7a:	88 27       	eor	r24, r24
     e7c:	b8 5f       	subi	r27, 0xF8	; 248
     e7e:	39 f0       	breq	.+14     	; 0xe8e <__fixunssfsi+0x46>
     e80:	b9 3f       	cpi	r27, 0xF9	; 249
     e82:	cc f3       	brlt	.-14     	; 0xe76 <__fixunssfsi+0x2e>
     e84:	86 95       	lsr	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b3 95       	inc	r27
     e8c:	d9 f7       	brne	.-10     	; 0xe84 <__fixunssfsi+0x3c>
     e8e:	3e f4       	brtc	.+14     	; 0xe9e <__fixunssfsi+0x56>
     e90:	90 95       	com	r25
     e92:	80 95       	com	r24
     e94:	70 95       	com	r23
     e96:	61 95       	neg	r22
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	08 95       	ret

00000ea0 <__floatunsisf>:
     ea0:	e8 94       	clt
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <__floatsisf+0x12>

00000ea4 <__floatsisf>:
     ea4:	97 fb       	bst	r25, 7
     ea6:	3e f4       	brtc	.+14     	; 0xeb6 <__floatsisf+0x12>
     ea8:	90 95       	com	r25
     eaa:	80 95       	com	r24
     eac:	70 95       	com	r23
     eae:	61 95       	neg	r22
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	8f 4f       	sbci	r24, 0xFF	; 255
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	99 23       	and	r25, r25
     eb8:	a9 f0       	breq	.+42     	; 0xee4 <__floatsisf+0x40>
     eba:	f9 2f       	mov	r31, r25
     ebc:	96 e9       	ldi	r25, 0x96	; 150
     ebe:	bb 27       	eor	r27, r27
     ec0:	93 95       	inc	r25
     ec2:	f6 95       	lsr	r31
     ec4:	87 95       	ror	r24
     ec6:	77 95       	ror	r23
     ec8:	67 95       	ror	r22
     eca:	b7 95       	ror	r27
     ecc:	f1 11       	cpse	r31, r1
     ece:	f8 cf       	rjmp	.-16     	; 0xec0 <__floatsisf+0x1c>
     ed0:	fa f4       	brpl	.+62     	; 0xf10 <__floatsisf+0x6c>
     ed2:	bb 0f       	add	r27, r27
     ed4:	11 f4       	brne	.+4      	; 0xeda <__floatsisf+0x36>
     ed6:	60 ff       	sbrs	r22, 0
     ed8:	1b c0       	rjmp	.+54     	; 0xf10 <__floatsisf+0x6c>
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f 4f       	sbci	r24, 0xFF	; 255
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	16 c0       	rjmp	.+44     	; 0xf10 <__floatsisf+0x6c>
     ee4:	88 23       	and	r24, r24
     ee6:	11 f0       	breq	.+4      	; 0xeec <__floatsisf+0x48>
     ee8:	96 e9       	ldi	r25, 0x96	; 150
     eea:	11 c0       	rjmp	.+34     	; 0xf0e <__floatsisf+0x6a>
     eec:	77 23       	and	r23, r23
     eee:	21 f0       	breq	.+8      	; 0xef8 <__floatsisf+0x54>
     ef0:	9e e8       	ldi	r25, 0x8E	; 142
     ef2:	87 2f       	mov	r24, r23
     ef4:	76 2f       	mov	r23, r22
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <__floatsisf+0x5e>
     ef8:	66 23       	and	r22, r22
     efa:	71 f0       	breq	.+28     	; 0xf18 <__floatsisf+0x74>
     efc:	96 e8       	ldi	r25, 0x86	; 134
     efe:	86 2f       	mov	r24, r22
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	2a f0       	brmi	.+10     	; 0xf10 <__floatsisf+0x6c>
     f06:	9a 95       	dec	r25
     f08:	66 0f       	add	r22, r22
     f0a:	77 1f       	adc	r23, r23
     f0c:	88 1f       	adc	r24, r24
     f0e:	da f7       	brpl	.-10     	; 0xf06 <__floatsisf+0x62>
     f10:	88 0f       	add	r24, r24
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	97 f9       	bld	r25, 7
     f18:	08 95       	ret

00000f1a <__fp_cmp>:
     f1a:	99 0f       	add	r25, r25
     f1c:	00 08       	sbc	r0, r0
     f1e:	55 0f       	add	r21, r21
     f20:	aa 0b       	sbc	r26, r26
     f22:	e0 e8       	ldi	r30, 0x80	; 128
     f24:	fe ef       	ldi	r31, 0xFE	; 254
     f26:	16 16       	cp	r1, r22
     f28:	17 06       	cpc	r1, r23
     f2a:	e8 07       	cpc	r30, r24
     f2c:	f9 07       	cpc	r31, r25
     f2e:	c0 f0       	brcs	.+48     	; 0xf60 <__fp_cmp+0x46>
     f30:	12 16       	cp	r1, r18
     f32:	13 06       	cpc	r1, r19
     f34:	e4 07       	cpc	r30, r20
     f36:	f5 07       	cpc	r31, r21
     f38:	98 f0       	brcs	.+38     	; 0xf60 <__fp_cmp+0x46>
     f3a:	62 1b       	sub	r22, r18
     f3c:	73 0b       	sbc	r23, r19
     f3e:	84 0b       	sbc	r24, r20
     f40:	95 0b       	sbc	r25, r21
     f42:	39 f4       	brne	.+14     	; 0xf52 <__fp_cmp+0x38>
     f44:	0a 26       	eor	r0, r26
     f46:	61 f0       	breq	.+24     	; 0xf60 <__fp_cmp+0x46>
     f48:	23 2b       	or	r18, r19
     f4a:	24 2b       	or	r18, r20
     f4c:	25 2b       	or	r18, r21
     f4e:	21 f4       	brne	.+8      	; 0xf58 <__fp_cmp+0x3e>
     f50:	08 95       	ret
     f52:	0a 26       	eor	r0, r26
     f54:	09 f4       	brne	.+2      	; 0xf58 <__fp_cmp+0x3e>
     f56:	a1 40       	sbci	r26, 0x01	; 1
     f58:	a6 95       	lsr	r26
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	81 1d       	adc	r24, r1
     f5e:	81 1d       	adc	r24, r1
     f60:	08 95       	ret

00000f62 <__fp_inf>:
     f62:	97 f9       	bld	r25, 7
     f64:	9f 67       	ori	r25, 0x7F	; 127
     f66:	80 e8       	ldi	r24, 0x80	; 128
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	08 95       	ret

00000f6e <__fp_nan>:
     f6e:	9f ef       	ldi	r25, 0xFF	; 255
     f70:	80 ec       	ldi	r24, 0xC0	; 192
     f72:	08 95       	ret

00000f74 <__fp_pscA>:
     f74:	00 24       	eor	r0, r0
     f76:	0a 94       	dec	r0
     f78:	16 16       	cp	r1, r22
     f7a:	17 06       	cpc	r1, r23
     f7c:	18 06       	cpc	r1, r24
     f7e:	09 06       	cpc	r0, r25
     f80:	08 95       	ret

00000f82 <__fp_pscB>:
     f82:	00 24       	eor	r0, r0
     f84:	0a 94       	dec	r0
     f86:	12 16       	cp	r1, r18
     f88:	13 06       	cpc	r1, r19
     f8a:	14 06       	cpc	r1, r20
     f8c:	05 06       	cpc	r0, r21
     f8e:	08 95       	ret

00000f90 <__fp_round>:
     f90:	09 2e       	mov	r0, r25
     f92:	03 94       	inc	r0
     f94:	00 0c       	add	r0, r0
     f96:	11 f4       	brne	.+4      	; 0xf9c <__fp_round+0xc>
     f98:	88 23       	and	r24, r24
     f9a:	52 f0       	brmi	.+20     	; 0xfb0 <__fp_round+0x20>
     f9c:	bb 0f       	add	r27, r27
     f9e:	40 f4       	brcc	.+16     	; 0xfb0 <__fp_round+0x20>
     fa0:	bf 2b       	or	r27, r31
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <__fp_round+0x18>
     fa4:	60 ff       	sbrs	r22, 0
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <__fp_round+0x20>
     fa8:	6f 5f       	subi	r22, 0xFF	; 255
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	08 95       	ret

00000fb2 <__fp_split3>:
     fb2:	57 fd       	sbrc	r21, 7
     fb4:	90 58       	subi	r25, 0x80	; 128
     fb6:	44 0f       	add	r20, r20
     fb8:	55 1f       	adc	r21, r21
     fba:	59 f0       	breq	.+22     	; 0xfd2 <__fp_splitA+0x10>
     fbc:	5f 3f       	cpi	r21, 0xFF	; 255
     fbe:	71 f0       	breq	.+28     	; 0xfdc <__fp_splitA+0x1a>
     fc0:	47 95       	ror	r20

00000fc2 <__fp_splitA>:
     fc2:	88 0f       	add	r24, r24
     fc4:	97 fb       	bst	r25, 7
     fc6:	99 1f       	adc	r25, r25
     fc8:	61 f0       	breq	.+24     	; 0xfe2 <__fp_splitA+0x20>
     fca:	9f 3f       	cpi	r25, 0xFF	; 255
     fcc:	79 f0       	breq	.+30     	; 0xfec <__fp_splitA+0x2a>
     fce:	87 95       	ror	r24
     fd0:	08 95       	ret
     fd2:	12 16       	cp	r1, r18
     fd4:	13 06       	cpc	r1, r19
     fd6:	14 06       	cpc	r1, r20
     fd8:	55 1f       	adc	r21, r21
     fda:	f2 cf       	rjmp	.-28     	; 0xfc0 <__fp_split3+0xe>
     fdc:	46 95       	lsr	r20
     fde:	f1 df       	rcall	.-30     	; 0xfc2 <__fp_splitA>
     fe0:	08 c0       	rjmp	.+16     	; 0xff2 <__fp_splitA+0x30>
     fe2:	16 16       	cp	r1, r22
     fe4:	17 06       	cpc	r1, r23
     fe6:	18 06       	cpc	r1, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	f1 cf       	rjmp	.-30     	; 0xfce <__fp_splitA+0xc>
     fec:	86 95       	lsr	r24
     fee:	71 05       	cpc	r23, r1
     ff0:	61 05       	cpc	r22, r1
     ff2:	08 94       	sec
     ff4:	08 95       	ret

00000ff6 <__fp_zero>:
     ff6:	e8 94       	clt

00000ff8 <__fp_szero>:
     ff8:	bb 27       	eor	r27, r27
     ffa:	66 27       	eor	r22, r22
     ffc:	77 27       	eor	r23, r23
     ffe:	cb 01       	movw	r24, r22
    1000:	97 f9       	bld	r25, 7
    1002:	08 95       	ret

00001004 <__gesf2>:
    1004:	8a df       	rcall	.-236    	; 0xf1a <__fp_cmp>
    1006:	08 f4       	brcc	.+2      	; 0x100a <__gesf2+0x6>
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	08 95       	ret

0000100c <__mulsf3>:
    100c:	0b d0       	rcall	.+22     	; 0x1024 <__mulsf3x>
    100e:	c0 cf       	rjmp	.-128    	; 0xf90 <__fp_round>
    1010:	b1 df       	rcall	.-158    	; 0xf74 <__fp_pscA>
    1012:	28 f0       	brcs	.+10     	; 0x101e <__mulsf3+0x12>
    1014:	b6 df       	rcall	.-148    	; 0xf82 <__fp_pscB>
    1016:	18 f0       	brcs	.+6      	; 0x101e <__mulsf3+0x12>
    1018:	95 23       	and	r25, r21
    101a:	09 f0       	breq	.+2      	; 0x101e <__mulsf3+0x12>
    101c:	a2 cf       	rjmp	.-188    	; 0xf62 <__fp_inf>
    101e:	a7 cf       	rjmp	.-178    	; 0xf6e <__fp_nan>
    1020:	11 24       	eor	r1, r1
    1022:	ea cf       	rjmp	.-44     	; 0xff8 <__fp_szero>

00001024 <__mulsf3x>:
    1024:	c6 df       	rcall	.-116    	; 0xfb2 <__fp_split3>
    1026:	a0 f3       	brcs	.-24     	; 0x1010 <__mulsf3+0x4>

00001028 <__mulsf3_pse>:
    1028:	95 9f       	mul	r25, r21
    102a:	d1 f3       	breq	.-12     	; 0x1020 <__mulsf3+0x14>
    102c:	95 0f       	add	r25, r21
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	55 1f       	adc	r21, r21
    1032:	62 9f       	mul	r22, r18
    1034:	f0 01       	movw	r30, r0
    1036:	72 9f       	mul	r23, r18
    1038:	bb 27       	eor	r27, r27
    103a:	f0 0d       	add	r31, r0
    103c:	b1 1d       	adc	r27, r1
    103e:	63 9f       	mul	r22, r19
    1040:	aa 27       	eor	r26, r26
    1042:	f0 0d       	add	r31, r0
    1044:	b1 1d       	adc	r27, r1
    1046:	aa 1f       	adc	r26, r26
    1048:	64 9f       	mul	r22, r20
    104a:	66 27       	eor	r22, r22
    104c:	b0 0d       	add	r27, r0
    104e:	a1 1d       	adc	r26, r1
    1050:	66 1f       	adc	r22, r22
    1052:	82 9f       	mul	r24, r18
    1054:	22 27       	eor	r18, r18
    1056:	b0 0d       	add	r27, r0
    1058:	a1 1d       	adc	r26, r1
    105a:	62 1f       	adc	r22, r18
    105c:	73 9f       	mul	r23, r19
    105e:	b0 0d       	add	r27, r0
    1060:	a1 1d       	adc	r26, r1
    1062:	62 1f       	adc	r22, r18
    1064:	83 9f       	mul	r24, r19
    1066:	a0 0d       	add	r26, r0
    1068:	61 1d       	adc	r22, r1
    106a:	22 1f       	adc	r18, r18
    106c:	74 9f       	mul	r23, r20
    106e:	33 27       	eor	r19, r19
    1070:	a0 0d       	add	r26, r0
    1072:	61 1d       	adc	r22, r1
    1074:	23 1f       	adc	r18, r19
    1076:	84 9f       	mul	r24, r20
    1078:	60 0d       	add	r22, r0
    107a:	21 1d       	adc	r18, r1
    107c:	82 2f       	mov	r24, r18
    107e:	76 2f       	mov	r23, r22
    1080:	6a 2f       	mov	r22, r26
    1082:	11 24       	eor	r1, r1
    1084:	9f 57       	subi	r25, 0x7F	; 127
    1086:	50 40       	sbci	r21, 0x00	; 0
    1088:	8a f0       	brmi	.+34     	; 0x10ac <__mulsf3_pse+0x84>
    108a:	e1 f0       	breq	.+56     	; 0x10c4 <__mulsf3_pse+0x9c>
    108c:	88 23       	and	r24, r24
    108e:	4a f0       	brmi	.+18     	; 0x10a2 <__mulsf3_pse+0x7a>
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	bb 1f       	adc	r27, r27
    1096:	66 1f       	adc	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	91 50       	subi	r25, 0x01	; 1
    109e:	50 40       	sbci	r21, 0x00	; 0
    10a0:	a9 f7       	brne	.-22     	; 0x108c <__mulsf3_pse+0x64>
    10a2:	9e 3f       	cpi	r25, 0xFE	; 254
    10a4:	51 05       	cpc	r21, r1
    10a6:	70 f0       	brcs	.+28     	; 0x10c4 <__mulsf3_pse+0x9c>
    10a8:	5c cf       	rjmp	.-328    	; 0xf62 <__fp_inf>
    10aa:	a6 cf       	rjmp	.-180    	; 0xff8 <__fp_szero>
    10ac:	5f 3f       	cpi	r21, 0xFF	; 255
    10ae:	ec f3       	brlt	.-6      	; 0x10aa <__mulsf3_pse+0x82>
    10b0:	98 3e       	cpi	r25, 0xE8	; 232
    10b2:	dc f3       	brlt	.-10     	; 0x10aa <__mulsf3_pse+0x82>
    10b4:	86 95       	lsr	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f7 95       	ror	r31
    10be:	e7 95       	ror	r30
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	c1 f7       	brne	.-16     	; 0x10b4 <__mulsf3_pse+0x8c>
    10c4:	fe 2b       	or	r31, r30
    10c6:	88 0f       	add	r24, r24
    10c8:	91 1d       	adc	r25, r1
    10ca:	96 95       	lsr	r25
    10cc:	87 95       	ror	r24
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret

000010d2 <sprintf>:
    10d2:	ae e0       	ldi	r26, 0x0E	; 14
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ee e6       	ldi	r30, 0x6E	; 110
    10d8:	f8 e0       	ldi	r31, 0x08	; 8
    10da:	98 c2       	rjmp	.+1328   	; 0x160c <__prologue_saves__+0x1c>
    10dc:	0d 89       	ldd	r16, Y+21	; 0x15
    10de:	1e 89       	ldd	r17, Y+22	; 0x16
    10e0:	86 e0       	ldi	r24, 0x06	; 6
    10e2:	8c 83       	std	Y+4, r24	; 0x04
    10e4:	1a 83       	std	Y+2, r17	; 0x02
    10e6:	09 83       	std	Y+1, r16	; 0x01
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	9f e7       	ldi	r25, 0x7F	; 127
    10ec:	9e 83       	std	Y+6, r25	; 0x06
    10ee:	8d 83       	std	Y+5, r24	; 0x05
    10f0:	9e 01       	movw	r18, r28
    10f2:	27 5e       	subi	r18, 0xE7	; 231
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
    10f6:	ce 01       	movw	r24, r28
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	6f 89       	ldd	r22, Y+23	; 0x17
    10fc:	78 8d       	ldd	r23, Y+24	; 0x18
    10fe:	a9 01       	movw	r20, r18
    1100:	09 d0       	rcall	.+18     	; 0x1114 <vfprintf>
    1102:	2f 81       	ldd	r18, Y+7	; 0x07
    1104:	38 85       	ldd	r19, Y+8	; 0x08
    1106:	02 0f       	add	r16, r18
    1108:	13 1f       	adc	r17, r19
    110a:	f8 01       	movw	r30, r16
    110c:	10 82       	st	Z, r1
    110e:	2e 96       	adiw	r28, 0x0e	; 14
    1110:	e4 e0       	ldi	r30, 0x04	; 4
    1112:	98 c2       	rjmp	.+1328   	; 0x1644 <__epilogue_restores__+0x1c>

00001114 <vfprintf>:
    1114:	ab e0       	ldi	r26, 0x0B	; 11
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ef e8       	ldi	r30, 0x8F	; 143
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	69 c2       	rjmp	.+1234   	; 0x15f0 <__prologue_saves__>
    111e:	3c 01       	movw	r6, r24
    1120:	2b 01       	movw	r4, r22
    1122:	5a 01       	movw	r10, r20
    1124:	fc 01       	movw	r30, r24
    1126:	17 82       	std	Z+7, r1	; 0x07
    1128:	16 82       	std	Z+6, r1	; 0x06
    112a:	83 81       	ldd	r24, Z+3	; 0x03
    112c:	81 fd       	sbrc	r24, 1
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <vfprintf+0x22>
    1130:	6f ef       	ldi	r22, 0xFF	; 255
    1132:	7f ef       	ldi	r23, 0xFF	; 255
    1134:	b9 c1       	rjmp	.+882    	; 0x14a8 <vfprintf+0x394>
    1136:	9a e0       	ldi	r25, 0x0A	; 10
    1138:	89 2e       	mov	r8, r25
    113a:	1e 01       	movw	r2, r28
    113c:	08 94       	sec
    113e:	21 1c       	adc	r2, r1
    1140:	31 1c       	adc	r3, r1
    1142:	f3 01       	movw	r30, r6
    1144:	23 81       	ldd	r18, Z+3	; 0x03
    1146:	f2 01       	movw	r30, r4
    1148:	23 fd       	sbrc	r18, 3
    114a:	85 91       	lpm	r24, Z+
    114c:	23 ff       	sbrs	r18, 3
    114e:	81 91       	ld	r24, Z+
    1150:	2f 01       	movw	r4, r30
    1152:	88 23       	and	r24, r24
    1154:	09 f4       	brne	.+2      	; 0x1158 <vfprintf+0x44>
    1156:	a5 c1       	rjmp	.+842    	; 0x14a2 <vfprintf+0x38e>
    1158:	85 32       	cpi	r24, 0x25	; 37
    115a:	39 f4       	brne	.+14     	; 0x116a <vfprintf+0x56>
    115c:	23 fd       	sbrc	r18, 3
    115e:	85 91       	lpm	r24, Z+
    1160:	23 ff       	sbrs	r18, 3
    1162:	81 91       	ld	r24, Z+
    1164:	2f 01       	movw	r4, r30
    1166:	85 32       	cpi	r24, 0x25	; 37
    1168:	21 f4       	brne	.+8      	; 0x1172 <vfprintf+0x5e>
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	b3 01       	movw	r22, r6
    116e:	b6 d1       	rcall	.+876    	; 0x14dc <fputc>
    1170:	e8 cf       	rjmp	.-48     	; 0x1142 <vfprintf+0x2e>
    1172:	98 2f       	mov	r25, r24
    1174:	ff 24       	eor	r15, r15
    1176:	ee 24       	eor	r14, r14
    1178:	99 24       	eor	r9, r9
    117a:	ff e1       	ldi	r31, 0x1F	; 31
    117c:	ff 15       	cp	r31, r15
    117e:	d0 f0       	brcs	.+52     	; 0x11b4 <vfprintf+0xa0>
    1180:	9b 32       	cpi	r25, 0x2B	; 43
    1182:	69 f0       	breq	.+26     	; 0x119e <vfprintf+0x8a>
    1184:	9c 32       	cpi	r25, 0x2C	; 44
    1186:	28 f4       	brcc	.+10     	; 0x1192 <vfprintf+0x7e>
    1188:	90 32       	cpi	r25, 0x20	; 32
    118a:	59 f0       	breq	.+22     	; 0x11a2 <vfprintf+0x8e>
    118c:	93 32       	cpi	r25, 0x23	; 35
    118e:	91 f4       	brne	.+36     	; 0x11b4 <vfprintf+0xa0>
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <vfprintf+0x9a>
    1192:	9d 32       	cpi	r25, 0x2D	; 45
    1194:	49 f0       	breq	.+18     	; 0x11a8 <vfprintf+0x94>
    1196:	90 33       	cpi	r25, 0x30	; 48
    1198:	69 f4       	brne	.+26     	; 0x11b4 <vfprintf+0xa0>
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	24 c0       	rjmp	.+72     	; 0x11e6 <vfprintf+0xd2>
    119e:	52 e0       	ldi	r21, 0x02	; 2
    11a0:	f5 2a       	or	r15, r21
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	f8 2a       	or	r15, r24
    11a6:	28 c0       	rjmp	.+80     	; 0x11f8 <vfprintf+0xe4>
    11a8:	98 e0       	ldi	r25, 0x08	; 8
    11aa:	f9 2a       	or	r15, r25
    11ac:	25 c0       	rjmp	.+74     	; 0x11f8 <vfprintf+0xe4>
    11ae:	e0 e1       	ldi	r30, 0x10	; 16
    11b0:	fe 2a       	or	r15, r30
    11b2:	22 c0       	rjmp	.+68     	; 0x11f8 <vfprintf+0xe4>
    11b4:	f7 fc       	sbrc	r15, 7
    11b6:	29 c0       	rjmp	.+82     	; 0x120a <vfprintf+0xf6>
    11b8:	89 2f       	mov	r24, r25
    11ba:	80 53       	subi	r24, 0x30	; 48
    11bc:	8a 30       	cpi	r24, 0x0A	; 10
    11be:	70 f4       	brcc	.+28     	; 0x11dc <vfprintf+0xc8>
    11c0:	f6 fe       	sbrs	r15, 6
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <vfprintf+0xba>
    11c4:	98 9c       	mul	r9, r8
    11c6:	90 2c       	mov	r9, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	98 0e       	add	r9, r24
    11cc:	15 c0       	rjmp	.+42     	; 0x11f8 <vfprintf+0xe4>
    11ce:	e8 9c       	mul	r14, r8
    11d0:	e0 2c       	mov	r14, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	e8 0e       	add	r14, r24
    11d6:	f0 e2       	ldi	r31, 0x20	; 32
    11d8:	ff 2a       	or	r15, r31
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <vfprintf+0xe4>
    11dc:	9e 32       	cpi	r25, 0x2E	; 46
    11de:	29 f4       	brne	.+10     	; 0x11ea <vfprintf+0xd6>
    11e0:	f6 fc       	sbrc	r15, 6
    11e2:	5f c1       	rjmp	.+702    	; 0x14a2 <vfprintf+0x38e>
    11e4:	40 e4       	ldi	r20, 0x40	; 64
    11e6:	f4 2a       	or	r15, r20
    11e8:	07 c0       	rjmp	.+14     	; 0x11f8 <vfprintf+0xe4>
    11ea:	9c 36       	cpi	r25, 0x6C	; 108
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <vfprintf+0xe0>
    11ee:	50 e8       	ldi	r21, 0x80	; 128
    11f0:	f5 2a       	or	r15, r21
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vfprintf+0xe4>
    11f4:	98 36       	cpi	r25, 0x68	; 104
    11f6:	49 f4       	brne	.+18     	; 0x120a <vfprintf+0xf6>
    11f8:	f2 01       	movw	r30, r4
    11fa:	23 fd       	sbrc	r18, 3
    11fc:	95 91       	lpm	r25, Z+
    11fe:	23 ff       	sbrs	r18, 3
    1200:	91 91       	ld	r25, Z+
    1202:	2f 01       	movw	r4, r30
    1204:	99 23       	and	r25, r25
    1206:	09 f0       	breq	.+2      	; 0x120a <vfprintf+0xf6>
    1208:	b8 cf       	rjmp	.-144    	; 0x117a <vfprintf+0x66>
    120a:	89 2f       	mov	r24, r25
    120c:	85 54       	subi	r24, 0x45	; 69
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	18 f0       	brcs	.+6      	; 0x1218 <vfprintf+0x104>
    1212:	80 52       	subi	r24, 0x20	; 32
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	38 f4       	brcc	.+14     	; 0x1226 <vfprintf+0x112>
    1218:	44 e0       	ldi	r20, 0x04	; 4
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	a4 0e       	add	r10, r20
    121e:	b5 1e       	adc	r11, r21
    1220:	5f e3       	ldi	r21, 0x3F	; 63
    1222:	59 83       	std	Y+1, r21	; 0x01
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <vfprintf+0x130>
    1226:	93 36       	cpi	r25, 0x63	; 99
    1228:	31 f0       	breq	.+12     	; 0x1236 <vfprintf+0x122>
    122a:	93 37       	cpi	r25, 0x73	; 115
    122c:	79 f0       	breq	.+30     	; 0x124c <vfprintf+0x138>
    122e:	93 35       	cpi	r25, 0x53	; 83
    1230:	09 f0       	breq	.+2      	; 0x1234 <vfprintf+0x120>
    1232:	52 c0       	rjmp	.+164    	; 0x12d8 <vfprintf+0x1c4>
    1234:	1f c0       	rjmp	.+62     	; 0x1274 <vfprintf+0x160>
    1236:	f5 01       	movw	r30, r10
    1238:	80 81       	ld	r24, Z
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	42 e0       	ldi	r20, 0x02	; 2
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	a4 0e       	add	r10, r20
    1242:	b5 1e       	adc	r11, r21
    1244:	61 01       	movw	r12, r2
    1246:	01 e0       	ldi	r16, 0x01	; 1
    1248:	10 e0       	ldi	r17, 0x00	; 0
    124a:	11 c0       	rjmp	.+34     	; 0x126e <vfprintf+0x15a>
    124c:	f5 01       	movw	r30, r10
    124e:	c0 80       	ld	r12, Z
    1250:	d1 80       	ldd	r13, Z+1	; 0x01
    1252:	f6 fc       	sbrc	r15, 6
    1254:	03 c0       	rjmp	.+6      	; 0x125c <vfprintf+0x148>
    1256:	6f ef       	ldi	r22, 0xFF	; 255
    1258:	7f ef       	ldi	r23, 0xFF	; 255
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <vfprintf+0x14c>
    125c:	69 2d       	mov	r22, r9
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	42 e0       	ldi	r20, 0x02	; 2
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	a4 0e       	add	r10, r20
    1266:	b5 1e       	adc	r11, r21
    1268:	c6 01       	movw	r24, r12
    126a:	2d d1       	rcall	.+602    	; 0x14c6 <strnlen>
    126c:	8c 01       	movw	r16, r24
    126e:	5f e7       	ldi	r21, 0x7F	; 127
    1270:	f5 22       	and	r15, r21
    1272:	13 c0       	rjmp	.+38     	; 0x129a <vfprintf+0x186>
    1274:	f5 01       	movw	r30, r10
    1276:	c0 80       	ld	r12, Z
    1278:	d1 80       	ldd	r13, Z+1	; 0x01
    127a:	f6 fc       	sbrc	r15, 6
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <vfprintf+0x170>
    127e:	6f ef       	ldi	r22, 0xFF	; 255
    1280:	7f ef       	ldi	r23, 0xFF	; 255
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <vfprintf+0x174>
    1284:	69 2d       	mov	r22, r9
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	42 e0       	ldi	r20, 0x02	; 2
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	a4 0e       	add	r10, r20
    128e:	b5 1e       	adc	r11, r21
    1290:	c6 01       	movw	r24, r12
    1292:	0e d1       	rcall	.+540    	; 0x14b0 <strnlen_P>
    1294:	8c 01       	movw	r16, r24
    1296:	50 e8       	ldi	r21, 0x80	; 128
    1298:	f5 2a       	or	r15, r21
    129a:	f3 fe       	sbrs	r15, 3
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <vfprintf+0x196>
    129e:	18 c0       	rjmp	.+48     	; 0x12d0 <vfprintf+0x1bc>
    12a0:	80 e2       	ldi	r24, 0x20	; 32
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	b3 01       	movw	r22, r6
    12a6:	1a d1       	rcall	.+564    	; 0x14dc <fputc>
    12a8:	ea 94       	dec	r14
    12aa:	8e 2d       	mov	r24, r14
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	08 17       	cp	r16, r24
    12b0:	19 07       	cpc	r17, r25
    12b2:	b0 f3       	brcs	.-20     	; 0x12a0 <vfprintf+0x18c>
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <vfprintf+0x1bc>
    12b6:	f6 01       	movw	r30, r12
    12b8:	f7 fc       	sbrc	r15, 7
    12ba:	85 91       	lpm	r24, Z+
    12bc:	f7 fe       	sbrs	r15, 7
    12be:	81 91       	ld	r24, Z+
    12c0:	6f 01       	movw	r12, r30
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	b3 01       	movw	r22, r6
    12c6:	0a d1       	rcall	.+532    	; 0x14dc <fputc>
    12c8:	e1 10       	cpse	r14, r1
    12ca:	ea 94       	dec	r14
    12cc:	01 50       	subi	r16, 0x01	; 1
    12ce:	10 40       	sbci	r17, 0x00	; 0
    12d0:	01 15       	cp	r16, r1
    12d2:	11 05       	cpc	r17, r1
    12d4:	81 f7       	brne	.-32     	; 0x12b6 <vfprintf+0x1a2>
    12d6:	e2 c0       	rjmp	.+452    	; 0x149c <vfprintf+0x388>
    12d8:	94 36       	cpi	r25, 0x64	; 100
    12da:	11 f0       	breq	.+4      	; 0x12e0 <vfprintf+0x1cc>
    12dc:	99 36       	cpi	r25, 0x69	; 105
    12de:	61 f5       	brne	.+88     	; 0x1338 <vfprintf+0x224>
    12e0:	f7 fe       	sbrs	r15, 7
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <vfprintf+0x1e0>
    12e4:	f5 01       	movw	r30, r10
    12e6:	20 81       	ld	r18, Z
    12e8:	31 81       	ldd	r19, Z+1	; 0x01
    12ea:	42 81       	ldd	r20, Z+2	; 0x02
    12ec:	53 81       	ldd	r21, Z+3	; 0x03
    12ee:	84 e0       	ldi	r24, 0x04	; 4
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0a c0       	rjmp	.+20     	; 0x1308 <vfprintf+0x1f4>
    12f4:	f5 01       	movw	r30, r10
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	9c 01       	movw	r18, r24
    12fc:	44 27       	eor	r20, r20
    12fe:	37 fd       	sbrc	r19, 7
    1300:	40 95       	com	r20
    1302:	54 2f       	mov	r21, r20
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a8 0e       	add	r10, r24
    130a:	b9 1e       	adc	r11, r25
    130c:	9f e6       	ldi	r25, 0x6F	; 111
    130e:	f9 22       	and	r15, r25
    1310:	57 ff       	sbrs	r21, 7
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <vfprintf+0x212>
    1314:	50 95       	com	r21
    1316:	40 95       	com	r20
    1318:	30 95       	com	r19
    131a:	21 95       	neg	r18
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	4f 4f       	sbci	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	e0 e8       	ldi	r30, 0x80	; 128
    1324:	fe 2a       	or	r15, r30
    1326:	ca 01       	movw	r24, r20
    1328:	b9 01       	movw	r22, r18
    132a:	a1 01       	movw	r20, r2
    132c:	2a e0       	ldi	r18, 0x0A	; 10
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	01 d1       	rcall	.+514    	; 0x1534 <__ultoa_invert>
    1332:	d8 2e       	mov	r13, r24
    1334:	d2 18       	sub	r13, r2
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <vfprintf+0x2a2>
    1338:	95 37       	cpi	r25, 0x75	; 117
    133a:	29 f4       	brne	.+10     	; 0x1346 <vfprintf+0x232>
    133c:	1f 2d       	mov	r17, r15
    133e:	1f 7e       	andi	r17, 0xEF	; 239
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	1d c0       	rjmp	.+58     	; 0x1380 <vfprintf+0x26c>
    1346:	1f 2d       	mov	r17, r15
    1348:	19 7f       	andi	r17, 0xF9	; 249
    134a:	9f 36       	cpi	r25, 0x6F	; 111
    134c:	61 f0       	breq	.+24     	; 0x1366 <vfprintf+0x252>
    134e:	90 37       	cpi	r25, 0x70	; 112
    1350:	20 f4       	brcc	.+8      	; 0x135a <vfprintf+0x246>
    1352:	98 35       	cpi	r25, 0x58	; 88
    1354:	09 f0       	breq	.+2      	; 0x1358 <vfprintf+0x244>
    1356:	a5 c0       	rjmp	.+330    	; 0x14a2 <vfprintf+0x38e>
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <vfprintf+0x264>
    135a:	90 37       	cpi	r25, 0x70	; 112
    135c:	39 f0       	breq	.+14     	; 0x136c <vfprintf+0x258>
    135e:	98 37       	cpi	r25, 0x78	; 120
    1360:	09 f0       	breq	.+2      	; 0x1364 <vfprintf+0x250>
    1362:	9f c0       	rjmp	.+318    	; 0x14a2 <vfprintf+0x38e>
    1364:	04 c0       	rjmp	.+8      	; 0x136e <vfprintf+0x25a>
    1366:	28 e0       	ldi	r18, 0x08	; 8
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	0a c0       	rjmp	.+20     	; 0x1380 <vfprintf+0x26c>
    136c:	10 61       	ori	r17, 0x10	; 16
    136e:	14 fd       	sbrc	r17, 4
    1370:	14 60       	ori	r17, 0x04	; 4
    1372:	20 e1       	ldi	r18, 0x10	; 16
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <vfprintf+0x26c>
    1378:	14 fd       	sbrc	r17, 4
    137a:	16 60       	ori	r17, 0x06	; 6
    137c:	20 e1       	ldi	r18, 0x10	; 16
    137e:	32 e0       	ldi	r19, 0x02	; 2
    1380:	17 ff       	sbrs	r17, 7
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <vfprintf+0x280>
    1384:	f5 01       	movw	r30, r10
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	44 e0       	ldi	r20, 0x04	; 4
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <vfprintf+0x290>
    1394:	f5 01       	movw	r30, r10
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	bc 01       	movw	r22, r24
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	42 e0       	ldi	r20, 0x02	; 2
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	a4 0e       	add	r10, r20
    13a6:	b5 1e       	adc	r11, r21
    13a8:	a1 01       	movw	r20, r2
    13aa:	c4 d0       	rcall	.+392    	; 0x1534 <__ultoa_invert>
    13ac:	d8 2e       	mov	r13, r24
    13ae:	d2 18       	sub	r13, r2
    13b0:	8f e7       	ldi	r24, 0x7F	; 127
    13b2:	f8 2e       	mov	r15, r24
    13b4:	f1 22       	and	r15, r17
    13b6:	f6 fe       	sbrs	r15, 6
    13b8:	0b c0       	rjmp	.+22     	; 0x13d0 <vfprintf+0x2bc>
    13ba:	5e ef       	ldi	r21, 0xFE	; 254
    13bc:	f5 22       	and	r15, r21
    13be:	d9 14       	cp	r13, r9
    13c0:	38 f4       	brcc	.+14     	; 0x13d0 <vfprintf+0x2bc>
    13c2:	f4 fe       	sbrs	r15, 4
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <vfprintf+0x2c0>
    13c6:	f2 fc       	sbrc	r15, 2
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <vfprintf+0x2c0>
    13ca:	8f ee       	ldi	r24, 0xEF	; 239
    13cc:	f8 22       	and	r15, r24
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <vfprintf+0x2c0>
    13d0:	1d 2d       	mov	r17, r13
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <vfprintf+0x2c2>
    13d4:	19 2d       	mov	r17, r9
    13d6:	f4 fe       	sbrs	r15, 4
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <vfprintf+0x2e0>
    13da:	fe 01       	movw	r30, r28
    13dc:	ed 0d       	add	r30, r13
    13de:	f1 1d       	adc	r31, r1
    13e0:	80 81       	ld	r24, Z
    13e2:	80 33       	cpi	r24, 0x30	; 48
    13e4:	19 f4       	brne	.+6      	; 0x13ec <vfprintf+0x2d8>
    13e6:	99 ee       	ldi	r25, 0xE9	; 233
    13e8:	f9 22       	and	r15, r25
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <vfprintf+0x2e8>
    13ec:	1f 5f       	subi	r17, 0xFF	; 255
    13ee:	f2 fe       	sbrs	r15, 2
    13f0:	05 c0       	rjmp	.+10     	; 0x13fc <vfprintf+0x2e8>
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <vfprintf+0x2e6>
    13f4:	8f 2d       	mov	r24, r15
    13f6:	86 78       	andi	r24, 0x86	; 134
    13f8:	09 f0       	breq	.+2      	; 0x13fc <vfprintf+0x2e8>
    13fa:	1f 5f       	subi	r17, 0xFF	; 255
    13fc:	0f 2d       	mov	r16, r15
    13fe:	f3 fc       	sbrc	r15, 3
    1400:	13 c0       	rjmp	.+38     	; 0x1428 <vfprintf+0x314>
    1402:	f0 fe       	sbrs	r15, 0
    1404:	0e c0       	rjmp	.+28     	; 0x1422 <vfprintf+0x30e>
    1406:	1e 15       	cp	r17, r14
    1408:	10 f0       	brcs	.+4      	; 0x140e <vfprintf+0x2fa>
    140a:	9d 2c       	mov	r9, r13
    140c:	0a c0       	rjmp	.+20     	; 0x1422 <vfprintf+0x30e>
    140e:	9d 2c       	mov	r9, r13
    1410:	9e 0c       	add	r9, r14
    1412:	91 1a       	sub	r9, r17
    1414:	1e 2d       	mov	r17, r14
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <vfprintf+0x30e>
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	b3 01       	movw	r22, r6
    141e:	5e d0       	rcall	.+188    	; 0x14dc <fputc>
    1420:	1f 5f       	subi	r17, 0xFF	; 255
    1422:	1e 15       	cp	r17, r14
    1424:	c8 f3       	brcs	.-14     	; 0x1418 <vfprintf+0x304>
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <vfprintf+0x31c>
    1428:	1e 15       	cp	r17, r14
    142a:	10 f4       	brcc	.+4      	; 0x1430 <vfprintf+0x31c>
    142c:	e1 1a       	sub	r14, r17
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <vfprintf+0x31e>
    1430:	ee 24       	eor	r14, r14
    1432:	04 ff       	sbrs	r16, 4
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <vfprintf+0x33e>
    1436:	80 e3       	ldi	r24, 0x30	; 48
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	b3 01       	movw	r22, r6
    143c:	4f d0       	rcall	.+158    	; 0x14dc <fputc>
    143e:	02 ff       	sbrs	r16, 2
    1440:	1b c0       	rjmp	.+54     	; 0x1478 <vfprintf+0x364>
    1442:	01 fd       	sbrc	r16, 1
    1444:	03 c0       	rjmp	.+6      	; 0x144c <vfprintf+0x338>
    1446:	88 e7       	ldi	r24, 0x78	; 120
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e c0       	rjmp	.+28     	; 0x1468 <vfprintf+0x354>
    144c:	88 e5       	ldi	r24, 0x58	; 88
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0b c0       	rjmp	.+22     	; 0x1468 <vfprintf+0x354>
    1452:	80 2f       	mov	r24, r16
    1454:	86 78       	andi	r24, 0x86	; 134
    1456:	81 f0       	breq	.+32     	; 0x1478 <vfprintf+0x364>
    1458:	01 ff       	sbrs	r16, 1
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <vfprintf+0x34c>
    145c:	8b e2       	ldi	r24, 0x2B	; 43
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <vfprintf+0x34e>
    1460:	80 e2       	ldi	r24, 0x20	; 32
    1462:	f7 fc       	sbrc	r15, 7
    1464:	8d e2       	ldi	r24, 0x2D	; 45
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	b3 01       	movw	r22, r6
    146a:	38 d0       	rcall	.+112    	; 0x14dc <fputc>
    146c:	05 c0       	rjmp	.+10     	; 0x1478 <vfprintf+0x364>
    146e:	80 e3       	ldi	r24, 0x30	; 48
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	b3 01       	movw	r22, r6
    1474:	33 d0       	rcall	.+102    	; 0x14dc <fputc>
    1476:	9a 94       	dec	r9
    1478:	d9 14       	cp	r13, r9
    147a:	c8 f3       	brcs	.-14     	; 0x146e <vfprintf+0x35a>
    147c:	da 94       	dec	r13
    147e:	f1 01       	movw	r30, r2
    1480:	ed 0d       	add	r30, r13
    1482:	f1 1d       	adc	r31, r1
    1484:	80 81       	ld	r24, Z
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	b3 01       	movw	r22, r6
    148a:	28 d0       	rcall	.+80     	; 0x14dc <fputc>
    148c:	dd 20       	and	r13, r13
    148e:	b1 f7       	brne	.-20     	; 0x147c <vfprintf+0x368>
    1490:	05 c0       	rjmp	.+10     	; 0x149c <vfprintf+0x388>
    1492:	80 e2       	ldi	r24, 0x20	; 32
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	b3 01       	movw	r22, r6
    1498:	21 d0       	rcall	.+66     	; 0x14dc <fputc>
    149a:	ea 94       	dec	r14
    149c:	ee 20       	and	r14, r14
    149e:	c9 f7       	brne	.-14     	; 0x1492 <vfprintf+0x37e>
    14a0:	50 ce       	rjmp	.-864    	; 0x1142 <vfprintf+0x2e>
    14a2:	f3 01       	movw	r30, r6
    14a4:	66 81       	ldd	r22, Z+6	; 0x06
    14a6:	77 81       	ldd	r23, Z+7	; 0x07
    14a8:	cb 01       	movw	r24, r22
    14aa:	2b 96       	adiw	r28, 0x0b	; 11
    14ac:	e2 e1       	ldi	r30, 0x12	; 18
    14ae:	bc c0       	rjmp	.+376    	; 0x1628 <__epilogue_restores__>

000014b0 <strnlen_P>:
    14b0:	fc 01       	movw	r30, r24
    14b2:	05 90       	lpm	r0, Z+
    14b4:	61 50       	subi	r22, 0x01	; 1
    14b6:	70 40       	sbci	r23, 0x00	; 0
    14b8:	01 10       	cpse	r0, r1
    14ba:	d8 f7       	brcc	.-10     	; 0x14b2 <strnlen_P+0x2>
    14bc:	80 95       	com	r24
    14be:	90 95       	com	r25
    14c0:	8e 0f       	add	r24, r30
    14c2:	9f 1f       	adc	r25, r31
    14c4:	08 95       	ret

000014c6 <strnlen>:
    14c6:	fc 01       	movw	r30, r24
    14c8:	61 50       	subi	r22, 0x01	; 1
    14ca:	70 40       	sbci	r23, 0x00	; 0
    14cc:	01 90       	ld	r0, Z+
    14ce:	01 10       	cpse	r0, r1
    14d0:	d8 f7       	brcc	.-10     	; 0x14c8 <strnlen+0x2>
    14d2:	80 95       	com	r24
    14d4:	90 95       	com	r25
    14d6:	8e 0f       	add	r24, r30
    14d8:	9f 1f       	adc	r25, r31
    14da:	08 95       	ret

000014dc <fputc>:
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	8c 01       	movw	r16, r24
    14e6:	eb 01       	movw	r28, r22
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	81 ff       	sbrs	r24, 1
    14ec:	1b c0       	rjmp	.+54     	; 0x1524 <fputc+0x48>
    14ee:	82 ff       	sbrs	r24, 2
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <fputc+0x30>
    14f2:	2e 81       	ldd	r18, Y+6	; 0x06
    14f4:	3f 81       	ldd	r19, Y+7	; 0x07
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	28 17       	cp	r18, r24
    14fc:	39 07       	cpc	r19, r25
    14fe:	64 f4       	brge	.+24     	; 0x1518 <fputc+0x3c>
    1500:	e8 81       	ld	r30, Y
    1502:	f9 81       	ldd	r31, Y+1	; 0x01
    1504:	01 93       	st	Z+, r16
    1506:	f9 83       	std	Y+1, r31	; 0x01
    1508:	e8 83       	st	Y, r30
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <fputc+0x3c>
    150c:	e8 85       	ldd	r30, Y+8	; 0x08
    150e:	f9 85       	ldd	r31, Y+9	; 0x09
    1510:	80 2f       	mov	r24, r16
    1512:	09 95       	icall
    1514:	89 2b       	or	r24, r25
    1516:	31 f4       	brne	.+12     	; 0x1524 <fputc+0x48>
    1518:	8e 81       	ldd	r24, Y+6	; 0x06
    151a:	9f 81       	ldd	r25, Y+7	; 0x07
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	9f 83       	std	Y+7, r25	; 0x07
    1520:	8e 83       	std	Y+6, r24	; 0x06
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <fputc+0x4c>
    1524:	0f ef       	ldi	r16, 0xFF	; 255
    1526:	1f ef       	ldi	r17, 0xFF	; 255
    1528:	c8 01       	movw	r24, r16
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	08 95       	ret

00001534 <__ultoa_invert>:
    1534:	fa 01       	movw	r30, r20
    1536:	aa 27       	eor	r26, r26
    1538:	28 30       	cpi	r18, 0x08	; 8
    153a:	51 f1       	breq	.+84     	; 0x1590 <__ultoa_invert+0x5c>
    153c:	20 31       	cpi	r18, 0x10	; 16
    153e:	81 f1       	breq	.+96     	; 0x15a0 <__ultoa_invert+0x6c>
    1540:	e8 94       	clt
    1542:	6f 93       	push	r22
    1544:	6e 7f       	andi	r22, 0xFE	; 254
    1546:	6e 5f       	subi	r22, 0xFE	; 254
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	af 4f       	sbci	r26, 0xFF	; 255
    1550:	b1 e0       	ldi	r27, 0x01	; 1
    1552:	3e d0       	rcall	.+124    	; 0x15d0 <__ultoa_invert+0x9c>
    1554:	b4 e0       	ldi	r27, 0x04	; 4
    1556:	3c d0       	rcall	.+120    	; 0x15d0 <__ultoa_invert+0x9c>
    1558:	67 0f       	add	r22, r23
    155a:	78 1f       	adc	r23, r24
    155c:	89 1f       	adc	r24, r25
    155e:	9a 1f       	adc	r25, r26
    1560:	a1 1d       	adc	r26, r1
    1562:	68 0f       	add	r22, r24
    1564:	79 1f       	adc	r23, r25
    1566:	8a 1f       	adc	r24, r26
    1568:	91 1d       	adc	r25, r1
    156a:	a1 1d       	adc	r26, r1
    156c:	6a 0f       	add	r22, r26
    156e:	71 1d       	adc	r23, r1
    1570:	81 1d       	adc	r24, r1
    1572:	91 1d       	adc	r25, r1
    1574:	a1 1d       	adc	r26, r1
    1576:	20 d0       	rcall	.+64     	; 0x15b8 <__ultoa_invert+0x84>
    1578:	09 f4       	brne	.+2      	; 0x157c <__ultoa_invert+0x48>
    157a:	68 94       	set
    157c:	3f 91       	pop	r19
    157e:	2a e0       	ldi	r18, 0x0A	; 10
    1580:	26 9f       	mul	r18, r22
    1582:	11 24       	eor	r1, r1
    1584:	30 19       	sub	r19, r0
    1586:	30 5d       	subi	r19, 0xD0	; 208
    1588:	31 93       	st	Z+, r19
    158a:	de f6       	brtc	.-74     	; 0x1542 <__ultoa_invert+0xe>
    158c:	cf 01       	movw	r24, r30
    158e:	08 95       	ret
    1590:	46 2f       	mov	r20, r22
    1592:	47 70       	andi	r20, 0x07	; 7
    1594:	40 5d       	subi	r20, 0xD0	; 208
    1596:	41 93       	st	Z+, r20
    1598:	b3 e0       	ldi	r27, 0x03	; 3
    159a:	0f d0       	rcall	.+30     	; 0x15ba <__ultoa_invert+0x86>
    159c:	c9 f7       	brne	.-14     	; 0x1590 <__ultoa_invert+0x5c>
    159e:	f6 cf       	rjmp	.-20     	; 0x158c <__ultoa_invert+0x58>
    15a0:	46 2f       	mov	r20, r22
    15a2:	4f 70       	andi	r20, 0x0F	; 15
    15a4:	40 5d       	subi	r20, 0xD0	; 208
    15a6:	4a 33       	cpi	r20, 0x3A	; 58
    15a8:	18 f0       	brcs	.+6      	; 0x15b0 <__ultoa_invert+0x7c>
    15aa:	49 5d       	subi	r20, 0xD9	; 217
    15ac:	31 fd       	sbrc	r19, 1
    15ae:	40 52       	subi	r20, 0x20	; 32
    15b0:	41 93       	st	Z+, r20
    15b2:	02 d0       	rcall	.+4      	; 0x15b8 <__ultoa_invert+0x84>
    15b4:	a9 f7       	brne	.-22     	; 0x15a0 <__ultoa_invert+0x6c>
    15b6:	ea cf       	rjmp	.-44     	; 0x158c <__ultoa_invert+0x58>
    15b8:	b4 e0       	ldi	r27, 0x04	; 4
    15ba:	a6 95       	lsr	r26
    15bc:	97 95       	ror	r25
    15be:	87 95       	ror	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	ba 95       	dec	r27
    15c6:	c9 f7       	brne	.-14     	; 0x15ba <__ultoa_invert+0x86>
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	61 05       	cpc	r22, r1
    15cc:	71 05       	cpc	r23, r1
    15ce:	08 95       	ret
    15d0:	9b 01       	movw	r18, r22
    15d2:	ac 01       	movw	r20, r24
    15d4:	0a 2e       	mov	r0, r26
    15d6:	06 94       	lsr	r0
    15d8:	57 95       	ror	r21
    15da:	47 95       	ror	r20
    15dc:	37 95       	ror	r19
    15de:	27 95       	ror	r18
    15e0:	ba 95       	dec	r27
    15e2:	c9 f7       	brne	.-14     	; 0x15d6 <__ultoa_invert+0xa2>
    15e4:	62 0f       	add	r22, r18
    15e6:	73 1f       	adc	r23, r19
    15e8:	84 1f       	adc	r24, r20
    15ea:	95 1f       	adc	r25, r21
    15ec:	a0 1d       	adc	r26, r0
    15ee:	08 95       	ret

000015f0 <__prologue_saves__>:
    15f0:	2f 92       	push	r2
    15f2:	3f 92       	push	r3
    15f4:	4f 92       	push	r4
    15f6:	5f 92       	push	r5
    15f8:	6f 92       	push	r6
    15fa:	7f 92       	push	r7
    15fc:	8f 92       	push	r8
    15fe:	9f 92       	push	r9
    1600:	af 92       	push	r10
    1602:	bf 92       	push	r11
    1604:	cf 92       	push	r12
    1606:	df 92       	push	r13
    1608:	ef 92       	push	r14
    160a:	ff 92       	push	r15
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	ca 1b       	sub	r28, r26
    161a:	db 0b       	sbc	r29, r27
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	09 94       	ijmp

00001628 <__epilogue_restores__>:
    1628:	2a 88       	ldd	r2, Y+18	; 0x12
    162a:	39 88       	ldd	r3, Y+17	; 0x11
    162c:	48 88       	ldd	r4, Y+16	; 0x10
    162e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1630:	6e 84       	ldd	r6, Y+14	; 0x0e
    1632:	7d 84       	ldd	r7, Y+13	; 0x0d
    1634:	8c 84       	ldd	r8, Y+12	; 0x0c
    1636:	9b 84       	ldd	r9, Y+11	; 0x0b
    1638:	aa 84       	ldd	r10, Y+10	; 0x0a
    163a:	b9 84       	ldd	r11, Y+9	; 0x09
    163c:	c8 84       	ldd	r12, Y+8	; 0x08
    163e:	df 80       	ldd	r13, Y+7	; 0x07
    1640:	ee 80       	ldd	r14, Y+6	; 0x06
    1642:	fd 80       	ldd	r15, Y+5	; 0x05
    1644:	0c 81       	ldd	r16, Y+4	; 0x04
    1646:	1b 81       	ldd	r17, Y+3	; 0x03
    1648:	aa 81       	ldd	r26, Y+2	; 0x02
    164a:	b9 81       	ldd	r27, Y+1	; 0x01
    164c:	ce 0f       	add	r28, r30
    164e:	d1 1d       	adc	r29, r1
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	ed 01       	movw	r28, r26
    165c:	08 95       	ret

0000165e <_exit>:
    165e:	f8 94       	cli

00001660 <__stop_program>:
    1660:	ff cf       	rjmp	.-2      	; 0x1660 <__stop_program>
