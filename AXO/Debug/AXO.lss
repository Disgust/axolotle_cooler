
AXO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000016e0  00001774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800162  00800162  000017d6  2**0
                  ALLOC
  3 .debug_aranges 00000188  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e7  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000144b  00000000  00000000  00001c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001486  00000000  00000000  0000360d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00004a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00004d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c38  00000000  00000000  0000516c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00005da4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    //TODO: запретить прерывание INT1
    //TODO: включить непрерывное преобразование АЦП
    //TODO: разрешить прерывание по переполнению таймера 2
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
}
void LCDhome(void)			//LCD cursor home
{
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c1       	rjmp	.+824    	; 0x342 <__vector_2>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	fb c0       	rjmp	.+502    	; 0x21c <__vector_9>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	32 c1       	rjmp	.+612    	; 0x29e <__vector_14>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	32 c1       	rjmp	.+612    	; 0x2b2 <__vector_19>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__vector_20>
      52:	00 00       	nop
      54:	46 c0       	rjmp	.+140    	; 0xe2 <__vector_21>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
	...

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d4 e0       	ldi	r29, 0x04	; 4
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e0 ee       	ldi	r30, 0xE0	; 224
      bc:	f6 e1       	ldi	r31, 0x16	; 22
      be:	02 c0       	rjmp	.+4      	; 0xc4 <.do_copy_data_start>

000000c0 <.do_copy_data_loop>:
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0

000000c4 <.do_copy_data_start>:
      c4:	a2 36       	cpi	r26, 0x62	; 98
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <.do_copy_data_loop>

000000ca <__do_clear_bss>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a2 e6       	ldi	r26, 0x62	; 98
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a5 37       	cpi	r26, 0x75	; 117
      d6:	b1 07       	cpc	r27, r17
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	32 d4       	rcall	.+2148   	; 0x940 <main>
      dc:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <__vector_21>:
}
//////////////////////////////////////////////////////////////////////////

/// обработчики прерываний///

ISR(ADC_vect){
      e2:	1f 92       	push	r1
      e4:	0f 92       	push	r0
      e6:	0f b6       	in	r0, 0x3f	; 63
      e8:	0f 92       	push	r0
      ea:	11 24       	eor	r1, r1
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	2f 93       	push	r18
      f6:	3f 93       	push	r19
      f8:	4f 93       	push	r20
      fa:	5f 93       	push	r21
      fc:	6f 93       	push	r22
      fe:	7f 93       	push	r23
     100:	8f 93       	push	r24
     102:	9f 93       	push	r25
     104:	af 93       	push	r26
     106:	bf 93       	push	r27
     108:	ef 93       	push	r30
     10a:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : проверять значение датчика и управлять нагрузкой
    //////////////////////////////////////////////////////////////////////////
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
     10c:	60 91 79 00 	lds	r22, 0x0079
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	66 0f       	add	r22, r22
     114:	77 1f       	adc	r23, r23
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	88 27       	eor	r24, r24
     11c:	77 fd       	sbrc	r23, 7
     11e:	80 95       	com	r24
     120:	98 2f       	mov	r25, r24
     122:	ff d6       	rcall	.+3582   	; 0xf22 <__floatsisf>
     124:	2c e5       	ldi	r18, 0x5C	; 92
     126:	3f e8       	ldi	r19, 0x8F	; 143
     128:	42 e4       	ldi	r20, 0x42	; 66
     12a:	5e e3       	ldi	r21, 0x3E	; 62
     12c:	ae d7       	rcall	.+3932   	; 0x108a <__mulsf3>
     12e:	60 93 67 01 	sts	0x0167, r22
     132:	70 93 68 01 	sts	0x0168, r23
     136:	80 93 69 01 	sts	0x0169, r24
     13a:	90 93 6a 01 	sts	0x016A, r25
    if (temperatureValue >= (targetTemp + Tolerance))
     13e:	60 91 1c 01 	lds	r22, 0x011C
     142:	70 91 1d 01 	lds	r23, 0x011D
     146:	80 91 1e 01 	lds	r24, 0x011E
     14a:	90 91 1f 01 	lds	r25, 0x011F
     14e:	20 91 62 01 	lds	r18, 0x0162
     152:	30 91 63 01 	lds	r19, 0x0163
     156:	40 91 64 01 	lds	r20, 0x0164
     15a:	50 91 65 01 	lds	r21, 0x0165
     15e:	e0 90 67 01 	lds	r14, 0x0167
     162:	f0 90 68 01 	lds	r15, 0x0168
     166:	00 91 69 01 	lds	r16, 0x0169
     16a:	10 91 6a 01 	lds	r17, 0x016A
     16e:	d6 d5       	rcall	.+2988   	; 0xd1c <__addsf3>
     170:	a8 01       	movw	r20, r16
     172:	97 01       	movw	r18, r14
     174:	37 d6       	rcall	.+3182   	; 0xde4 <__cmpsf2>
     176:	18 16       	cp	r1, r24
     178:	ac f0       	brlt	.+42     	; 0x1a4 <__vector_21+0xc2>
    BIT_clear(progFlags, FAN_ON);
}

inline static void turnOnCooler() 
{
    if(!BIT_read(progFlags, COOLING))
     17a:	90 91 1b 01 	lds	r25, 0x011B
     17e:	89 2f       	mov	r24, r25
     180:	86 95       	lsr	r24
     182:	86 95       	lsr	r24
     184:	86 95       	lsr	r24
     186:	80 fd       	sbrc	r24, 0
     188:	34 c0       	rjmp	.+104    	; 0x1f2 <__vector_21+0x110>
    }
}

inline static void turnOnFan() 
{
	BIT_write(CONTROL_PORT, FAN, 1);
     18a:	eb e2       	ldi	r30, 0x2B	; 43
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	81 60       	ori	r24, 0x01	; 1
     192:	80 83       	st	Z, r24
inline static void turnOnCooler() 
{
    if(!BIT_read(progFlags, COOLING))
    {   
        turnOnFan();
	    BIT_write(CONTROL_PORT, LOAD, 1);
     194:	80 81       	ld	r24, Z
     196:	80 64       	ori	r24, 0x40	; 64
     198:	80 83       	st	Z, r24
        BIT_write(progFlags, COOLING, 1);
     19a:	89 2f       	mov	r24, r25
     19c:	88 62       	ori	r24, 0x28	; 40
     19e:	80 93 1b 01 	sts	0x011B, r24
     1a2:	27 c0       	rjmp	.+78     	; 0x1f2 <__vector_21+0x110>
    temperatureValue= BYTE_TO_TEMP((ADCH << 2));
    if (temperatureValue >= (targetTemp + Tolerance))
    {
        turnOnCooler(); // включить охладитель
    }
    else if(temperatureValue <= targetTemp)
     1a4:	60 91 67 01 	lds	r22, 0x0167
     1a8:	70 91 68 01 	lds	r23, 0x0168
     1ac:	80 91 69 01 	lds	r24, 0x0169
     1b0:	90 91 6a 01 	lds	r25, 0x016A
     1b4:	20 91 1c 01 	lds	r18, 0x011C
     1b8:	30 91 1d 01 	lds	r19, 0x011D
     1bc:	40 91 1e 01 	lds	r20, 0x011E
     1c0:	50 91 1f 01 	lds	r21, 0x011F
     1c4:	0f d6       	rcall	.+3102   	; 0xde4 <__cmpsf2>
     1c6:	18 16       	cp	r1, r24
     1c8:	a4 f0       	brlt	.+40     	; 0x1f2 <__vector_21+0x110>
    }
}

inline static void turnOffCooler() 
{
    if(BIT_read(progFlags, COOLING))
     1ca:	90 91 1b 01 	lds	r25, 0x011B
     1ce:	89 2f       	mov	r24, r25
     1d0:	86 95       	lsr	r24
     1d2:	86 95       	lsr	r24
     1d4:	86 95       	lsr	r24
     1d6:	80 ff       	sbrs	r24, 0
     1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <__vector_21+0x110>
	BIT_write(progFlags, FAN_ON, 1);
}

inline static void turnOffFan()
{
    BIT_clear(CONTROL_PORT, FAN);
     1da:	eb e2       	ldi	r30, 0x2B	; 43
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	8e 7f       	andi	r24, 0xFE	; 254
     1e2:	80 83       	st	Z, r24
inline static void turnOffCooler() 
{
    if(BIT_read(progFlags, COOLING))
    {
        turnOffFan();
	    BIT_clear(CONTROL_PORT, LOAD);
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 7b       	andi	r24, 0xBF	; 191
     1e8:	80 83       	st	Z, r24
        BIT_clear(progFlags, COOLING);
     1ea:	89 2f       	mov	r24, r25
     1ec:	87 7d       	andi	r24, 0xD7	; 215
     1ee:	80 93 1b 01 	sts	0x011B, r24
    }
    else if(temperatureValue <= targetTemp)
    {
        turnOffCooler(); // выключить охладитель
    }
}
     1f2:	ff 91       	pop	r31
     1f4:	ef 91       	pop	r30
     1f6:	bf 91       	pop	r27
     1f8:	af 91       	pop	r26
     1fa:	9f 91       	pop	r25
     1fc:	8f 91       	pop	r24
     1fe:	7f 91       	pop	r23
     200:	6f 91       	pop	r22
     202:	5f 91       	pop	r21
     204:	4f 91       	pop	r20
     206:	3f 91       	pop	r19
     208:	2f 91       	pop	r18
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	ff 90       	pop	r15
     210:	ef 90       	pop	r14
     212:	0f 90       	pop	r0
     214:	0f be       	out	0x3f, r0	; 63
     216:	0f 90       	pop	r0
     218:	1f 90       	pop	r1
     21a:	18 95       	reti

0000021c <__vector_9>:



ISR(TIMER2_OVF_vect){
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	8f 93       	push	r24
     228:	9f 93       	push	r25
     22a:	af 93       	push	r26
     22c:	bf 93       	push	r27
     22e:	ef 93       	push	r30
     230:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
     232:	80 91 67 01 	lds	r24, 0x0167
     236:	90 91 68 01 	lds	r25, 0x0168
     23a:	a0 91 69 01 	lds	r26, 0x0169
     23e:	b0 91 6a 01 	lds	r27, 0x016A

inline static void sendData( volatile double a) 
{
    //BIN8toASCII3(USART_buffer[0], USART_buffer[1], USART_buffer[2],a); //TODO: доопределить
    //memcpy(&USART_buffer,&a, 8);
    USART_buffer[7]= '\n';
     242:	e4 e7       	ldi	r30, 0x74	; 116
     244:	f1 e0       	ldi	r31, 0x01	; 1
     246:	8a e0       	ldi	r24, 0x0A	; 10
     248:	80 83       	st	Z, r24
    #ifdef MEGA_16
    UDR= *USART_buffer;
    USART_index= 1;
    BIT_write(UCSRB, UDRIE, 1);
    #elif defined MEGA_168
    UDR0= *USART_buffer;
     24a:	37 97       	sbiw	r30, 0x07	; 7
     24c:	80 81       	ld	r24, Z
     24e:	80 93 c6 00 	sts	0x00C6, r24
    USART_index= 1;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	90 93 6c 01 	sts	0x016C, r25
     25a:	80 93 6b 01 	sts	0x016B, r24
    BIT_write(UCSR0B, UDRIE0, 1);
     25e:	e1 ec       	ldi	r30, 0xC1	; 193
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	80 62       	ori	r24, 0x20	; 32
     266:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    // задача : считать секунды, отсылать данные в последовательный порт, 
    // выставлять флаг неактивности
    //////////////////////////////////////////////////////////////////////////
    sendData(temperatureValue);
    runSeconds++;
     268:	80 91 66 01 	lds	r24, 0x0166
     26c:	8f 5f       	subi	r24, 0xFF	; 255
     26e:	80 93 66 01 	sts	0x0166, r24
    if (runSeconds==timeOut)
     272:	80 91 66 01 	lds	r24, 0x0166
     276:	8a 30       	cpi	r24, 0x0A	; 10
     278:	39 f4       	brne	.+14     	; 0x288 <__vector_9+0x6c>
    {
        runSeconds= 0; // сбрасывает счетчик секунд
     27a:	10 92 66 01 	sts	0x0166, r1
        BIT_write(progFlags, INACTIVE, 1);
     27e:	80 91 1b 01 	lds	r24, 0x011B
     282:	80 61       	ori	r24, 0x10	; 16
     284:	80 93 1b 01 	sts	0x011B, r24
    }
    return;
}
     288:	ff 91       	pop	r31
     28a:	ef 91       	pop	r30
     28c:	bf 91       	pop	r27
     28e:	af 91       	pop	r26
     290:	9f 91       	pop	r25
     292:	8f 91       	pop	r24
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <__vector_14>:

ISR(TIMER0_COMPA_vect){
     29e:	1f 92       	push	r1
     2a0:	0f 92       	push	r0
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	0f 92       	push	r0
     2a6:	11 24       	eor	r1, r1
    return;
}
     2a8:	0f 90       	pop	r0
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	0f 90       	pop	r0
     2ae:	1f 90       	pop	r1
     2b0:	18 95       	reti

000002b2 <__vector_19>:
    BIT_write(progFlags, LCD_ON, 1);
    LCD_prepare("TEMP:", 5, 0, 0);
    LCDvisible();
}

ISR(USART_UDRE_vect){
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	8f 93       	push	r24
     2be:	9f 93       	push	r25
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : отдавать модулю УСАПП следующий байт сообщения
    //////////////////////////////////////////////////////////////////////////
    UDR0= USART_buffer[USART_index];
     2c4:	e0 91 6b 01 	lds	r30, 0x016B
     2c8:	f0 91 6c 01 	lds	r31, 0x016C
     2cc:	e3 59       	subi	r30, 0x93	; 147
     2ce:	fe 4f       	sbci	r31, 0xFE	; 254
     2d0:	80 81       	ld	r24, Z
     2d2:	80 93 c6 00 	sts	0x00C6, r24
    USART_index++;
     2d6:	80 91 6b 01 	lds	r24, 0x016B
     2da:	90 91 6c 01 	lds	r25, 0x016C
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	90 93 6c 01 	sts	0x016C, r25
     2e4:	80 93 6b 01 	sts	0x016B, r24
    if(USART_index == 8) {
     2e8:	80 91 6b 01 	lds	r24, 0x016B
     2ec:	90 91 6c 01 	lds	r25, 0x016C
     2f0:	08 97       	sbiw	r24, 0x08	; 8
     2f2:	29 f4       	brne	.+10     	; 0x2fe <__vector_19+0x4c>
        BIT_write(UCSR0B, UDRIE0, 0);
     2f4:	e1 ec       	ldi	r30, 0xC1	; 193
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	8f 7d       	andi	r24, 0xDF	; 223
     2fc:	80 83       	st	Z, r24
    }
}
     2fe:	ff 91       	pop	r31
     300:	ef 91       	pop	r30
     302:	9f 91       	pop	r25
     304:	8f 91       	pop	r24
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_20>:

ISR(USART_TX_vect){
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
    return;
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <LCD_prepare>:
    //BIT_OFF(PRR, PRADC);
    //BIT_OFF(SMCR, SM0);
}

void LCD_prepare(unsigned char* str, uint8_t size, int x, int y)
{
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	8c 01       	movw	r16, r24
     32c:	f6 2e       	mov	r15, r22
     32e:	84 2f       	mov	r24, r20
    LCDGotoXY(x, y);
     330:	62 2f       	mov	r22, r18
     332:	5e d4       	rcall	.+2236   	; 0xbf0 <LCDGotoXY>
    LCDstring(str, size);
     334:	c8 01       	movw	r24, r16
     336:	6f 2d       	mov	r22, r15
     338:	43 d4       	rcall	.+2182   	; 0xbc0 <LCDstring>
}
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	08 95       	ret

00000342 <__vector_2>:

ISR(TIMER0_COMPA_vect){
    return;
}

ISR(INT1_vect){
     342:	1f 92       	push	r1
     344:	0f 92       	push	r0
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	0f 92       	push	r0
     34a:	11 24       	eor	r1, r1
     34c:	2f 93       	push	r18
     34e:	3f 93       	push	r19
     350:	4f 93       	push	r20
     352:	5f 93       	push	r21
     354:	6f 93       	push	r22
     356:	7f 93       	push	r23
     358:	8f 93       	push	r24
     35a:	9f 93       	push	r25
     35c:	af 93       	push	r26
     35e:	bf 93       	push	r27
     360:	ef 93       	push	r30
     362:	ff 93       	push	r31
    //////////////////////////////////////////////////////////////////////////
    // задача : выходить из сна
    //////////////////////////////////////////////////////////////////////////
    turnOffSleep();
    BIT_write(progFlags, LCD_ON, 1);
     364:	80 91 1b 01 	lds	r24, 0x011B
     368:	81 60       	ori	r24, 0x01	; 1
     36a:	80 93 1b 01 	sts	0x011B, r24
    LCD_prepare("TEMP:", 5, 0, 0);
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	65 e0       	ldi	r22, 0x05	; 5
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	d3 df       	rcall	.-90     	; 0x324 <LCD_prepare>
    LCDvisible();
     37e:	c6 d4       	rcall	.+2444   	; 0xd0c <LCDvisible>
}
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <double2char>:
#ifndef D2C_H_
#define D2C_H_


void double2char(char* arr, double value) {
    sprintf(arr, "%2.2f", value);
     3a2:	2d b7       	in	r18, 0x3d	; 61
     3a4:	3e b7       	in	r19, 0x3e	; 62
     3a6:	28 50       	subi	r18, 0x08	; 8
     3a8:	30 40       	sbci	r19, 0x00	; 0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	3e bf       	out	0x3e, r19	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	2d bf       	out	0x3d, r18	; 61
     3b4:	ed b7       	in	r30, 0x3d	; 61
     3b6:	fe b7       	in	r31, 0x3e	; 62
     3b8:	31 96       	adiw	r30, 0x01	; 1
     3ba:	91 83       	std	Z+1, r25	; 0x01
     3bc:	80 83       	st	Z, r24
     3be:	8c e0       	ldi	r24, 0x0C	; 12
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	93 83       	std	Z+3, r25	; 0x03
     3c4:	82 83       	std	Z+2, r24	; 0x02
     3c6:	44 83       	std	Z+4, r20	; 0x04
     3c8:	55 83       	std	Z+5, r21	; 0x05
     3ca:	66 83       	std	Z+6, r22	; 0x06
     3cc:	77 83       	std	Z+7, r23	; 0x07
     3ce:	c0 d6       	rcall	.+3456   	; 0x1150 <sprintf>
     3d0:	8d b7       	in	r24, 0x3d	; 61
     3d2:	9e b7       	in	r25, 0x3e	; 62
     3d4:	08 96       	adiw	r24, 0x08	; 8
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	9e bf       	out	0x3e, r25	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	8d bf       	out	0x3d, r24	; 61
}
     3e0:	08 95       	ret

000003e2 <LCD_DisplayAll>:
    LCDGotoXY(x, y);
    LCDstring(str, size);
}

void LCD_DisplayAll()
{   
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <LCD_DisplayAll+0xe>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <LCD_DisplayAll+0x10>
     3f2:	0f 92       	push	r0
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
    char arr[5];
    LCDGotoXY(6, 0);
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	f9 d3       	rcall	.+2034   	; 0xbf0 <LCDGotoXY>
    double2char(arr, temperatureValue);
     3fe:	40 91 67 01 	lds	r20, 0x0167
     402:	50 91 68 01 	lds	r21, 0x0168
     406:	60 91 69 01 	lds	r22, 0x0169
     40a:	70 91 6a 01 	lds	r23, 0x016A
     40e:	8e 01       	movw	r16, r28
     410:	0f 5f       	subi	r16, 0xFF	; 255
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	c8 01       	movw	r24, r16
     416:	c5 df       	rcall	.-118    	; 0x3a2 <double2char>
    LCDstring(arr, 8);
     418:	c8 01       	movw	r24, r16
     41a:	68 e0       	ldi	r22, 0x08	; 8
     41c:	d1 d3       	rcall	.+1954   	; 0xbc0 <LCDstring>
    if (BIT_read(progFlags, COOLING))
     41e:	80 91 1b 01 	lds	r24, 0x011B
     422:	86 95       	lsr	r24
     424:	86 95       	lsr	r24
     426:	86 95       	lsr	r24
     428:	80 ff       	sbrs	r24, 0
     42a:	35 c0       	rjmp	.+106    	; 0x496 <LCD_DisplayAll+0xb4>
    {
        LCDGotoXY(0, 1);
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	df d3       	rcall	.+1982   	; 0xbf0 <LCDGotoXY>
        LCDstring("COOLING ", 8);
     432:	82 e1       	ldi	r24, 0x12	; 18
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	68 e0       	ldi	r22, 0x08	; 8
     438:	c3 d3       	rcall	.+1926   	; 0xbc0 <LCDstring>
        LCDGotoXY(8, 1);
     43a:	88 e0       	ldi	r24, 0x08	; 8
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	d8 d3       	rcall	.+1968   	; 0xbf0 <LCDGotoXY>
        double2char(arr, ((temperatureValue - targetTemp)/Tolerance)*100);
     440:	60 91 67 01 	lds	r22, 0x0167
     444:	70 91 68 01 	lds	r23, 0x0168
     448:	80 91 69 01 	lds	r24, 0x0169
     44c:	90 91 6a 01 	lds	r25, 0x016A
     450:	20 91 1c 01 	lds	r18, 0x011C
     454:	30 91 1d 01 	lds	r19, 0x011D
     458:	40 91 1e 01 	lds	r20, 0x011E
     45c:	50 91 1f 01 	lds	r21, 0x011F
     460:	e0 90 62 01 	lds	r14, 0x0162
     464:	f0 90 63 01 	lds	r15, 0x0163
     468:	00 91 64 01 	lds	r16, 0x0164
     46c:	10 91 65 01 	lds	r17, 0x0165
     470:	54 d4       	rcall	.+2216   	; 0xd1a <__subsf3>
     472:	a8 01       	movw	r20, r16
     474:	97 01       	movw	r18, r14
     476:	ba d4       	rcall	.+2420   	; 0xdec <__divsf3>
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	48 ec       	ldi	r20, 0xC8	; 200
     47e:	52 e4       	ldi	r21, 0x42	; 66
     480:	04 d6       	rcall	.+3080   	; 0x108a <__mulsf3>
     482:	ab 01       	movw	r20, r22
     484:	bc 01       	movw	r22, r24
     486:	8e 01       	movw	r16, r28
     488:	0f 5f       	subi	r16, 0xFF	; 255
     48a:	1f 4f       	sbci	r17, 0xFF	; 255
     48c:	c8 01       	movw	r24, r16
     48e:	89 df       	rcall	.-238    	; 0x3a2 <double2char>
        LCDstring(arr, 8);
     490:	c8 01       	movw	r24, r16
     492:	68 e0       	ldi	r22, 0x08	; 8
     494:	95 d3       	rcall	.+1834   	; 0xbc0 <LCDstring>
    }
}
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	cf 91       	pop	r28
     4a2:	df 91       	pop	r29
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	08 95       	ret

000004ae <menuRun>:
}

void menuRun()              //TODO: определить пункты меню через структуры, содержащие имя, значение и пределы значений
                                // оставить только один массив и упрстить добавление пунктов
                                // унифицировать функцию inRange()
{
     4ae:	2f 92       	push	r2
     4b0:	3f 92       	push	r3
     4b2:	4f 92       	push	r4
     4b4:	5f 92       	push	r5
     4b6:	6f 92       	push	r6
     4b8:	7f 92       	push	r7
     4ba:	8f 92       	push	r8
     4bc:	9f 92       	push	r9
     4be:	af 92       	push	r10
     4c0:	bf 92       	push	r11
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	c9 54       	subi	r28, 0x49	; 73
     4d8:	d0 40       	sbci	r29, 0x00	; 0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
     4e4:	de 01       	movw	r26, r28
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	e1 e2       	ldi	r30, 0x21	; 33
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	80 e4       	ldi	r24, 0x40	; 64
     4ee:	01 90       	ld	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	81 50       	subi	r24, 0x01	; 1
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <menuRun+0x40>
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
     4f6:	60 91 1c 01 	lds	r22, 0x011C
     4fa:	70 91 1d 01 	lds	r23, 0x011D
     4fe:	80 91 1e 01 	lds	r24, 0x011E
     502:	90 91 1f 01 	lds	r25, 0x011F
     506:	c0 90 62 01 	lds	r12, 0x0162
     50a:	d0 90 63 01 	lds	r13, 0x0163
     50e:	e0 90 64 01 	lds	r14, 0x0164
     512:	f0 90 65 01 	lds	r15, 0x0165
     516:	b0 90 20 01 	lds	r11, 0x0120
     51a:	00 91 1b 01 	lds	r16, 0x011B
     51e:	06 95       	lsr	r16
     520:	06 95       	lsr	r16
     522:	10 e0       	ldi	r17, 0x00	; 0
     524:	01 70       	andi	r16, 0x01	; 1
     526:	10 70       	andi	r17, 0x00	; 0
     528:	c9 d4       	rcall	.+2450   	; 0xebc <__fixsfsi>
     52a:	fe 01       	movw	r30, r28
     52c:	ef 5b       	subi	r30, 0xBF	; 191
     52e:	ff 4f       	sbci	r31, 0xFF	; 255
     530:	71 83       	std	Z+1, r23	; 0x01
     532:	60 83       	st	Z, r22
     534:	c7 01       	movw	r24, r14
     536:	b6 01       	movw	r22, r12
     538:	c1 d4       	rcall	.+2434   	; 0xebc <__fixsfsi>
     53a:	fe 01       	movw	r30, r28
     53c:	ed 5b       	subi	r30, 0xBD	; 189
     53e:	ff 4f       	sbci	r31, 0xFF	; 255
     540:	71 83       	std	Z+1, r23	; 0x01
     542:	60 83       	st	Z, r22
     544:	fe 01       	movw	r30, r28
     546:	eb 5b       	subi	r30, 0xBB	; 187
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	b0 82       	st	Z, r11
     54c:	11 82       	std	Z+1, r1	; 0x01
     54e:	fe 01       	movw	r30, r28
     550:	e9 5b       	subi	r30, 0xB9	; 185
     552:	ff 4f       	sbci	r31, 0xFF	; 255
     554:	11 83       	std	Z+1, r17	; 0x01
     556:	00 83       	st	Z, r16
    LCDclr();
     558:	31 d3       	rcall	.+1634   	; 0xbbc <LCDclr>
     55a:	cc 24       	eor	r12, r12
     55c:	dd 24       	eor	r13, r13
    while ((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
     55e:	0f 2e       	mov	r0, r31
     560:	fb e2       	ldi	r31, 0x2B	; 43
     562:	af 2e       	mov	r10, r31
     564:	bb 24       	eor	r11, r11
     566:	f0 2d       	mov	r31, r0
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
            BIT_clear(progFlags, INACTIVE);
            int value= values[pos];
     568:	0f 2e       	mov	r0, r31
     56a:	f1 e4       	ldi	r31, 0x41	; 65
     56c:	2f 2e       	mov	r2, r31
     56e:	33 24       	eor	r3, r3
     570:	f0 2d       	mov	r31, r0
     572:	2c 0e       	add	r2, r28
     574:	3d 1e       	adc	r3, r29
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	68 2e       	mov	r6, r24
     57c:	2a 96       	adiw	r28, 0x0a	; 10
     57e:	9f af       	std	Y+63, r25	; 0x3f
     580:	2a 97       	sbiw	r28, 0x0a	; 10
     582:	ae c1       	rjmp	.+860    	; 0x8e0 <__stack+0x3e1>
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
    LCDclr();
    while ((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
     584:	f5 01       	movw	r30, r10
     586:	80 81       	ld	r24, Z
     588:	83 fd       	sbrc	r24, 3
     58a:	57 c1       	rjmp	.+686    	; 0x83a <__stack+0x33b>
            BIT_clear(progFlags, INACTIVE);
     58c:	0f 2e       	mov	r0, r31
     58e:	ff ee       	ldi	r31, 0xEF	; 239
     590:	7f 2e       	mov	r7, r31
     592:	f0 2d       	mov	r31, r0
     594:	79 22       	and	r7, r25
     596:	70 92 1b 01 	sts	0x011B, r7
            int value= values[pos];
     59a:	c6 01       	movw	r24, r12
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	f1 01       	movw	r30, r2
     5a2:	e8 0f       	add	r30, r24
     5a4:	f9 1f       	adc	r31, r25
     5a6:	40 80       	ld	r4, Z
     5a8:	51 80       	ldd	r5, Z+1	; 0x01
                //LCD_Write(values[pos],1,0);
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
                {
                    BIT_clear(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     5aa:	4f 01       	movw	r8, r30
     5ac:	40 c1       	rjmp	.+640    	; 0x82e <__stack+0x32f>
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
            BIT_clear(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
                //LCD_Write(values[pos],1,0);
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
     5ae:	f5 01       	movw	r30, r10
     5b0:	80 81       	ld	r24, Z
     5b2:	85 fd       	sbrc	r24, 5
     5b4:	8a c0       	rjmp	.+276    	; 0x6ca <__stack+0x1cb>
                {
                    BIT_clear(progFlags, INACTIVE);
     5b6:	ff ee       	ldi	r31, 0xEF	; 239
     5b8:	7f 22       	and	r7, r31
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     5ba:	f4 01       	movw	r30, r8
     5bc:	80 81       	ld	r24, Z
     5be:	91 81       	ldd	r25, Z+1	; 0x01
     5c0:	9c 01       	movw	r18, r24
     5c2:	2f 5f       	subi	r18, 0xFF	; 255
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     5c6:	f2 e0       	ldi	r31, 0x02	; 2
     5c8:	cf 16       	cp	r12, r31
     5ca:	d1 04       	cpc	r13, r1
     5cc:	c1 f1       	breq	.+112    	; 0x63e <__stack+0x13f>
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	c8 16       	cp	r12, r24
     5d2:	d1 04       	cpc	r13, r1
     5d4:	34 f4       	brge	.+12     	; 0x5e2 <__stack+0xe3>
     5d6:	e1 e0       	ldi	r30, 0x01	; 1
     5d8:	ce 16       	cp	r12, r30
     5da:	d1 04       	cpc	r13, r1
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <__stack+0xe1>
     5de:	6c c0       	rjmp	.+216    	; 0x6b8 <__stack+0x1b9>
     5e0:	0b c0       	rjmp	.+22     	; 0x5f8 <__stack+0xf9>
     5e2:	f3 e0       	ldi	r31, 0x03	; 3
     5e4:	cf 16       	cp	r12, r31
     5e6:	d1 04       	cpc	r13, r1
     5e8:	09 f4       	brne	.+2      	; 0x5ec <__stack+0xed>
     5ea:	49 c0       	rjmp	.+146    	; 0x67e <__stack+0x17f>
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	c8 16       	cp	r12, r24
     5f0:	d1 04       	cpc	r13, r1
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <__stack+0xf7>
     5f4:	61 c0       	rjmp	.+194    	; 0x6b8 <__stack+0x1b9>
     5f6:	4d c0       	rjmp	.+154    	; 0x692 <__stack+0x193>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     5f8:	b9 01       	movw	r22, r18
     5fa:	88 27       	eor	r24, r24
     5fc:	77 fd       	sbrc	r23, 7
     5fe:	80 95       	com	r24
     600:	98 2f       	mov	r25, r24
     602:	8f d4       	rcall	.+2334   	; 0xf22 <__floatsisf>
     604:	7b 01       	movw	r14, r22
     606:	8c 01       	movw	r16, r24
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e7       	ldi	r20, 0x70	; 112
     60e:	51 e4       	ldi	r21, 0x41	; 65
     610:	e9 d3       	rcall	.+2002   	; 0xde4 <__cmpsf2>
     612:	88 23       	and	r24, r24
     614:	1c f4       	brge	.+6      	; 0x61c <__stack+0x11d>
     616:	8f e0       	ldi	r24, 0x0F	; 15
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	54 c0       	rjmp	.+168    	; 0x6c4 <__stack+0x1c5>
     61c:	c8 01       	movw	r24, r16
     61e:	b7 01       	movw	r22, r14
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 ea       	ldi	r20, 0xA0	; 160
     626:	51 e4       	ldi	r21, 0x41	; 65
     628:	2c d5       	rcall	.+2648   	; 0x1082 <__gesf2>
     62a:	18 16       	cp	r1, r24
     62c:	1c f4       	brge	.+6      	; 0x634 <__stack+0x135>
     62e:	84 e1       	ldi	r24, 0x14	; 20
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	48 c0       	rjmp	.+144    	; 0x6c4 <__stack+0x1c5>
     634:	c8 01       	movw	r24, r16
     636:	b7 01       	movw	r22, r14
     638:	41 d4       	rcall	.+2178   	; 0xebc <__fixsfsi>
     63a:	cb 01       	movw	r24, r22
     63c:	43 c0       	rjmp	.+134    	; 0x6c4 <__stack+0x1c5>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     63e:	b9 01       	movw	r22, r18
     640:	88 27       	eor	r24, r24
     642:	77 fd       	sbrc	r23, 7
     644:	80 95       	com	r24
     646:	98 2f       	mov	r25, r24
     648:	6c d4       	rcall	.+2264   	; 0xf22 <__floatsisf>
     64a:	7b 01       	movw	r14, r22
     64c:	8c 01       	movw	r16, r24
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	c6 d3       	rcall	.+1932   	; 0xde4 <__cmpsf2>
     658:	88 23       	and	r24, r24
     65a:	84 f1       	brlt	.+96     	; 0x6bc <__stack+0x1bd>
     65c:	c8 01       	movw	r24, r16
     65e:	b7 01       	movw	r22, r14
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e8       	ldi	r20, 0x80	; 128
     666:	5f e3       	ldi	r21, 0x3F	; 63
     668:	0c d5       	rcall	.+2584   	; 0x1082 <__gesf2>
     66a:	18 16       	cp	r1, r24
     66c:	1c f4       	brge	.+6      	; 0x674 <__stack+0x175>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	28 c0       	rjmp	.+80     	; 0x6c4 <__stack+0x1c5>
     674:	c8 01       	movw	r24, r16
     676:	b7 01       	movw	r22, r14
     678:	21 d4       	rcall	.+2114   	; 0xebc <__fixsfsi>
     67a:	cb 01       	movw	r24, r22
     67c:	23 c0       	rjmp	.+70     	; 0x6c4 <__stack+0x1c5>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     67e:	33 23       	and	r19, r19
     680:	1c f4       	brge	.+6      	; 0x688 <__stack+0x189>
     682:	8f ef       	ldi	r24, 0xFF	; 255
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	1e c0       	rjmp	.+60     	; 0x6c4 <__stack+0x1c5>
     688:	e4 e0       	ldi	r30, 0x04	; 4
     68a:	20 30       	cpi	r18, 0x00	; 0
     68c:	3e 07       	cpc	r19, r30
     68e:	a4 f0       	brlt	.+40     	; 0x6b8 <__stack+0x1b9>
     690:	15 c0       	rjmp	.+42     	; 0x6bc <__stack+0x1bd>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     692:	c9 01       	movw	r24, r18
     694:	52 2f       	mov	r21, r18
     696:	49 2f       	mov	r20, r25
     698:	12 16       	cp	r1, r18
     69a:	13 06       	cpc	r1, r19
     69c:	24 f4       	brge	.+8      	; 0x6a6 <__stack+0x1a7>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	58 2f       	mov	r21, r24
     6a4:	49 2f       	mov	r20, r25
     6a6:	85 2f       	mov	r24, r21
     6a8:	94 2f       	mov	r25, r20
     6aa:	99 23       	and	r25, r25
     6ac:	5c f4       	brge	.+22     	; 0x6c4 <__stack+0x1c5>
     6ae:	86 2d       	mov	r24, r6
     6b0:	2a 96       	adiw	r28, 0x0a	; 10
     6b2:	9f ad       	ldd	r25, Y+63	; 0x3f
     6b4:	2a 97       	sbiw	r28, 0x0a	; 10
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <__stack+0x1c5>
     6b8:	c9 01       	movw	r24, r18
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <__stack+0x1c5>
     6bc:	86 2d       	mov	r24, r6
     6be:	2a 96       	adiw	r28, 0x0a	; 10
     6c0:	9f ad       	ldd	r25, Y+63	; 0x3f
     6c2:	2a 97       	sbiw	r28, 0x0a	; 10
                //LCD_Write(values[pos],1,0);
                if (!BIT_read(CONTROL_PORT, BUTTON_P))
                {
                    BIT_clear(progFlags, INACTIVE);
                    //values[pos]++;
                    values[pos]= inRange(pos, ++values[pos]);
     6c4:	f4 01       	movw	r30, r8
     6c6:	91 83       	std	Z+1, r25	; 0x01
     6c8:	80 83       	st	Z, r24
                }
                if (!BIT_read(CONTROL_PORT, BUTTON_M))
     6ca:	f5 01       	movw	r30, r10
     6cc:	80 81       	ld	r24, Z
     6ce:	84 fd       	sbrc	r24, 4
     6d0:	8a c0       	rjmp	.+276    	; 0x7e6 <__stack+0x2e7>
                {
                    BIT_clear(progFlags, INACTIVE);
     6d2:	ff ee       	ldi	r31, 0xEF	; 239
     6d4:	7f 22       	and	r7, r31
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     6d6:	f4 01       	movw	r30, r8
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	9c 01       	movw	r18, r24
     6de:	21 50       	subi	r18, 0x01	; 1
     6e0:	30 40       	sbci	r19, 0x00	; 0
    LCD_DisplayAll();
}

inline int inRange(int pos, int value)
{
    switch (pos)
     6e2:	f2 e0       	ldi	r31, 0x02	; 2
     6e4:	cf 16       	cp	r12, r31
     6e6:	d1 04       	cpc	r13, r1
     6e8:	c1 f1       	breq	.+112    	; 0x75a <__stack+0x25b>
     6ea:	83 e0       	ldi	r24, 0x03	; 3
     6ec:	c8 16       	cp	r12, r24
     6ee:	d1 04       	cpc	r13, r1
     6f0:	34 f4       	brge	.+12     	; 0x6fe <__stack+0x1ff>
     6f2:	e1 e0       	ldi	r30, 0x01	; 1
     6f4:	ce 16       	cp	r12, r30
     6f6:	d1 04       	cpc	r13, r1
     6f8:	09 f0       	breq	.+2      	; 0x6fc <__stack+0x1fd>
     6fa:	6c c0       	rjmp	.+216    	; 0x7d4 <__stack+0x2d5>
     6fc:	0b c0       	rjmp	.+22     	; 0x714 <__stack+0x215>
     6fe:	f3 e0       	ldi	r31, 0x03	; 3
     700:	cf 16       	cp	r12, r31
     702:	d1 04       	cpc	r13, r1
     704:	09 f4       	brne	.+2      	; 0x708 <__stack+0x209>
     706:	49 c0       	rjmp	.+146    	; 0x79a <__stack+0x29b>
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	c8 16       	cp	r12, r24
     70c:	d1 04       	cpc	r13, r1
     70e:	09 f0       	breq	.+2      	; 0x712 <__stack+0x213>
     710:	61 c0       	rjmp	.+194    	; 0x7d4 <__stack+0x2d5>
     712:	4d c0       	rjmp	.+154    	; 0x7ae <__stack+0x2af>
    {
    case 1:
        value= CONSTRAIN(value, MIN_TEMP, MAX_TEMP);
     714:	b9 01       	movw	r22, r18
     716:	88 27       	eor	r24, r24
     718:	77 fd       	sbrc	r23, 7
     71a:	80 95       	com	r24
     71c:	98 2f       	mov	r25, r24
     71e:	01 d4       	rcall	.+2050   	; 0xf22 <__floatsisf>
     720:	7b 01       	movw	r14, r22
     722:	8c 01       	movw	r16, r24
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e7       	ldi	r20, 0x70	; 112
     72a:	51 e4       	ldi	r21, 0x41	; 65
     72c:	5b d3       	rcall	.+1718   	; 0xde4 <__cmpsf2>
     72e:	88 23       	and	r24, r24
     730:	1c f4       	brge	.+6      	; 0x738 <__stack+0x239>
     732:	8f e0       	ldi	r24, 0x0F	; 15
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	54 c0       	rjmp	.+168    	; 0x7e0 <__stack+0x2e1>
     738:	c8 01       	movw	r24, r16
     73a:	b7 01       	movw	r22, r14
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 ea       	ldi	r20, 0xA0	; 160
     742:	51 e4       	ldi	r21, 0x41	; 65
     744:	9e d4       	rcall	.+2364   	; 0x1082 <__gesf2>
     746:	18 16       	cp	r1, r24
     748:	1c f4       	brge	.+6      	; 0x750 <__stack+0x251>
     74a:	84 e1       	ldi	r24, 0x14	; 20
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	48 c0       	rjmp	.+144    	; 0x7e0 <__stack+0x2e1>
     750:	c8 01       	movw	r24, r16
     752:	b7 01       	movw	r22, r14
     754:	b3 d3       	rcall	.+1894   	; 0xebc <__fixsfsi>
     756:	cb 01       	movw	r24, r22
     758:	43 c0       	rjmp	.+134    	; 0x7e0 <__stack+0x2e1>
        break;
    case 2:
        value= CONSTRAIN(value, MIN_TOL, MAX_TOL);
     75a:	b9 01       	movw	r22, r18
     75c:	88 27       	eor	r24, r24
     75e:	77 fd       	sbrc	r23, 7
     760:	80 95       	com	r24
     762:	98 2f       	mov	r25, r24
     764:	de d3       	rcall	.+1980   	; 0xf22 <__floatsisf>
     766:	7b 01       	movw	r14, r22
     768:	8c 01       	movw	r16, r24
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	38 d3       	rcall	.+1648   	; 0xde4 <__cmpsf2>
     774:	88 23       	and	r24, r24
     776:	84 f1       	brlt	.+96     	; 0x7d8 <__stack+0x2d9>
     778:	c8 01       	movw	r24, r16
     77a:	b7 01       	movw	r22, r14
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e8       	ldi	r20, 0x80	; 128
     782:	5f e3       	ldi	r21, 0x3F	; 63
     784:	7e d4       	rcall	.+2300   	; 0x1082 <__gesf2>
     786:	18 16       	cp	r1, r24
     788:	1c f4       	brge	.+6      	; 0x790 <__stack+0x291>
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	28 c0       	rjmp	.+80     	; 0x7e0 <__stack+0x2e1>
     790:	c8 01       	movw	r24, r16
     792:	b7 01       	movw	r22, r14
     794:	93 d3       	rcall	.+1830   	; 0xebc <__fixsfsi>
     796:	cb 01       	movw	r24, r22
     798:	23 c0       	rjmp	.+70     	; 0x7e0 <__stack+0x2e1>
        break;
    case 3:
        value= CIRCLE(value, 0, 1023);
     79a:	33 23       	and	r19, r19
     79c:	1c f4       	brge	.+6      	; 0x7a4 <__stack+0x2a5>
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	1e c0       	rjmp	.+60     	; 0x7e0 <__stack+0x2e1>
     7a4:	e4 e0       	ldi	r30, 0x04	; 4
     7a6:	20 30       	cpi	r18, 0x00	; 0
     7a8:	3e 07       	cpc	r19, r30
     7aa:	a4 f0       	brlt	.+40     	; 0x7d4 <__stack+0x2d5>
     7ac:	15 c0       	rjmp	.+42     	; 0x7d8 <__stack+0x2d9>
        break;
    case 4:
        value= CONSTRAIN(value, 0, 1);
     7ae:	c9 01       	movw	r24, r18
     7b0:	52 2f       	mov	r21, r18
     7b2:	49 2f       	mov	r20, r25
     7b4:	12 16       	cp	r1, r18
     7b6:	13 06       	cpc	r1, r19
     7b8:	24 f4       	brge	.+8      	; 0x7c2 <__stack+0x2c3>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	58 2f       	mov	r21, r24
     7c0:	49 2f       	mov	r20, r25
     7c2:	85 2f       	mov	r24, r21
     7c4:	94 2f       	mov	r25, r20
     7c6:	99 23       	and	r25, r25
     7c8:	5c f4       	brge	.+22     	; 0x7e0 <__stack+0x2e1>
     7ca:	86 2d       	mov	r24, r6
     7cc:	2a 96       	adiw	r28, 0x0a	; 10
     7ce:	9f ad       	ldd	r25, Y+63	; 0x3f
     7d0:	2a 97       	sbiw	r28, 0x0a	; 10
     7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <__stack+0x2e1>
     7d4:	c9 01       	movw	r24, r18
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <__stack+0x2e1>
     7d8:	86 2d       	mov	r24, r6
     7da:	2a 96       	adiw	r28, 0x0a	; 10
     7dc:	9f ad       	ldd	r25, Y+63	; 0x3f
     7de:	2a 97       	sbiw	r28, 0x0a	; 10
                }
                if (!BIT_read(CONTROL_PORT, BUTTON_M))
                {
                    BIT_clear(progFlags, INACTIVE);
                    //values[pos]--;
                    values[pos]= inRange(pos, --values[pos]);
     7e0:	f4 01       	movw	r30, r8
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	80 83       	st	Z, r24

                }
                if (!BIT_read(CONTROL_PORT, BUTTON_OK)) {
     7e6:	f5 01       	movw	r30, r10
     7e8:	80 81       	ld	r24, Z
     7ea:	83 fd       	sbrc	r24, 3
     7ec:	20 c0       	rjmp	.+64     	; 0x82e <__stack+0x32f>
     7ee:	70 92 1b 01 	sts	0x011B, r7
                    if(pos!=3){
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	cf 16       	cp	r12, r31
     7f6:	d1 04       	cpc	r13, r1
     7f8:	49 f0       	breq	.+18     	; 0x80c <__stack+0x30d>
                        values[pos]= (uint8_t)value;
     7fa:	c6 01       	movw	r24, r12
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	f1 01       	movw	r30, r2
     802:	e8 0f       	add	r30, r24
     804:	f9 1f       	adc	r31, r25
     806:	40 82       	st	Z, r4
     808:	11 82       	std	Z+1, r1	; 0x01
     80a:	17 c0       	rjmp	.+46     	; 0x83a <__stack+0x33b>
                        break;
                    }
                    else{
                        BIT_write(progFlags, ECONOMY, value);
     80c:	41 14       	cp	r4, r1
     80e:	51 04       	cpc	r5, r1
     810:	49 f0       	breq	.+18     	; 0x824 <__stack+0x325>
     812:	c2 01       	movw	r24, r4
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	87 29       	or	r24, r7
     81e:	80 93 1b 01 	sts	0x011B, r24
     822:	0b c0       	rjmp	.+22     	; 0x83a <__stack+0x33b>
     824:	87 2d       	mov	r24, r7
     826:	8b 7f       	andi	r24, 0xFB	; 251
     828:	80 93 1b 01 	sts	0x011B, r24
     82c:	06 c0       	rjmp	.+12     	; 0x83a <__stack+0x33b>
    LCDclr();
    while ((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
        if (!BIT_read(CONTROL_PORT, BUTTON_OK)){
            BIT_clear(progFlags, INACTIVE);
            int value= values[pos];
            while((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
     82e:	f5 01       	movw	r30, r10
     830:	80 81       	ld	r24, Z
     832:	82 ff       	sbrs	r24, 2
     834:	bc ce       	rjmp	.-648    	; 0x5ae <__stack+0xaf>
     836:	70 92 1b 01 	sts	0x011B, r7
                        break;
                    }          
                }                  
            }
        }
        LCDGotoXY(0, 0);
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	d8 d1       	rcall	.+944    	; 0xbf0 <LCDGotoXY>
        LCDstring(menu[pos],16);
     840:	c6 01       	movw	r24, r12
     842:	82 95       	swap	r24
     844:	92 95       	swap	r25
     846:	90 7f       	andi	r25, 0xF0	; 240
     848:	98 27       	eor	r25, r24
     84a:	80 7f       	andi	r24, 0xF0	; 240
     84c:	98 27       	eor	r25, r24
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	2c 0f       	add	r18, r28
     854:	3d 1f       	adc	r19, r29
     856:	82 0f       	add	r24, r18
     858:	93 1f       	adc	r25, r19
     85a:	60 e1       	ldi	r22, 0x10	; 16
     85c:	b1 d1       	rcall	.+866    	; 0xbc0 <LCDstring>
        LCDGotoXY(0, 1);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	c6 d1       	rcall	.+908    	; 0xbf0 <LCDGotoXY>
        LCDstring(values[pos],1);
     864:	c6 01       	movw	r24, r12
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	f1 01       	movw	r30, r2
     86c:	e8 0f       	add	r30, r24
     86e:	f9 1f       	adc	r31, r25
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	a4 d1       	rcall	.+840    	; 0xbc0 <LCDstring>
        if (!BIT_read(CONTROL_PORT, BUTTON_P))
     878:	f5 01       	movw	r30, r10
     87a:	80 81       	ld	r24, Z
     87c:	85 fd       	sbrc	r24, 5
     87e:	16 c0       	rjmp	.+44     	; 0x8ac <__stack+0x3ad>
        {
            BIT_clear(progFlags, INACTIVE);
     880:	80 91 1b 01 	lds	r24, 0x011B
     884:	8f 7e       	andi	r24, 0xEF	; 239
     886:	80 93 1b 01 	sts	0x011B, r24
            pos++;
     88a:	08 94       	sec
     88c:	c1 1c       	adc	r12, r1
     88e:	d1 1c       	adc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     890:	dd 20       	and	r13, r13
     892:	34 f4       	brge	.+12     	; 0x8a0 <__stack+0x3a1>
     894:	0f 2e       	mov	r0, r31
     896:	f3 e0       	ldi	r31, 0x03	; 3
     898:	cf 2e       	mov	r12, r31
     89a:	dd 24       	eor	r13, r13
     89c:	f0 2d       	mov	r31, r0
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <__stack+0x3ad>
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	cf 16       	cp	r12, r31
     8a4:	d1 04       	cpc	r13, r1
     8a6:	14 f0       	brlt	.+4      	; 0x8ac <__stack+0x3ad>
     8a8:	cc 24       	eor	r12, r12
     8aa:	dd 24       	eor	r13, r13
        }
        if (!BIT_read(CONTROL_PORT, BUTTON_M))
     8ac:	f5 01       	movw	r30, r10
     8ae:	80 81       	ld	r24, Z
     8b0:	84 fd       	sbrc	r24, 4
     8b2:	16 c0       	rjmp	.+44     	; 0x8e0 <__stack+0x3e1>
        {
            BIT_clear(progFlags, INACTIVE);
     8b4:	80 91 1b 01 	lds	r24, 0x011B
     8b8:	8f 7e       	andi	r24, 0xEF	; 239
     8ba:	80 93 1b 01 	sts	0x011B, r24
            pos--;
     8be:	08 94       	sec
     8c0:	c1 08       	sbc	r12, r1
     8c2:	d1 08       	sbc	r13, r1
            pos= CIRCLE(pos, 0, 3);
     8c4:	dd 20       	and	r13, r13
     8c6:	34 f4       	brge	.+12     	; 0x8d4 <__stack+0x3d5>
     8c8:	0f 2e       	mov	r0, r31
     8ca:	f3 e0       	ldi	r31, 0x03	; 3
     8cc:	cf 2e       	mov	r12, r31
     8ce:	dd 24       	eor	r13, r13
     8d0:	f0 2d       	mov	r31, r0
     8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <__stack+0x3e1>
     8d4:	f4 e0       	ldi	r31, 0x04	; 4
     8d6:	cf 16       	cp	r12, r31
     8d8:	d1 04       	cpc	r13, r1
     8da:	14 f0       	brlt	.+4      	; 0x8e0 <__stack+0x3e1>
     8dc:	cc 24       	eor	r12, r12
     8de:	dd 24       	eor	r13, r13
{
    int pos= 0;
    char menu[4][16]= {"Target temp  (1)", "Tolerance    (2)", "Measure rate (3)", "P-save mode  (4)"};
	int values[4]= {targetTemp, Tolerance, measureRate, (BIT_read(progFlags, ECONOMY))};
    LCDclr();
    while ((BIT_read(progFlags, INACTIVE))||(!BIT_read(CONTROL_PORT, BUTTON_BACK))){
     8e0:	90 91 1b 01 	lds	r25, 0x011B
     8e4:	94 fd       	sbrc	r25, 4
     8e6:	4e ce       	rjmp	.-868    	; 0x584 <__stack+0x85>
     8e8:	f5 01       	movw	r30, r10
     8ea:	80 81       	ld	r24, Z
     8ec:	82 ff       	sbrs	r24, 2
     8ee:	4a ce       	rjmp	.-876    	; 0x584 <__stack+0x85>
            pos--;
            pos= CIRCLE(pos, 0, 3);
        }
    }
    BIT_clear(progFlags, MENU_ON);
    BIT_clear(progFlags, INACTIVE);
     8f0:	89 2f       	mov	r24, r25
     8f2:	8d 7e       	andi	r24, 0xED	; 237
     8f4:	80 93 1b 01 	sts	0x011B, r24
    }
}

inline void menuStop()
{
    LCDclr();
     8f8:	61 d1       	rcall	.+706    	; 0xbbc <LCDclr>
    LCD_prepare("TEMP:", 5, 0, 0);
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	65 e0       	ldi	r22, 0x05	; 5
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	0d dd       	rcall	.-1510   	; 0x324 <LCD_prepare>
    LCD_DisplayAll();
     90a:	6b dd       	rcall	.-1322   	; 0x3e2 <LCD_DisplayAll>
        }
    }
    BIT_clear(progFlags, MENU_ON);
    BIT_clear(progFlags, INACTIVE);
    menuStop();
}
     90c:	c7 5b       	subi	r28, 0xB7	; 183
     90e:	df 4f       	sbci	r29, 0xFF	; 255
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	bf 90       	pop	r11
     92c:	af 90       	pop	r10
     92e:	9f 90       	pop	r9
     930:	8f 90       	pop	r8
     932:	7f 90       	pop	r7
     934:	6f 90       	pop	r6
     936:	5f 90       	pop	r5
     938:	4f 90       	pop	r4
     93a:	3f 90       	pop	r3
     93c:	2f 90       	pop	r2
     93e:	08 95       	ret

00000940 <main>:

int main(void)
{
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
    BIT_write(UCSRB, RXCIE, 0); // прерывание приема запрещено
    BIT_write(UCSRB, TXCIE, 1); // прерывание конца передачи разрешено
    BIT_write(UCSRB, UDRIE, 0); // прерывание опустошения очереди передачи запрещено - оно разрешится при отправке
    //////////////////////////////////////////////////////////////////////////
    #elif defined MEGA_168
    UBRR0= ROUND(BAUD_DIVIDER);//( F_CPU /( baud * 16 ) ) - 1; // установка бодрейта
     948:	83 e3       	ldi	r24, 0x33	; 51
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 c5 00 	sts	0x00C5, r25
     950:	80 93 c4 00 	sts	0x00C4, r24
    BIT_write(UCSR0C, UPM01, 0);  // проверка четности отключена
     954:	e2 ec       	ldi	r30, 0xC2	; 194
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	8f 7d       	andi	r24, 0xDF	; 223
     95c:	80 83       	st	Z, r24
    BIT_write(UCSR0C, UPM00, 0);  // ----||----
     95e:	80 81       	ld	r24, Z
     960:	8f 7e       	andi	r24, 0xEF	; 239
     962:	80 83       	st	Z, r24
    BIT_write(UCSR0B, UCSZ02, 0);    // 8 битов данных
     964:	a1 ec       	ldi	r26, 0xC1	; 193
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	8c 91       	ld	r24, X
     96a:	8b 7f       	andi	r24, 0xFB	; 251
     96c:	8c 93       	st	X, r24
    BIT_write(UCSR0C, UCSZ01, 1);    // ----||----
     96e:	80 81       	ld	r24, Z
     970:	84 60       	ori	r24, 0x04	; 4
     972:	80 83       	st	Z, r24
    BIT_write(UCSR0C, UCSZ00, 1);    // ----||----
     974:	80 81       	ld	r24, Z
     976:	82 60       	ori	r24, 0x02	; 2
     978:	80 83       	st	Z, r24
    BIT_write(UCSR0C, USBS0, 0);  // 1 стоповый бит
     97a:	80 81       	ld	r24, Z
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	80 83       	st	Z, r24
    BIT_write(UCSR0B, TXEN0, 1);  // передача разрешена
     980:	8c 91       	ld	r24, X
     982:	88 60       	ori	r24, 0x08	; 8
     984:	8c 93       	st	X, r24
    BIT_write(UCSR0B, RXEN0, 0);  // прием запрещен
     986:	8c 91       	ld	r24, X
     988:	8f 7e       	andi	r24, 0xEF	; 239
     98a:	8c 93       	st	X, r24
    BIT_write(UCSR0B, RXCIE0, 0); // прерывание приема запрещено
     98c:	8c 91       	ld	r24, X
     98e:	8f 77       	andi	r24, 0x7F	; 127
     990:	8c 93       	st	X, r24
    BIT_write(UCSR0B, TXCIE0, 1); // прерывание конца передачи разрешено
     992:	8c 91       	ld	r24, X
     994:	80 64       	ori	r24, 0x40	; 64
     996:	8c 93       	st	X, r24
    BIT_write(UCSR0B, UDRIE0, 0);
     998:	8c 91       	ld	r24, X
     99a:	8f 7d       	andi	r24, 0xDF	; 223
     99c:	8c 93       	st	X, r24
    #endif
    ///инициализация портов///
    SENSOR_REG&= ~(1 << TEMP_SENSOR); // термодатчик на вход
     99e:	e7 e2       	ldi	r30, 0x27	; 39
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	8e 7f       	andi	r24, 0xFE	; 254
     9a6:	80 83       	st	Z, r24
    CONTROL_REG= (1 << LCD_LED)|(1 << LOAD)|(1<<FAN); // управление подсветкой экрана, нагрузкой и вентилятором на выход
     9a8:	ea e2       	ldi	r30, 0x2A	; 42
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	81 ec       	ldi	r24, 0xC1	; 193
     9ae:	80 83       	st	Z, r24
    CONTROL_REG&= ~(1 << BUTTON_M) & ~(1 << BUTTON_P) & ~(1 << BUTTON_OK) & ~(1 << BUTTON_BACK); // кнопки на вход
     9b0:	80 81       	ld	r24, Z
     9b2:	83 7c       	andi	r24, 0xC3	; 195
     9b4:	80 83       	st	Z, r24
    CONTROL_PORT= (1 << BUTTON_M)|(1 << BUTTON_OK)|(1 << BUTTON_P)|(1 << BUTTON_BACK); // подключить подтягивающие резисторы к кнопкам
     9b6:	8c e3       	ldi	r24, 0x3C	; 60
     9b8:	8b b9       	out	0x0b, r24	; 11
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация АЦП///
    ADMUX |= 1<<REFS0; // выбрать источник опорного напряжения - вход AVCC
     9ba:	ec e7       	ldi	r30, 0x7C	; 124
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	80 64       	ori	r24, 0x40	; 64
     9c2:	80 83       	st	Z, r24
    ADCSRB |= 3 << ADTS0; // выбрать режим срабатывания АЦП - по совпадению таймера 0 с регистром A
     9c4:	ab e7       	ldi	r26, 0x7B	; 123
     9c6:	b0 e0       	ldi	r27, 0x00	; 0
     9c8:	8c 91       	ld	r24, X
     9ca:	83 60       	ori	r24, 0x03	; 3
     9cc:	8c 93       	st	X, r24
    //ADCSRA |= 6 << ADPS0; // выбрать рабочую частоту (предделителя) - F_CPU/ADPS = 8000000/64=125kHz
    ADMUX |= 1 << ADLAR; // выравнивание результатов по левой стороне
     9ce:	80 81       	ld	r24, Z
     9d0:	80 62       	ori	r24, 0x20	; 32
     9d2:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADATE; // включить непрерывное преобразование
     9d4:	0a e7       	ldi	r16, 0x7A	; 122
     9d6:	10 e0       	ldi	r17, 0x00	; 0
     9d8:	f8 01       	movw	r30, r16
     9da:	80 81       	ld	r24, Z
     9dc:	80 62       	ori	r24, 0x20	; 32
     9de:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADIE; // разрешить прерывания АЦП
     9e0:	80 81       	ld	r24, Z
     9e2:	88 60       	ori	r24, 0x08	; 8
     9e4:	80 83       	st	Z, r24
    ADCSRA |= 1 << ADEN; // разрешить работу АЦП
     9e6:	80 81       	ld	r24, Z
     9e8:	80 68       	ori	r24, 0x80	; 128
     9ea:	80 83       	st	Z, r24
    DIDR0 |= 1 << ADC0D; // отключить буффер цифрового входа ADC0D
     9ec:	ee e7       	ldi	r30, 0x7E	; 126
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	80 83       	st	Z, r24
    
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация таймера 0///
    TCCR0A|= 2 << WGM00; // включить режим CTC - сброс счетчика по совпадению
     9f6:	e4 e4       	ldi	r30, 0x44	; 68
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	82 60       	ori	r24, 0x02	; 2
     9fe:	80 83       	st	Z, r24
    OCR0A= measureRate;
     a00:	80 91 20 01 	lds	r24, 0x0120
     a04:	87 bd       	out	0x27, r24	; 39
    TCCR0B |= 4 << CS00; // включить таймер 0 с предделителем 256
     a06:	e5 e4       	ldi	r30, 0x45	; 69
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	84 60       	ori	r24, 0x04	; 4
     a0e:	80 83       	st	Z, r24
    TIMSK0 |= 1 << OCIE0A; // разрешить прерывание таймера по сравнению с регистром B
     a10:	ee e6       	ldi	r30, 0x6E	; 110
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    ///инициализация асинхронного таймера 2///
    TCCR2B= 5 << CS20; // включить таймер 2 с предделителем 128 (1 переполнение в секунду)
     a1a:	85 e0       	ldi	r24, 0x05	; 5
     a1c:	80 93 b1 00 	sts	0x00B1, r24
    ASSR|= (1 << AS2); // разрешить асинхронный режим
     a20:	e6 eb       	ldi	r30, 0xB6	; 182
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	80 62       	ori	r24, 0x20	; 32
     a28:	80 83       	st	Z, r24
    TIMSK2 |= 1 << TOIE2; // разрешить прерывание таймера по переполнению
     a2a:	e0 e7       	ldi	r30, 0x70	; 112
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	81 60       	ori	r24, 0x01	; 1
     a32:	80 83       	st	Z, r24
    //////////////////////////////////////////////////////////////////////////
    
    LCDinit();
     a34:	0c d1       	rcall	.+536    	; 0xc4e <LCDinit>

    BIT_write(PRR, PRTWI, 1); // отключить питание TWI для уменьшения энергопотребления
     a36:	e4 e6       	ldi	r30, 0x64	; 100
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	80 83       	st	Z, r24
    BIT_write(PRR, PRTIM1, 1); // отключить питание таймера 1 для уменьшения энергопотребления
     a40:	80 81       	ld	r24, Z
     a42:	88 60       	ori	r24, 0x08	; 8
     a44:	80 83       	st	Z, r24
    BIT_write(PRR, PRSPI, 1); // отключить питание SPI для уменьшения энергопотреблениЯ
     a46:	80 81       	ld	r24, Z
     a48:	84 60       	ori	r24, 0x04	; 4
     a4a:	80 83       	st	Z, r24
    BIT_write(ACSR, ACD, 1); // отключить аналоговый компаратор
     a4c:	e0 e5       	ldi	r30, 0x50	; 80
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	80 68       	ori	r24, 0x80	; 128
     a54:	80 83       	st	Z, r24

    ADCSRA |= 1 << ADSC;
     a56:	f8 01       	movw	r30, r16
     a58:	80 81       	ld	r24, Z
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	80 83       	st	Z, r24

    sei();
     a5e:	78 94       	sei
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_read(PIND, BUTTON_M))||(!BIT_read(PIND, BUTTON_P))||(!BIT_read(PIND, BUTTON_BACK))) // если нажата любая кнопка
     a60:	c9 e2       	ldi	r28, 0x29	; 41
     a62:	d0 e0       	ldi	r29, 0x00	; 0
        {
            BIT_clear(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_write(progFlags, LCD_ON, 1);
            LCD_prepare("TEMP:", 5, 0, 0);
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	11 e0       	ldi	r17, 0x01	; 1
    while(1)
    {
        //////////////////////////////////////////////////////////////////////////
        // задача : включать подсветку если нажата какая-либо кнопка
        //////////////////////////////////////////////////////////////////////////
        if ((!BIT_read(PIND, BUTTON_M))||(!BIT_read(PIND, BUTTON_P))||(!BIT_read(PIND, BUTTON_BACK))) // если нажата любая кнопка
     a68:	88 81       	ld	r24, Y
     a6a:	84 ff       	sbrs	r24, 4
     a6c:	06 c0       	rjmp	.+12     	; 0xa7a <main+0x13a>
     a6e:	88 81       	ld	r24, Y
     a70:	85 ff       	sbrs	r24, 5
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <main+0x13a>
     a74:	88 81       	ld	r24, Y
     a76:	82 fd       	sbrc	r24, 2
     a78:	0e c0       	rjmp	.+28     	; 0xa96 <main+0x156>
        {
            BIT_clear(progFlags, INACTIVE); // выйти из режима неактивности
            BIT_write(progFlags, LCD_ON, 1);
     a7a:	80 91 1b 01 	lds	r24, 0x011B
     a7e:	8f 7e       	andi	r24, 0xEF	; 239
     a80:	81 60       	ori	r24, 0x01	; 1
     a82:	80 93 1b 01 	sts	0x011B, r24
            LCD_prepare("TEMP:", 5, 0, 0);
     a86:	c8 01       	movw	r24, r16
     a88:	65 e0       	ldi	r22, 0x05	; 5
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	48 dc       	rcall	.-1904   	; 0x324 <LCD_prepare>
            LCDvisible();
     a94:	3b d1       	rcall	.+630    	; 0xd0c <LCDvisible>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : входить в меню если нажата кнопка OK/MENU
        //////////////////////////////////////////////////////////////////////////
        if (!BIT_read(PIND,BUTTON_OK)) // если нажата кнопка OK/MENU                        //TODO: в режиме P-save кнопка OK/MENU должна висеть на прерывании INT1
     a96:	88 81       	ld	r24, Y
     a98:	83 fd       	sbrc	r24, 3
     a9a:	18 c0       	rjmp	.+48     	; 0xacc <main+0x18c>
        {
            BIT_clear(progFlags, INACTIVE); // выйти из режима неактивности
     a9c:	80 91 1b 01 	lds	r24, 0x011B
     aa0:	8f 7e       	andi	r24, 0xEF	; 239
     aa2:	80 93 1b 01 	sts	0x011B, r24
            if (!BIT_read(progFlags, LCD_ON))
     aa6:	80 fd       	sbrc	r24, 0
     aa8:	0b c0       	rjmp	.+22     	; 0xac0 <main+0x180>
            {
                BIT_write(progFlags, LCD_ON, 1); // включить подсветку дисплея
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	80 93 1b 01 	sts	0x011B, r24
                LCD_prepare("TEMP:", 5, 0, 0);
     ab0:	c8 01       	movw	r24, r16
     ab2:	65 e0       	ldi	r22, 0x05	; 5
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	33 dc       	rcall	.-1946   	; 0x324 <LCD_prepare>
                LCDvisible();
     abe:	26 d1       	rcall	.+588    	; 0xd0c <LCDvisible>
            }
            BIT_write(progFlags, MENU_ON, 1); // включить меню
     ac0:	80 91 1b 01 	lds	r24, 0x011B
     ac4:	82 60       	ori	r24, 0x02	; 2
     ac6:	80 93 1b 01 	sts	0x011B, r24
            menuRun(); // обработка команд меню
     aca:	f1 dc       	rcall	.-1566   	; 0x4ae <menuRun>
        }
        //////////////////////////////////////////////////////////////////////////
        // задача : выключать подсветку по истечении таймаута, засыпать
        //////////////////////////////////////////////////////////////////////////
        if(BIT_read(progFlags, INACTIVE))
     acc:	80 91 1b 01 	lds	r24, 0x011B
     ad0:	84 ff       	sbrs	r24, 4
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <main+0x1a0>
        {
            if(BIT_read(progFlags, LCD_ON))
     ad4:	80 ff       	sbrs	r24, 0
     ad6:	0a c0       	rjmp	.+20     	; 0xaec <main+0x1ac>
            {
                BIT_clear(progFlags, LCD_ON);
     ad8:	8e 7f       	andi	r24, 0xFE	; 254
     ada:	80 93 1b 01 	sts	0x011B, r24
                LCDblank();
     ade:	0f d1       	rcall	.+542    	; 0xcfe <LCDblank>
        }
        
        //////////////////////////////////////////////////////////////////////////
        // задача : отображать данные если подсветка включена или включено охлаждение
        //////////////////////////////////////////////////////////////////////////
        if (BIT_read(progFlags, LCD_ON))
     ae0:	80 91 1b 01 	lds	r24, 0x011B
     ae4:	80 ff       	sbrs	r24, 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <main+0x1ac>
        {
            LCD_DisplayAll();
     ae8:	7c dc       	rcall	.-1800   	; 0x3e2 <LCD_DisplayAll>
     aea:	be cf       	rjmp	.-132    	; 0xa68 <main+0x128>
        }
        else if ((BIT_read(progFlags, COOLING)&&!(BIT_read(progFlags, ECONOMY))))
     aec:	83 ff       	sbrs	r24, 3
     aee:	bc cf       	rjmp	.-136    	; 0xa68 <main+0x128>
     af0:	82 fd       	sbrc	r24, 2
     af2:	ba cf       	rjmp	.-140    	; 0xa68 <main+0x128>
        {
            BIT_clear(progFlags, INACTIVE);
     af4:	8f 7e       	andi	r24, 0xEF	; 239
     af6:	80 93 1b 01 	sts	0x011B, r24
            LCDvisible();
     afa:	08 d1       	rcall	.+528    	; 0xd0c <LCDvisible>
            LCD_DisplayAll();
     afc:	72 dc       	rcall	.-1820   	; 0x3e2 <LCD_DisplayAll>
     afe:	b4 cf       	rjmp	.-152    	; 0xa68 <main+0x128>

00000b00 <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29

#ifdef LCD_4bit
	//4 bit part
	LDP=((ch&0b11110000)>>4);
     b04:	98 2f       	mov	r25, r24
     b06:	92 95       	swap	r25
     b08:	9f 70       	andi	r25, 0x0F	; 15
     b0a:	a5 e2       	ldi	r26, 0x25	; 37
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	9c 93       	st	X, r25
	LCP|=1<<LCD_RS;
     b10:	e8 e2       	ldi	r30, 0x28	; 40
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	90 81       	ld	r25, Z
     b16:	92 60       	ori	r25, 0x02	; 2
     b18:	90 83       	st	Z, r25
	LCP|=1<<LCD_E;		
     b1a:	90 81       	ld	r25, Z
     b1c:	98 60       	ori	r25, 0x08	; 8
     b1e:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b20:	2a ef       	ldi	r18, 0xFA	; 250
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	e9 01       	movw	r28, r18
     b26:	21 97       	sbiw	r28, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <LCDsendChar+0x26>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     b2a:	90 81       	ld	r25, Z
     b2c:	97 7f       	andi	r25, 0xF7	; 247
     b2e:	90 83       	st	Z, r25
	LCP&=~(1<<LCD_RS);
     b30:	90 81       	ld	r25, Z
     b32:	9d 7f       	andi	r25, 0xFD	; 253
     b34:	90 83       	st	Z, r25
     b36:	e9 01       	movw	r28, r18
     b38:	21 97       	sbiw	r28, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <LCDsendChar+0x38>
	_delay_ms(1);
	LDP=(ch&0b00001111);
     b3c:	8f 70       	andi	r24, 0x0F	; 15
     b3e:	8c 93       	st	X, r24
	LCP|=1<<LCD_RS;
     b40:	80 81       	ld	r24, Z
     b42:	82 60       	ori	r24, 0x02	; 2
     b44:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     b46:	80 81       	ld	r24, Z
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	80 83       	st	Z, r24
     b4c:	c9 01       	movw	r24, r18
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <LCDsendChar+0x4e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     b52:	80 81       	ld	r24, Z
     b54:	87 7f       	andi	r24, 0xF7	; 247
     b56:	80 83       	st	Z, r24
	LCP&=~(1<<LCD_RS);
     b58:	80 81       	ld	r24, Z
     b5a:	8d 7f       	andi	r24, 0xFD	; 253
     b5c:	80 83       	st	Z, r24
     b5e:	c9 01       	movw	r24, r18
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <LCDsendChar+0x60>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
#ifdef LCD_4bit	
	//4 bit part
	LDP=((cmd&0b11110000)>>4);
     b6e:	98 2f       	mov	r25, r24
     b70:	92 95       	swap	r25
     b72:	9f 70       	andi	r25, 0x0F	; 15
     b74:	a5 e2       	ldi	r26, 0x25	; 37
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	9c 93       	st	X, r25
	LCP|=1<<LCD_E;		
     b7a:	e8 e2       	ldi	r30, 0x28	; 40
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	90 81       	ld	r25, Z
     b80:	98 60       	ori	r25, 0x08	; 8
     b82:	90 83       	st	Z, r25
     b84:	2a ef       	ldi	r18, 0xFA	; 250
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	e9 01       	movw	r28, r18
     b8a:	21 97       	sbiw	r28, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <LCDsendCommand+0x20>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     b8e:	90 81       	ld	r25, Z
     b90:	97 7f       	andi	r25, 0xF7	; 247
     b92:	90 83       	st	Z, r25
     b94:	e9 01       	movw	r28, r18
     b96:	21 97       	sbiw	r28, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LDP=(cmd&0b00001111);	
     b9a:	8f 70       	andi	r24, 0x0F	; 15
     b9c:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     b9e:	80 81       	ld	r24, Z
     ba0:	88 60       	ori	r24, 0x08	; 8
     ba2:	80 83       	st	Z, r24
     ba4:	c9 01       	movw	r24, r18
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <LCDsendCommand+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     baa:	80 81       	ld	r24, Z
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	80 83       	st	Z, r24
     bb0:	c9 01       	movw	r24, r18
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <LCDsendCommand+0x48>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     bbc:	81 e0       	ldi	r24, 0x01	; 1
}
     bbe:	d5 cf       	rjmp	.-86     	; 0xb6a <LCDsendCommand>

00000bc0 <LCDstring>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	9c 01       	movw	r18, r24
     bca:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	59 f0       	breq	.+22     	; 0xbe6 <LCDstring+0x26>

	// print data
	for(i=0; i<nBytes; i++)
     bd0:	66 23       	and	r22, r22
     bd2:	49 f0       	breq	.+18     	; 0xbe6 <LCDstring+0x26>
     bd4:	18 2f       	mov	r17, r24
     bd6:	28 2f       	mov	r18, r24
     bd8:	e9 01       	movw	r28, r18
	{
		LCDsendChar(data[i]);
     bda:	89 91       	ld	r24, Y+
     bdc:	91 df       	rcall	.-222    	; 0xb00 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     bde:	9e 01       	movw	r18, r28
     be0:	21 1b       	sub	r18, r17
     be2:	20 17       	cp	r18, r16
     be4:	d0 f3       	brcs	.-12     	; 0xbda <LCDstring+0x1a>
	{
		LCDsendChar(data[i]);
	}
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	08 95       	ret

00000bf0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     bf0:	62 30       	cpi	r22, 0x02	; 2
     bf2:	31 f0       	breq	.+12     	; 0xc00 <LCDGotoXY+0x10>
     bf4:	63 30       	cpi	r22, 0x03	; 3
     bf6:	31 f0       	breq	.+12     	; 0xc04 <LCDGotoXY+0x14>
     bf8:	61 30       	cpi	r22, 0x01	; 1
     bfa:	29 f4       	brne	.+10     	; 0xc06 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     bfc:	80 5c       	subi	r24, 0xC0	; 192
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     c00:	8c 5e       	subi	r24, 0xEC	; 236
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     c04:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     c06:	80 68       	ori	r24, 0x80	; 128
	
}
     c08:	b0 cf       	rjmp	.-160    	; 0xb6a <LCDsendCommand>

00000c0a <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     c18:	66 0f       	add	r22, r22
     c1a:	66 0f       	add	r22, r22
     c1c:	66 0f       	add	r22, r22
     c1e:	06 2f       	mov	r16, r22
     c20:	00 64       	ori	r16, 0x40	; 64
     c22:	c0 e0       	ldi	r28, 0x00	; 0
     c24:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     c26:	f7 01       	movw	r30, r14
     c28:	ec 0f       	add	r30, r28
     c2a:	fd 1f       	adc	r31, r29
     c2c:	14 91       	lpm	r17, Z+
		LCDsendCommand(a++);
     c2e:	80 2f       	mov	r24, r16
     c30:	8c 0f       	add	r24, r28
     c32:	9b df       	rcall	.-202    	; 0xb6a <LCDsendCommand>
		LCDsendChar(pcc);
     c34:	81 2f       	mov	r24, r17
     c36:	64 df       	rcall	.-312    	; 0xb00 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     c38:	21 96       	adiw	r28, 0x01	; 1
     c3a:	c8 30       	cpi	r28, 0x08	; 8
     c3c:	d1 05       	cpc	r29, r1
     c3e:	99 f7       	brne	.-26     	; 0xc26 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	86 ea       	ldi	r24, 0xA6	; 166
     c56:	9e e0       	ldi	r25, 0x0E	; 14
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     c5c:	45 e2       	ldi	r20, 0x25	; 37
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	fa 01       	movw	r30, r20
     c62:	10 82       	st	Z, r1
	LCP=0x00;
     c64:	a8 e2       	ldi	r26, 0x28	; 40
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	1c 92       	st	X, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     c6a:	e4 e2       	ldi	r30, 0x24	; 36
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8f 60       	ori	r24, 0x0F	; 15
     c72:	80 83       	st	Z, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     c74:	e7 e2       	ldi	r30, 0x27	; 39
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8e 60       	ori	r24, 0x0E	; 14
     c7c:	80 83       	st	Z, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	fa 01       	movw	r30, r20
     c82:	90 83       	st	Z, r25
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c84:	8c 91       	ld	r24, X
     c86:	88 60       	ori	r24, 0x08	; 8
     c88:	8c 93       	st	X, r24
     c8a:	2a ef       	ldi	r18, 0xFA	; 250
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	f9 01       	movw	r30, r18
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <LCDinit+0x42>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c94:	8c 91       	ld	r24, X
     c96:	87 7f       	andi	r24, 0xF7	; 247
     c98:	8c 93       	st	X, r24
     c9a:	f9 01       	movw	r30, r18
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <LCDinit+0x4e>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ca0:	fa 01       	movw	r30, r20
     ca2:	90 83       	st	Z, r25
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ca4:	8c 91       	ld	r24, X
     ca6:	88 60       	ori	r24, 0x08	; 8
     ca8:	8c 93       	st	X, r24
     caa:	c9 01       	movw	r24, r18
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <LCDinit+0x5e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     cb0:	8c 91       	ld	r24, X
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	8c 93       	st	X, r24
     cb6:	c9 01       	movw	r24, r18
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <LCDinit+0x6a>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     cc0:	8c 91       	ld	r24, X
     cc2:	88 60       	ori	r24, 0x08	; 8
     cc4:	8c 93       	st	X, r24
     cc6:	c9 01       	movw	r24, r18
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <LCDinit+0x7a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ccc:	8c 91       	ld	r24, X
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	8c 93       	st	X, r24
     cd2:	c9 01       	movw	r24, r18
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <LCDinit+0x86>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     cd8:	88 e2       	ldi	r24, 0x28	; 40
     cda:	47 df       	rcall	.-370    	; 0xb6a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     cdc:	8c e0       	ldi	r24, 0x0C	; 12
     cde:	45 df       	rcall	.-374    	; 0xb6a <LCDsendCommand>
     ce0:	c8 e6       	ldi	r28, 0x68	; 104
     ce2:	d0 e0       	ldi	r29, 0x00	; 0
     ce4:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     ce6:	16 2f       	mov	r17, r22
     ce8:	1f 5f       	subi	r17, 0xFF	; 255
     cea:	ce 01       	movw	r24, r28
     cec:	8e df       	rcall	.-228    	; 0xc0a <LCDdefinechar>
     cee:	28 96       	adiw	r28, 0x08	; 8
     cf0:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     cf2:	18 30       	cpi	r17, 0x08	; 8
     cf4:	c1 f7       	brne	.-16     	; 0xce6 <LCDinit+0x98>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	08 95       	ret

00000cfe <LCDblank>:
{
	LCDsendCommand(0x0C);
}
void LCDblank(void)		//blanks LCD
{   
    BIT_write(CONTROL_PORT, LCD_LED, 0);
     cfe:	eb e2       	ldi	r30, 0x2B	; 43
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	80 83       	st	Z, r24
	LCDsendCommand(0x08);
     d08:	88 e0       	ldi	r24, 0x08	; 8
}
     d0a:	2f cf       	rjmp	.-418    	; 0xb6a <LCDsendCommand>

00000d0c <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    BIT_write(CONTROL_PORT, LCD_LED, 1);
     d0c:	eb e2       	ldi	r30, 0x2B	; 43
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	80 83       	st	Z, r24
	LCDsendCommand(0x0C);
     d16:	8c e0       	ldi	r24, 0x0C	; 12
}
     d18:	28 cf       	rjmp	.-432    	; 0xb6a <LCDsendCommand>

00000d1a <__subsf3>:
     d1a:	50 58       	subi	r21, 0x80	; 128

00000d1c <__addsf3>:
     d1c:	bb 27       	eor	r27, r27
     d1e:	aa 27       	eor	r26, r26
     d20:	0e d0       	rcall	.+28     	; 0xd3e <__addsf3x>
     d22:	75 c1       	rjmp	.+746    	; 0x100e <__fp_round>
     d24:	66 d1       	rcall	.+716    	; 0xff2 <__fp_pscA>
     d26:	30 f0       	brcs	.+12     	; 0xd34 <__addsf3+0x18>
     d28:	6b d1       	rcall	.+726    	; 0x1000 <__fp_pscB>
     d2a:	20 f0       	brcs	.+8      	; 0xd34 <__addsf3+0x18>
     d2c:	31 f4       	brne	.+12     	; 0xd3a <__addsf3+0x1e>
     d2e:	9f 3f       	cpi	r25, 0xFF	; 255
     d30:	11 f4       	brne	.+4      	; 0xd36 <__addsf3+0x1a>
     d32:	1e f4       	brtc	.+6      	; 0xd3a <__addsf3+0x1e>
     d34:	5b c1       	rjmp	.+694    	; 0xfec <__fp_nan>
     d36:	0e f4       	brtc	.+2      	; 0xd3a <__addsf3+0x1e>
     d38:	e0 95       	com	r30
     d3a:	e7 fb       	bst	r30, 7
     d3c:	51 c1       	rjmp	.+674    	; 0xfe0 <__fp_inf>

00000d3e <__addsf3x>:
     d3e:	e9 2f       	mov	r30, r25
     d40:	77 d1       	rcall	.+750    	; 0x1030 <__fp_split3>
     d42:	80 f3       	brcs	.-32     	; 0xd24 <__addsf3+0x8>
     d44:	ba 17       	cp	r27, r26
     d46:	62 07       	cpc	r22, r18
     d48:	73 07       	cpc	r23, r19
     d4a:	84 07       	cpc	r24, r20
     d4c:	95 07       	cpc	r25, r21
     d4e:	18 f0       	brcs	.+6      	; 0xd56 <__addsf3x+0x18>
     d50:	71 f4       	brne	.+28     	; 0xd6e <__addsf3x+0x30>
     d52:	9e f5       	brtc	.+102    	; 0xdba <__addsf3x+0x7c>
     d54:	8f c1       	rjmp	.+798    	; 0x1074 <__fp_zero>
     d56:	0e f4       	brtc	.+2      	; 0xd5a <__addsf3x+0x1c>
     d58:	e0 95       	com	r30
     d5a:	0b 2e       	mov	r0, r27
     d5c:	ba 2f       	mov	r27, r26
     d5e:	a0 2d       	mov	r26, r0
     d60:	0b 01       	movw	r0, r22
     d62:	b9 01       	movw	r22, r18
     d64:	90 01       	movw	r18, r0
     d66:	0c 01       	movw	r0, r24
     d68:	ca 01       	movw	r24, r20
     d6a:	a0 01       	movw	r20, r0
     d6c:	11 24       	eor	r1, r1
     d6e:	ff 27       	eor	r31, r31
     d70:	59 1b       	sub	r21, r25
     d72:	99 f0       	breq	.+38     	; 0xd9a <__addsf3x+0x5c>
     d74:	59 3f       	cpi	r21, 0xF9	; 249
     d76:	50 f4       	brcc	.+20     	; 0xd8c <__addsf3x+0x4e>
     d78:	50 3e       	cpi	r21, 0xE0	; 224
     d7a:	68 f1       	brcs	.+90     	; 0xdd6 <__addsf3x+0x98>
     d7c:	1a 16       	cp	r1, r26
     d7e:	f0 40       	sbci	r31, 0x00	; 0
     d80:	a2 2f       	mov	r26, r18
     d82:	23 2f       	mov	r18, r19
     d84:	34 2f       	mov	r19, r20
     d86:	44 27       	eor	r20, r20
     d88:	58 5f       	subi	r21, 0xF8	; 248
     d8a:	f3 cf       	rjmp	.-26     	; 0xd72 <__addsf3x+0x34>
     d8c:	46 95       	lsr	r20
     d8e:	37 95       	ror	r19
     d90:	27 95       	ror	r18
     d92:	a7 95       	ror	r26
     d94:	f0 40       	sbci	r31, 0x00	; 0
     d96:	53 95       	inc	r21
     d98:	c9 f7       	brne	.-14     	; 0xd8c <__addsf3x+0x4e>
     d9a:	7e f4       	brtc	.+30     	; 0xdba <__addsf3x+0x7c>
     d9c:	1f 16       	cp	r1, r31
     d9e:	ba 0b       	sbc	r27, r26
     da0:	62 0b       	sbc	r22, r18
     da2:	73 0b       	sbc	r23, r19
     da4:	84 0b       	sbc	r24, r20
     da6:	ba f0       	brmi	.+46     	; 0xdd6 <__addsf3x+0x98>
     da8:	91 50       	subi	r25, 0x01	; 1
     daa:	a1 f0       	breq	.+40     	; 0xdd4 <__addsf3x+0x96>
     dac:	ff 0f       	add	r31, r31
     dae:	bb 1f       	adc	r27, r27
     db0:	66 1f       	adc	r22, r22
     db2:	77 1f       	adc	r23, r23
     db4:	88 1f       	adc	r24, r24
     db6:	c2 f7       	brpl	.-16     	; 0xda8 <__addsf3x+0x6a>
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <__addsf3x+0x98>
     dba:	ba 0f       	add	r27, r26
     dbc:	62 1f       	adc	r22, r18
     dbe:	73 1f       	adc	r23, r19
     dc0:	84 1f       	adc	r24, r20
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__addsf3x+0x98>
     dc4:	87 95       	ror	r24
     dc6:	77 95       	ror	r23
     dc8:	67 95       	ror	r22
     dca:	b7 95       	ror	r27
     dcc:	f7 95       	ror	r31
     dce:	9e 3f       	cpi	r25, 0xFE	; 254
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <__addsf3x+0x96>
     dd2:	b3 cf       	rjmp	.-154    	; 0xd3a <__addsf3+0x1e>
     dd4:	93 95       	inc	r25
     dd6:	88 0f       	add	r24, r24
     dd8:	08 f0       	brcs	.+2      	; 0xddc <__addsf3x+0x9e>
     dda:	99 27       	eor	r25, r25
     ddc:	ee 0f       	add	r30, r30
     dde:	97 95       	ror	r25
     de0:	87 95       	ror	r24
     de2:	08 95       	ret

00000de4 <__cmpsf2>:
     de4:	d9 d0       	rcall	.+434    	; 0xf98 <__fp_cmp>
     de6:	08 f4       	brcc	.+2      	; 0xdea <__cmpsf2+0x6>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	08 95       	ret

00000dec <__divsf3>:
     dec:	0c d0       	rcall	.+24     	; 0xe06 <__divsf3x>
     dee:	0f c1       	rjmp	.+542    	; 0x100e <__fp_round>
     df0:	07 d1       	rcall	.+526    	; 0x1000 <__fp_pscB>
     df2:	40 f0       	brcs	.+16     	; 0xe04 <__divsf3+0x18>
     df4:	fe d0       	rcall	.+508    	; 0xff2 <__fp_pscA>
     df6:	30 f0       	brcs	.+12     	; 0xe04 <__divsf3+0x18>
     df8:	21 f4       	brne	.+8      	; 0xe02 <__divsf3+0x16>
     dfa:	5f 3f       	cpi	r21, 0xFF	; 255
     dfc:	19 f0       	breq	.+6      	; 0xe04 <__divsf3+0x18>
     dfe:	f0 c0       	rjmp	.+480    	; 0xfe0 <__fp_inf>
     e00:	51 11       	cpse	r21, r1
     e02:	39 c1       	rjmp	.+626    	; 0x1076 <__fp_szero>
     e04:	f3 c0       	rjmp	.+486    	; 0xfec <__fp_nan>

00000e06 <__divsf3x>:
     e06:	14 d1       	rcall	.+552    	; 0x1030 <__fp_split3>
     e08:	98 f3       	brcs	.-26     	; 0xdf0 <__divsf3+0x4>

00000e0a <__divsf3_pse>:
     e0a:	99 23       	and	r25, r25
     e0c:	c9 f3       	breq	.-14     	; 0xe00 <__divsf3+0x14>
     e0e:	55 23       	and	r21, r21
     e10:	b1 f3       	breq	.-20     	; 0xdfe <__divsf3+0x12>
     e12:	95 1b       	sub	r25, r21
     e14:	55 0b       	sbc	r21, r21
     e16:	bb 27       	eor	r27, r27
     e18:	aa 27       	eor	r26, r26
     e1a:	62 17       	cp	r22, r18
     e1c:	73 07       	cpc	r23, r19
     e1e:	84 07       	cpc	r24, r20
     e20:	38 f0       	brcs	.+14     	; 0xe30 <__divsf3_pse+0x26>
     e22:	9f 5f       	subi	r25, 0xFF	; 255
     e24:	5f 4f       	sbci	r21, 0xFF	; 255
     e26:	22 0f       	add	r18, r18
     e28:	33 1f       	adc	r19, r19
     e2a:	44 1f       	adc	r20, r20
     e2c:	aa 1f       	adc	r26, r26
     e2e:	a9 f3       	breq	.-22     	; 0xe1a <__divsf3_pse+0x10>
     e30:	33 d0       	rcall	.+102    	; 0xe98 <__divsf3_pse+0x8e>
     e32:	0e 2e       	mov	r0, r30
     e34:	3a f0       	brmi	.+14     	; 0xe44 <__divsf3_pse+0x3a>
     e36:	e0 e8       	ldi	r30, 0x80	; 128
     e38:	30 d0       	rcall	.+96     	; 0xe9a <__divsf3_pse+0x90>
     e3a:	91 50       	subi	r25, 0x01	; 1
     e3c:	50 40       	sbci	r21, 0x00	; 0
     e3e:	e6 95       	lsr	r30
     e40:	00 1c       	adc	r0, r0
     e42:	ca f7       	brpl	.-14     	; 0xe36 <__divsf3_pse+0x2c>
     e44:	29 d0       	rcall	.+82     	; 0xe98 <__divsf3_pse+0x8e>
     e46:	fe 2f       	mov	r31, r30
     e48:	27 d0       	rcall	.+78     	; 0xe98 <__divsf3_pse+0x8e>
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	bb 1f       	adc	r27, r27
     e52:	26 17       	cp	r18, r22
     e54:	37 07       	cpc	r19, r23
     e56:	48 07       	cpc	r20, r24
     e58:	ab 07       	cpc	r26, r27
     e5a:	b0 e8       	ldi	r27, 0x80	; 128
     e5c:	09 f0       	breq	.+2      	; 0xe60 <__divsf3_pse+0x56>
     e5e:	bb 0b       	sbc	r27, r27
     e60:	80 2d       	mov	r24, r0
     e62:	bf 01       	movw	r22, r30
     e64:	ff 27       	eor	r31, r31
     e66:	93 58       	subi	r25, 0x83	; 131
     e68:	5f 4f       	sbci	r21, 0xFF	; 255
     e6a:	2a f0       	brmi	.+10     	; 0xe76 <__divsf3_pse+0x6c>
     e6c:	9e 3f       	cpi	r25, 0xFE	; 254
     e6e:	51 05       	cpc	r21, r1
     e70:	68 f0       	brcs	.+26     	; 0xe8c <__divsf3_pse+0x82>
     e72:	b6 c0       	rjmp	.+364    	; 0xfe0 <__fp_inf>
     e74:	00 c1       	rjmp	.+512    	; 0x1076 <__fp_szero>
     e76:	5f 3f       	cpi	r21, 0xFF	; 255
     e78:	ec f3       	brlt	.-6      	; 0xe74 <__divsf3_pse+0x6a>
     e7a:	98 3e       	cpi	r25, 0xE8	; 232
     e7c:	dc f3       	brlt	.-10     	; 0xe74 <__divsf3_pse+0x6a>
     e7e:	86 95       	lsr	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b7 95       	ror	r27
     e86:	f7 95       	ror	r31
     e88:	9f 5f       	subi	r25, 0xFF	; 255
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__divsf3_pse+0x74>
     e8c:	88 0f       	add	r24, r24
     e8e:	91 1d       	adc	r25, r1
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	97 f9       	bld	r25, 7
     e96:	08 95       	ret
     e98:	e1 e0       	ldi	r30, 0x01	; 1
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	bb 1f       	adc	r27, r27
     ea2:	62 17       	cp	r22, r18
     ea4:	73 07       	cpc	r23, r19
     ea6:	84 07       	cpc	r24, r20
     ea8:	ba 07       	cpc	r27, r26
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__divsf3_pse+0xaa>
     eac:	62 1b       	sub	r22, r18
     eae:	73 0b       	sbc	r23, r19
     eb0:	84 0b       	sbc	r24, r20
     eb2:	ba 0b       	sbc	r27, r26
     eb4:	ee 1f       	adc	r30, r30
     eb6:	88 f7       	brcc	.-30     	; 0xe9a <__divsf3_pse+0x90>
     eb8:	e0 95       	com	r30
     eba:	08 95       	ret

00000ebc <__fixsfsi>:
     ebc:	04 d0       	rcall	.+8      	; 0xec6 <__fixunssfsi>
     ebe:	68 94       	set
     ec0:	b1 11       	cpse	r27, r1
     ec2:	d9 c0       	rjmp	.+434    	; 0x1076 <__fp_szero>
     ec4:	08 95       	ret

00000ec6 <__fixunssfsi>:
     ec6:	bc d0       	rcall	.+376    	; 0x1040 <__fp_splitA>
     ec8:	88 f0       	brcs	.+34     	; 0xeec <__fixunssfsi+0x26>
     eca:	9f 57       	subi	r25, 0x7F	; 127
     ecc:	90 f0       	brcs	.+36     	; 0xef2 <__fixunssfsi+0x2c>
     ece:	b9 2f       	mov	r27, r25
     ed0:	99 27       	eor	r25, r25
     ed2:	b7 51       	subi	r27, 0x17	; 23
     ed4:	a0 f0       	brcs	.+40     	; 0xefe <__fixunssfsi+0x38>
     ed6:	d1 f0       	breq	.+52     	; 0xf0c <__fixunssfsi+0x46>
     ed8:	66 0f       	add	r22, r22
     eda:	77 1f       	adc	r23, r23
     edc:	88 1f       	adc	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	1a f0       	brmi	.+6      	; 0xee8 <__fixunssfsi+0x22>
     ee2:	ba 95       	dec	r27
     ee4:	c9 f7       	brne	.-14     	; 0xed8 <__fixunssfsi+0x12>
     ee6:	12 c0       	rjmp	.+36     	; 0xf0c <__fixunssfsi+0x46>
     ee8:	b1 30       	cpi	r27, 0x01	; 1
     eea:	81 f0       	breq	.+32     	; 0xf0c <__fixunssfsi+0x46>
     eec:	c3 d0       	rcall	.+390    	; 0x1074 <__fp_zero>
     eee:	b1 e0       	ldi	r27, 0x01	; 1
     ef0:	08 95       	ret
     ef2:	c0 c0       	rjmp	.+384    	; 0x1074 <__fp_zero>
     ef4:	67 2f       	mov	r22, r23
     ef6:	78 2f       	mov	r23, r24
     ef8:	88 27       	eor	r24, r24
     efa:	b8 5f       	subi	r27, 0xF8	; 248
     efc:	39 f0       	breq	.+14     	; 0xf0c <__fixunssfsi+0x46>
     efe:	b9 3f       	cpi	r27, 0xF9	; 249
     f00:	cc f3       	brlt	.-14     	; 0xef4 <__fixunssfsi+0x2e>
     f02:	86 95       	lsr	r24
     f04:	77 95       	ror	r23
     f06:	67 95       	ror	r22
     f08:	b3 95       	inc	r27
     f0a:	d9 f7       	brne	.-10     	; 0xf02 <__fixunssfsi+0x3c>
     f0c:	3e f4       	brtc	.+14     	; 0xf1c <__fixunssfsi+0x56>
     f0e:	90 95       	com	r25
     f10:	80 95       	com	r24
     f12:	70 95       	com	r23
     f14:	61 95       	neg	r22
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	8f 4f       	sbci	r24, 0xFF	; 255
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	08 95       	ret

00000f1e <__floatunsisf>:
     f1e:	e8 94       	clt
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <__floatsisf+0x12>

00000f22 <__floatsisf>:
     f22:	97 fb       	bst	r25, 7
     f24:	3e f4       	brtc	.+14     	; 0xf34 <__floatsisf+0x12>
     f26:	90 95       	com	r25
     f28:	80 95       	com	r24
     f2a:	70 95       	com	r23
     f2c:	61 95       	neg	r22
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	8f 4f       	sbci	r24, 0xFF	; 255
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	99 23       	and	r25, r25
     f36:	a9 f0       	breq	.+42     	; 0xf62 <__floatsisf+0x40>
     f38:	f9 2f       	mov	r31, r25
     f3a:	96 e9       	ldi	r25, 0x96	; 150
     f3c:	bb 27       	eor	r27, r27
     f3e:	93 95       	inc	r25
     f40:	f6 95       	lsr	r31
     f42:	87 95       	ror	r24
     f44:	77 95       	ror	r23
     f46:	67 95       	ror	r22
     f48:	b7 95       	ror	r27
     f4a:	f1 11       	cpse	r31, r1
     f4c:	f8 cf       	rjmp	.-16     	; 0xf3e <__floatsisf+0x1c>
     f4e:	fa f4       	brpl	.+62     	; 0xf8e <__floatsisf+0x6c>
     f50:	bb 0f       	add	r27, r27
     f52:	11 f4       	brne	.+4      	; 0xf58 <__floatsisf+0x36>
     f54:	60 ff       	sbrs	r22, 0
     f56:	1b c0       	rjmp	.+54     	; 0xf8e <__floatsisf+0x6c>
     f58:	6f 5f       	subi	r22, 0xFF	; 255
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	8f 4f       	sbci	r24, 0xFF	; 255
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	16 c0       	rjmp	.+44     	; 0xf8e <__floatsisf+0x6c>
     f62:	88 23       	and	r24, r24
     f64:	11 f0       	breq	.+4      	; 0xf6a <__floatsisf+0x48>
     f66:	96 e9       	ldi	r25, 0x96	; 150
     f68:	11 c0       	rjmp	.+34     	; 0xf8c <__floatsisf+0x6a>
     f6a:	77 23       	and	r23, r23
     f6c:	21 f0       	breq	.+8      	; 0xf76 <__floatsisf+0x54>
     f6e:	9e e8       	ldi	r25, 0x8E	; 142
     f70:	87 2f       	mov	r24, r23
     f72:	76 2f       	mov	r23, r22
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <__floatsisf+0x5e>
     f76:	66 23       	and	r22, r22
     f78:	71 f0       	breq	.+28     	; 0xf96 <__floatsisf+0x74>
     f7a:	96 e8       	ldi	r25, 0x86	; 134
     f7c:	86 2f       	mov	r24, r22
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	2a f0       	brmi	.+10     	; 0xf8e <__floatsisf+0x6c>
     f84:	9a 95       	dec	r25
     f86:	66 0f       	add	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	88 1f       	adc	r24, r24
     f8c:	da f7       	brpl	.-10     	; 0xf84 <__floatsisf+0x62>
     f8e:	88 0f       	add	r24, r24
     f90:	96 95       	lsr	r25
     f92:	87 95       	ror	r24
     f94:	97 f9       	bld	r25, 7
     f96:	08 95       	ret

00000f98 <__fp_cmp>:
     f98:	99 0f       	add	r25, r25
     f9a:	00 08       	sbc	r0, r0
     f9c:	55 0f       	add	r21, r21
     f9e:	aa 0b       	sbc	r26, r26
     fa0:	e0 e8       	ldi	r30, 0x80	; 128
     fa2:	fe ef       	ldi	r31, 0xFE	; 254
     fa4:	16 16       	cp	r1, r22
     fa6:	17 06       	cpc	r1, r23
     fa8:	e8 07       	cpc	r30, r24
     faa:	f9 07       	cpc	r31, r25
     fac:	c0 f0       	brcs	.+48     	; 0xfde <__fp_cmp+0x46>
     fae:	12 16       	cp	r1, r18
     fb0:	13 06       	cpc	r1, r19
     fb2:	e4 07       	cpc	r30, r20
     fb4:	f5 07       	cpc	r31, r21
     fb6:	98 f0       	brcs	.+38     	; 0xfde <__fp_cmp+0x46>
     fb8:	62 1b       	sub	r22, r18
     fba:	73 0b       	sbc	r23, r19
     fbc:	84 0b       	sbc	r24, r20
     fbe:	95 0b       	sbc	r25, r21
     fc0:	39 f4       	brne	.+14     	; 0xfd0 <__fp_cmp+0x38>
     fc2:	0a 26       	eor	r0, r26
     fc4:	61 f0       	breq	.+24     	; 0xfde <__fp_cmp+0x46>
     fc6:	23 2b       	or	r18, r19
     fc8:	24 2b       	or	r18, r20
     fca:	25 2b       	or	r18, r21
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <__fp_cmp+0x3e>
     fce:	08 95       	ret
     fd0:	0a 26       	eor	r0, r26
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <__fp_cmp+0x3e>
     fd4:	a1 40       	sbci	r26, 0x01	; 1
     fd6:	a6 95       	lsr	r26
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	81 1d       	adc	r24, r1
     fdc:	81 1d       	adc	r24, r1
     fde:	08 95       	ret

00000fe0 <__fp_inf>:
     fe0:	97 f9       	bld	r25, 7
     fe2:	9f 67       	ori	r25, 0x7F	; 127
     fe4:	80 e8       	ldi	r24, 0x80	; 128
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	08 95       	ret

00000fec <__fp_nan>:
     fec:	9f ef       	ldi	r25, 0xFF	; 255
     fee:	80 ec       	ldi	r24, 0xC0	; 192
     ff0:	08 95       	ret

00000ff2 <__fp_pscA>:
     ff2:	00 24       	eor	r0, r0
     ff4:	0a 94       	dec	r0
     ff6:	16 16       	cp	r1, r22
     ff8:	17 06       	cpc	r1, r23
     ffa:	18 06       	cpc	r1, r24
     ffc:	09 06       	cpc	r0, r25
     ffe:	08 95       	ret

00001000 <__fp_pscB>:
    1000:	00 24       	eor	r0, r0
    1002:	0a 94       	dec	r0
    1004:	12 16       	cp	r1, r18
    1006:	13 06       	cpc	r1, r19
    1008:	14 06       	cpc	r1, r20
    100a:	05 06       	cpc	r0, r21
    100c:	08 95       	ret

0000100e <__fp_round>:
    100e:	09 2e       	mov	r0, r25
    1010:	03 94       	inc	r0
    1012:	00 0c       	add	r0, r0
    1014:	11 f4       	brne	.+4      	; 0x101a <__fp_round+0xc>
    1016:	88 23       	and	r24, r24
    1018:	52 f0       	brmi	.+20     	; 0x102e <__fp_round+0x20>
    101a:	bb 0f       	add	r27, r27
    101c:	40 f4       	brcc	.+16     	; 0x102e <__fp_round+0x20>
    101e:	bf 2b       	or	r27, r31
    1020:	11 f4       	brne	.+4      	; 0x1026 <__fp_round+0x18>
    1022:	60 ff       	sbrs	r22, 0
    1024:	04 c0       	rjmp	.+8      	; 0x102e <__fp_round+0x20>
    1026:	6f 5f       	subi	r22, 0xFF	; 255
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	08 95       	ret

00001030 <__fp_split3>:
    1030:	57 fd       	sbrc	r21, 7
    1032:	90 58       	subi	r25, 0x80	; 128
    1034:	44 0f       	add	r20, r20
    1036:	55 1f       	adc	r21, r21
    1038:	59 f0       	breq	.+22     	; 0x1050 <__fp_splitA+0x10>
    103a:	5f 3f       	cpi	r21, 0xFF	; 255
    103c:	71 f0       	breq	.+28     	; 0x105a <__fp_splitA+0x1a>
    103e:	47 95       	ror	r20

00001040 <__fp_splitA>:
    1040:	88 0f       	add	r24, r24
    1042:	97 fb       	bst	r25, 7
    1044:	99 1f       	adc	r25, r25
    1046:	61 f0       	breq	.+24     	; 0x1060 <__fp_splitA+0x20>
    1048:	9f 3f       	cpi	r25, 0xFF	; 255
    104a:	79 f0       	breq	.+30     	; 0x106a <__fp_splitA+0x2a>
    104c:	87 95       	ror	r24
    104e:	08 95       	ret
    1050:	12 16       	cp	r1, r18
    1052:	13 06       	cpc	r1, r19
    1054:	14 06       	cpc	r1, r20
    1056:	55 1f       	adc	r21, r21
    1058:	f2 cf       	rjmp	.-28     	; 0x103e <__fp_split3+0xe>
    105a:	46 95       	lsr	r20
    105c:	f1 df       	rcall	.-30     	; 0x1040 <__fp_splitA>
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <__fp_splitA+0x30>
    1060:	16 16       	cp	r1, r22
    1062:	17 06       	cpc	r1, r23
    1064:	18 06       	cpc	r1, r24
    1066:	99 1f       	adc	r25, r25
    1068:	f1 cf       	rjmp	.-30     	; 0x104c <__fp_splitA+0xc>
    106a:	86 95       	lsr	r24
    106c:	71 05       	cpc	r23, r1
    106e:	61 05       	cpc	r22, r1
    1070:	08 94       	sec
    1072:	08 95       	ret

00001074 <__fp_zero>:
    1074:	e8 94       	clt

00001076 <__fp_szero>:
    1076:	bb 27       	eor	r27, r27
    1078:	66 27       	eor	r22, r22
    107a:	77 27       	eor	r23, r23
    107c:	cb 01       	movw	r24, r22
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret

00001082 <__gesf2>:
    1082:	8a df       	rcall	.-236    	; 0xf98 <__fp_cmp>
    1084:	08 f4       	brcc	.+2      	; 0x1088 <__gesf2+0x6>
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	08 95       	ret

0000108a <__mulsf3>:
    108a:	0b d0       	rcall	.+22     	; 0x10a2 <__mulsf3x>
    108c:	c0 cf       	rjmp	.-128    	; 0x100e <__fp_round>
    108e:	b1 df       	rcall	.-158    	; 0xff2 <__fp_pscA>
    1090:	28 f0       	brcs	.+10     	; 0x109c <__mulsf3+0x12>
    1092:	b6 df       	rcall	.-148    	; 0x1000 <__fp_pscB>
    1094:	18 f0       	brcs	.+6      	; 0x109c <__mulsf3+0x12>
    1096:	95 23       	and	r25, r21
    1098:	09 f0       	breq	.+2      	; 0x109c <__mulsf3+0x12>
    109a:	a2 cf       	rjmp	.-188    	; 0xfe0 <__fp_inf>
    109c:	a7 cf       	rjmp	.-178    	; 0xfec <__fp_nan>
    109e:	11 24       	eor	r1, r1
    10a0:	ea cf       	rjmp	.-44     	; 0x1076 <__fp_szero>

000010a2 <__mulsf3x>:
    10a2:	c6 df       	rcall	.-116    	; 0x1030 <__fp_split3>
    10a4:	a0 f3       	brcs	.-24     	; 0x108e <__mulsf3+0x4>

000010a6 <__mulsf3_pse>:
    10a6:	95 9f       	mul	r25, r21
    10a8:	d1 f3       	breq	.-12     	; 0x109e <__mulsf3+0x14>
    10aa:	95 0f       	add	r25, r21
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	55 1f       	adc	r21, r21
    10b0:	62 9f       	mul	r22, r18
    10b2:	f0 01       	movw	r30, r0
    10b4:	72 9f       	mul	r23, r18
    10b6:	bb 27       	eor	r27, r27
    10b8:	f0 0d       	add	r31, r0
    10ba:	b1 1d       	adc	r27, r1
    10bc:	63 9f       	mul	r22, r19
    10be:	aa 27       	eor	r26, r26
    10c0:	f0 0d       	add	r31, r0
    10c2:	b1 1d       	adc	r27, r1
    10c4:	aa 1f       	adc	r26, r26
    10c6:	64 9f       	mul	r22, r20
    10c8:	66 27       	eor	r22, r22
    10ca:	b0 0d       	add	r27, r0
    10cc:	a1 1d       	adc	r26, r1
    10ce:	66 1f       	adc	r22, r22
    10d0:	82 9f       	mul	r24, r18
    10d2:	22 27       	eor	r18, r18
    10d4:	b0 0d       	add	r27, r0
    10d6:	a1 1d       	adc	r26, r1
    10d8:	62 1f       	adc	r22, r18
    10da:	73 9f       	mul	r23, r19
    10dc:	b0 0d       	add	r27, r0
    10de:	a1 1d       	adc	r26, r1
    10e0:	62 1f       	adc	r22, r18
    10e2:	83 9f       	mul	r24, r19
    10e4:	a0 0d       	add	r26, r0
    10e6:	61 1d       	adc	r22, r1
    10e8:	22 1f       	adc	r18, r18
    10ea:	74 9f       	mul	r23, r20
    10ec:	33 27       	eor	r19, r19
    10ee:	a0 0d       	add	r26, r0
    10f0:	61 1d       	adc	r22, r1
    10f2:	23 1f       	adc	r18, r19
    10f4:	84 9f       	mul	r24, r20
    10f6:	60 0d       	add	r22, r0
    10f8:	21 1d       	adc	r18, r1
    10fa:	82 2f       	mov	r24, r18
    10fc:	76 2f       	mov	r23, r22
    10fe:	6a 2f       	mov	r22, r26
    1100:	11 24       	eor	r1, r1
    1102:	9f 57       	subi	r25, 0x7F	; 127
    1104:	50 40       	sbci	r21, 0x00	; 0
    1106:	8a f0       	brmi	.+34     	; 0x112a <__mulsf3_pse+0x84>
    1108:	e1 f0       	breq	.+56     	; 0x1142 <__mulsf3_pse+0x9c>
    110a:	88 23       	and	r24, r24
    110c:	4a f0       	brmi	.+18     	; 0x1120 <__mulsf3_pse+0x7a>
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	bb 1f       	adc	r27, r27
    1114:	66 1f       	adc	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	88 1f       	adc	r24, r24
    111a:	91 50       	subi	r25, 0x01	; 1
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	a9 f7       	brne	.-22     	; 0x110a <__mulsf3_pse+0x64>
    1120:	9e 3f       	cpi	r25, 0xFE	; 254
    1122:	51 05       	cpc	r21, r1
    1124:	70 f0       	brcs	.+28     	; 0x1142 <__mulsf3_pse+0x9c>
    1126:	5c cf       	rjmp	.-328    	; 0xfe0 <__fp_inf>
    1128:	a6 cf       	rjmp	.-180    	; 0x1076 <__fp_szero>
    112a:	5f 3f       	cpi	r21, 0xFF	; 255
    112c:	ec f3       	brlt	.-6      	; 0x1128 <__mulsf3_pse+0x82>
    112e:	98 3e       	cpi	r25, 0xE8	; 232
    1130:	dc f3       	brlt	.-10     	; 0x1128 <__mulsf3_pse+0x82>
    1132:	86 95       	lsr	r24
    1134:	77 95       	ror	r23
    1136:	67 95       	ror	r22
    1138:	b7 95       	ror	r27
    113a:	f7 95       	ror	r31
    113c:	e7 95       	ror	r30
    113e:	9f 5f       	subi	r25, 0xFF	; 255
    1140:	c1 f7       	brne	.-16     	; 0x1132 <__mulsf3_pse+0x8c>
    1142:	fe 2b       	or	r31, r30
    1144:	88 0f       	add	r24, r24
    1146:	91 1d       	adc	r25, r1
    1148:	96 95       	lsr	r25
    114a:	87 95       	ror	r24
    114c:	97 f9       	bld	r25, 7
    114e:	08 95       	ret

00001150 <sprintf>:
    1150:	ae e0       	ldi	r26, 0x0E	; 14
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ed ea       	ldi	r30, 0xAD	; 173
    1156:	f8 e0       	ldi	r31, 0x08	; 8
    1158:	98 c2       	rjmp	.+1328   	; 0x168a <__prologue_saves__+0x1c>
    115a:	0d 89       	ldd	r16, Y+21	; 0x15
    115c:	1e 89       	ldd	r17, Y+22	; 0x16
    115e:	86 e0       	ldi	r24, 0x06	; 6
    1160:	8c 83       	std	Y+4, r24	; 0x04
    1162:	1a 83       	std	Y+2, r17	; 0x02
    1164:	09 83       	std	Y+1, r16	; 0x01
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9f e7       	ldi	r25, 0x7F	; 127
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	9e 01       	movw	r18, r28
    1170:	27 5e       	subi	r18, 0xE7	; 231
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	6f 89       	ldd	r22, Y+23	; 0x17
    117a:	78 8d       	ldd	r23, Y+24	; 0x18
    117c:	a9 01       	movw	r20, r18
    117e:	09 d0       	rcall	.+18     	; 0x1192 <vfprintf>
    1180:	2f 81       	ldd	r18, Y+7	; 0x07
    1182:	38 85       	ldd	r19, Y+8	; 0x08
    1184:	02 0f       	add	r16, r18
    1186:	13 1f       	adc	r17, r19
    1188:	f8 01       	movw	r30, r16
    118a:	10 82       	st	Z, r1
    118c:	2e 96       	adiw	r28, 0x0e	; 14
    118e:	e4 e0       	ldi	r30, 0x04	; 4
    1190:	98 c2       	rjmp	.+1328   	; 0x16c2 <__epilogue_restores__+0x1c>

00001192 <vfprintf>:
    1192:	ab e0       	ldi	r26, 0x0B	; 11
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ee ec       	ldi	r30, 0xCE	; 206
    1198:	f8 e0       	ldi	r31, 0x08	; 8
    119a:	69 c2       	rjmp	.+1234   	; 0x166e <__prologue_saves__>
    119c:	3c 01       	movw	r6, r24
    119e:	2b 01       	movw	r4, r22
    11a0:	5a 01       	movw	r10, r20
    11a2:	fc 01       	movw	r30, r24
    11a4:	17 82       	std	Z+7, r1	; 0x07
    11a6:	16 82       	std	Z+6, r1	; 0x06
    11a8:	83 81       	ldd	r24, Z+3	; 0x03
    11aa:	81 fd       	sbrc	r24, 1
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <vfprintf+0x22>
    11ae:	6f ef       	ldi	r22, 0xFF	; 255
    11b0:	7f ef       	ldi	r23, 0xFF	; 255
    11b2:	b9 c1       	rjmp	.+882    	; 0x1526 <vfprintf+0x394>
    11b4:	9a e0       	ldi	r25, 0x0A	; 10
    11b6:	89 2e       	mov	r8, r25
    11b8:	1e 01       	movw	r2, r28
    11ba:	08 94       	sec
    11bc:	21 1c       	adc	r2, r1
    11be:	31 1c       	adc	r3, r1
    11c0:	f3 01       	movw	r30, r6
    11c2:	23 81       	ldd	r18, Z+3	; 0x03
    11c4:	f2 01       	movw	r30, r4
    11c6:	23 fd       	sbrc	r18, 3
    11c8:	85 91       	lpm	r24, Z+
    11ca:	23 ff       	sbrs	r18, 3
    11cc:	81 91       	ld	r24, Z+
    11ce:	2f 01       	movw	r4, r30
    11d0:	88 23       	and	r24, r24
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <vfprintf+0x44>
    11d4:	a5 c1       	rjmp	.+842    	; 0x1520 <vfprintf+0x38e>
    11d6:	85 32       	cpi	r24, 0x25	; 37
    11d8:	39 f4       	brne	.+14     	; 0x11e8 <vfprintf+0x56>
    11da:	23 fd       	sbrc	r18, 3
    11dc:	85 91       	lpm	r24, Z+
    11de:	23 ff       	sbrs	r18, 3
    11e0:	81 91       	ld	r24, Z+
    11e2:	2f 01       	movw	r4, r30
    11e4:	85 32       	cpi	r24, 0x25	; 37
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <vfprintf+0x5e>
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	b3 01       	movw	r22, r6
    11ec:	b6 d1       	rcall	.+876    	; 0x155a <fputc>
    11ee:	e8 cf       	rjmp	.-48     	; 0x11c0 <vfprintf+0x2e>
    11f0:	98 2f       	mov	r25, r24
    11f2:	ff 24       	eor	r15, r15
    11f4:	ee 24       	eor	r14, r14
    11f6:	99 24       	eor	r9, r9
    11f8:	ff e1       	ldi	r31, 0x1F	; 31
    11fa:	ff 15       	cp	r31, r15
    11fc:	d0 f0       	brcs	.+52     	; 0x1232 <vfprintf+0xa0>
    11fe:	9b 32       	cpi	r25, 0x2B	; 43
    1200:	69 f0       	breq	.+26     	; 0x121c <vfprintf+0x8a>
    1202:	9c 32       	cpi	r25, 0x2C	; 44
    1204:	28 f4       	brcc	.+10     	; 0x1210 <vfprintf+0x7e>
    1206:	90 32       	cpi	r25, 0x20	; 32
    1208:	59 f0       	breq	.+22     	; 0x1220 <vfprintf+0x8e>
    120a:	93 32       	cpi	r25, 0x23	; 35
    120c:	91 f4       	brne	.+36     	; 0x1232 <vfprintf+0xa0>
    120e:	0e c0       	rjmp	.+28     	; 0x122c <vfprintf+0x9a>
    1210:	9d 32       	cpi	r25, 0x2D	; 45
    1212:	49 f0       	breq	.+18     	; 0x1226 <vfprintf+0x94>
    1214:	90 33       	cpi	r25, 0x30	; 48
    1216:	69 f4       	brne	.+26     	; 0x1232 <vfprintf+0xa0>
    1218:	41 e0       	ldi	r20, 0x01	; 1
    121a:	24 c0       	rjmp	.+72     	; 0x1264 <vfprintf+0xd2>
    121c:	52 e0       	ldi	r21, 0x02	; 2
    121e:	f5 2a       	or	r15, r21
    1220:	84 e0       	ldi	r24, 0x04	; 4
    1222:	f8 2a       	or	r15, r24
    1224:	28 c0       	rjmp	.+80     	; 0x1276 <vfprintf+0xe4>
    1226:	98 e0       	ldi	r25, 0x08	; 8
    1228:	f9 2a       	or	r15, r25
    122a:	25 c0       	rjmp	.+74     	; 0x1276 <vfprintf+0xe4>
    122c:	e0 e1       	ldi	r30, 0x10	; 16
    122e:	fe 2a       	or	r15, r30
    1230:	22 c0       	rjmp	.+68     	; 0x1276 <vfprintf+0xe4>
    1232:	f7 fc       	sbrc	r15, 7
    1234:	29 c0       	rjmp	.+82     	; 0x1288 <vfprintf+0xf6>
    1236:	89 2f       	mov	r24, r25
    1238:	80 53       	subi	r24, 0x30	; 48
    123a:	8a 30       	cpi	r24, 0x0A	; 10
    123c:	70 f4       	brcc	.+28     	; 0x125a <vfprintf+0xc8>
    123e:	f6 fe       	sbrs	r15, 6
    1240:	05 c0       	rjmp	.+10     	; 0x124c <vfprintf+0xba>
    1242:	98 9c       	mul	r9, r8
    1244:	90 2c       	mov	r9, r0
    1246:	11 24       	eor	r1, r1
    1248:	98 0e       	add	r9, r24
    124a:	15 c0       	rjmp	.+42     	; 0x1276 <vfprintf+0xe4>
    124c:	e8 9c       	mul	r14, r8
    124e:	e0 2c       	mov	r14, r0
    1250:	11 24       	eor	r1, r1
    1252:	e8 0e       	add	r14, r24
    1254:	f0 e2       	ldi	r31, 0x20	; 32
    1256:	ff 2a       	or	r15, r31
    1258:	0e c0       	rjmp	.+28     	; 0x1276 <vfprintf+0xe4>
    125a:	9e 32       	cpi	r25, 0x2E	; 46
    125c:	29 f4       	brne	.+10     	; 0x1268 <vfprintf+0xd6>
    125e:	f6 fc       	sbrc	r15, 6
    1260:	5f c1       	rjmp	.+702    	; 0x1520 <vfprintf+0x38e>
    1262:	40 e4       	ldi	r20, 0x40	; 64
    1264:	f4 2a       	or	r15, r20
    1266:	07 c0       	rjmp	.+14     	; 0x1276 <vfprintf+0xe4>
    1268:	9c 36       	cpi	r25, 0x6C	; 108
    126a:	19 f4       	brne	.+6      	; 0x1272 <vfprintf+0xe0>
    126c:	50 e8       	ldi	r21, 0x80	; 128
    126e:	f5 2a       	or	r15, r21
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <vfprintf+0xe4>
    1272:	98 36       	cpi	r25, 0x68	; 104
    1274:	49 f4       	brne	.+18     	; 0x1288 <vfprintf+0xf6>
    1276:	f2 01       	movw	r30, r4
    1278:	23 fd       	sbrc	r18, 3
    127a:	95 91       	lpm	r25, Z+
    127c:	23 ff       	sbrs	r18, 3
    127e:	91 91       	ld	r25, Z+
    1280:	2f 01       	movw	r4, r30
    1282:	99 23       	and	r25, r25
    1284:	09 f0       	breq	.+2      	; 0x1288 <vfprintf+0xf6>
    1286:	b8 cf       	rjmp	.-144    	; 0x11f8 <vfprintf+0x66>
    1288:	89 2f       	mov	r24, r25
    128a:	85 54       	subi	r24, 0x45	; 69
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	18 f0       	brcs	.+6      	; 0x1296 <vfprintf+0x104>
    1290:	80 52       	subi	r24, 0x20	; 32
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	38 f4       	brcc	.+14     	; 0x12a4 <vfprintf+0x112>
    1296:	44 e0       	ldi	r20, 0x04	; 4
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	a4 0e       	add	r10, r20
    129c:	b5 1e       	adc	r11, r21
    129e:	5f e3       	ldi	r21, 0x3F	; 63
    12a0:	59 83       	std	Y+1, r21	; 0x01
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <vfprintf+0x130>
    12a4:	93 36       	cpi	r25, 0x63	; 99
    12a6:	31 f0       	breq	.+12     	; 0x12b4 <vfprintf+0x122>
    12a8:	93 37       	cpi	r25, 0x73	; 115
    12aa:	79 f0       	breq	.+30     	; 0x12ca <vfprintf+0x138>
    12ac:	93 35       	cpi	r25, 0x53	; 83
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <vfprintf+0x120>
    12b0:	52 c0       	rjmp	.+164    	; 0x1356 <vfprintf+0x1c4>
    12b2:	1f c0       	rjmp	.+62     	; 0x12f2 <vfprintf+0x160>
    12b4:	f5 01       	movw	r30, r10
    12b6:	80 81       	ld	r24, Z
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	42 e0       	ldi	r20, 0x02	; 2
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	a4 0e       	add	r10, r20
    12c0:	b5 1e       	adc	r11, r21
    12c2:	61 01       	movw	r12, r2
    12c4:	01 e0       	ldi	r16, 0x01	; 1
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	11 c0       	rjmp	.+34     	; 0x12ec <vfprintf+0x15a>
    12ca:	f5 01       	movw	r30, r10
    12cc:	c0 80       	ld	r12, Z
    12ce:	d1 80       	ldd	r13, Z+1	; 0x01
    12d0:	f6 fc       	sbrc	r15, 6
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <vfprintf+0x148>
    12d4:	6f ef       	ldi	r22, 0xFF	; 255
    12d6:	7f ef       	ldi	r23, 0xFF	; 255
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x14c>
    12da:	69 2d       	mov	r22, r9
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	42 e0       	ldi	r20, 0x02	; 2
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	a4 0e       	add	r10, r20
    12e4:	b5 1e       	adc	r11, r21
    12e6:	c6 01       	movw	r24, r12
    12e8:	2d d1       	rcall	.+602    	; 0x1544 <strnlen>
    12ea:	8c 01       	movw	r16, r24
    12ec:	5f e7       	ldi	r21, 0x7F	; 127
    12ee:	f5 22       	and	r15, r21
    12f0:	13 c0       	rjmp	.+38     	; 0x1318 <vfprintf+0x186>
    12f2:	f5 01       	movw	r30, r10
    12f4:	c0 80       	ld	r12, Z
    12f6:	d1 80       	ldd	r13, Z+1	; 0x01
    12f8:	f6 fc       	sbrc	r15, 6
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <vfprintf+0x170>
    12fc:	6f ef       	ldi	r22, 0xFF	; 255
    12fe:	7f ef       	ldi	r23, 0xFF	; 255
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <vfprintf+0x174>
    1302:	69 2d       	mov	r22, r9
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	42 e0       	ldi	r20, 0x02	; 2
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	a4 0e       	add	r10, r20
    130c:	b5 1e       	adc	r11, r21
    130e:	c6 01       	movw	r24, r12
    1310:	0e d1       	rcall	.+540    	; 0x152e <strnlen_P>
    1312:	8c 01       	movw	r16, r24
    1314:	50 e8       	ldi	r21, 0x80	; 128
    1316:	f5 2a       	or	r15, r21
    1318:	f3 fe       	sbrs	r15, 3
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <vfprintf+0x196>
    131c:	18 c0       	rjmp	.+48     	; 0x134e <vfprintf+0x1bc>
    131e:	80 e2       	ldi	r24, 0x20	; 32
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	b3 01       	movw	r22, r6
    1324:	1a d1       	rcall	.+564    	; 0x155a <fputc>
    1326:	ea 94       	dec	r14
    1328:	8e 2d       	mov	r24, r14
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	08 17       	cp	r16, r24
    132e:	19 07       	cpc	r17, r25
    1330:	b0 f3       	brcs	.-20     	; 0x131e <vfprintf+0x18c>
    1332:	0d c0       	rjmp	.+26     	; 0x134e <vfprintf+0x1bc>
    1334:	f6 01       	movw	r30, r12
    1336:	f7 fc       	sbrc	r15, 7
    1338:	85 91       	lpm	r24, Z+
    133a:	f7 fe       	sbrs	r15, 7
    133c:	81 91       	ld	r24, Z+
    133e:	6f 01       	movw	r12, r30
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	b3 01       	movw	r22, r6
    1344:	0a d1       	rcall	.+532    	; 0x155a <fputc>
    1346:	e1 10       	cpse	r14, r1
    1348:	ea 94       	dec	r14
    134a:	01 50       	subi	r16, 0x01	; 1
    134c:	10 40       	sbci	r17, 0x00	; 0
    134e:	01 15       	cp	r16, r1
    1350:	11 05       	cpc	r17, r1
    1352:	81 f7       	brne	.-32     	; 0x1334 <vfprintf+0x1a2>
    1354:	e2 c0       	rjmp	.+452    	; 0x151a <vfprintf+0x388>
    1356:	94 36       	cpi	r25, 0x64	; 100
    1358:	11 f0       	breq	.+4      	; 0x135e <vfprintf+0x1cc>
    135a:	99 36       	cpi	r25, 0x69	; 105
    135c:	61 f5       	brne	.+88     	; 0x13b6 <vfprintf+0x224>
    135e:	f7 fe       	sbrs	r15, 7
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <vfprintf+0x1e0>
    1362:	f5 01       	movw	r30, r10
    1364:	20 81       	ld	r18, Z
    1366:	31 81       	ldd	r19, Z+1	; 0x01
    1368:	42 81       	ldd	r20, Z+2	; 0x02
    136a:	53 81       	ldd	r21, Z+3	; 0x03
    136c:	84 e0       	ldi	r24, 0x04	; 4
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0a c0       	rjmp	.+20     	; 0x1386 <vfprintf+0x1f4>
    1372:	f5 01       	movw	r30, r10
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	9c 01       	movw	r18, r24
    137a:	44 27       	eor	r20, r20
    137c:	37 fd       	sbrc	r19, 7
    137e:	40 95       	com	r20
    1380:	54 2f       	mov	r21, r20
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a8 0e       	add	r10, r24
    1388:	b9 1e       	adc	r11, r25
    138a:	9f e6       	ldi	r25, 0x6F	; 111
    138c:	f9 22       	and	r15, r25
    138e:	57 ff       	sbrs	r21, 7
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <vfprintf+0x212>
    1392:	50 95       	com	r21
    1394:	40 95       	com	r20
    1396:	30 95       	com	r19
    1398:	21 95       	neg	r18
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	4f 4f       	sbci	r20, 0xFF	; 255
    139e:	5f 4f       	sbci	r21, 0xFF	; 255
    13a0:	e0 e8       	ldi	r30, 0x80	; 128
    13a2:	fe 2a       	or	r15, r30
    13a4:	ca 01       	movw	r24, r20
    13a6:	b9 01       	movw	r22, r18
    13a8:	a1 01       	movw	r20, r2
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	01 d1       	rcall	.+514    	; 0x15b2 <__ultoa_invert>
    13b0:	d8 2e       	mov	r13, r24
    13b2:	d2 18       	sub	r13, r2
    13b4:	3f c0       	rjmp	.+126    	; 0x1434 <vfprintf+0x2a2>
    13b6:	95 37       	cpi	r25, 0x75	; 117
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <vfprintf+0x232>
    13ba:	1f 2d       	mov	r17, r15
    13bc:	1f 7e       	andi	r17, 0xEF	; 239
    13be:	2a e0       	ldi	r18, 0x0A	; 10
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	1d c0       	rjmp	.+58     	; 0x13fe <vfprintf+0x26c>
    13c4:	1f 2d       	mov	r17, r15
    13c6:	19 7f       	andi	r17, 0xF9	; 249
    13c8:	9f 36       	cpi	r25, 0x6F	; 111
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <vfprintf+0x252>
    13cc:	90 37       	cpi	r25, 0x70	; 112
    13ce:	20 f4       	brcc	.+8      	; 0x13d8 <vfprintf+0x246>
    13d0:	98 35       	cpi	r25, 0x58	; 88
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <vfprintf+0x244>
    13d4:	a5 c0       	rjmp	.+330    	; 0x1520 <vfprintf+0x38e>
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <vfprintf+0x264>
    13d8:	90 37       	cpi	r25, 0x70	; 112
    13da:	39 f0       	breq	.+14     	; 0x13ea <vfprintf+0x258>
    13dc:	98 37       	cpi	r25, 0x78	; 120
    13de:	09 f0       	breq	.+2      	; 0x13e2 <vfprintf+0x250>
    13e0:	9f c0       	rjmp	.+318    	; 0x1520 <vfprintf+0x38e>
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <vfprintf+0x25a>
    13e4:	28 e0       	ldi	r18, 0x08	; 8
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	0a c0       	rjmp	.+20     	; 0x13fe <vfprintf+0x26c>
    13ea:	10 61       	ori	r17, 0x10	; 16
    13ec:	14 fd       	sbrc	r17, 4
    13ee:	14 60       	ori	r17, 0x04	; 4
    13f0:	20 e1       	ldi	r18, 0x10	; 16
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <vfprintf+0x26c>
    13f6:	14 fd       	sbrc	r17, 4
    13f8:	16 60       	ori	r17, 0x06	; 6
    13fa:	20 e1       	ldi	r18, 0x10	; 16
    13fc:	32 e0       	ldi	r19, 0x02	; 2
    13fe:	17 ff       	sbrs	r17, 7
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <vfprintf+0x280>
    1402:	f5 01       	movw	r30, r10
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	93 81       	ldd	r25, Z+3	; 0x03
    140c:	44 e0       	ldi	r20, 0x04	; 4
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <vfprintf+0x290>
    1412:	f5 01       	movw	r30, r10
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	bc 01       	movw	r22, r24
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	42 e0       	ldi	r20, 0x02	; 2
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	a4 0e       	add	r10, r20
    1424:	b5 1e       	adc	r11, r21
    1426:	a1 01       	movw	r20, r2
    1428:	c4 d0       	rcall	.+392    	; 0x15b2 <__ultoa_invert>
    142a:	d8 2e       	mov	r13, r24
    142c:	d2 18       	sub	r13, r2
    142e:	8f e7       	ldi	r24, 0x7F	; 127
    1430:	f8 2e       	mov	r15, r24
    1432:	f1 22       	and	r15, r17
    1434:	f6 fe       	sbrs	r15, 6
    1436:	0b c0       	rjmp	.+22     	; 0x144e <vfprintf+0x2bc>
    1438:	5e ef       	ldi	r21, 0xFE	; 254
    143a:	f5 22       	and	r15, r21
    143c:	d9 14       	cp	r13, r9
    143e:	38 f4       	brcc	.+14     	; 0x144e <vfprintf+0x2bc>
    1440:	f4 fe       	sbrs	r15, 4
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <vfprintf+0x2c0>
    1444:	f2 fc       	sbrc	r15, 2
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <vfprintf+0x2c0>
    1448:	8f ee       	ldi	r24, 0xEF	; 239
    144a:	f8 22       	and	r15, r24
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <vfprintf+0x2c0>
    144e:	1d 2d       	mov	r17, r13
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <vfprintf+0x2c2>
    1452:	19 2d       	mov	r17, r9
    1454:	f4 fe       	sbrs	r15, 4
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <vfprintf+0x2e0>
    1458:	fe 01       	movw	r30, r28
    145a:	ed 0d       	add	r30, r13
    145c:	f1 1d       	adc	r31, r1
    145e:	80 81       	ld	r24, Z
    1460:	80 33       	cpi	r24, 0x30	; 48
    1462:	19 f4       	brne	.+6      	; 0x146a <vfprintf+0x2d8>
    1464:	99 ee       	ldi	r25, 0xE9	; 233
    1466:	f9 22       	and	r15, r25
    1468:	08 c0       	rjmp	.+16     	; 0x147a <vfprintf+0x2e8>
    146a:	1f 5f       	subi	r17, 0xFF	; 255
    146c:	f2 fe       	sbrs	r15, 2
    146e:	05 c0       	rjmp	.+10     	; 0x147a <vfprintf+0x2e8>
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <vfprintf+0x2e6>
    1472:	8f 2d       	mov	r24, r15
    1474:	86 78       	andi	r24, 0x86	; 134
    1476:	09 f0       	breq	.+2      	; 0x147a <vfprintf+0x2e8>
    1478:	1f 5f       	subi	r17, 0xFF	; 255
    147a:	0f 2d       	mov	r16, r15
    147c:	f3 fc       	sbrc	r15, 3
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <vfprintf+0x314>
    1480:	f0 fe       	sbrs	r15, 0
    1482:	0e c0       	rjmp	.+28     	; 0x14a0 <vfprintf+0x30e>
    1484:	1e 15       	cp	r17, r14
    1486:	10 f0       	brcs	.+4      	; 0x148c <vfprintf+0x2fa>
    1488:	9d 2c       	mov	r9, r13
    148a:	0a c0       	rjmp	.+20     	; 0x14a0 <vfprintf+0x30e>
    148c:	9d 2c       	mov	r9, r13
    148e:	9e 0c       	add	r9, r14
    1490:	91 1a       	sub	r9, r17
    1492:	1e 2d       	mov	r17, r14
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <vfprintf+0x30e>
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	b3 01       	movw	r22, r6
    149c:	5e d0       	rcall	.+188    	; 0x155a <fputc>
    149e:	1f 5f       	subi	r17, 0xFF	; 255
    14a0:	1e 15       	cp	r17, r14
    14a2:	c8 f3       	brcs	.-14     	; 0x1496 <vfprintf+0x304>
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <vfprintf+0x31c>
    14a6:	1e 15       	cp	r17, r14
    14a8:	10 f4       	brcc	.+4      	; 0x14ae <vfprintf+0x31c>
    14aa:	e1 1a       	sub	r14, r17
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <vfprintf+0x31e>
    14ae:	ee 24       	eor	r14, r14
    14b0:	04 ff       	sbrs	r16, 4
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <vfprintf+0x33e>
    14b4:	80 e3       	ldi	r24, 0x30	; 48
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	b3 01       	movw	r22, r6
    14ba:	4f d0       	rcall	.+158    	; 0x155a <fputc>
    14bc:	02 ff       	sbrs	r16, 2
    14be:	1b c0       	rjmp	.+54     	; 0x14f6 <vfprintf+0x364>
    14c0:	01 fd       	sbrc	r16, 1
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <vfprintf+0x338>
    14c4:	88 e7       	ldi	r24, 0x78	; 120
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <vfprintf+0x354>
    14ca:	88 e5       	ldi	r24, 0x58	; 88
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <vfprintf+0x354>
    14d0:	80 2f       	mov	r24, r16
    14d2:	86 78       	andi	r24, 0x86	; 134
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <vfprintf+0x364>
    14d6:	01 ff       	sbrs	r16, 1
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <vfprintf+0x34c>
    14da:	8b e2       	ldi	r24, 0x2B	; 43
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <vfprintf+0x34e>
    14de:	80 e2       	ldi	r24, 0x20	; 32
    14e0:	f7 fc       	sbrc	r15, 7
    14e2:	8d e2       	ldi	r24, 0x2D	; 45
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	b3 01       	movw	r22, r6
    14e8:	38 d0       	rcall	.+112    	; 0x155a <fputc>
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <vfprintf+0x364>
    14ec:	80 e3       	ldi	r24, 0x30	; 48
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	b3 01       	movw	r22, r6
    14f2:	33 d0       	rcall	.+102    	; 0x155a <fputc>
    14f4:	9a 94       	dec	r9
    14f6:	d9 14       	cp	r13, r9
    14f8:	c8 f3       	brcs	.-14     	; 0x14ec <vfprintf+0x35a>
    14fa:	da 94       	dec	r13
    14fc:	f1 01       	movw	r30, r2
    14fe:	ed 0d       	add	r30, r13
    1500:	f1 1d       	adc	r31, r1
    1502:	80 81       	ld	r24, Z
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	b3 01       	movw	r22, r6
    1508:	28 d0       	rcall	.+80     	; 0x155a <fputc>
    150a:	dd 20       	and	r13, r13
    150c:	b1 f7       	brne	.-20     	; 0x14fa <vfprintf+0x368>
    150e:	05 c0       	rjmp	.+10     	; 0x151a <vfprintf+0x388>
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	b3 01       	movw	r22, r6
    1516:	21 d0       	rcall	.+66     	; 0x155a <fputc>
    1518:	ea 94       	dec	r14
    151a:	ee 20       	and	r14, r14
    151c:	c9 f7       	brne	.-14     	; 0x1510 <vfprintf+0x37e>
    151e:	50 ce       	rjmp	.-864    	; 0x11c0 <vfprintf+0x2e>
    1520:	f3 01       	movw	r30, r6
    1522:	66 81       	ldd	r22, Z+6	; 0x06
    1524:	77 81       	ldd	r23, Z+7	; 0x07
    1526:	cb 01       	movw	r24, r22
    1528:	2b 96       	adiw	r28, 0x0b	; 11
    152a:	e2 e1       	ldi	r30, 0x12	; 18
    152c:	bc c0       	rjmp	.+376    	; 0x16a6 <__epilogue_restores__>

0000152e <strnlen_P>:
    152e:	fc 01       	movw	r30, r24
    1530:	05 90       	lpm	r0, Z+
    1532:	61 50       	subi	r22, 0x01	; 1
    1534:	70 40       	sbci	r23, 0x00	; 0
    1536:	01 10       	cpse	r0, r1
    1538:	d8 f7       	brcc	.-10     	; 0x1530 <strnlen_P+0x2>
    153a:	80 95       	com	r24
    153c:	90 95       	com	r25
    153e:	8e 0f       	add	r24, r30
    1540:	9f 1f       	adc	r25, r31
    1542:	08 95       	ret

00001544 <strnlen>:
    1544:	fc 01       	movw	r30, r24
    1546:	61 50       	subi	r22, 0x01	; 1
    1548:	70 40       	sbci	r23, 0x00	; 0
    154a:	01 90       	ld	r0, Z+
    154c:	01 10       	cpse	r0, r1
    154e:	d8 f7       	brcc	.-10     	; 0x1546 <strnlen+0x2>
    1550:	80 95       	com	r24
    1552:	90 95       	com	r25
    1554:	8e 0f       	add	r24, r30
    1556:	9f 1f       	adc	r25, r31
    1558:	08 95       	ret

0000155a <fputc>:
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	8c 01       	movw	r16, r24
    1564:	eb 01       	movw	r28, r22
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	81 ff       	sbrs	r24, 1
    156a:	1b c0       	rjmp	.+54     	; 0x15a2 <fputc+0x48>
    156c:	82 ff       	sbrs	r24, 2
    156e:	0d c0       	rjmp	.+26     	; 0x158a <fputc+0x30>
    1570:	2e 81       	ldd	r18, Y+6	; 0x06
    1572:	3f 81       	ldd	r19, Y+7	; 0x07
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	28 17       	cp	r18, r24
    157a:	39 07       	cpc	r19, r25
    157c:	64 f4       	brge	.+24     	; 0x1596 <fputc+0x3c>
    157e:	e8 81       	ld	r30, Y
    1580:	f9 81       	ldd	r31, Y+1	; 0x01
    1582:	01 93       	st	Z+, r16
    1584:	f9 83       	std	Y+1, r31	; 0x01
    1586:	e8 83       	st	Y, r30
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <fputc+0x3c>
    158a:	e8 85       	ldd	r30, Y+8	; 0x08
    158c:	f9 85       	ldd	r31, Y+9	; 0x09
    158e:	80 2f       	mov	r24, r16
    1590:	09 95       	icall
    1592:	89 2b       	or	r24, r25
    1594:	31 f4       	brne	.+12     	; 0x15a2 <fputc+0x48>
    1596:	8e 81       	ldd	r24, Y+6	; 0x06
    1598:	9f 81       	ldd	r25, Y+7	; 0x07
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	9f 83       	std	Y+7, r25	; 0x07
    159e:	8e 83       	std	Y+6, r24	; 0x06
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <fputc+0x4c>
    15a2:	0f ef       	ldi	r16, 0xFF	; 255
    15a4:	1f ef       	ldi	r17, 0xFF	; 255
    15a6:	c8 01       	movw	r24, r16
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	08 95       	ret

000015b2 <__ultoa_invert>:
    15b2:	fa 01       	movw	r30, r20
    15b4:	aa 27       	eor	r26, r26
    15b6:	28 30       	cpi	r18, 0x08	; 8
    15b8:	51 f1       	breq	.+84     	; 0x160e <__ultoa_invert+0x5c>
    15ba:	20 31       	cpi	r18, 0x10	; 16
    15bc:	81 f1       	breq	.+96     	; 0x161e <__ultoa_invert+0x6c>
    15be:	e8 94       	clt
    15c0:	6f 93       	push	r22
    15c2:	6e 7f       	andi	r22, 0xFE	; 254
    15c4:	6e 5f       	subi	r22, 0xFE	; 254
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	af 4f       	sbci	r26, 0xFF	; 255
    15ce:	b1 e0       	ldi	r27, 0x01	; 1
    15d0:	3e d0       	rcall	.+124    	; 0x164e <__ultoa_invert+0x9c>
    15d2:	b4 e0       	ldi	r27, 0x04	; 4
    15d4:	3c d0       	rcall	.+120    	; 0x164e <__ultoa_invert+0x9c>
    15d6:	67 0f       	add	r22, r23
    15d8:	78 1f       	adc	r23, r24
    15da:	89 1f       	adc	r24, r25
    15dc:	9a 1f       	adc	r25, r26
    15de:	a1 1d       	adc	r26, r1
    15e0:	68 0f       	add	r22, r24
    15e2:	79 1f       	adc	r23, r25
    15e4:	8a 1f       	adc	r24, r26
    15e6:	91 1d       	adc	r25, r1
    15e8:	a1 1d       	adc	r26, r1
    15ea:	6a 0f       	add	r22, r26
    15ec:	71 1d       	adc	r23, r1
    15ee:	81 1d       	adc	r24, r1
    15f0:	91 1d       	adc	r25, r1
    15f2:	a1 1d       	adc	r26, r1
    15f4:	20 d0       	rcall	.+64     	; 0x1636 <__ultoa_invert+0x84>
    15f6:	09 f4       	brne	.+2      	; 0x15fa <__ultoa_invert+0x48>
    15f8:	68 94       	set
    15fa:	3f 91       	pop	r19
    15fc:	2a e0       	ldi	r18, 0x0A	; 10
    15fe:	26 9f       	mul	r18, r22
    1600:	11 24       	eor	r1, r1
    1602:	30 19       	sub	r19, r0
    1604:	30 5d       	subi	r19, 0xD0	; 208
    1606:	31 93       	st	Z+, r19
    1608:	de f6       	brtc	.-74     	; 0x15c0 <__ultoa_invert+0xe>
    160a:	cf 01       	movw	r24, r30
    160c:	08 95       	ret
    160e:	46 2f       	mov	r20, r22
    1610:	47 70       	andi	r20, 0x07	; 7
    1612:	40 5d       	subi	r20, 0xD0	; 208
    1614:	41 93       	st	Z+, r20
    1616:	b3 e0       	ldi	r27, 0x03	; 3
    1618:	0f d0       	rcall	.+30     	; 0x1638 <__ultoa_invert+0x86>
    161a:	c9 f7       	brne	.-14     	; 0x160e <__ultoa_invert+0x5c>
    161c:	f6 cf       	rjmp	.-20     	; 0x160a <__ultoa_invert+0x58>
    161e:	46 2f       	mov	r20, r22
    1620:	4f 70       	andi	r20, 0x0F	; 15
    1622:	40 5d       	subi	r20, 0xD0	; 208
    1624:	4a 33       	cpi	r20, 0x3A	; 58
    1626:	18 f0       	brcs	.+6      	; 0x162e <__ultoa_invert+0x7c>
    1628:	49 5d       	subi	r20, 0xD9	; 217
    162a:	31 fd       	sbrc	r19, 1
    162c:	40 52       	subi	r20, 0x20	; 32
    162e:	41 93       	st	Z+, r20
    1630:	02 d0       	rcall	.+4      	; 0x1636 <__ultoa_invert+0x84>
    1632:	a9 f7       	brne	.-22     	; 0x161e <__ultoa_invert+0x6c>
    1634:	ea cf       	rjmp	.-44     	; 0x160a <__ultoa_invert+0x58>
    1636:	b4 e0       	ldi	r27, 0x04	; 4
    1638:	a6 95       	lsr	r26
    163a:	97 95       	ror	r25
    163c:	87 95       	ror	r24
    163e:	77 95       	ror	r23
    1640:	67 95       	ror	r22
    1642:	ba 95       	dec	r27
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__ultoa_invert+0x86>
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	61 05       	cpc	r22, r1
    164a:	71 05       	cpc	r23, r1
    164c:	08 95       	ret
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	0a 2e       	mov	r0, r26
    1654:	06 94       	lsr	r0
    1656:	57 95       	ror	r21
    1658:	47 95       	ror	r20
    165a:	37 95       	ror	r19
    165c:	27 95       	ror	r18
    165e:	ba 95       	dec	r27
    1660:	c9 f7       	brne	.-14     	; 0x1654 <__ultoa_invert+0xa2>
    1662:	62 0f       	add	r22, r18
    1664:	73 1f       	adc	r23, r19
    1666:	84 1f       	adc	r24, r20
    1668:	95 1f       	adc	r25, r21
    166a:	a0 1d       	adc	r26, r0
    166c:	08 95       	ret

0000166e <__prologue_saves__>:
    166e:	2f 92       	push	r2
    1670:	3f 92       	push	r3
    1672:	4f 92       	push	r4
    1674:	5f 92       	push	r5
    1676:	6f 92       	push	r6
    1678:	7f 92       	push	r7
    167a:	8f 92       	push	r8
    167c:	9f 92       	push	r9
    167e:	af 92       	push	r10
    1680:	bf 92       	push	r11
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	ca 1b       	sub	r28, r26
    1698:	db 0b       	sbc	r29, r27
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	09 94       	ijmp

000016a6 <__epilogue_restores__>:
    16a6:	2a 88       	ldd	r2, Y+18	; 0x12
    16a8:	39 88       	ldd	r3, Y+17	; 0x11
    16aa:	48 88       	ldd	r4, Y+16	; 0x10
    16ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    16ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    16b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    16b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    16b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    16b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    16b8:	b9 84       	ldd	r11, Y+9	; 0x09
    16ba:	c8 84       	ldd	r12, Y+8	; 0x08
    16bc:	df 80       	ldd	r13, Y+7	; 0x07
    16be:	ee 80       	ldd	r14, Y+6	; 0x06
    16c0:	fd 80       	ldd	r15, Y+5	; 0x05
    16c2:	0c 81       	ldd	r16, Y+4	; 0x04
    16c4:	1b 81       	ldd	r17, Y+3	; 0x03
    16c6:	aa 81       	ldd	r26, Y+2	; 0x02
    16c8:	b9 81       	ldd	r27, Y+1	; 0x01
    16ca:	ce 0f       	add	r28, r30
    16cc:	d1 1d       	adc	r29, r1
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	ed 01       	movw	r28, r26
    16da:	08 95       	ret

000016dc <_exit>:
    16dc:	f8 94       	cli

000016de <__stop_program>:
    16de:	ff cf       	rjmp	.-2      	; 0x16de <__stop_program>
