/*
 * LCD.h
 *
 * Created: 4/25/2014 10:02:37 PM
 *  Author: Disgust
 */ 


#ifndef LCD_H_
#define LCD_H_

/****************************************************************************/
/* LCD_EN - строб. 1 - запись данных или команды, 0 - отсылка               */
/* LCD_RS - указание типа передаваемой информации. 1 - данные, 0 - команда  */
/* LCD_RW - направление работы. 1 - чтение, 0 - запись. Соединен с землей.  */
/* LCD_DX - биты данных.                                                    */
/****************************************************************************/

// DB7	DB6	DB5	DB4	DB3	DB2	DB1	DB0	Значение
// 0	0	0	0	0	0	0	1	Очистка экрана. Счетчик адреса на 0 позицию DDRAM
// 0	0	0	0	0	0	1	-	Адресация на DDRAM сброс сдвигов, Счетчик адреса на 0
// 0	0	0	0	0	1	I/D	S	Настройка сдвига экрана и курсора
// 0	0	0	0	1	D	C	B	Настройка режима отображения
// 0	0	0	1	S/C	R/L	-	-	Сдвиг курсора или экрана, в зависимости от битов
// 0	0	1	DL	N	F	-	-	Выбор числа линий, ширины шины и размера символа
// 0	1	AG	AG	AG	AG	AG	AG	Переключить адресацию на SGRAM и задать адрес в SGRAM
// 1	AD	AD	AD	AD	AD	AD	AD	Переключить адресацию на DDRAM и задать адрес в DDRAM

// I/D — инкремент или декремент счетчика адреса. 0 — Декремент. Т.е. каждый следующий байт будет записан в n-1 ячейку. Если поставить 1 — будет Инкремент.
// S - сдвиг экрана. 1 - с каждым новым символом сдвигается окно экрана. до конца DDRAM.
// D — включить дисплей. Если поставить туда 0 то изображение исчезнет, а мы в это время можем в видеопамяти творить всякие непотребства и они не будут мозолить глаза. А чтобы картинка появилась в эту позицию надо записать 1.
// С - включить курсор в виде прочерка. Все просто, записали сюда 1 — включился курсор.
// B — сделать курсор в виде мигающего черного квадрата.
// S/C сдвиг курсора или экрана. Если стоит 0, то сдвигается курсор. Если 1, то экран. По одному разу за команду
// R/L — определяет направление сдвига курсора и экрана. 0 — влево, 1 — вправо.
// D/L — бит определяющий ширину шины данных. 1-8 бит, 0-4 бита
// N — число строк. 0 — одна строка, 1 — две строки.
// F - размер символа 0 — 5х8 точек. 1 — 5х10 точек (встречается крайне редко)
// AG - адрес в памяти CGRAM
// АD — адрес в памяти DDRAM

// Запись:
// 
// E=1
// Пауза
// Выставили в порт старшую тетраду
// E=0
// Пауза
// Е=1
// Пауза
// Выставили в порт младшую тетраду
// Е=0
// 
// 
// Чтение
// 
// E=1
// Пауза
// Читаем из порта старшую тетраду
// Е=0
// Пауза
// Е=1
// Пауза
// Читаем из порта младшую тетраду
// Е=0

#ifndef LCD_REG
#define LCD_REG DDRB
#endif

#ifndef LCD_PORT
#define LCD_PORT PORTB
#endif

#ifndef LCD_IN
#define LCD_IN PINB
#endif

#ifndef LCD_D0
#define LCD_D0 PINB0
#endif

#ifndef LCD_D1
#define LCD_D1 PINB1
#endif

#ifndef LCD_D2
#define LCD_D2 PINB2
#endif

#ifndef LCD_D3
#define LCD_D3 PINB3
#endif

#ifndef LCD_EN
#define LCD_EN PINB4
#endif

#ifndef LCD_RS
#define LCD_RS PINB5
#endif


#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "Defines.h"

void LCD_Clear();
void LCD_Write(char*, uint8_t, uint8_t);
void LCD_turnOn();
void LCD_turnOff();
void LCD_Init();
void LCD_SetCursor();
int LCD_Busy();
#endif /* LCD_H_ */
